
SM_Slave2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00007bc6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000002be  00800060  00007bc6  00007c5a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000d  0080031e  0080031e  00007f18  2**0
                  ALLOC
  3 .stab         00005d90  00000000  00000000  00007f18  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000158c  00000000  00000000  0000dca8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001c0  00000000  00000000  0000f234  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000214  00000000  00000000  0000f3f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002612  00000000  00000000  0000f608  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000014ce  00000000  00000000  00011c1a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000130b  00000000  00000000  000130e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001e0  00000000  00000000  000143f4  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000307  00000000  00000000  000145d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000a1a  00000000  00000000  000148db  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  000152f5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 35 33 	jmp	0x666a	; 0x666a <__vector_10>
      2c:	0c 94 83 33 	jmp	0x6706	; 0x6706 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	13 e0       	ldi	r17, 0x03	; 3
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 ec       	ldi	r30, 0xC6	; 198
      68:	fb e7       	ldi	r31, 0x7B	; 123
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ae 31       	cpi	r26, 0x1E	; 30
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	13 e0       	ldi	r17, 0x03	; 3
      78:	ae e1       	ldi	r26, 0x1E	; 30
      7a:	b3 e0       	ldi	r27, 0x03	; 3
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ab 32       	cpi	r26, 0x2B	; 43
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 11 36 	call	0x6c22	; 0x6c22 <main>
      8a:	0c 94 e1 3d 	jmp	0x7bc2	; 0x7bc2 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 2e 3d 	jmp	0x7a5c	; 0x7a5c <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	ad ee       	ldi	r26, 0xED	; 237
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 4a 3d 	jmp	0x7a94	; 0x7a94 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 3a 3d 	jmp	0x7a74	; 0x7a74 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 56 3d 	jmp	0x7aac	; 0x7aac <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 3a 3d 	jmp	0x7a74	; 0x7a74 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 56 3d 	jmp	0x7aac	; 0x7aac <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 2e 3d 	jmp	0x7a5c	; 0x7a5c <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8d ee       	ldi	r24, 0xED	; 237
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 4a 3d 	jmp	0x7a94	; 0x7a94 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 36 3d 	jmp	0x7a6c	; 0x7a6c <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	6d ee       	ldi	r22, 0xED	; 237
     69c:	71 e0       	ldi	r23, 0x01	; 1
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 52 3d 	jmp	0x7aa4	; 0x7aa4 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 3a 3d 	jmp	0x7a74	; 0x7a74 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 1c 07 	call	0xe38	; 0xe38 <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 56 3d 	jmp	0x7aac	; 0x7aac <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 3a 3d 	jmp	0x7a74	; 0x7a74 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 1c 07 	call	0xe38	; 0xe38 <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 56 3d 	jmp	0x7aac	; 0x7aac <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 3a 3d 	jmp	0x7a74	; 0x7a74 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 1c 07 	call	0xe38	; 0xe38 <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 56 3d 	jmp	0x7aac	; 0x7aac <__epilogue_restores__+0x18>

000008aa <__floatsisf>:
     8aa:	a8 e0       	ldi	r26, 0x08	; 8
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 37 3d 	jmp	0x7a6e	; 0x7a6e <__prologue_saves__+0x12>
     8b6:	9b 01       	movw	r18, r22
     8b8:	ac 01       	movw	r20, r24
     8ba:	83 e0       	ldi	r24, 0x03	; 3
     8bc:	89 83       	std	Y+1, r24	; 0x01
     8be:	da 01       	movw	r26, r20
     8c0:	c9 01       	movw	r24, r18
     8c2:	88 27       	eor	r24, r24
     8c4:	b7 fd       	sbrc	r27, 7
     8c6:	83 95       	inc	r24
     8c8:	99 27       	eor	r25, r25
     8ca:	aa 27       	eor	r26, r26
     8cc:	bb 27       	eor	r27, r27
     8ce:	b8 2e       	mov	r11, r24
     8d0:	21 15       	cp	r18, r1
     8d2:	31 05       	cpc	r19, r1
     8d4:	41 05       	cpc	r20, r1
     8d6:	51 05       	cpc	r21, r1
     8d8:	19 f4       	brne	.+6      	; 0x8e0 <__floatsisf+0x36>
     8da:	82 e0       	ldi	r24, 0x02	; 2
     8dc:	89 83       	std	Y+1, r24	; 0x01
     8de:	3a c0       	rjmp	.+116    	; 0x954 <__floatsisf+0xaa>
     8e0:	88 23       	and	r24, r24
     8e2:	a9 f0       	breq	.+42     	; 0x90e <__floatsisf+0x64>
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	80 e0       	ldi	r24, 0x00	; 0
     8e8:	38 07       	cpc	r19, r24
     8ea:	80 e0       	ldi	r24, 0x00	; 0
     8ec:	48 07       	cpc	r20, r24
     8ee:	80 e8       	ldi	r24, 0x80	; 128
     8f0:	58 07       	cpc	r21, r24
     8f2:	29 f4       	brne	.+10     	; 0x8fe <__floatsisf+0x54>
     8f4:	60 e0       	ldi	r22, 0x00	; 0
     8f6:	70 e0       	ldi	r23, 0x00	; 0
     8f8:	80 e0       	ldi	r24, 0x00	; 0
     8fa:	9f ec       	ldi	r25, 0xCF	; 207
     8fc:	30 c0       	rjmp	.+96     	; 0x95e <__floatsisf+0xb4>
     8fe:	ee 24       	eor	r14, r14
     900:	ff 24       	eor	r15, r15
     902:	87 01       	movw	r16, r14
     904:	e2 1a       	sub	r14, r18
     906:	f3 0a       	sbc	r15, r19
     908:	04 0b       	sbc	r16, r20
     90a:	15 0b       	sbc	r17, r21
     90c:	02 c0       	rjmp	.+4      	; 0x912 <__floatsisf+0x68>
     90e:	79 01       	movw	r14, r18
     910:	8a 01       	movw	r16, r20
     912:	8e e1       	ldi	r24, 0x1E	; 30
     914:	c8 2e       	mov	r12, r24
     916:	d1 2c       	mov	r13, r1
     918:	dc 82       	std	Y+4, r13	; 0x04
     91a:	cb 82       	std	Y+3, r12	; 0x03
     91c:	ed 82       	std	Y+5, r14	; 0x05
     91e:	fe 82       	std	Y+6, r15	; 0x06
     920:	0f 83       	std	Y+7, r16	; 0x07
     922:	18 87       	std	Y+8, r17	; 0x08
     924:	c8 01       	movw	r24, r16
     926:	b7 01       	movw	r22, r14
     928:	0e 94 80 05 	call	0xb00	; 0xb00 <__clzsi2>
     92c:	01 97       	sbiw	r24, 0x01	; 1
     92e:	18 16       	cp	r1, r24
     930:	19 06       	cpc	r1, r25
     932:	84 f4       	brge	.+32     	; 0x954 <__floatsisf+0xaa>
     934:	08 2e       	mov	r0, r24
     936:	04 c0       	rjmp	.+8      	; 0x940 <__floatsisf+0x96>
     938:	ee 0c       	add	r14, r14
     93a:	ff 1c       	adc	r15, r15
     93c:	00 1f       	adc	r16, r16
     93e:	11 1f       	adc	r17, r17
     940:	0a 94       	dec	r0
     942:	d2 f7       	brpl	.-12     	; 0x938 <__floatsisf+0x8e>
     944:	ed 82       	std	Y+5, r14	; 0x05
     946:	fe 82       	std	Y+6, r15	; 0x06
     948:	0f 83       	std	Y+7, r16	; 0x07
     94a:	18 87       	std	Y+8, r17	; 0x08
     94c:	c8 1a       	sub	r12, r24
     94e:	d9 0a       	sbc	r13, r25
     950:	dc 82       	std	Y+4, r13	; 0x04
     952:	cb 82       	std	Y+3, r12	; 0x03
     954:	ba 82       	std	Y+2, r11	; 0x02
     956:	ce 01       	movw	r24, r28
     958:	01 96       	adiw	r24, 0x01	; 1
     95a:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     95e:	28 96       	adiw	r28, 0x08	; 8
     960:	e9 e0       	ldi	r30, 0x09	; 9
     962:	0c 94 53 3d 	jmp	0x7aa6	; 0x7aa6 <__epilogue_restores__+0x12>

00000966 <__fixsfsi>:
     966:	ac e0       	ldi	r26, 0x0C	; 12
     968:	b0 e0       	ldi	r27, 0x00	; 0
     96a:	e9 eb       	ldi	r30, 0xB9	; 185
     96c:	f4 e0       	ldi	r31, 0x04	; 4
     96e:	0c 94 3e 3d 	jmp	0x7a7c	; 0x7a7c <__prologue_saves__+0x20>
     972:	69 83       	std	Y+1, r22	; 0x01
     974:	7a 83       	std	Y+2, r23	; 0x02
     976:	8b 83       	std	Y+3, r24	; 0x03
     978:	9c 83       	std	Y+4, r25	; 0x04
     97a:	ce 01       	movw	r24, r28
     97c:	01 96       	adiw	r24, 0x01	; 1
     97e:	be 01       	movw	r22, r28
     980:	6b 5f       	subi	r22, 0xFB	; 251
     982:	7f 4f       	sbci	r23, 0xFF	; 255
     984:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     988:	8d 81       	ldd	r24, Y+5	; 0x05
     98a:	82 30       	cpi	r24, 0x02	; 2
     98c:	61 f1       	breq	.+88     	; 0x9e6 <__fixsfsi+0x80>
     98e:	82 30       	cpi	r24, 0x02	; 2
     990:	50 f1       	brcs	.+84     	; 0x9e6 <__fixsfsi+0x80>
     992:	84 30       	cpi	r24, 0x04	; 4
     994:	21 f4       	brne	.+8      	; 0x99e <__fixsfsi+0x38>
     996:	8e 81       	ldd	r24, Y+6	; 0x06
     998:	88 23       	and	r24, r24
     99a:	51 f1       	breq	.+84     	; 0x9f0 <__fixsfsi+0x8a>
     99c:	2e c0       	rjmp	.+92     	; 0x9fa <__fixsfsi+0x94>
     99e:	2f 81       	ldd	r18, Y+7	; 0x07
     9a0:	38 85       	ldd	r19, Y+8	; 0x08
     9a2:	37 fd       	sbrc	r19, 7
     9a4:	20 c0       	rjmp	.+64     	; 0x9e6 <__fixsfsi+0x80>
     9a6:	6e 81       	ldd	r22, Y+6	; 0x06
     9a8:	2f 31       	cpi	r18, 0x1F	; 31
     9aa:	31 05       	cpc	r19, r1
     9ac:	1c f0       	brlt	.+6      	; 0x9b4 <__fixsfsi+0x4e>
     9ae:	66 23       	and	r22, r22
     9b0:	f9 f0       	breq	.+62     	; 0x9f0 <__fixsfsi+0x8a>
     9b2:	23 c0       	rjmp	.+70     	; 0x9fa <__fixsfsi+0x94>
     9b4:	8e e1       	ldi	r24, 0x1E	; 30
     9b6:	90 e0       	ldi	r25, 0x00	; 0
     9b8:	82 1b       	sub	r24, r18
     9ba:	93 0b       	sbc	r25, r19
     9bc:	29 85       	ldd	r18, Y+9	; 0x09
     9be:	3a 85       	ldd	r19, Y+10	; 0x0a
     9c0:	4b 85       	ldd	r20, Y+11	; 0x0b
     9c2:	5c 85       	ldd	r21, Y+12	; 0x0c
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__fixsfsi+0x68>
     9c6:	56 95       	lsr	r21
     9c8:	47 95       	ror	r20
     9ca:	37 95       	ror	r19
     9cc:	27 95       	ror	r18
     9ce:	8a 95       	dec	r24
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__fixsfsi+0x60>
     9d2:	66 23       	and	r22, r22
     9d4:	b1 f0       	breq	.+44     	; 0xa02 <__fixsfsi+0x9c>
     9d6:	50 95       	com	r21
     9d8:	40 95       	com	r20
     9da:	30 95       	com	r19
     9dc:	21 95       	neg	r18
     9de:	3f 4f       	sbci	r19, 0xFF	; 255
     9e0:	4f 4f       	sbci	r20, 0xFF	; 255
     9e2:	5f 4f       	sbci	r21, 0xFF	; 255
     9e4:	0e c0       	rjmp	.+28     	; 0xa02 <__fixsfsi+0x9c>
     9e6:	20 e0       	ldi	r18, 0x00	; 0
     9e8:	30 e0       	ldi	r19, 0x00	; 0
     9ea:	40 e0       	ldi	r20, 0x00	; 0
     9ec:	50 e0       	ldi	r21, 0x00	; 0
     9ee:	09 c0       	rjmp	.+18     	; 0xa02 <__fixsfsi+0x9c>
     9f0:	2f ef       	ldi	r18, 0xFF	; 255
     9f2:	3f ef       	ldi	r19, 0xFF	; 255
     9f4:	4f ef       	ldi	r20, 0xFF	; 255
     9f6:	5f e7       	ldi	r21, 0x7F	; 127
     9f8:	04 c0       	rjmp	.+8      	; 0xa02 <__fixsfsi+0x9c>
     9fa:	20 e0       	ldi	r18, 0x00	; 0
     9fc:	30 e0       	ldi	r19, 0x00	; 0
     9fe:	40 e0       	ldi	r20, 0x00	; 0
     a00:	50 e8       	ldi	r21, 0x80	; 128
     a02:	b9 01       	movw	r22, r18
     a04:	ca 01       	movw	r24, r20
     a06:	2c 96       	adiw	r28, 0x0c	; 12
     a08:	e2 e0       	ldi	r30, 0x02	; 2
     a0a:	0c 94 5a 3d 	jmp	0x7ab4	; 0x7ab4 <__epilogue_restores__+0x20>

00000a0e <__floatunsisf>:
     a0e:	a8 e0       	ldi	r26, 0x08	; 8
     a10:	b0 e0       	ldi	r27, 0x00	; 0
     a12:	ed e0       	ldi	r30, 0x0D	; 13
     a14:	f5 e0       	ldi	r31, 0x05	; 5
     a16:	0c 94 36 3d 	jmp	0x7a6c	; 0x7a6c <__prologue_saves__+0x10>
     a1a:	7b 01       	movw	r14, r22
     a1c:	8c 01       	movw	r16, r24
     a1e:	61 15       	cp	r22, r1
     a20:	71 05       	cpc	r23, r1
     a22:	81 05       	cpc	r24, r1
     a24:	91 05       	cpc	r25, r1
     a26:	19 f4       	brne	.+6      	; 0xa2e <__floatunsisf+0x20>
     a28:	82 e0       	ldi	r24, 0x02	; 2
     a2a:	89 83       	std	Y+1, r24	; 0x01
     a2c:	60 c0       	rjmp	.+192    	; 0xaee <__floatunsisf+0xe0>
     a2e:	83 e0       	ldi	r24, 0x03	; 3
     a30:	89 83       	std	Y+1, r24	; 0x01
     a32:	8e e1       	ldi	r24, 0x1E	; 30
     a34:	c8 2e       	mov	r12, r24
     a36:	d1 2c       	mov	r13, r1
     a38:	dc 82       	std	Y+4, r13	; 0x04
     a3a:	cb 82       	std	Y+3, r12	; 0x03
     a3c:	ed 82       	std	Y+5, r14	; 0x05
     a3e:	fe 82       	std	Y+6, r15	; 0x06
     a40:	0f 83       	std	Y+7, r16	; 0x07
     a42:	18 87       	std	Y+8, r17	; 0x08
     a44:	c8 01       	movw	r24, r16
     a46:	b7 01       	movw	r22, r14
     a48:	0e 94 80 05 	call	0xb00	; 0xb00 <__clzsi2>
     a4c:	fc 01       	movw	r30, r24
     a4e:	31 97       	sbiw	r30, 0x01	; 1
     a50:	f7 ff       	sbrs	r31, 7
     a52:	3b c0       	rjmp	.+118    	; 0xaca <__floatunsisf+0xbc>
     a54:	22 27       	eor	r18, r18
     a56:	33 27       	eor	r19, r19
     a58:	2e 1b       	sub	r18, r30
     a5a:	3f 0b       	sbc	r19, r31
     a5c:	57 01       	movw	r10, r14
     a5e:	68 01       	movw	r12, r16
     a60:	02 2e       	mov	r0, r18
     a62:	04 c0       	rjmp	.+8      	; 0xa6c <__floatunsisf+0x5e>
     a64:	d6 94       	lsr	r13
     a66:	c7 94       	ror	r12
     a68:	b7 94       	ror	r11
     a6a:	a7 94       	ror	r10
     a6c:	0a 94       	dec	r0
     a6e:	d2 f7       	brpl	.-12     	; 0xa64 <__floatunsisf+0x56>
     a70:	40 e0       	ldi	r20, 0x00	; 0
     a72:	50 e0       	ldi	r21, 0x00	; 0
     a74:	60 e0       	ldi	r22, 0x00	; 0
     a76:	70 e0       	ldi	r23, 0x00	; 0
     a78:	81 e0       	ldi	r24, 0x01	; 1
     a7a:	90 e0       	ldi	r25, 0x00	; 0
     a7c:	a0 e0       	ldi	r26, 0x00	; 0
     a7e:	b0 e0       	ldi	r27, 0x00	; 0
     a80:	04 c0       	rjmp	.+8      	; 0xa8a <__floatunsisf+0x7c>
     a82:	88 0f       	add	r24, r24
     a84:	99 1f       	adc	r25, r25
     a86:	aa 1f       	adc	r26, r26
     a88:	bb 1f       	adc	r27, r27
     a8a:	2a 95       	dec	r18
     a8c:	d2 f7       	brpl	.-12     	; 0xa82 <__floatunsisf+0x74>
     a8e:	01 97       	sbiw	r24, 0x01	; 1
     a90:	a1 09       	sbc	r26, r1
     a92:	b1 09       	sbc	r27, r1
     a94:	8e 21       	and	r24, r14
     a96:	9f 21       	and	r25, r15
     a98:	a0 23       	and	r26, r16
     a9a:	b1 23       	and	r27, r17
     a9c:	00 97       	sbiw	r24, 0x00	; 0
     a9e:	a1 05       	cpc	r26, r1
     aa0:	b1 05       	cpc	r27, r1
     aa2:	21 f0       	breq	.+8      	; 0xaac <__floatunsisf+0x9e>
     aa4:	41 e0       	ldi	r20, 0x01	; 1
     aa6:	50 e0       	ldi	r21, 0x00	; 0
     aa8:	60 e0       	ldi	r22, 0x00	; 0
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	4a 29       	or	r20, r10
     aae:	5b 29       	or	r21, r11
     ab0:	6c 29       	or	r22, r12
     ab2:	7d 29       	or	r23, r13
     ab4:	4d 83       	std	Y+5, r20	; 0x05
     ab6:	5e 83       	std	Y+6, r21	; 0x06
     ab8:	6f 83       	std	Y+7, r22	; 0x07
     aba:	78 87       	std	Y+8, r23	; 0x08
     abc:	8e e1       	ldi	r24, 0x1E	; 30
     abe:	90 e0       	ldi	r25, 0x00	; 0
     ac0:	8e 1b       	sub	r24, r30
     ac2:	9f 0b       	sbc	r25, r31
     ac4:	9c 83       	std	Y+4, r25	; 0x04
     ac6:	8b 83       	std	Y+3, r24	; 0x03
     ac8:	12 c0       	rjmp	.+36     	; 0xaee <__floatunsisf+0xe0>
     aca:	30 97       	sbiw	r30, 0x00	; 0
     acc:	81 f0       	breq	.+32     	; 0xaee <__floatunsisf+0xe0>
     ace:	0e 2e       	mov	r0, r30
     ad0:	04 c0       	rjmp	.+8      	; 0xada <__floatunsisf+0xcc>
     ad2:	ee 0c       	add	r14, r14
     ad4:	ff 1c       	adc	r15, r15
     ad6:	00 1f       	adc	r16, r16
     ad8:	11 1f       	adc	r17, r17
     ada:	0a 94       	dec	r0
     adc:	d2 f7       	brpl	.-12     	; 0xad2 <__floatunsisf+0xc4>
     ade:	ed 82       	std	Y+5, r14	; 0x05
     ae0:	fe 82       	std	Y+6, r15	; 0x06
     ae2:	0f 83       	std	Y+7, r16	; 0x07
     ae4:	18 87       	std	Y+8, r17	; 0x08
     ae6:	ce 1a       	sub	r12, r30
     ae8:	df 0a       	sbc	r13, r31
     aea:	dc 82       	std	Y+4, r13	; 0x04
     aec:	cb 82       	std	Y+3, r12	; 0x03
     aee:	1a 82       	std	Y+2, r1	; 0x02
     af0:	ce 01       	movw	r24, r28
     af2:	01 96       	adiw	r24, 0x01	; 1
     af4:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     af8:	28 96       	adiw	r28, 0x08	; 8
     afa:	ea e0       	ldi	r30, 0x0A	; 10
     afc:	0c 94 52 3d 	jmp	0x7aa4	; 0x7aa4 <__epilogue_restores__+0x10>

00000b00 <__clzsi2>:
     b00:	ef 92       	push	r14
     b02:	ff 92       	push	r15
     b04:	0f 93       	push	r16
     b06:	1f 93       	push	r17
     b08:	7b 01       	movw	r14, r22
     b0a:	8c 01       	movw	r16, r24
     b0c:	80 e0       	ldi	r24, 0x00	; 0
     b0e:	e8 16       	cp	r14, r24
     b10:	80 e0       	ldi	r24, 0x00	; 0
     b12:	f8 06       	cpc	r15, r24
     b14:	81 e0       	ldi	r24, 0x01	; 1
     b16:	08 07       	cpc	r16, r24
     b18:	80 e0       	ldi	r24, 0x00	; 0
     b1a:	18 07       	cpc	r17, r24
     b1c:	88 f4       	brcc	.+34     	; 0xb40 <__clzsi2+0x40>
     b1e:	8f ef       	ldi	r24, 0xFF	; 255
     b20:	e8 16       	cp	r14, r24
     b22:	f1 04       	cpc	r15, r1
     b24:	01 05       	cpc	r16, r1
     b26:	11 05       	cpc	r17, r1
     b28:	31 f0       	breq	.+12     	; 0xb36 <__clzsi2+0x36>
     b2a:	28 f0       	brcs	.+10     	; 0xb36 <__clzsi2+0x36>
     b2c:	88 e0       	ldi	r24, 0x08	; 8
     b2e:	90 e0       	ldi	r25, 0x00	; 0
     b30:	a0 e0       	ldi	r26, 0x00	; 0
     b32:	b0 e0       	ldi	r27, 0x00	; 0
     b34:	17 c0       	rjmp	.+46     	; 0xb64 <__clzsi2+0x64>
     b36:	80 e0       	ldi	r24, 0x00	; 0
     b38:	90 e0       	ldi	r25, 0x00	; 0
     b3a:	a0 e0       	ldi	r26, 0x00	; 0
     b3c:	b0 e0       	ldi	r27, 0x00	; 0
     b3e:	12 c0       	rjmp	.+36     	; 0xb64 <__clzsi2+0x64>
     b40:	80 e0       	ldi	r24, 0x00	; 0
     b42:	e8 16       	cp	r14, r24
     b44:	80 e0       	ldi	r24, 0x00	; 0
     b46:	f8 06       	cpc	r15, r24
     b48:	80 e0       	ldi	r24, 0x00	; 0
     b4a:	08 07       	cpc	r16, r24
     b4c:	81 e0       	ldi	r24, 0x01	; 1
     b4e:	18 07       	cpc	r17, r24
     b50:	28 f0       	brcs	.+10     	; 0xb5c <__clzsi2+0x5c>
     b52:	88 e1       	ldi	r24, 0x18	; 24
     b54:	90 e0       	ldi	r25, 0x00	; 0
     b56:	a0 e0       	ldi	r26, 0x00	; 0
     b58:	b0 e0       	ldi	r27, 0x00	; 0
     b5a:	04 c0       	rjmp	.+8      	; 0xb64 <__clzsi2+0x64>
     b5c:	80 e1       	ldi	r24, 0x10	; 16
     b5e:	90 e0       	ldi	r25, 0x00	; 0
     b60:	a0 e0       	ldi	r26, 0x00	; 0
     b62:	b0 e0       	ldi	r27, 0x00	; 0
     b64:	20 e2       	ldi	r18, 0x20	; 32
     b66:	30 e0       	ldi	r19, 0x00	; 0
     b68:	40 e0       	ldi	r20, 0x00	; 0
     b6a:	50 e0       	ldi	r21, 0x00	; 0
     b6c:	28 1b       	sub	r18, r24
     b6e:	39 0b       	sbc	r19, r25
     b70:	4a 0b       	sbc	r20, r26
     b72:	5b 0b       	sbc	r21, r27
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__clzsi2+0x7e>
     b76:	16 95       	lsr	r17
     b78:	07 95       	ror	r16
     b7a:	f7 94       	ror	r15
     b7c:	e7 94       	ror	r14
     b7e:	8a 95       	dec	r24
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__clzsi2+0x76>
     b82:	f7 01       	movw	r30, r14
     b84:	eb 50       	subi	r30, 0x0B	; 11
     b86:	fe 4f       	sbci	r31, 0xFE	; 254
     b88:	80 81       	ld	r24, Z
     b8a:	28 1b       	sub	r18, r24
     b8c:	31 09       	sbc	r19, r1
     b8e:	41 09       	sbc	r20, r1
     b90:	51 09       	sbc	r21, r1
     b92:	c9 01       	movw	r24, r18
     b94:	1f 91       	pop	r17
     b96:	0f 91       	pop	r16
     b98:	ff 90       	pop	r15
     b9a:	ef 90       	pop	r14
     b9c:	08 95       	ret

00000b9e <__pack_f>:
     b9e:	df 92       	push	r13
     ba0:	ef 92       	push	r14
     ba2:	ff 92       	push	r15
     ba4:	0f 93       	push	r16
     ba6:	1f 93       	push	r17
     ba8:	fc 01       	movw	r30, r24
     baa:	e4 80       	ldd	r14, Z+4	; 0x04
     bac:	f5 80       	ldd	r15, Z+5	; 0x05
     bae:	06 81       	ldd	r16, Z+6	; 0x06
     bb0:	17 81       	ldd	r17, Z+7	; 0x07
     bb2:	d1 80       	ldd	r13, Z+1	; 0x01
     bb4:	80 81       	ld	r24, Z
     bb6:	82 30       	cpi	r24, 0x02	; 2
     bb8:	48 f4       	brcc	.+18     	; 0xbcc <__pack_f+0x2e>
     bba:	80 e0       	ldi	r24, 0x00	; 0
     bbc:	90 e0       	ldi	r25, 0x00	; 0
     bbe:	a0 e1       	ldi	r26, 0x10	; 16
     bc0:	b0 e0       	ldi	r27, 0x00	; 0
     bc2:	e8 2a       	or	r14, r24
     bc4:	f9 2a       	or	r15, r25
     bc6:	0a 2b       	or	r16, r26
     bc8:	1b 2b       	or	r17, r27
     bca:	a5 c0       	rjmp	.+330    	; 0xd16 <__pack_f+0x178>
     bcc:	84 30       	cpi	r24, 0x04	; 4
     bce:	09 f4       	brne	.+2      	; 0xbd2 <__pack_f+0x34>
     bd0:	9f c0       	rjmp	.+318    	; 0xd10 <__pack_f+0x172>
     bd2:	82 30       	cpi	r24, 0x02	; 2
     bd4:	21 f4       	brne	.+8      	; 0xbde <__pack_f+0x40>
     bd6:	ee 24       	eor	r14, r14
     bd8:	ff 24       	eor	r15, r15
     bda:	87 01       	movw	r16, r14
     bdc:	05 c0       	rjmp	.+10     	; 0xbe8 <__pack_f+0x4a>
     bde:	e1 14       	cp	r14, r1
     be0:	f1 04       	cpc	r15, r1
     be2:	01 05       	cpc	r16, r1
     be4:	11 05       	cpc	r17, r1
     be6:	19 f4       	brne	.+6      	; 0xbee <__pack_f+0x50>
     be8:	e0 e0       	ldi	r30, 0x00	; 0
     bea:	f0 e0       	ldi	r31, 0x00	; 0
     bec:	96 c0       	rjmp	.+300    	; 0xd1a <__pack_f+0x17c>
     bee:	62 81       	ldd	r22, Z+2	; 0x02
     bf0:	73 81       	ldd	r23, Z+3	; 0x03
     bf2:	9f ef       	ldi	r25, 0xFF	; 255
     bf4:	62 38       	cpi	r22, 0x82	; 130
     bf6:	79 07       	cpc	r23, r25
     bf8:	0c f0       	brlt	.+2      	; 0xbfc <__pack_f+0x5e>
     bfa:	5b c0       	rjmp	.+182    	; 0xcb2 <__pack_f+0x114>
     bfc:	22 e8       	ldi	r18, 0x82	; 130
     bfe:	3f ef       	ldi	r19, 0xFF	; 255
     c00:	26 1b       	sub	r18, r22
     c02:	37 0b       	sbc	r19, r23
     c04:	2a 31       	cpi	r18, 0x1A	; 26
     c06:	31 05       	cpc	r19, r1
     c08:	2c f0       	brlt	.+10     	; 0xc14 <__pack_f+0x76>
     c0a:	20 e0       	ldi	r18, 0x00	; 0
     c0c:	30 e0       	ldi	r19, 0x00	; 0
     c0e:	40 e0       	ldi	r20, 0x00	; 0
     c10:	50 e0       	ldi	r21, 0x00	; 0
     c12:	2a c0       	rjmp	.+84     	; 0xc68 <__pack_f+0xca>
     c14:	b8 01       	movw	r22, r16
     c16:	a7 01       	movw	r20, r14
     c18:	02 2e       	mov	r0, r18
     c1a:	04 c0       	rjmp	.+8      	; 0xc24 <__pack_f+0x86>
     c1c:	76 95       	lsr	r23
     c1e:	67 95       	ror	r22
     c20:	57 95       	ror	r21
     c22:	47 95       	ror	r20
     c24:	0a 94       	dec	r0
     c26:	d2 f7       	brpl	.-12     	; 0xc1c <__pack_f+0x7e>
     c28:	81 e0       	ldi	r24, 0x01	; 1
     c2a:	90 e0       	ldi	r25, 0x00	; 0
     c2c:	a0 e0       	ldi	r26, 0x00	; 0
     c2e:	b0 e0       	ldi	r27, 0x00	; 0
     c30:	04 c0       	rjmp	.+8      	; 0xc3a <__pack_f+0x9c>
     c32:	88 0f       	add	r24, r24
     c34:	99 1f       	adc	r25, r25
     c36:	aa 1f       	adc	r26, r26
     c38:	bb 1f       	adc	r27, r27
     c3a:	2a 95       	dec	r18
     c3c:	d2 f7       	brpl	.-12     	; 0xc32 <__pack_f+0x94>
     c3e:	01 97       	sbiw	r24, 0x01	; 1
     c40:	a1 09       	sbc	r26, r1
     c42:	b1 09       	sbc	r27, r1
     c44:	8e 21       	and	r24, r14
     c46:	9f 21       	and	r25, r15
     c48:	a0 23       	and	r26, r16
     c4a:	b1 23       	and	r27, r17
     c4c:	00 97       	sbiw	r24, 0x00	; 0
     c4e:	a1 05       	cpc	r26, r1
     c50:	b1 05       	cpc	r27, r1
     c52:	21 f0       	breq	.+8      	; 0xc5c <__pack_f+0xbe>
     c54:	81 e0       	ldi	r24, 0x01	; 1
     c56:	90 e0       	ldi	r25, 0x00	; 0
     c58:	a0 e0       	ldi	r26, 0x00	; 0
     c5a:	b0 e0       	ldi	r27, 0x00	; 0
     c5c:	9a 01       	movw	r18, r20
     c5e:	ab 01       	movw	r20, r22
     c60:	28 2b       	or	r18, r24
     c62:	39 2b       	or	r19, r25
     c64:	4a 2b       	or	r20, r26
     c66:	5b 2b       	or	r21, r27
     c68:	da 01       	movw	r26, r20
     c6a:	c9 01       	movw	r24, r18
     c6c:	8f 77       	andi	r24, 0x7F	; 127
     c6e:	90 70       	andi	r25, 0x00	; 0
     c70:	a0 70       	andi	r26, 0x00	; 0
     c72:	b0 70       	andi	r27, 0x00	; 0
     c74:	80 34       	cpi	r24, 0x40	; 64
     c76:	91 05       	cpc	r25, r1
     c78:	a1 05       	cpc	r26, r1
     c7a:	b1 05       	cpc	r27, r1
     c7c:	39 f4       	brne	.+14     	; 0xc8c <__pack_f+0xee>
     c7e:	27 ff       	sbrs	r18, 7
     c80:	09 c0       	rjmp	.+18     	; 0xc94 <__pack_f+0xf6>
     c82:	20 5c       	subi	r18, 0xC0	; 192
     c84:	3f 4f       	sbci	r19, 0xFF	; 255
     c86:	4f 4f       	sbci	r20, 0xFF	; 255
     c88:	5f 4f       	sbci	r21, 0xFF	; 255
     c8a:	04 c0       	rjmp	.+8      	; 0xc94 <__pack_f+0xf6>
     c8c:	21 5c       	subi	r18, 0xC1	; 193
     c8e:	3f 4f       	sbci	r19, 0xFF	; 255
     c90:	4f 4f       	sbci	r20, 0xFF	; 255
     c92:	5f 4f       	sbci	r21, 0xFF	; 255
     c94:	e0 e0       	ldi	r30, 0x00	; 0
     c96:	f0 e0       	ldi	r31, 0x00	; 0
     c98:	20 30       	cpi	r18, 0x00	; 0
     c9a:	a0 e0       	ldi	r26, 0x00	; 0
     c9c:	3a 07       	cpc	r19, r26
     c9e:	a0 e0       	ldi	r26, 0x00	; 0
     ca0:	4a 07       	cpc	r20, r26
     ca2:	a0 e4       	ldi	r26, 0x40	; 64
     ca4:	5a 07       	cpc	r21, r26
     ca6:	10 f0       	brcs	.+4      	; 0xcac <__pack_f+0x10e>
     ca8:	e1 e0       	ldi	r30, 0x01	; 1
     caa:	f0 e0       	ldi	r31, 0x00	; 0
     cac:	79 01       	movw	r14, r18
     cae:	8a 01       	movw	r16, r20
     cb0:	27 c0       	rjmp	.+78     	; 0xd00 <__pack_f+0x162>
     cb2:	60 38       	cpi	r22, 0x80	; 128
     cb4:	71 05       	cpc	r23, r1
     cb6:	64 f5       	brge	.+88     	; 0xd10 <__pack_f+0x172>
     cb8:	fb 01       	movw	r30, r22
     cba:	e1 58       	subi	r30, 0x81	; 129
     cbc:	ff 4f       	sbci	r31, 0xFF	; 255
     cbe:	d8 01       	movw	r26, r16
     cc0:	c7 01       	movw	r24, r14
     cc2:	8f 77       	andi	r24, 0x7F	; 127
     cc4:	90 70       	andi	r25, 0x00	; 0
     cc6:	a0 70       	andi	r26, 0x00	; 0
     cc8:	b0 70       	andi	r27, 0x00	; 0
     cca:	80 34       	cpi	r24, 0x40	; 64
     ccc:	91 05       	cpc	r25, r1
     cce:	a1 05       	cpc	r26, r1
     cd0:	b1 05       	cpc	r27, r1
     cd2:	39 f4       	brne	.+14     	; 0xce2 <__pack_f+0x144>
     cd4:	e7 fe       	sbrs	r14, 7
     cd6:	0d c0       	rjmp	.+26     	; 0xcf2 <__pack_f+0x154>
     cd8:	80 e4       	ldi	r24, 0x40	; 64
     cda:	90 e0       	ldi	r25, 0x00	; 0
     cdc:	a0 e0       	ldi	r26, 0x00	; 0
     cde:	b0 e0       	ldi	r27, 0x00	; 0
     ce0:	04 c0       	rjmp	.+8      	; 0xcea <__pack_f+0x14c>
     ce2:	8f e3       	ldi	r24, 0x3F	; 63
     ce4:	90 e0       	ldi	r25, 0x00	; 0
     ce6:	a0 e0       	ldi	r26, 0x00	; 0
     ce8:	b0 e0       	ldi	r27, 0x00	; 0
     cea:	e8 0e       	add	r14, r24
     cec:	f9 1e       	adc	r15, r25
     cee:	0a 1f       	adc	r16, r26
     cf0:	1b 1f       	adc	r17, r27
     cf2:	17 ff       	sbrs	r17, 7
     cf4:	05 c0       	rjmp	.+10     	; 0xd00 <__pack_f+0x162>
     cf6:	16 95       	lsr	r17
     cf8:	07 95       	ror	r16
     cfa:	f7 94       	ror	r15
     cfc:	e7 94       	ror	r14
     cfe:	31 96       	adiw	r30, 0x01	; 1
     d00:	87 e0       	ldi	r24, 0x07	; 7
     d02:	16 95       	lsr	r17
     d04:	07 95       	ror	r16
     d06:	f7 94       	ror	r15
     d08:	e7 94       	ror	r14
     d0a:	8a 95       	dec	r24
     d0c:	d1 f7       	brne	.-12     	; 0xd02 <__pack_f+0x164>
     d0e:	05 c0       	rjmp	.+10     	; 0xd1a <__pack_f+0x17c>
     d10:	ee 24       	eor	r14, r14
     d12:	ff 24       	eor	r15, r15
     d14:	87 01       	movw	r16, r14
     d16:	ef ef       	ldi	r30, 0xFF	; 255
     d18:	f0 e0       	ldi	r31, 0x00	; 0
     d1a:	6e 2f       	mov	r22, r30
     d1c:	67 95       	ror	r22
     d1e:	66 27       	eor	r22, r22
     d20:	67 95       	ror	r22
     d22:	90 2f       	mov	r25, r16
     d24:	9f 77       	andi	r25, 0x7F	; 127
     d26:	d7 94       	ror	r13
     d28:	dd 24       	eor	r13, r13
     d2a:	d7 94       	ror	r13
     d2c:	8e 2f       	mov	r24, r30
     d2e:	86 95       	lsr	r24
     d30:	49 2f       	mov	r20, r25
     d32:	46 2b       	or	r20, r22
     d34:	58 2f       	mov	r21, r24
     d36:	5d 29       	or	r21, r13
     d38:	b7 01       	movw	r22, r14
     d3a:	ca 01       	movw	r24, r20
     d3c:	1f 91       	pop	r17
     d3e:	0f 91       	pop	r16
     d40:	ff 90       	pop	r15
     d42:	ef 90       	pop	r14
     d44:	df 90       	pop	r13
     d46:	08 95       	ret

00000d48 <__unpack_f>:
     d48:	fc 01       	movw	r30, r24
     d4a:	db 01       	movw	r26, r22
     d4c:	40 81       	ld	r20, Z
     d4e:	51 81       	ldd	r21, Z+1	; 0x01
     d50:	22 81       	ldd	r18, Z+2	; 0x02
     d52:	62 2f       	mov	r22, r18
     d54:	6f 77       	andi	r22, 0x7F	; 127
     d56:	70 e0       	ldi	r23, 0x00	; 0
     d58:	22 1f       	adc	r18, r18
     d5a:	22 27       	eor	r18, r18
     d5c:	22 1f       	adc	r18, r18
     d5e:	93 81       	ldd	r25, Z+3	; 0x03
     d60:	89 2f       	mov	r24, r25
     d62:	88 0f       	add	r24, r24
     d64:	82 2b       	or	r24, r18
     d66:	28 2f       	mov	r18, r24
     d68:	30 e0       	ldi	r19, 0x00	; 0
     d6a:	99 1f       	adc	r25, r25
     d6c:	99 27       	eor	r25, r25
     d6e:	99 1f       	adc	r25, r25
     d70:	11 96       	adiw	r26, 0x01	; 1
     d72:	9c 93       	st	X, r25
     d74:	11 97       	sbiw	r26, 0x01	; 1
     d76:	21 15       	cp	r18, r1
     d78:	31 05       	cpc	r19, r1
     d7a:	a9 f5       	brne	.+106    	; 0xde6 <__unpack_f+0x9e>
     d7c:	41 15       	cp	r20, r1
     d7e:	51 05       	cpc	r21, r1
     d80:	61 05       	cpc	r22, r1
     d82:	71 05       	cpc	r23, r1
     d84:	11 f4       	brne	.+4      	; 0xd8a <__unpack_f+0x42>
     d86:	82 e0       	ldi	r24, 0x02	; 2
     d88:	37 c0       	rjmp	.+110    	; 0xdf8 <__unpack_f+0xb0>
     d8a:	82 e8       	ldi	r24, 0x82	; 130
     d8c:	9f ef       	ldi	r25, 0xFF	; 255
     d8e:	13 96       	adiw	r26, 0x03	; 3
     d90:	9c 93       	st	X, r25
     d92:	8e 93       	st	-X, r24
     d94:	12 97       	sbiw	r26, 0x02	; 2
     d96:	9a 01       	movw	r18, r20
     d98:	ab 01       	movw	r20, r22
     d9a:	67 e0       	ldi	r22, 0x07	; 7
     d9c:	22 0f       	add	r18, r18
     d9e:	33 1f       	adc	r19, r19
     da0:	44 1f       	adc	r20, r20
     da2:	55 1f       	adc	r21, r21
     da4:	6a 95       	dec	r22
     da6:	d1 f7       	brne	.-12     	; 0xd9c <__unpack_f+0x54>
     da8:	83 e0       	ldi	r24, 0x03	; 3
     daa:	8c 93       	st	X, r24
     dac:	0d c0       	rjmp	.+26     	; 0xdc8 <__unpack_f+0x80>
     dae:	22 0f       	add	r18, r18
     db0:	33 1f       	adc	r19, r19
     db2:	44 1f       	adc	r20, r20
     db4:	55 1f       	adc	r21, r21
     db6:	12 96       	adiw	r26, 0x02	; 2
     db8:	8d 91       	ld	r24, X+
     dba:	9c 91       	ld	r25, X
     dbc:	13 97       	sbiw	r26, 0x03	; 3
     dbe:	01 97       	sbiw	r24, 0x01	; 1
     dc0:	13 96       	adiw	r26, 0x03	; 3
     dc2:	9c 93       	st	X, r25
     dc4:	8e 93       	st	-X, r24
     dc6:	12 97       	sbiw	r26, 0x02	; 2
     dc8:	20 30       	cpi	r18, 0x00	; 0
     dca:	80 e0       	ldi	r24, 0x00	; 0
     dcc:	38 07       	cpc	r19, r24
     dce:	80 e0       	ldi	r24, 0x00	; 0
     dd0:	48 07       	cpc	r20, r24
     dd2:	80 e4       	ldi	r24, 0x40	; 64
     dd4:	58 07       	cpc	r21, r24
     dd6:	58 f3       	brcs	.-42     	; 0xdae <__unpack_f+0x66>
     dd8:	14 96       	adiw	r26, 0x04	; 4
     dda:	2d 93       	st	X+, r18
     ddc:	3d 93       	st	X+, r19
     dde:	4d 93       	st	X+, r20
     de0:	5c 93       	st	X, r21
     de2:	17 97       	sbiw	r26, 0x07	; 7
     de4:	08 95       	ret
     de6:	2f 3f       	cpi	r18, 0xFF	; 255
     de8:	31 05       	cpc	r19, r1
     dea:	79 f4       	brne	.+30     	; 0xe0a <__unpack_f+0xc2>
     dec:	41 15       	cp	r20, r1
     dee:	51 05       	cpc	r21, r1
     df0:	61 05       	cpc	r22, r1
     df2:	71 05       	cpc	r23, r1
     df4:	19 f4       	brne	.+6      	; 0xdfc <__unpack_f+0xb4>
     df6:	84 e0       	ldi	r24, 0x04	; 4
     df8:	8c 93       	st	X, r24
     dfa:	08 95       	ret
     dfc:	64 ff       	sbrs	r22, 4
     dfe:	03 c0       	rjmp	.+6      	; 0xe06 <__unpack_f+0xbe>
     e00:	81 e0       	ldi	r24, 0x01	; 1
     e02:	8c 93       	st	X, r24
     e04:	12 c0       	rjmp	.+36     	; 0xe2a <__unpack_f+0xe2>
     e06:	1c 92       	st	X, r1
     e08:	10 c0       	rjmp	.+32     	; 0xe2a <__unpack_f+0xe2>
     e0a:	2f 57       	subi	r18, 0x7F	; 127
     e0c:	30 40       	sbci	r19, 0x00	; 0
     e0e:	13 96       	adiw	r26, 0x03	; 3
     e10:	3c 93       	st	X, r19
     e12:	2e 93       	st	-X, r18
     e14:	12 97       	sbiw	r26, 0x02	; 2
     e16:	83 e0       	ldi	r24, 0x03	; 3
     e18:	8c 93       	st	X, r24
     e1a:	87 e0       	ldi	r24, 0x07	; 7
     e1c:	44 0f       	add	r20, r20
     e1e:	55 1f       	adc	r21, r21
     e20:	66 1f       	adc	r22, r22
     e22:	77 1f       	adc	r23, r23
     e24:	8a 95       	dec	r24
     e26:	d1 f7       	brne	.-12     	; 0xe1c <__unpack_f+0xd4>
     e28:	70 64       	ori	r23, 0x40	; 64
     e2a:	14 96       	adiw	r26, 0x04	; 4
     e2c:	4d 93       	st	X+, r20
     e2e:	5d 93       	st	X+, r21
     e30:	6d 93       	st	X+, r22
     e32:	7c 93       	st	X, r23
     e34:	17 97       	sbiw	r26, 0x07	; 7
     e36:	08 95       	ret

00000e38 <__fpcmp_parts_f>:
     e38:	1f 93       	push	r17
     e3a:	dc 01       	movw	r26, r24
     e3c:	fb 01       	movw	r30, r22
     e3e:	9c 91       	ld	r25, X
     e40:	92 30       	cpi	r25, 0x02	; 2
     e42:	08 f4       	brcc	.+2      	; 0xe46 <__fpcmp_parts_f+0xe>
     e44:	47 c0       	rjmp	.+142    	; 0xed4 <__fpcmp_parts_f+0x9c>
     e46:	80 81       	ld	r24, Z
     e48:	82 30       	cpi	r24, 0x02	; 2
     e4a:	08 f4       	brcc	.+2      	; 0xe4e <__fpcmp_parts_f+0x16>
     e4c:	43 c0       	rjmp	.+134    	; 0xed4 <__fpcmp_parts_f+0x9c>
     e4e:	94 30       	cpi	r25, 0x04	; 4
     e50:	51 f4       	brne	.+20     	; 0xe66 <__fpcmp_parts_f+0x2e>
     e52:	11 96       	adiw	r26, 0x01	; 1
     e54:	1c 91       	ld	r17, X
     e56:	84 30       	cpi	r24, 0x04	; 4
     e58:	99 f5       	brne	.+102    	; 0xec0 <__fpcmp_parts_f+0x88>
     e5a:	81 81       	ldd	r24, Z+1	; 0x01
     e5c:	68 2f       	mov	r22, r24
     e5e:	70 e0       	ldi	r23, 0x00	; 0
     e60:	61 1b       	sub	r22, r17
     e62:	71 09       	sbc	r23, r1
     e64:	3f c0       	rjmp	.+126    	; 0xee4 <__fpcmp_parts_f+0xac>
     e66:	84 30       	cpi	r24, 0x04	; 4
     e68:	21 f0       	breq	.+8      	; 0xe72 <__fpcmp_parts_f+0x3a>
     e6a:	92 30       	cpi	r25, 0x02	; 2
     e6c:	31 f4       	brne	.+12     	; 0xe7a <__fpcmp_parts_f+0x42>
     e6e:	82 30       	cpi	r24, 0x02	; 2
     e70:	b9 f1       	breq	.+110    	; 0xee0 <__fpcmp_parts_f+0xa8>
     e72:	81 81       	ldd	r24, Z+1	; 0x01
     e74:	88 23       	and	r24, r24
     e76:	89 f1       	breq	.+98     	; 0xeda <__fpcmp_parts_f+0xa2>
     e78:	2d c0       	rjmp	.+90     	; 0xed4 <__fpcmp_parts_f+0x9c>
     e7a:	11 96       	adiw	r26, 0x01	; 1
     e7c:	1c 91       	ld	r17, X
     e7e:	11 97       	sbiw	r26, 0x01	; 1
     e80:	82 30       	cpi	r24, 0x02	; 2
     e82:	f1 f0       	breq	.+60     	; 0xec0 <__fpcmp_parts_f+0x88>
     e84:	81 81       	ldd	r24, Z+1	; 0x01
     e86:	18 17       	cp	r17, r24
     e88:	d9 f4       	brne	.+54     	; 0xec0 <__fpcmp_parts_f+0x88>
     e8a:	12 96       	adiw	r26, 0x02	; 2
     e8c:	2d 91       	ld	r18, X+
     e8e:	3c 91       	ld	r19, X
     e90:	13 97       	sbiw	r26, 0x03	; 3
     e92:	82 81       	ldd	r24, Z+2	; 0x02
     e94:	93 81       	ldd	r25, Z+3	; 0x03
     e96:	82 17       	cp	r24, r18
     e98:	93 07       	cpc	r25, r19
     e9a:	94 f0       	brlt	.+36     	; 0xec0 <__fpcmp_parts_f+0x88>
     e9c:	28 17       	cp	r18, r24
     e9e:	39 07       	cpc	r19, r25
     ea0:	bc f0       	brlt	.+46     	; 0xed0 <__fpcmp_parts_f+0x98>
     ea2:	14 96       	adiw	r26, 0x04	; 4
     ea4:	8d 91       	ld	r24, X+
     ea6:	9d 91       	ld	r25, X+
     ea8:	0d 90       	ld	r0, X+
     eaa:	bc 91       	ld	r27, X
     eac:	a0 2d       	mov	r26, r0
     eae:	24 81       	ldd	r18, Z+4	; 0x04
     eb0:	35 81       	ldd	r19, Z+5	; 0x05
     eb2:	46 81       	ldd	r20, Z+6	; 0x06
     eb4:	57 81       	ldd	r21, Z+7	; 0x07
     eb6:	28 17       	cp	r18, r24
     eb8:	39 07       	cpc	r19, r25
     eba:	4a 07       	cpc	r20, r26
     ebc:	5b 07       	cpc	r21, r27
     ebe:	18 f4       	brcc	.+6      	; 0xec6 <__fpcmp_parts_f+0x8e>
     ec0:	11 23       	and	r17, r17
     ec2:	41 f0       	breq	.+16     	; 0xed4 <__fpcmp_parts_f+0x9c>
     ec4:	0a c0       	rjmp	.+20     	; 0xeda <__fpcmp_parts_f+0xa2>
     ec6:	82 17       	cp	r24, r18
     ec8:	93 07       	cpc	r25, r19
     eca:	a4 07       	cpc	r26, r20
     ecc:	b5 07       	cpc	r27, r21
     ece:	40 f4       	brcc	.+16     	; 0xee0 <__fpcmp_parts_f+0xa8>
     ed0:	11 23       	and	r17, r17
     ed2:	19 f0       	breq	.+6      	; 0xeda <__fpcmp_parts_f+0xa2>
     ed4:	61 e0       	ldi	r22, 0x01	; 1
     ed6:	70 e0       	ldi	r23, 0x00	; 0
     ed8:	05 c0       	rjmp	.+10     	; 0xee4 <__fpcmp_parts_f+0xac>
     eda:	6f ef       	ldi	r22, 0xFF	; 255
     edc:	7f ef       	ldi	r23, 0xFF	; 255
     ede:	02 c0       	rjmp	.+4      	; 0xee4 <__fpcmp_parts_f+0xac>
     ee0:	60 e0       	ldi	r22, 0x00	; 0
     ee2:	70 e0       	ldi	r23, 0x00	; 0
     ee4:	cb 01       	movw	r24, r22
     ee6:	1f 91       	pop	r17
     ee8:	08 95       	ret

00000eea <DIO_U8SetPinDirection>:
#include "DIO_Interface.h"
#include "DIO_Private.h"
#include "DIO_Config.h"

u8 DIO_U8SetPinDirection(u8 Copy_U8PortNumb,u8 Copy_U8PinNumb,u8 Copy_U8Directon)
{
     eea:	df 93       	push	r29
     eec:	cf 93       	push	r28
     eee:	cd b7       	in	r28, 0x3d	; 61
     ef0:	de b7       	in	r29, 0x3e	; 62
     ef2:	2a 97       	sbiw	r28, 0x0a	; 10
     ef4:	0f b6       	in	r0, 0x3f	; 63
     ef6:	f8 94       	cli
     ef8:	de bf       	out	0x3e, r29	; 62
     efa:	0f be       	out	0x3f, r0	; 63
     efc:	cd bf       	out	0x3d, r28	; 61
     efe:	8a 83       	std	Y+2, r24	; 0x02
     f00:	6b 83       	std	Y+3, r22	; 0x03
     f02:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_U8ErrorState=ERROR_STATE_NOK;
     f04:	19 82       	std	Y+1, r1	; 0x01
	if((Copy_U8PortNumb <= DIO_PORTD) && (Copy_U8PinNumb <= DIO_PIN7) &&(Copy_U8Directon <= DIO_PIN_OUT))
     f06:	8a 81       	ldd	r24, Y+2	; 0x02
     f08:	84 30       	cpi	r24, 0x04	; 4
     f0a:	08 f0       	brcs	.+2      	; 0xf0e <DIO_U8SetPinDirection+0x24>
     f0c:	fb c0       	rjmp	.+502    	; 0x1104 <DIO_U8SetPinDirection+0x21a>
     f0e:	8b 81       	ldd	r24, Y+3	; 0x03
     f10:	88 30       	cpi	r24, 0x08	; 8
     f12:	08 f0       	brcs	.+2      	; 0xf16 <DIO_U8SetPinDirection+0x2c>
     f14:	f7 c0       	rjmp	.+494    	; 0x1104 <DIO_U8SetPinDirection+0x21a>
     f16:	8c 81       	ldd	r24, Y+4	; 0x04
     f18:	82 30       	cpi	r24, 0x02	; 2
     f1a:	08 f0       	brcs	.+2      	; 0xf1e <DIO_U8SetPinDirection+0x34>
     f1c:	f3 c0       	rjmp	.+486    	; 0x1104 <DIO_U8SetPinDirection+0x21a>
	{
		switch(Copy_U8Directon)
     f1e:	8c 81       	ldd	r24, Y+4	; 0x04
     f20:	28 2f       	mov	r18, r24
     f22:	30 e0       	ldi	r19, 0x00	; 0
     f24:	3a 87       	std	Y+10, r19	; 0x0a
     f26:	29 87       	std	Y+9, r18	; 0x09
     f28:	89 85       	ldd	r24, Y+9	; 0x09
     f2a:	9a 85       	ldd	r25, Y+10	; 0x0a
     f2c:	00 97       	sbiw	r24, 0x00	; 0
     f2e:	09 f4       	brne	.+2      	; 0xf32 <DIO_U8SetPinDirection+0x48>
     f30:	75 c0       	rjmp	.+234    	; 0x101c <DIO_U8SetPinDirection+0x132>
     f32:	29 85       	ldd	r18, Y+9	; 0x09
     f34:	3a 85       	ldd	r19, Y+10	; 0x0a
     f36:	21 30       	cpi	r18, 0x01	; 1
     f38:	31 05       	cpc	r19, r1
     f3a:	09 f0       	breq	.+2      	; 0xf3e <DIO_U8SetPinDirection+0x54>
     f3c:	e5 c0       	rjmp	.+458    	; 0x1108 <DIO_U8SetPinDirection+0x21e>
		{
			case DIO_PIN_OUT:
			switch(Copy_U8PortNumb)
     f3e:	8a 81       	ldd	r24, Y+2	; 0x02
     f40:	28 2f       	mov	r18, r24
     f42:	30 e0       	ldi	r19, 0x00	; 0
     f44:	38 87       	std	Y+8, r19	; 0x08
     f46:	2f 83       	std	Y+7, r18	; 0x07
     f48:	8f 81       	ldd	r24, Y+7	; 0x07
     f4a:	98 85       	ldd	r25, Y+8	; 0x08
     f4c:	81 30       	cpi	r24, 0x01	; 1
     f4e:	91 05       	cpc	r25, r1
     f50:	49 f1       	breq	.+82     	; 0xfa4 <DIO_U8SetPinDirection+0xba>
     f52:	2f 81       	ldd	r18, Y+7	; 0x07
     f54:	38 85       	ldd	r19, Y+8	; 0x08
     f56:	22 30       	cpi	r18, 0x02	; 2
     f58:	31 05       	cpc	r19, r1
     f5a:	2c f4       	brge	.+10     	; 0xf66 <DIO_U8SetPinDirection+0x7c>
     f5c:	8f 81       	ldd	r24, Y+7	; 0x07
     f5e:	98 85       	ldd	r25, Y+8	; 0x08
     f60:	00 97       	sbiw	r24, 0x00	; 0
     f62:	61 f0       	breq	.+24     	; 0xf7c <DIO_U8SetPinDirection+0x92>
     f64:	d1 c0       	rjmp	.+418    	; 0x1108 <DIO_U8SetPinDirection+0x21e>
     f66:	2f 81       	ldd	r18, Y+7	; 0x07
     f68:	38 85       	ldd	r19, Y+8	; 0x08
     f6a:	22 30       	cpi	r18, 0x02	; 2
     f6c:	31 05       	cpc	r19, r1
     f6e:	71 f1       	breq	.+92     	; 0xfcc <DIO_U8SetPinDirection+0xe2>
     f70:	8f 81       	ldd	r24, Y+7	; 0x07
     f72:	98 85       	ldd	r25, Y+8	; 0x08
     f74:	83 30       	cpi	r24, 0x03	; 3
     f76:	91 05       	cpc	r25, r1
     f78:	e9 f1       	breq	.+122    	; 0xff4 <DIO_U8SetPinDirection+0x10a>
     f7a:	c6 c0       	rjmp	.+396    	; 0x1108 <DIO_U8SetPinDirection+0x21e>
			{
				case DIO_PORTA: SET_BIT(DDRA,Copy_U8PinNumb);break;
     f7c:	aa e3       	ldi	r26, 0x3A	; 58
     f7e:	b0 e0       	ldi	r27, 0x00	; 0
     f80:	ea e3       	ldi	r30, 0x3A	; 58
     f82:	f0 e0       	ldi	r31, 0x00	; 0
     f84:	80 81       	ld	r24, Z
     f86:	48 2f       	mov	r20, r24
     f88:	8b 81       	ldd	r24, Y+3	; 0x03
     f8a:	28 2f       	mov	r18, r24
     f8c:	30 e0       	ldi	r19, 0x00	; 0
     f8e:	81 e0       	ldi	r24, 0x01	; 1
     f90:	90 e0       	ldi	r25, 0x00	; 0
     f92:	02 2e       	mov	r0, r18
     f94:	02 c0       	rjmp	.+4      	; 0xf9a <DIO_U8SetPinDirection+0xb0>
     f96:	88 0f       	add	r24, r24
     f98:	99 1f       	adc	r25, r25
     f9a:	0a 94       	dec	r0
     f9c:	e2 f7       	brpl	.-8      	; 0xf96 <DIO_U8SetPinDirection+0xac>
     f9e:	84 2b       	or	r24, r20
     fa0:	8c 93       	st	X, r24
     fa2:	b2 c0       	rjmp	.+356    	; 0x1108 <DIO_U8SetPinDirection+0x21e>
				case DIO_PORTB: SET_BIT(DDRB,Copy_U8PinNumb);break;
     fa4:	a7 e3       	ldi	r26, 0x37	; 55
     fa6:	b0 e0       	ldi	r27, 0x00	; 0
     fa8:	e7 e3       	ldi	r30, 0x37	; 55
     faa:	f0 e0       	ldi	r31, 0x00	; 0
     fac:	80 81       	ld	r24, Z
     fae:	48 2f       	mov	r20, r24
     fb0:	8b 81       	ldd	r24, Y+3	; 0x03
     fb2:	28 2f       	mov	r18, r24
     fb4:	30 e0       	ldi	r19, 0x00	; 0
     fb6:	81 e0       	ldi	r24, 0x01	; 1
     fb8:	90 e0       	ldi	r25, 0x00	; 0
     fba:	02 2e       	mov	r0, r18
     fbc:	02 c0       	rjmp	.+4      	; 0xfc2 <DIO_U8SetPinDirection+0xd8>
     fbe:	88 0f       	add	r24, r24
     fc0:	99 1f       	adc	r25, r25
     fc2:	0a 94       	dec	r0
     fc4:	e2 f7       	brpl	.-8      	; 0xfbe <DIO_U8SetPinDirection+0xd4>
     fc6:	84 2b       	or	r24, r20
     fc8:	8c 93       	st	X, r24
     fca:	9e c0       	rjmp	.+316    	; 0x1108 <DIO_U8SetPinDirection+0x21e>
				case DIO_PORTC: SET_BIT(DDRC,Copy_U8PinNumb);break;
     fcc:	a4 e3       	ldi	r26, 0x34	; 52
     fce:	b0 e0       	ldi	r27, 0x00	; 0
     fd0:	e4 e3       	ldi	r30, 0x34	; 52
     fd2:	f0 e0       	ldi	r31, 0x00	; 0
     fd4:	80 81       	ld	r24, Z
     fd6:	48 2f       	mov	r20, r24
     fd8:	8b 81       	ldd	r24, Y+3	; 0x03
     fda:	28 2f       	mov	r18, r24
     fdc:	30 e0       	ldi	r19, 0x00	; 0
     fde:	81 e0       	ldi	r24, 0x01	; 1
     fe0:	90 e0       	ldi	r25, 0x00	; 0
     fe2:	02 2e       	mov	r0, r18
     fe4:	02 c0       	rjmp	.+4      	; 0xfea <DIO_U8SetPinDirection+0x100>
     fe6:	88 0f       	add	r24, r24
     fe8:	99 1f       	adc	r25, r25
     fea:	0a 94       	dec	r0
     fec:	e2 f7       	brpl	.-8      	; 0xfe6 <DIO_U8SetPinDirection+0xfc>
     fee:	84 2b       	or	r24, r20
     ff0:	8c 93       	st	X, r24
     ff2:	8a c0       	rjmp	.+276    	; 0x1108 <DIO_U8SetPinDirection+0x21e>
				case DIO_PORTD: SET_BIT(DDRD,Copy_U8PinNumb);break;
     ff4:	a1 e3       	ldi	r26, 0x31	; 49
     ff6:	b0 e0       	ldi	r27, 0x00	; 0
     ff8:	e1 e3       	ldi	r30, 0x31	; 49
     ffa:	f0 e0       	ldi	r31, 0x00	; 0
     ffc:	80 81       	ld	r24, Z
     ffe:	48 2f       	mov	r20, r24
    1000:	8b 81       	ldd	r24, Y+3	; 0x03
    1002:	28 2f       	mov	r18, r24
    1004:	30 e0       	ldi	r19, 0x00	; 0
    1006:	81 e0       	ldi	r24, 0x01	; 1
    1008:	90 e0       	ldi	r25, 0x00	; 0
    100a:	02 2e       	mov	r0, r18
    100c:	02 c0       	rjmp	.+4      	; 0x1012 <DIO_U8SetPinDirection+0x128>
    100e:	88 0f       	add	r24, r24
    1010:	99 1f       	adc	r25, r25
    1012:	0a 94       	dec	r0
    1014:	e2 f7       	brpl	.-8      	; 0x100e <DIO_U8SetPinDirection+0x124>
    1016:	84 2b       	or	r24, r20
    1018:	8c 93       	st	X, r24
    101a:	76 c0       	rjmp	.+236    	; 0x1108 <DIO_U8SetPinDirection+0x21e>
			}
			break;
			case DIO_PIN_IN:
			switch(Copy_U8PortNumb)
    101c:	8a 81       	ldd	r24, Y+2	; 0x02
    101e:	28 2f       	mov	r18, r24
    1020:	30 e0       	ldi	r19, 0x00	; 0
    1022:	3e 83       	std	Y+6, r19	; 0x06
    1024:	2d 83       	std	Y+5, r18	; 0x05
    1026:	8d 81       	ldd	r24, Y+5	; 0x05
    1028:	9e 81       	ldd	r25, Y+6	; 0x06
    102a:	81 30       	cpi	r24, 0x01	; 1
    102c:	91 05       	cpc	r25, r1
    102e:	59 f1       	breq	.+86     	; 0x1086 <DIO_U8SetPinDirection+0x19c>
    1030:	2d 81       	ldd	r18, Y+5	; 0x05
    1032:	3e 81       	ldd	r19, Y+6	; 0x06
    1034:	22 30       	cpi	r18, 0x02	; 2
    1036:	31 05       	cpc	r19, r1
    1038:	2c f4       	brge	.+10     	; 0x1044 <DIO_U8SetPinDirection+0x15a>
    103a:	8d 81       	ldd	r24, Y+5	; 0x05
    103c:	9e 81       	ldd	r25, Y+6	; 0x06
    103e:	00 97       	sbiw	r24, 0x00	; 0
    1040:	69 f0       	breq	.+26     	; 0x105c <DIO_U8SetPinDirection+0x172>
    1042:	62 c0       	rjmp	.+196    	; 0x1108 <DIO_U8SetPinDirection+0x21e>
    1044:	2d 81       	ldd	r18, Y+5	; 0x05
    1046:	3e 81       	ldd	r19, Y+6	; 0x06
    1048:	22 30       	cpi	r18, 0x02	; 2
    104a:	31 05       	cpc	r19, r1
    104c:	89 f1       	breq	.+98     	; 0x10b0 <DIO_U8SetPinDirection+0x1c6>
    104e:	8d 81       	ldd	r24, Y+5	; 0x05
    1050:	9e 81       	ldd	r25, Y+6	; 0x06
    1052:	83 30       	cpi	r24, 0x03	; 3
    1054:	91 05       	cpc	r25, r1
    1056:	09 f4       	brne	.+2      	; 0x105a <DIO_U8SetPinDirection+0x170>
    1058:	40 c0       	rjmp	.+128    	; 0x10da <DIO_U8SetPinDirection+0x1f0>
    105a:	56 c0       	rjmp	.+172    	; 0x1108 <DIO_U8SetPinDirection+0x21e>
			{
				case DIO_PORTA: CLR_BIT(DDRA,Copy_U8PinNumb);break;
    105c:	aa e3       	ldi	r26, 0x3A	; 58
    105e:	b0 e0       	ldi	r27, 0x00	; 0
    1060:	ea e3       	ldi	r30, 0x3A	; 58
    1062:	f0 e0       	ldi	r31, 0x00	; 0
    1064:	80 81       	ld	r24, Z
    1066:	48 2f       	mov	r20, r24
    1068:	8b 81       	ldd	r24, Y+3	; 0x03
    106a:	28 2f       	mov	r18, r24
    106c:	30 e0       	ldi	r19, 0x00	; 0
    106e:	81 e0       	ldi	r24, 0x01	; 1
    1070:	90 e0       	ldi	r25, 0x00	; 0
    1072:	02 2e       	mov	r0, r18
    1074:	02 c0       	rjmp	.+4      	; 0x107a <DIO_U8SetPinDirection+0x190>
    1076:	88 0f       	add	r24, r24
    1078:	99 1f       	adc	r25, r25
    107a:	0a 94       	dec	r0
    107c:	e2 f7       	brpl	.-8      	; 0x1076 <DIO_U8SetPinDirection+0x18c>
    107e:	80 95       	com	r24
    1080:	84 23       	and	r24, r20
    1082:	8c 93       	st	X, r24
    1084:	41 c0       	rjmp	.+130    	; 0x1108 <DIO_U8SetPinDirection+0x21e>
				case DIO_PORTB: CLR_BIT(DDRB,Copy_U8PinNumb);break;
    1086:	a7 e3       	ldi	r26, 0x37	; 55
    1088:	b0 e0       	ldi	r27, 0x00	; 0
    108a:	e7 e3       	ldi	r30, 0x37	; 55
    108c:	f0 e0       	ldi	r31, 0x00	; 0
    108e:	80 81       	ld	r24, Z
    1090:	48 2f       	mov	r20, r24
    1092:	8b 81       	ldd	r24, Y+3	; 0x03
    1094:	28 2f       	mov	r18, r24
    1096:	30 e0       	ldi	r19, 0x00	; 0
    1098:	81 e0       	ldi	r24, 0x01	; 1
    109a:	90 e0       	ldi	r25, 0x00	; 0
    109c:	02 2e       	mov	r0, r18
    109e:	02 c0       	rjmp	.+4      	; 0x10a4 <DIO_U8SetPinDirection+0x1ba>
    10a0:	88 0f       	add	r24, r24
    10a2:	99 1f       	adc	r25, r25
    10a4:	0a 94       	dec	r0
    10a6:	e2 f7       	brpl	.-8      	; 0x10a0 <DIO_U8SetPinDirection+0x1b6>
    10a8:	80 95       	com	r24
    10aa:	84 23       	and	r24, r20
    10ac:	8c 93       	st	X, r24
    10ae:	2c c0       	rjmp	.+88     	; 0x1108 <DIO_U8SetPinDirection+0x21e>
				case DIO_PORTC: CLR_BIT(DDRC,Copy_U8PinNumb);break;
    10b0:	a4 e3       	ldi	r26, 0x34	; 52
    10b2:	b0 e0       	ldi	r27, 0x00	; 0
    10b4:	e4 e3       	ldi	r30, 0x34	; 52
    10b6:	f0 e0       	ldi	r31, 0x00	; 0
    10b8:	80 81       	ld	r24, Z
    10ba:	48 2f       	mov	r20, r24
    10bc:	8b 81       	ldd	r24, Y+3	; 0x03
    10be:	28 2f       	mov	r18, r24
    10c0:	30 e0       	ldi	r19, 0x00	; 0
    10c2:	81 e0       	ldi	r24, 0x01	; 1
    10c4:	90 e0       	ldi	r25, 0x00	; 0
    10c6:	02 2e       	mov	r0, r18
    10c8:	02 c0       	rjmp	.+4      	; 0x10ce <DIO_U8SetPinDirection+0x1e4>
    10ca:	88 0f       	add	r24, r24
    10cc:	99 1f       	adc	r25, r25
    10ce:	0a 94       	dec	r0
    10d0:	e2 f7       	brpl	.-8      	; 0x10ca <DIO_U8SetPinDirection+0x1e0>
    10d2:	80 95       	com	r24
    10d4:	84 23       	and	r24, r20
    10d6:	8c 93       	st	X, r24
    10d8:	17 c0       	rjmp	.+46     	; 0x1108 <DIO_U8SetPinDirection+0x21e>
				case DIO_PORTD: CLR_BIT(DDRD,Copy_U8PinNumb);break;
    10da:	a1 e3       	ldi	r26, 0x31	; 49
    10dc:	b0 e0       	ldi	r27, 0x00	; 0
    10de:	e1 e3       	ldi	r30, 0x31	; 49
    10e0:	f0 e0       	ldi	r31, 0x00	; 0
    10e2:	80 81       	ld	r24, Z
    10e4:	48 2f       	mov	r20, r24
    10e6:	8b 81       	ldd	r24, Y+3	; 0x03
    10e8:	28 2f       	mov	r18, r24
    10ea:	30 e0       	ldi	r19, 0x00	; 0
    10ec:	81 e0       	ldi	r24, 0x01	; 1
    10ee:	90 e0       	ldi	r25, 0x00	; 0
    10f0:	02 2e       	mov	r0, r18
    10f2:	02 c0       	rjmp	.+4      	; 0x10f8 <DIO_U8SetPinDirection+0x20e>
    10f4:	88 0f       	add	r24, r24
    10f6:	99 1f       	adc	r25, r25
    10f8:	0a 94       	dec	r0
    10fa:	e2 f7       	brpl	.-8      	; 0x10f4 <DIO_U8SetPinDirection+0x20a>
    10fc:	80 95       	com	r24
    10fe:	84 23       	and	r24, r20
    1100:	8c 93       	st	X, r24
    1102:	02 c0       	rjmp	.+4      	; 0x1108 <DIO_U8SetPinDirection+0x21e>
			
		}
	}
	else
	{
		 Local_U8ErrorState=ERROR_STATE_OK;
    1104:	81 e0       	ldi	r24, 0x01	; 1
    1106:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_U8ErrorState;
    1108:	89 81       	ldd	r24, Y+1	; 0x01
}
    110a:	2a 96       	adiw	r28, 0x0a	; 10
    110c:	0f b6       	in	r0, 0x3f	; 63
    110e:	f8 94       	cli
    1110:	de bf       	out	0x3e, r29	; 62
    1112:	0f be       	out	0x3f, r0	; 63
    1114:	cd bf       	out	0x3d, r28	; 61
    1116:	cf 91       	pop	r28
    1118:	df 91       	pop	r29
    111a:	08 95       	ret

0000111c <DIO_U8SetPinValue>:

u8 DIO_U8SetPinValue(u8 Copy_U8PortNumb,u8 Copy_U8PinNumb,u8 Copy_U8Value)
{
    111c:	df 93       	push	r29
    111e:	cf 93       	push	r28
    1120:	cd b7       	in	r28, 0x3d	; 61
    1122:	de b7       	in	r29, 0x3e	; 62
    1124:	2a 97       	sbiw	r28, 0x0a	; 10
    1126:	0f b6       	in	r0, 0x3f	; 63
    1128:	f8 94       	cli
    112a:	de bf       	out	0x3e, r29	; 62
    112c:	0f be       	out	0x3f, r0	; 63
    112e:	cd bf       	out	0x3d, r28	; 61
    1130:	8a 83       	std	Y+2, r24	; 0x02
    1132:	6b 83       	std	Y+3, r22	; 0x03
    1134:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_U8ErrorState=ERROR_STATE_NOK;
    1136:	19 82       	std	Y+1, r1	; 0x01
	if((Copy_U8PortNumb <= DIO_PORTD) && (Copy_U8PinNumb <= DIO_PIN7) &&(Copy_U8Value <= DIO_HIGH))
    1138:	8a 81       	ldd	r24, Y+2	; 0x02
    113a:	84 30       	cpi	r24, 0x04	; 4
    113c:	08 f0       	brcs	.+2      	; 0x1140 <DIO_U8SetPinValue+0x24>
    113e:	fe c0       	rjmp	.+508    	; 0x133c <DIO_U8SetPinValue+0x220>
    1140:	8b 81       	ldd	r24, Y+3	; 0x03
    1142:	88 30       	cpi	r24, 0x08	; 8
    1144:	08 f0       	brcs	.+2      	; 0x1148 <DIO_U8SetPinValue+0x2c>
    1146:	fa c0       	rjmp	.+500    	; 0x133c <DIO_U8SetPinValue+0x220>
    1148:	8c 81       	ldd	r24, Y+4	; 0x04
    114a:	82 30       	cpi	r24, 0x02	; 2
    114c:	08 f0       	brcs	.+2      	; 0x1150 <DIO_U8SetPinValue+0x34>
    114e:	f6 c0       	rjmp	.+492    	; 0x133c <DIO_U8SetPinValue+0x220>
	{
		switch(Copy_U8Value)
    1150:	8c 81       	ldd	r24, Y+4	; 0x04
    1152:	28 2f       	mov	r18, r24
    1154:	30 e0       	ldi	r19, 0x00	; 0
    1156:	3a 87       	std	Y+10, r19	; 0x0a
    1158:	29 87       	std	Y+9, r18	; 0x09
    115a:	89 85       	ldd	r24, Y+9	; 0x09
    115c:	9a 85       	ldd	r25, Y+10	; 0x0a
    115e:	00 97       	sbiw	r24, 0x00	; 0
    1160:	09 f4       	brne	.+2      	; 0x1164 <DIO_U8SetPinValue+0x48>
    1162:	75 c0       	rjmp	.+234    	; 0x124e <DIO_U8SetPinValue+0x132>
    1164:	29 85       	ldd	r18, Y+9	; 0x09
    1166:	3a 85       	ldd	r19, Y+10	; 0x0a
    1168:	21 30       	cpi	r18, 0x01	; 1
    116a:	31 05       	cpc	r19, r1
    116c:	09 f0       	breq	.+2      	; 0x1170 <DIO_U8SetPinValue+0x54>
    116e:	e3 c0       	rjmp	.+454    	; 0x1336 <DIO_U8SetPinValue+0x21a>
		{
			case DIO_HIGH:
			switch(Copy_U8PortNumb)
    1170:	8a 81       	ldd	r24, Y+2	; 0x02
    1172:	28 2f       	mov	r18, r24
    1174:	30 e0       	ldi	r19, 0x00	; 0
    1176:	38 87       	std	Y+8, r19	; 0x08
    1178:	2f 83       	std	Y+7, r18	; 0x07
    117a:	8f 81       	ldd	r24, Y+7	; 0x07
    117c:	98 85       	ldd	r25, Y+8	; 0x08
    117e:	81 30       	cpi	r24, 0x01	; 1
    1180:	91 05       	cpc	r25, r1
    1182:	49 f1       	breq	.+82     	; 0x11d6 <DIO_U8SetPinValue+0xba>
    1184:	2f 81       	ldd	r18, Y+7	; 0x07
    1186:	38 85       	ldd	r19, Y+8	; 0x08
    1188:	22 30       	cpi	r18, 0x02	; 2
    118a:	31 05       	cpc	r19, r1
    118c:	2c f4       	brge	.+10     	; 0x1198 <DIO_U8SetPinValue+0x7c>
    118e:	8f 81       	ldd	r24, Y+7	; 0x07
    1190:	98 85       	ldd	r25, Y+8	; 0x08
    1192:	00 97       	sbiw	r24, 0x00	; 0
    1194:	61 f0       	breq	.+24     	; 0x11ae <DIO_U8SetPinValue+0x92>
    1196:	d4 c0       	rjmp	.+424    	; 0x1340 <DIO_U8SetPinValue+0x224>
    1198:	2f 81       	ldd	r18, Y+7	; 0x07
    119a:	38 85       	ldd	r19, Y+8	; 0x08
    119c:	22 30       	cpi	r18, 0x02	; 2
    119e:	31 05       	cpc	r19, r1
    11a0:	71 f1       	breq	.+92     	; 0x11fe <DIO_U8SetPinValue+0xe2>
    11a2:	8f 81       	ldd	r24, Y+7	; 0x07
    11a4:	98 85       	ldd	r25, Y+8	; 0x08
    11a6:	83 30       	cpi	r24, 0x03	; 3
    11a8:	91 05       	cpc	r25, r1
    11aa:	e9 f1       	breq	.+122    	; 0x1226 <DIO_U8SetPinValue+0x10a>
    11ac:	c9 c0       	rjmp	.+402    	; 0x1340 <DIO_U8SetPinValue+0x224>
			{
				case DIO_PORTA: SET_BIT(PORTA,Copy_U8PinNumb);break;
    11ae:	ab e3       	ldi	r26, 0x3B	; 59
    11b0:	b0 e0       	ldi	r27, 0x00	; 0
    11b2:	eb e3       	ldi	r30, 0x3B	; 59
    11b4:	f0 e0       	ldi	r31, 0x00	; 0
    11b6:	80 81       	ld	r24, Z
    11b8:	48 2f       	mov	r20, r24
    11ba:	8b 81       	ldd	r24, Y+3	; 0x03
    11bc:	28 2f       	mov	r18, r24
    11be:	30 e0       	ldi	r19, 0x00	; 0
    11c0:	81 e0       	ldi	r24, 0x01	; 1
    11c2:	90 e0       	ldi	r25, 0x00	; 0
    11c4:	02 2e       	mov	r0, r18
    11c6:	02 c0       	rjmp	.+4      	; 0x11cc <DIO_U8SetPinValue+0xb0>
    11c8:	88 0f       	add	r24, r24
    11ca:	99 1f       	adc	r25, r25
    11cc:	0a 94       	dec	r0
    11ce:	e2 f7       	brpl	.-8      	; 0x11c8 <DIO_U8SetPinValue+0xac>
    11d0:	84 2b       	or	r24, r20
    11d2:	8c 93       	st	X, r24
    11d4:	b5 c0       	rjmp	.+362    	; 0x1340 <DIO_U8SetPinValue+0x224>
				case DIO_PORTB: SET_BIT(PORTB,Copy_U8PinNumb);break;
    11d6:	a8 e3       	ldi	r26, 0x38	; 56
    11d8:	b0 e0       	ldi	r27, 0x00	; 0
    11da:	e8 e3       	ldi	r30, 0x38	; 56
    11dc:	f0 e0       	ldi	r31, 0x00	; 0
    11de:	80 81       	ld	r24, Z
    11e0:	48 2f       	mov	r20, r24
    11e2:	8b 81       	ldd	r24, Y+3	; 0x03
    11e4:	28 2f       	mov	r18, r24
    11e6:	30 e0       	ldi	r19, 0x00	; 0
    11e8:	81 e0       	ldi	r24, 0x01	; 1
    11ea:	90 e0       	ldi	r25, 0x00	; 0
    11ec:	02 2e       	mov	r0, r18
    11ee:	02 c0       	rjmp	.+4      	; 0x11f4 <DIO_U8SetPinValue+0xd8>
    11f0:	88 0f       	add	r24, r24
    11f2:	99 1f       	adc	r25, r25
    11f4:	0a 94       	dec	r0
    11f6:	e2 f7       	brpl	.-8      	; 0x11f0 <DIO_U8SetPinValue+0xd4>
    11f8:	84 2b       	or	r24, r20
    11fa:	8c 93       	st	X, r24
    11fc:	a1 c0       	rjmp	.+322    	; 0x1340 <DIO_U8SetPinValue+0x224>
				case DIO_PORTC: SET_BIT(PORTC,Copy_U8PinNumb);break;
    11fe:	a5 e3       	ldi	r26, 0x35	; 53
    1200:	b0 e0       	ldi	r27, 0x00	; 0
    1202:	e5 e3       	ldi	r30, 0x35	; 53
    1204:	f0 e0       	ldi	r31, 0x00	; 0
    1206:	80 81       	ld	r24, Z
    1208:	48 2f       	mov	r20, r24
    120a:	8b 81       	ldd	r24, Y+3	; 0x03
    120c:	28 2f       	mov	r18, r24
    120e:	30 e0       	ldi	r19, 0x00	; 0
    1210:	81 e0       	ldi	r24, 0x01	; 1
    1212:	90 e0       	ldi	r25, 0x00	; 0
    1214:	02 2e       	mov	r0, r18
    1216:	02 c0       	rjmp	.+4      	; 0x121c <DIO_U8SetPinValue+0x100>
    1218:	88 0f       	add	r24, r24
    121a:	99 1f       	adc	r25, r25
    121c:	0a 94       	dec	r0
    121e:	e2 f7       	brpl	.-8      	; 0x1218 <DIO_U8SetPinValue+0xfc>
    1220:	84 2b       	or	r24, r20
    1222:	8c 93       	st	X, r24
    1224:	8d c0       	rjmp	.+282    	; 0x1340 <DIO_U8SetPinValue+0x224>
				case DIO_PORTD: SET_BIT(PORTD,Copy_U8PinNumb);break;
    1226:	a2 e3       	ldi	r26, 0x32	; 50
    1228:	b0 e0       	ldi	r27, 0x00	; 0
    122a:	e2 e3       	ldi	r30, 0x32	; 50
    122c:	f0 e0       	ldi	r31, 0x00	; 0
    122e:	80 81       	ld	r24, Z
    1230:	48 2f       	mov	r20, r24
    1232:	8b 81       	ldd	r24, Y+3	; 0x03
    1234:	28 2f       	mov	r18, r24
    1236:	30 e0       	ldi	r19, 0x00	; 0
    1238:	81 e0       	ldi	r24, 0x01	; 1
    123a:	90 e0       	ldi	r25, 0x00	; 0
    123c:	02 2e       	mov	r0, r18
    123e:	02 c0       	rjmp	.+4      	; 0x1244 <DIO_U8SetPinValue+0x128>
    1240:	88 0f       	add	r24, r24
    1242:	99 1f       	adc	r25, r25
    1244:	0a 94       	dec	r0
    1246:	e2 f7       	brpl	.-8      	; 0x1240 <DIO_U8SetPinValue+0x124>
    1248:	84 2b       	or	r24, r20
    124a:	8c 93       	st	X, r24
    124c:	79 c0       	rjmp	.+242    	; 0x1340 <DIO_U8SetPinValue+0x224>
			}
			break;
			case DIO_LOW:
			switch(Copy_U8PortNumb)
    124e:	8a 81       	ldd	r24, Y+2	; 0x02
    1250:	28 2f       	mov	r18, r24
    1252:	30 e0       	ldi	r19, 0x00	; 0
    1254:	3e 83       	std	Y+6, r19	; 0x06
    1256:	2d 83       	std	Y+5, r18	; 0x05
    1258:	8d 81       	ldd	r24, Y+5	; 0x05
    125a:	9e 81       	ldd	r25, Y+6	; 0x06
    125c:	81 30       	cpi	r24, 0x01	; 1
    125e:	91 05       	cpc	r25, r1
    1260:	59 f1       	breq	.+86     	; 0x12b8 <DIO_U8SetPinValue+0x19c>
    1262:	2d 81       	ldd	r18, Y+5	; 0x05
    1264:	3e 81       	ldd	r19, Y+6	; 0x06
    1266:	22 30       	cpi	r18, 0x02	; 2
    1268:	31 05       	cpc	r19, r1
    126a:	2c f4       	brge	.+10     	; 0x1276 <DIO_U8SetPinValue+0x15a>
    126c:	8d 81       	ldd	r24, Y+5	; 0x05
    126e:	9e 81       	ldd	r25, Y+6	; 0x06
    1270:	00 97       	sbiw	r24, 0x00	; 0
    1272:	69 f0       	breq	.+26     	; 0x128e <DIO_U8SetPinValue+0x172>
    1274:	65 c0       	rjmp	.+202    	; 0x1340 <DIO_U8SetPinValue+0x224>
    1276:	2d 81       	ldd	r18, Y+5	; 0x05
    1278:	3e 81       	ldd	r19, Y+6	; 0x06
    127a:	22 30       	cpi	r18, 0x02	; 2
    127c:	31 05       	cpc	r19, r1
    127e:	89 f1       	breq	.+98     	; 0x12e2 <DIO_U8SetPinValue+0x1c6>
    1280:	8d 81       	ldd	r24, Y+5	; 0x05
    1282:	9e 81       	ldd	r25, Y+6	; 0x06
    1284:	83 30       	cpi	r24, 0x03	; 3
    1286:	91 05       	cpc	r25, r1
    1288:	09 f4       	brne	.+2      	; 0x128c <DIO_U8SetPinValue+0x170>
    128a:	40 c0       	rjmp	.+128    	; 0x130c <DIO_U8SetPinValue+0x1f0>
    128c:	59 c0       	rjmp	.+178    	; 0x1340 <DIO_U8SetPinValue+0x224>
			{
				case DIO_PORTA: CLR_BIT(PORTA,Copy_U8PinNumb);break;
    128e:	ab e3       	ldi	r26, 0x3B	; 59
    1290:	b0 e0       	ldi	r27, 0x00	; 0
    1292:	eb e3       	ldi	r30, 0x3B	; 59
    1294:	f0 e0       	ldi	r31, 0x00	; 0
    1296:	80 81       	ld	r24, Z
    1298:	48 2f       	mov	r20, r24
    129a:	8b 81       	ldd	r24, Y+3	; 0x03
    129c:	28 2f       	mov	r18, r24
    129e:	30 e0       	ldi	r19, 0x00	; 0
    12a0:	81 e0       	ldi	r24, 0x01	; 1
    12a2:	90 e0       	ldi	r25, 0x00	; 0
    12a4:	02 2e       	mov	r0, r18
    12a6:	02 c0       	rjmp	.+4      	; 0x12ac <DIO_U8SetPinValue+0x190>
    12a8:	88 0f       	add	r24, r24
    12aa:	99 1f       	adc	r25, r25
    12ac:	0a 94       	dec	r0
    12ae:	e2 f7       	brpl	.-8      	; 0x12a8 <DIO_U8SetPinValue+0x18c>
    12b0:	80 95       	com	r24
    12b2:	84 23       	and	r24, r20
    12b4:	8c 93       	st	X, r24
    12b6:	44 c0       	rjmp	.+136    	; 0x1340 <DIO_U8SetPinValue+0x224>
				case DIO_PORTB: CLR_BIT(PORTB,Copy_U8PinNumb);break;
    12b8:	a8 e3       	ldi	r26, 0x38	; 56
    12ba:	b0 e0       	ldi	r27, 0x00	; 0
    12bc:	e8 e3       	ldi	r30, 0x38	; 56
    12be:	f0 e0       	ldi	r31, 0x00	; 0
    12c0:	80 81       	ld	r24, Z
    12c2:	48 2f       	mov	r20, r24
    12c4:	8b 81       	ldd	r24, Y+3	; 0x03
    12c6:	28 2f       	mov	r18, r24
    12c8:	30 e0       	ldi	r19, 0x00	; 0
    12ca:	81 e0       	ldi	r24, 0x01	; 1
    12cc:	90 e0       	ldi	r25, 0x00	; 0
    12ce:	02 2e       	mov	r0, r18
    12d0:	02 c0       	rjmp	.+4      	; 0x12d6 <DIO_U8SetPinValue+0x1ba>
    12d2:	88 0f       	add	r24, r24
    12d4:	99 1f       	adc	r25, r25
    12d6:	0a 94       	dec	r0
    12d8:	e2 f7       	brpl	.-8      	; 0x12d2 <DIO_U8SetPinValue+0x1b6>
    12da:	80 95       	com	r24
    12dc:	84 23       	and	r24, r20
    12de:	8c 93       	st	X, r24
    12e0:	2f c0       	rjmp	.+94     	; 0x1340 <DIO_U8SetPinValue+0x224>
				case DIO_PORTC: CLR_BIT(PORTC,Copy_U8PinNumb);break;
    12e2:	a5 e3       	ldi	r26, 0x35	; 53
    12e4:	b0 e0       	ldi	r27, 0x00	; 0
    12e6:	e5 e3       	ldi	r30, 0x35	; 53
    12e8:	f0 e0       	ldi	r31, 0x00	; 0
    12ea:	80 81       	ld	r24, Z
    12ec:	48 2f       	mov	r20, r24
    12ee:	8b 81       	ldd	r24, Y+3	; 0x03
    12f0:	28 2f       	mov	r18, r24
    12f2:	30 e0       	ldi	r19, 0x00	; 0
    12f4:	81 e0       	ldi	r24, 0x01	; 1
    12f6:	90 e0       	ldi	r25, 0x00	; 0
    12f8:	02 2e       	mov	r0, r18
    12fa:	02 c0       	rjmp	.+4      	; 0x1300 <DIO_U8SetPinValue+0x1e4>
    12fc:	88 0f       	add	r24, r24
    12fe:	99 1f       	adc	r25, r25
    1300:	0a 94       	dec	r0
    1302:	e2 f7       	brpl	.-8      	; 0x12fc <DIO_U8SetPinValue+0x1e0>
    1304:	80 95       	com	r24
    1306:	84 23       	and	r24, r20
    1308:	8c 93       	st	X, r24
    130a:	1a c0       	rjmp	.+52     	; 0x1340 <DIO_U8SetPinValue+0x224>
				case DIO_PORTD: CLR_BIT(PORTD,Copy_U8PinNumb);break;
    130c:	a2 e3       	ldi	r26, 0x32	; 50
    130e:	b0 e0       	ldi	r27, 0x00	; 0
    1310:	e2 e3       	ldi	r30, 0x32	; 50
    1312:	f0 e0       	ldi	r31, 0x00	; 0
    1314:	80 81       	ld	r24, Z
    1316:	48 2f       	mov	r20, r24
    1318:	8b 81       	ldd	r24, Y+3	; 0x03
    131a:	28 2f       	mov	r18, r24
    131c:	30 e0       	ldi	r19, 0x00	; 0
    131e:	81 e0       	ldi	r24, 0x01	; 1
    1320:	90 e0       	ldi	r25, 0x00	; 0
    1322:	02 2e       	mov	r0, r18
    1324:	02 c0       	rjmp	.+4      	; 0x132a <DIO_U8SetPinValue+0x20e>
    1326:	88 0f       	add	r24, r24
    1328:	99 1f       	adc	r25, r25
    132a:	0a 94       	dec	r0
    132c:	e2 f7       	brpl	.-8      	; 0x1326 <DIO_U8SetPinValue+0x20a>
    132e:	80 95       	com	r24
    1330:	84 23       	and	r24, r20
    1332:	8c 93       	st	X, r24
    1334:	05 c0       	rjmp	.+10     	; 0x1340 <DIO_U8SetPinValue+0x224>
			}
			break;
			default:
			Local_U8ErrorState=ERROR_STATE_OK;
    1336:	81 e0       	ldi	r24, 0x01	; 1
    1338:	89 83       	std	Y+1, r24	; 0x01
    133a:	02 c0       	rjmp	.+4      	; 0x1340 <DIO_U8SetPinValue+0x224>
			break;	
		}
	}
	else
	{
		 Local_U8ErrorState=ERROR_STATE_OK;
    133c:	81 e0       	ldi	r24, 0x01	; 1
    133e:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_U8ErrorState;
    1340:	89 81       	ldd	r24, Y+1	; 0x01
}
    1342:	2a 96       	adiw	r28, 0x0a	; 10
    1344:	0f b6       	in	r0, 0x3f	; 63
    1346:	f8 94       	cli
    1348:	de bf       	out	0x3e, r29	; 62
    134a:	0f be       	out	0x3f, r0	; 63
    134c:	cd bf       	out	0x3d, r28	; 61
    134e:	cf 91       	pop	r28
    1350:	df 91       	pop	r29
    1352:	08 95       	ret

00001354 <DIO_U8GetPinValue>:

u8 DIO_U8GetPinValue(u8 Copy_U8PortNumb,u8 Copy_U8PinNumb,u8 *Copy_U8Value)
{
    1354:	df 93       	push	r29
    1356:	cf 93       	push	r28
    1358:	cd b7       	in	r28, 0x3d	; 61
    135a:	de b7       	in	r29, 0x3e	; 62
    135c:	27 97       	sbiw	r28, 0x07	; 7
    135e:	0f b6       	in	r0, 0x3f	; 63
    1360:	f8 94       	cli
    1362:	de bf       	out	0x3e, r29	; 62
    1364:	0f be       	out	0x3f, r0	; 63
    1366:	cd bf       	out	0x3d, r28	; 61
    1368:	8a 83       	std	Y+2, r24	; 0x02
    136a:	6b 83       	std	Y+3, r22	; 0x03
    136c:	5d 83       	std	Y+5, r21	; 0x05
    136e:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_U8ErrorState=ERROR_STATE_NOK;
    1370:	19 82       	std	Y+1, r1	; 0x01
	if((Copy_U8PortNumb <= DIO_PORTD) && (Copy_U8PinNumb <= DIO_PIN7))
    1372:	8a 81       	ldd	r24, Y+2	; 0x02
    1374:	84 30       	cpi	r24, 0x04	; 4
    1376:	08 f0       	brcs	.+2      	; 0x137a <DIO_U8GetPinValue+0x26>
    1378:	78 c0       	rjmp	.+240    	; 0x146a <DIO_U8GetPinValue+0x116>
    137a:	8b 81       	ldd	r24, Y+3	; 0x03
    137c:	88 30       	cpi	r24, 0x08	; 8
    137e:	08 f0       	brcs	.+2      	; 0x1382 <DIO_U8GetPinValue+0x2e>
    1380:	74 c0       	rjmp	.+232    	; 0x146a <DIO_U8GetPinValue+0x116>
	{
		switch(Copy_U8PortNumb)
    1382:	8a 81       	ldd	r24, Y+2	; 0x02
    1384:	28 2f       	mov	r18, r24
    1386:	30 e0       	ldi	r19, 0x00	; 0
    1388:	3f 83       	std	Y+7, r19	; 0x07
    138a:	2e 83       	std	Y+6, r18	; 0x06
    138c:	4e 81       	ldd	r20, Y+6	; 0x06
    138e:	5f 81       	ldd	r21, Y+7	; 0x07
    1390:	41 30       	cpi	r20, 0x01	; 1
    1392:	51 05       	cpc	r21, r1
    1394:	59 f1       	breq	.+86     	; 0x13ec <DIO_U8GetPinValue+0x98>
    1396:	8e 81       	ldd	r24, Y+6	; 0x06
    1398:	9f 81       	ldd	r25, Y+7	; 0x07
    139a:	82 30       	cpi	r24, 0x02	; 2
    139c:	91 05       	cpc	r25, r1
    139e:	34 f4       	brge	.+12     	; 0x13ac <DIO_U8GetPinValue+0x58>
    13a0:	2e 81       	ldd	r18, Y+6	; 0x06
    13a2:	3f 81       	ldd	r19, Y+7	; 0x07
    13a4:	21 15       	cp	r18, r1
    13a6:	31 05       	cpc	r19, r1
    13a8:	69 f0       	breq	.+26     	; 0x13c4 <DIO_U8GetPinValue+0x70>
    13aa:	5c c0       	rjmp	.+184    	; 0x1464 <DIO_U8GetPinValue+0x110>
    13ac:	4e 81       	ldd	r20, Y+6	; 0x06
    13ae:	5f 81       	ldd	r21, Y+7	; 0x07
    13b0:	42 30       	cpi	r20, 0x02	; 2
    13b2:	51 05       	cpc	r21, r1
    13b4:	79 f1       	breq	.+94     	; 0x1414 <DIO_U8GetPinValue+0xc0>
    13b6:	8e 81       	ldd	r24, Y+6	; 0x06
    13b8:	9f 81       	ldd	r25, Y+7	; 0x07
    13ba:	83 30       	cpi	r24, 0x03	; 3
    13bc:	91 05       	cpc	r25, r1
    13be:	09 f4       	brne	.+2      	; 0x13c2 <DIO_U8GetPinValue+0x6e>
    13c0:	3d c0       	rjmp	.+122    	; 0x143c <DIO_U8GetPinValue+0xe8>
    13c2:	50 c0       	rjmp	.+160    	; 0x1464 <DIO_U8GetPinValue+0x110>
		{	
			case DIO_PORTA: *Copy_U8Value = GET_BIT(PINA,Copy_U8PinNumb); break;
    13c4:	e9 e3       	ldi	r30, 0x39	; 57
    13c6:	f0 e0       	ldi	r31, 0x00	; 0
    13c8:	80 81       	ld	r24, Z
    13ca:	28 2f       	mov	r18, r24
    13cc:	30 e0       	ldi	r19, 0x00	; 0
    13ce:	8b 81       	ldd	r24, Y+3	; 0x03
    13d0:	88 2f       	mov	r24, r24
    13d2:	90 e0       	ldi	r25, 0x00	; 0
    13d4:	a9 01       	movw	r20, r18
    13d6:	02 c0       	rjmp	.+4      	; 0x13dc <DIO_U8GetPinValue+0x88>
    13d8:	55 95       	asr	r21
    13da:	47 95       	ror	r20
    13dc:	8a 95       	dec	r24
    13de:	e2 f7       	brpl	.-8      	; 0x13d8 <DIO_U8GetPinValue+0x84>
    13e0:	ca 01       	movw	r24, r20
    13e2:	81 70       	andi	r24, 0x01	; 1
    13e4:	ec 81       	ldd	r30, Y+4	; 0x04
    13e6:	fd 81       	ldd	r31, Y+5	; 0x05
    13e8:	80 83       	st	Z, r24
    13ea:	41 c0       	rjmp	.+130    	; 0x146e <DIO_U8GetPinValue+0x11a>
			case DIO_PORTB: *Copy_U8Value = GET_BIT(PINB,Copy_U8PinNumb); break;
    13ec:	e6 e3       	ldi	r30, 0x36	; 54
    13ee:	f0 e0       	ldi	r31, 0x00	; 0
    13f0:	80 81       	ld	r24, Z
    13f2:	28 2f       	mov	r18, r24
    13f4:	30 e0       	ldi	r19, 0x00	; 0
    13f6:	8b 81       	ldd	r24, Y+3	; 0x03
    13f8:	88 2f       	mov	r24, r24
    13fa:	90 e0       	ldi	r25, 0x00	; 0
    13fc:	a9 01       	movw	r20, r18
    13fe:	02 c0       	rjmp	.+4      	; 0x1404 <DIO_U8GetPinValue+0xb0>
    1400:	55 95       	asr	r21
    1402:	47 95       	ror	r20
    1404:	8a 95       	dec	r24
    1406:	e2 f7       	brpl	.-8      	; 0x1400 <DIO_U8GetPinValue+0xac>
    1408:	ca 01       	movw	r24, r20
    140a:	81 70       	andi	r24, 0x01	; 1
    140c:	ec 81       	ldd	r30, Y+4	; 0x04
    140e:	fd 81       	ldd	r31, Y+5	; 0x05
    1410:	80 83       	st	Z, r24
    1412:	2d c0       	rjmp	.+90     	; 0x146e <DIO_U8GetPinValue+0x11a>
			case DIO_PORTC:	*Copy_U8Value = GET_BIT(PINC,Copy_U8PinNumb); break;
    1414:	e3 e3       	ldi	r30, 0x33	; 51
    1416:	f0 e0       	ldi	r31, 0x00	; 0
    1418:	80 81       	ld	r24, Z
    141a:	28 2f       	mov	r18, r24
    141c:	30 e0       	ldi	r19, 0x00	; 0
    141e:	8b 81       	ldd	r24, Y+3	; 0x03
    1420:	88 2f       	mov	r24, r24
    1422:	90 e0       	ldi	r25, 0x00	; 0
    1424:	a9 01       	movw	r20, r18
    1426:	02 c0       	rjmp	.+4      	; 0x142c <DIO_U8GetPinValue+0xd8>
    1428:	55 95       	asr	r21
    142a:	47 95       	ror	r20
    142c:	8a 95       	dec	r24
    142e:	e2 f7       	brpl	.-8      	; 0x1428 <DIO_U8GetPinValue+0xd4>
    1430:	ca 01       	movw	r24, r20
    1432:	81 70       	andi	r24, 0x01	; 1
    1434:	ec 81       	ldd	r30, Y+4	; 0x04
    1436:	fd 81       	ldd	r31, Y+5	; 0x05
    1438:	80 83       	st	Z, r24
    143a:	19 c0       	rjmp	.+50     	; 0x146e <DIO_U8GetPinValue+0x11a>
			case DIO_PORTD: *Copy_U8Value = GET_BIT(PIND,Copy_U8PinNumb); break;
    143c:	e0 e3       	ldi	r30, 0x30	; 48
    143e:	f0 e0       	ldi	r31, 0x00	; 0
    1440:	80 81       	ld	r24, Z
    1442:	28 2f       	mov	r18, r24
    1444:	30 e0       	ldi	r19, 0x00	; 0
    1446:	8b 81       	ldd	r24, Y+3	; 0x03
    1448:	88 2f       	mov	r24, r24
    144a:	90 e0       	ldi	r25, 0x00	; 0
    144c:	a9 01       	movw	r20, r18
    144e:	02 c0       	rjmp	.+4      	; 0x1454 <DIO_U8GetPinValue+0x100>
    1450:	55 95       	asr	r21
    1452:	47 95       	ror	r20
    1454:	8a 95       	dec	r24
    1456:	e2 f7       	brpl	.-8      	; 0x1450 <DIO_U8GetPinValue+0xfc>
    1458:	ca 01       	movw	r24, r20
    145a:	81 70       	andi	r24, 0x01	; 1
    145c:	ec 81       	ldd	r30, Y+4	; 0x04
    145e:	fd 81       	ldd	r31, Y+5	; 0x05
    1460:	80 83       	st	Z, r24
    1462:	05 c0       	rjmp	.+10     	; 0x146e <DIO_U8GetPinValue+0x11a>
			default:
			Local_U8ErrorState=ERROR_STATE_OK;
    1464:	81 e0       	ldi	r24, 0x01	; 1
    1466:	89 83       	std	Y+1, r24	; 0x01
    1468:	02 c0       	rjmp	.+4      	; 0x146e <DIO_U8GetPinValue+0x11a>
			break;
		}
	}
	else
	{
		 Local_U8ErrorState=ERROR_STATE_OK;
    146a:	81 e0       	ldi	r24, 0x01	; 1
    146c:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_U8ErrorState;
    146e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1470:	27 96       	adiw	r28, 0x07	; 7
    1472:	0f b6       	in	r0, 0x3f	; 63
    1474:	f8 94       	cli
    1476:	de bf       	out	0x3e, r29	; 62
    1478:	0f be       	out	0x3f, r0	; 63
    147a:	cd bf       	out	0x3d, r28	; 61
    147c:	cf 91       	pop	r28
    147e:	df 91       	pop	r29
    1480:	08 95       	ret

00001482 <DIO_U8TogglePin>:

u8 DIO_U8TogglePin(u8 Copy_U8PortNumb,u8 Copy_U8PinNumb)
{
    1482:	df 93       	push	r29
    1484:	cf 93       	push	r28
    1486:	00 d0       	rcall	.+0      	; 0x1488 <DIO_U8TogglePin+0x6>
    1488:	00 d0       	rcall	.+0      	; 0x148a <DIO_U8TogglePin+0x8>
    148a:	0f 92       	push	r0
    148c:	cd b7       	in	r28, 0x3d	; 61
    148e:	de b7       	in	r29, 0x3e	; 62
    1490:	8a 83       	std	Y+2, r24	; 0x02
    1492:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_U8ErrorState=ERROR_STATE_NOK;
    1494:	19 82       	std	Y+1, r1	; 0x01
	if((Copy_U8PortNumb <= DIO_PORTD) && (Copy_U8PinNumb <= DIO_PIN7))
    1496:	8a 81       	ldd	r24, Y+2	; 0x02
    1498:	84 30       	cpi	r24, 0x04	; 4
    149a:	08 f0       	brcs	.+2      	; 0x149e <DIO_U8TogglePin+0x1c>
    149c:	76 c0       	rjmp	.+236    	; 0x158a <DIO_U8TogglePin+0x108>
    149e:	8b 81       	ldd	r24, Y+3	; 0x03
    14a0:	88 30       	cpi	r24, 0x08	; 8
    14a2:	08 f0       	brcs	.+2      	; 0x14a6 <DIO_U8TogglePin+0x24>
    14a4:	72 c0       	rjmp	.+228    	; 0x158a <DIO_U8TogglePin+0x108>
	{
		switch(Copy_U8PortNumb)
    14a6:	8a 81       	ldd	r24, Y+2	; 0x02
    14a8:	28 2f       	mov	r18, r24
    14aa:	30 e0       	ldi	r19, 0x00	; 0
    14ac:	3d 83       	std	Y+5, r19	; 0x05
    14ae:	2c 83       	std	Y+4, r18	; 0x04
    14b0:	8c 81       	ldd	r24, Y+4	; 0x04
    14b2:	9d 81       	ldd	r25, Y+5	; 0x05
    14b4:	81 30       	cpi	r24, 0x01	; 1
    14b6:	91 05       	cpc	r25, r1
    14b8:	49 f1       	breq	.+82     	; 0x150c <DIO_U8TogglePin+0x8a>
    14ba:	2c 81       	ldd	r18, Y+4	; 0x04
    14bc:	3d 81       	ldd	r19, Y+5	; 0x05
    14be:	22 30       	cpi	r18, 0x02	; 2
    14c0:	31 05       	cpc	r19, r1
    14c2:	2c f4       	brge	.+10     	; 0x14ce <DIO_U8TogglePin+0x4c>
    14c4:	8c 81       	ldd	r24, Y+4	; 0x04
    14c6:	9d 81       	ldd	r25, Y+5	; 0x05
    14c8:	00 97       	sbiw	r24, 0x00	; 0
    14ca:	61 f0       	breq	.+24     	; 0x14e4 <DIO_U8TogglePin+0x62>
    14cc:	5b c0       	rjmp	.+182    	; 0x1584 <DIO_U8TogglePin+0x102>
    14ce:	2c 81       	ldd	r18, Y+4	; 0x04
    14d0:	3d 81       	ldd	r19, Y+5	; 0x05
    14d2:	22 30       	cpi	r18, 0x02	; 2
    14d4:	31 05       	cpc	r19, r1
    14d6:	71 f1       	breq	.+92     	; 0x1534 <DIO_U8TogglePin+0xb2>
    14d8:	8c 81       	ldd	r24, Y+4	; 0x04
    14da:	9d 81       	ldd	r25, Y+5	; 0x05
    14dc:	83 30       	cpi	r24, 0x03	; 3
    14de:	91 05       	cpc	r25, r1
    14e0:	e9 f1       	breq	.+122    	; 0x155c <DIO_U8TogglePin+0xda>
    14e2:	50 c0       	rjmp	.+160    	; 0x1584 <DIO_U8TogglePin+0x102>
		{	
			case DIO_PORTA: TOG_BIT(PORTA,Copy_U8PinNumb); break;
    14e4:	ab e3       	ldi	r26, 0x3B	; 59
    14e6:	b0 e0       	ldi	r27, 0x00	; 0
    14e8:	eb e3       	ldi	r30, 0x3B	; 59
    14ea:	f0 e0       	ldi	r31, 0x00	; 0
    14ec:	80 81       	ld	r24, Z
    14ee:	48 2f       	mov	r20, r24
    14f0:	8b 81       	ldd	r24, Y+3	; 0x03
    14f2:	28 2f       	mov	r18, r24
    14f4:	30 e0       	ldi	r19, 0x00	; 0
    14f6:	81 e0       	ldi	r24, 0x01	; 1
    14f8:	90 e0       	ldi	r25, 0x00	; 0
    14fa:	02 2e       	mov	r0, r18
    14fc:	02 c0       	rjmp	.+4      	; 0x1502 <DIO_U8TogglePin+0x80>
    14fe:	88 0f       	add	r24, r24
    1500:	99 1f       	adc	r25, r25
    1502:	0a 94       	dec	r0
    1504:	e2 f7       	brpl	.-8      	; 0x14fe <DIO_U8TogglePin+0x7c>
    1506:	84 27       	eor	r24, r20
    1508:	8c 93       	st	X, r24
    150a:	41 c0       	rjmp	.+130    	; 0x158e <DIO_U8TogglePin+0x10c>
			case DIO_PORTB: TOG_BIT(PORTB,Copy_U8PinNumb); break;
    150c:	a8 e3       	ldi	r26, 0x38	; 56
    150e:	b0 e0       	ldi	r27, 0x00	; 0
    1510:	e8 e3       	ldi	r30, 0x38	; 56
    1512:	f0 e0       	ldi	r31, 0x00	; 0
    1514:	80 81       	ld	r24, Z
    1516:	48 2f       	mov	r20, r24
    1518:	8b 81       	ldd	r24, Y+3	; 0x03
    151a:	28 2f       	mov	r18, r24
    151c:	30 e0       	ldi	r19, 0x00	; 0
    151e:	81 e0       	ldi	r24, 0x01	; 1
    1520:	90 e0       	ldi	r25, 0x00	; 0
    1522:	02 2e       	mov	r0, r18
    1524:	02 c0       	rjmp	.+4      	; 0x152a <DIO_U8TogglePin+0xa8>
    1526:	88 0f       	add	r24, r24
    1528:	99 1f       	adc	r25, r25
    152a:	0a 94       	dec	r0
    152c:	e2 f7       	brpl	.-8      	; 0x1526 <DIO_U8TogglePin+0xa4>
    152e:	84 27       	eor	r24, r20
    1530:	8c 93       	st	X, r24
    1532:	2d c0       	rjmp	.+90     	; 0x158e <DIO_U8TogglePin+0x10c>
			case DIO_PORTC: TOG_BIT(PORTC,Copy_U8PinNumb); break;
    1534:	a5 e3       	ldi	r26, 0x35	; 53
    1536:	b0 e0       	ldi	r27, 0x00	; 0
    1538:	e5 e3       	ldi	r30, 0x35	; 53
    153a:	f0 e0       	ldi	r31, 0x00	; 0
    153c:	80 81       	ld	r24, Z
    153e:	48 2f       	mov	r20, r24
    1540:	8b 81       	ldd	r24, Y+3	; 0x03
    1542:	28 2f       	mov	r18, r24
    1544:	30 e0       	ldi	r19, 0x00	; 0
    1546:	81 e0       	ldi	r24, 0x01	; 1
    1548:	90 e0       	ldi	r25, 0x00	; 0
    154a:	02 2e       	mov	r0, r18
    154c:	02 c0       	rjmp	.+4      	; 0x1552 <DIO_U8TogglePin+0xd0>
    154e:	88 0f       	add	r24, r24
    1550:	99 1f       	adc	r25, r25
    1552:	0a 94       	dec	r0
    1554:	e2 f7       	brpl	.-8      	; 0x154e <DIO_U8TogglePin+0xcc>
    1556:	84 27       	eor	r24, r20
    1558:	8c 93       	st	X, r24
    155a:	19 c0       	rjmp	.+50     	; 0x158e <DIO_U8TogglePin+0x10c>
			case DIO_PORTD: TOG_BIT(PORTD,Copy_U8PinNumb); break;
    155c:	a2 e3       	ldi	r26, 0x32	; 50
    155e:	b0 e0       	ldi	r27, 0x00	; 0
    1560:	e2 e3       	ldi	r30, 0x32	; 50
    1562:	f0 e0       	ldi	r31, 0x00	; 0
    1564:	80 81       	ld	r24, Z
    1566:	48 2f       	mov	r20, r24
    1568:	8b 81       	ldd	r24, Y+3	; 0x03
    156a:	28 2f       	mov	r18, r24
    156c:	30 e0       	ldi	r19, 0x00	; 0
    156e:	81 e0       	ldi	r24, 0x01	; 1
    1570:	90 e0       	ldi	r25, 0x00	; 0
    1572:	02 2e       	mov	r0, r18
    1574:	02 c0       	rjmp	.+4      	; 0x157a <DIO_U8TogglePin+0xf8>
    1576:	88 0f       	add	r24, r24
    1578:	99 1f       	adc	r25, r25
    157a:	0a 94       	dec	r0
    157c:	e2 f7       	brpl	.-8      	; 0x1576 <DIO_U8TogglePin+0xf4>
    157e:	84 27       	eor	r24, r20
    1580:	8c 93       	st	X, r24
    1582:	05 c0       	rjmp	.+10     	; 0x158e <DIO_U8TogglePin+0x10c>
			default:
			Local_U8ErrorState=ERROR_STATE_OK;
    1584:	81 e0       	ldi	r24, 0x01	; 1
    1586:	89 83       	std	Y+1, r24	; 0x01
    1588:	02 c0       	rjmp	.+4      	; 0x158e <DIO_U8TogglePin+0x10c>
			break;		
		}
	}
	else
	{
		 Local_U8ErrorState=ERROR_STATE_OK;
    158a:	81 e0       	ldi	r24, 0x01	; 1
    158c:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_U8ErrorState;
    158e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1590:	0f 90       	pop	r0
    1592:	0f 90       	pop	r0
    1594:	0f 90       	pop	r0
    1596:	0f 90       	pop	r0
    1598:	0f 90       	pop	r0
    159a:	cf 91       	pop	r28
    159c:	df 91       	pop	r29
    159e:	08 95       	ret

000015a0 <DIO_U8SetPortDirection>:

u8 DIO_U8SetPortDirection(u8 Copy_U8PortNumb,u8 Copy_U8Directon)
{
    15a0:	df 93       	push	r29
    15a2:	cf 93       	push	r28
    15a4:	cd b7       	in	r28, 0x3d	; 61
    15a6:	de b7       	in	r29, 0x3e	; 62
    15a8:	29 97       	sbiw	r28, 0x09	; 9
    15aa:	0f b6       	in	r0, 0x3f	; 63
    15ac:	f8 94       	cli
    15ae:	de bf       	out	0x3e, r29	; 62
    15b0:	0f be       	out	0x3f, r0	; 63
    15b2:	cd bf       	out	0x3d, r28	; 61
    15b4:	8a 83       	std	Y+2, r24	; 0x02
    15b6:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_U8ErrorState=ERROR_STATE_NOK;
    15b8:	19 82       	std	Y+1, r1	; 0x01
	if((Copy_U8PortNumb <= DIO_PORTD) && (Copy_U8Directon <=DIO_PORT_OUT))
    15ba:	8a 81       	ldd	r24, Y+2	; 0x02
    15bc:	84 30       	cpi	r24, 0x04	; 4
    15be:	08 f0       	brcs	.+2      	; 0x15c2 <DIO_U8SetPortDirection+0x22>
    15c0:	a4 c0       	rjmp	.+328    	; 0x170a <DIO_U8SetPortDirection+0x16a>
	{
		if(Copy_U8Directon == DIO_PORT_OUT)
    15c2:	8b 81       	ldd	r24, Y+3	; 0x03
    15c4:	8f 3f       	cpi	r24, 0xFF	; 255
    15c6:	b1 f5       	brne	.+108    	; 0x1634 <DIO_U8SetPortDirection+0x94>
		{
			switch(Copy_U8PortNumb)
    15c8:	8a 81       	ldd	r24, Y+2	; 0x02
    15ca:	28 2f       	mov	r18, r24
    15cc:	30 e0       	ldi	r19, 0x00	; 0
    15ce:	39 87       	std	Y+9, r19	; 0x09
    15d0:	28 87       	std	Y+8, r18	; 0x08
    15d2:	88 85       	ldd	r24, Y+8	; 0x08
    15d4:	99 85       	ldd	r25, Y+9	; 0x09
    15d6:	81 30       	cpi	r24, 0x01	; 1
    15d8:	91 05       	cpc	r25, r1
    15da:	d1 f0       	breq	.+52     	; 0x1610 <DIO_U8SetPortDirection+0x70>
    15dc:	28 85       	ldd	r18, Y+8	; 0x08
    15de:	39 85       	ldd	r19, Y+9	; 0x09
    15e0:	22 30       	cpi	r18, 0x02	; 2
    15e2:	31 05       	cpc	r19, r1
    15e4:	2c f4       	brge	.+10     	; 0x15f0 <DIO_U8SetPortDirection+0x50>
    15e6:	88 85       	ldd	r24, Y+8	; 0x08
    15e8:	99 85       	ldd	r25, Y+9	; 0x09
    15ea:	00 97       	sbiw	r24, 0x00	; 0
    15ec:	61 f0       	breq	.+24     	; 0x1606 <DIO_U8SetPortDirection+0x66>
    15ee:	1f c0       	rjmp	.+62     	; 0x162e <DIO_U8SetPortDirection+0x8e>
    15f0:	28 85       	ldd	r18, Y+8	; 0x08
    15f2:	39 85       	ldd	r19, Y+9	; 0x09
    15f4:	22 30       	cpi	r18, 0x02	; 2
    15f6:	31 05       	cpc	r19, r1
    15f8:	81 f0       	breq	.+32     	; 0x161a <DIO_U8SetPortDirection+0x7a>
    15fa:	88 85       	ldd	r24, Y+8	; 0x08
    15fc:	99 85       	ldd	r25, Y+9	; 0x09
    15fe:	83 30       	cpi	r24, 0x03	; 3
    1600:	91 05       	cpc	r25, r1
    1602:	81 f0       	breq	.+32     	; 0x1624 <DIO_U8SetPortDirection+0x84>
    1604:	14 c0       	rjmp	.+40     	; 0x162e <DIO_U8SetPortDirection+0x8e>
			{
				case DIO_PORTA: DDRA=DIO_PORT_OUT; break;
    1606:	ea e3       	ldi	r30, 0x3A	; 58
    1608:	f0 e0       	ldi	r31, 0x00	; 0
    160a:	8f ef       	ldi	r24, 0xFF	; 255
    160c:	80 83       	st	Z, r24
    160e:	7f c0       	rjmp	.+254    	; 0x170e <DIO_U8SetPortDirection+0x16e>
				case DIO_PORTB: DDRB=DIO_PORT_OUT; break;
    1610:	e7 e3       	ldi	r30, 0x37	; 55
    1612:	f0 e0       	ldi	r31, 0x00	; 0
    1614:	8f ef       	ldi	r24, 0xFF	; 255
    1616:	80 83       	st	Z, r24
    1618:	7a c0       	rjmp	.+244    	; 0x170e <DIO_U8SetPortDirection+0x16e>
				case DIO_PORTC: DDRC=DIO_PORT_OUT; break;
    161a:	e4 e3       	ldi	r30, 0x34	; 52
    161c:	f0 e0       	ldi	r31, 0x00	; 0
    161e:	8f ef       	ldi	r24, 0xFF	; 255
    1620:	80 83       	st	Z, r24
    1622:	75 c0       	rjmp	.+234    	; 0x170e <DIO_U8SetPortDirection+0x16e>
				case DIO_PORTD: DDRD=DIO_PORT_OUT; break;
    1624:	e1 e3       	ldi	r30, 0x31	; 49
    1626:	f0 e0       	ldi	r31, 0x00	; 0
    1628:	8f ef       	ldi	r24, 0xFF	; 255
    162a:	80 83       	st	Z, r24
    162c:	70 c0       	rjmp	.+224    	; 0x170e <DIO_U8SetPortDirection+0x16e>
				default:
				Local_U8ErrorState=ERROR_STATE_OK;
    162e:	81 e0       	ldi	r24, 0x01	; 1
    1630:	89 83       	std	Y+1, r24	; 0x01
    1632:	6d c0       	rjmp	.+218    	; 0x170e <DIO_U8SetPortDirection+0x16e>
				break;	
			}
		}
		else if(Copy_U8Directon == DIO_PORT_IN)
    1634:	8b 81       	ldd	r24, Y+3	; 0x03
    1636:	88 23       	and	r24, r24
    1638:	91 f5       	brne	.+100    	; 0x169e <DIO_U8SetPortDirection+0xfe>
		{
			switch(Copy_U8PortNumb)
    163a:	8a 81       	ldd	r24, Y+2	; 0x02
    163c:	28 2f       	mov	r18, r24
    163e:	30 e0       	ldi	r19, 0x00	; 0
    1640:	3f 83       	std	Y+7, r19	; 0x07
    1642:	2e 83       	std	Y+6, r18	; 0x06
    1644:	8e 81       	ldd	r24, Y+6	; 0x06
    1646:	9f 81       	ldd	r25, Y+7	; 0x07
    1648:	81 30       	cpi	r24, 0x01	; 1
    164a:	91 05       	cpc	r25, r1
    164c:	c9 f0       	breq	.+50     	; 0x1680 <DIO_U8SetPortDirection+0xe0>
    164e:	2e 81       	ldd	r18, Y+6	; 0x06
    1650:	3f 81       	ldd	r19, Y+7	; 0x07
    1652:	22 30       	cpi	r18, 0x02	; 2
    1654:	31 05       	cpc	r19, r1
    1656:	2c f4       	brge	.+10     	; 0x1662 <DIO_U8SetPortDirection+0xc2>
    1658:	8e 81       	ldd	r24, Y+6	; 0x06
    165a:	9f 81       	ldd	r25, Y+7	; 0x07
    165c:	00 97       	sbiw	r24, 0x00	; 0
    165e:	61 f0       	breq	.+24     	; 0x1678 <DIO_U8SetPortDirection+0xd8>
    1660:	1b c0       	rjmp	.+54     	; 0x1698 <DIO_U8SetPortDirection+0xf8>
    1662:	2e 81       	ldd	r18, Y+6	; 0x06
    1664:	3f 81       	ldd	r19, Y+7	; 0x07
    1666:	22 30       	cpi	r18, 0x02	; 2
    1668:	31 05       	cpc	r19, r1
    166a:	71 f0       	breq	.+28     	; 0x1688 <DIO_U8SetPortDirection+0xe8>
    166c:	8e 81       	ldd	r24, Y+6	; 0x06
    166e:	9f 81       	ldd	r25, Y+7	; 0x07
    1670:	83 30       	cpi	r24, 0x03	; 3
    1672:	91 05       	cpc	r25, r1
    1674:	69 f0       	breq	.+26     	; 0x1690 <DIO_U8SetPortDirection+0xf0>
    1676:	10 c0       	rjmp	.+32     	; 0x1698 <DIO_U8SetPortDirection+0xf8>
			{
				case DIO_PORTA: DDRA=DIO_PORT_IN; break;
    1678:	ea e3       	ldi	r30, 0x3A	; 58
    167a:	f0 e0       	ldi	r31, 0x00	; 0
    167c:	10 82       	st	Z, r1
    167e:	47 c0       	rjmp	.+142    	; 0x170e <DIO_U8SetPortDirection+0x16e>
				case DIO_PORTB: DDRB=DIO_PORT_IN; break;
    1680:	e7 e3       	ldi	r30, 0x37	; 55
    1682:	f0 e0       	ldi	r31, 0x00	; 0
    1684:	10 82       	st	Z, r1
    1686:	43 c0       	rjmp	.+134    	; 0x170e <DIO_U8SetPortDirection+0x16e>
				case DIO_PORTC: DDRC=DIO_PORT_IN; break;
    1688:	e4 e3       	ldi	r30, 0x34	; 52
    168a:	f0 e0       	ldi	r31, 0x00	; 0
    168c:	10 82       	st	Z, r1
    168e:	3f c0       	rjmp	.+126    	; 0x170e <DIO_U8SetPortDirection+0x16e>
				case DIO_PORTD: DDRD=DIO_PORT_IN; break;
    1690:	e1 e3       	ldi	r30, 0x31	; 49
    1692:	f0 e0       	ldi	r31, 0x00	; 0
    1694:	10 82       	st	Z, r1
    1696:	3b c0       	rjmp	.+118    	; 0x170e <DIO_U8SetPortDirection+0x16e>
				default:
				Local_U8ErrorState=ERROR_STATE_OK;
    1698:	81 e0       	ldi	r24, 0x01	; 1
    169a:	89 83       	std	Y+1, r24	; 0x01
    169c:	38 c0       	rjmp	.+112    	; 0x170e <DIO_U8SetPortDirection+0x16e>
				break;	
			}
		}
		else
		{
			switch(Copy_U8PortNumb)
    169e:	8a 81       	ldd	r24, Y+2	; 0x02
    16a0:	28 2f       	mov	r18, r24
    16a2:	30 e0       	ldi	r19, 0x00	; 0
    16a4:	3d 83       	std	Y+5, r19	; 0x05
    16a6:	2c 83       	std	Y+4, r18	; 0x04
    16a8:	8c 81       	ldd	r24, Y+4	; 0x04
    16aa:	9d 81       	ldd	r25, Y+5	; 0x05
    16ac:	81 30       	cpi	r24, 0x01	; 1
    16ae:	91 05       	cpc	r25, r1
    16b0:	d1 f0       	breq	.+52     	; 0x16e6 <DIO_U8SetPortDirection+0x146>
    16b2:	2c 81       	ldd	r18, Y+4	; 0x04
    16b4:	3d 81       	ldd	r19, Y+5	; 0x05
    16b6:	22 30       	cpi	r18, 0x02	; 2
    16b8:	31 05       	cpc	r19, r1
    16ba:	2c f4       	brge	.+10     	; 0x16c6 <DIO_U8SetPortDirection+0x126>
    16bc:	8c 81       	ldd	r24, Y+4	; 0x04
    16be:	9d 81       	ldd	r25, Y+5	; 0x05
    16c0:	00 97       	sbiw	r24, 0x00	; 0
    16c2:	61 f0       	breq	.+24     	; 0x16dc <DIO_U8SetPortDirection+0x13c>
    16c4:	1f c0       	rjmp	.+62     	; 0x1704 <DIO_U8SetPortDirection+0x164>
    16c6:	2c 81       	ldd	r18, Y+4	; 0x04
    16c8:	3d 81       	ldd	r19, Y+5	; 0x05
    16ca:	22 30       	cpi	r18, 0x02	; 2
    16cc:	31 05       	cpc	r19, r1
    16ce:	81 f0       	breq	.+32     	; 0x16f0 <DIO_U8SetPortDirection+0x150>
    16d0:	8c 81       	ldd	r24, Y+4	; 0x04
    16d2:	9d 81       	ldd	r25, Y+5	; 0x05
    16d4:	83 30       	cpi	r24, 0x03	; 3
    16d6:	91 05       	cpc	r25, r1
    16d8:	81 f0       	breq	.+32     	; 0x16fa <DIO_U8SetPortDirection+0x15a>
    16da:	14 c0       	rjmp	.+40     	; 0x1704 <DIO_U8SetPortDirection+0x164>
			{
				case DIO_PORTA: DDRA=Copy_U8Directon; break;
    16dc:	ea e3       	ldi	r30, 0x3A	; 58
    16de:	f0 e0       	ldi	r31, 0x00	; 0
    16e0:	8b 81       	ldd	r24, Y+3	; 0x03
    16e2:	80 83       	st	Z, r24
    16e4:	14 c0       	rjmp	.+40     	; 0x170e <DIO_U8SetPortDirection+0x16e>
				case DIO_PORTB: DDRB=Copy_U8Directon; break;
    16e6:	e7 e3       	ldi	r30, 0x37	; 55
    16e8:	f0 e0       	ldi	r31, 0x00	; 0
    16ea:	8b 81       	ldd	r24, Y+3	; 0x03
    16ec:	80 83       	st	Z, r24
    16ee:	0f c0       	rjmp	.+30     	; 0x170e <DIO_U8SetPortDirection+0x16e>
				case DIO_PORTC: DDRC=Copy_U8Directon; break;
    16f0:	e4 e3       	ldi	r30, 0x34	; 52
    16f2:	f0 e0       	ldi	r31, 0x00	; 0
    16f4:	8b 81       	ldd	r24, Y+3	; 0x03
    16f6:	80 83       	st	Z, r24
    16f8:	0a c0       	rjmp	.+20     	; 0x170e <DIO_U8SetPortDirection+0x16e>
				case DIO_PORTD: DDRD=Copy_U8Directon; break;
    16fa:	e1 e3       	ldi	r30, 0x31	; 49
    16fc:	f0 e0       	ldi	r31, 0x00	; 0
    16fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1700:	80 83       	st	Z, r24
    1702:	05 c0       	rjmp	.+10     	; 0x170e <DIO_U8SetPortDirection+0x16e>
				default:
				Local_U8ErrorState=ERROR_STATE_OK;
    1704:	81 e0       	ldi	r24, 0x01	; 1
    1706:	89 83       	std	Y+1, r24	; 0x01
    1708:	02 c0       	rjmp	.+4      	; 0x170e <DIO_U8SetPortDirection+0x16e>
			}
		}
	}
	else
	{
		 Local_U8ErrorState=ERROR_STATE_OK;
    170a:	81 e0       	ldi	r24, 0x01	; 1
    170c:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_U8ErrorState;
    170e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1710:	29 96       	adiw	r28, 0x09	; 9
    1712:	0f b6       	in	r0, 0x3f	; 63
    1714:	f8 94       	cli
    1716:	de bf       	out	0x3e, r29	; 62
    1718:	0f be       	out	0x3f, r0	; 63
    171a:	cd bf       	out	0x3d, r28	; 61
    171c:	cf 91       	pop	r28
    171e:	df 91       	pop	r29
    1720:	08 95       	ret

00001722 <DIO_U8SetPortValue>:

u8 DIO_U8SetPortValue(u8 Copy_U8PortNumb,u8 Copy_U8Value)
{
    1722:	df 93       	push	r29
    1724:	cf 93       	push	r28
    1726:	cd b7       	in	r28, 0x3d	; 61
    1728:	de b7       	in	r29, 0x3e	; 62
    172a:	29 97       	sbiw	r28, 0x09	; 9
    172c:	0f b6       	in	r0, 0x3f	; 63
    172e:	f8 94       	cli
    1730:	de bf       	out	0x3e, r29	; 62
    1732:	0f be       	out	0x3f, r0	; 63
    1734:	cd bf       	out	0x3d, r28	; 61
    1736:	8a 83       	std	Y+2, r24	; 0x02
    1738:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_U8ErrorState=ERROR_STATE_NOK;
    173a:	19 82       	std	Y+1, r1	; 0x01
	if((Copy_U8PortNumb <= DIO_PORTD) && (Copy_U8Value <=DIO_PORT_HIGH))
    173c:	8a 81       	ldd	r24, Y+2	; 0x02
    173e:	84 30       	cpi	r24, 0x04	; 4
    1740:	08 f0       	brcs	.+2      	; 0x1744 <DIO_U8SetPortValue+0x22>
    1742:	a4 c0       	rjmp	.+328    	; 0x188c <DIO_U8SetPortValue+0x16a>
	{
		if(Copy_U8Value == DIO_PORT_HIGH)
    1744:	8b 81       	ldd	r24, Y+3	; 0x03
    1746:	8f 3f       	cpi	r24, 0xFF	; 255
    1748:	b1 f5       	brne	.+108    	; 0x17b6 <DIO_U8SetPortValue+0x94>
		{
			switch(Copy_U8PortNumb)
    174a:	8a 81       	ldd	r24, Y+2	; 0x02
    174c:	28 2f       	mov	r18, r24
    174e:	30 e0       	ldi	r19, 0x00	; 0
    1750:	39 87       	std	Y+9, r19	; 0x09
    1752:	28 87       	std	Y+8, r18	; 0x08
    1754:	88 85       	ldd	r24, Y+8	; 0x08
    1756:	99 85       	ldd	r25, Y+9	; 0x09
    1758:	81 30       	cpi	r24, 0x01	; 1
    175a:	91 05       	cpc	r25, r1
    175c:	d1 f0       	breq	.+52     	; 0x1792 <DIO_U8SetPortValue+0x70>
    175e:	28 85       	ldd	r18, Y+8	; 0x08
    1760:	39 85       	ldd	r19, Y+9	; 0x09
    1762:	22 30       	cpi	r18, 0x02	; 2
    1764:	31 05       	cpc	r19, r1
    1766:	2c f4       	brge	.+10     	; 0x1772 <DIO_U8SetPortValue+0x50>
    1768:	88 85       	ldd	r24, Y+8	; 0x08
    176a:	99 85       	ldd	r25, Y+9	; 0x09
    176c:	00 97       	sbiw	r24, 0x00	; 0
    176e:	61 f0       	breq	.+24     	; 0x1788 <DIO_U8SetPortValue+0x66>
    1770:	1f c0       	rjmp	.+62     	; 0x17b0 <DIO_U8SetPortValue+0x8e>
    1772:	28 85       	ldd	r18, Y+8	; 0x08
    1774:	39 85       	ldd	r19, Y+9	; 0x09
    1776:	22 30       	cpi	r18, 0x02	; 2
    1778:	31 05       	cpc	r19, r1
    177a:	81 f0       	breq	.+32     	; 0x179c <DIO_U8SetPortValue+0x7a>
    177c:	88 85       	ldd	r24, Y+8	; 0x08
    177e:	99 85       	ldd	r25, Y+9	; 0x09
    1780:	83 30       	cpi	r24, 0x03	; 3
    1782:	91 05       	cpc	r25, r1
    1784:	81 f0       	breq	.+32     	; 0x17a6 <DIO_U8SetPortValue+0x84>
    1786:	14 c0       	rjmp	.+40     	; 0x17b0 <DIO_U8SetPortValue+0x8e>
			{
				case DIO_PORTA:  PORTA=DIO_PORT_HIGH; break;
    1788:	eb e3       	ldi	r30, 0x3B	; 59
    178a:	f0 e0       	ldi	r31, 0x00	; 0
    178c:	8f ef       	ldi	r24, 0xFF	; 255
    178e:	80 83       	st	Z, r24
    1790:	7f c0       	rjmp	.+254    	; 0x1890 <DIO_U8SetPortValue+0x16e>
				case DIO_PORTB: PORTB=DIO_PORT_HIGH; break;
    1792:	e8 e3       	ldi	r30, 0x38	; 56
    1794:	f0 e0       	ldi	r31, 0x00	; 0
    1796:	8f ef       	ldi	r24, 0xFF	; 255
    1798:	80 83       	st	Z, r24
    179a:	7a c0       	rjmp	.+244    	; 0x1890 <DIO_U8SetPortValue+0x16e>
				case DIO_PORTC: PORTC=DIO_PORT_HIGH; break;
    179c:	e5 e3       	ldi	r30, 0x35	; 53
    179e:	f0 e0       	ldi	r31, 0x00	; 0
    17a0:	8f ef       	ldi	r24, 0xFF	; 255
    17a2:	80 83       	st	Z, r24
    17a4:	75 c0       	rjmp	.+234    	; 0x1890 <DIO_U8SetPortValue+0x16e>
				case DIO_PORTD: PORTD=DIO_PORT_HIGH; break;
    17a6:	e2 e3       	ldi	r30, 0x32	; 50
    17a8:	f0 e0       	ldi	r31, 0x00	; 0
    17aa:	8f ef       	ldi	r24, 0xFF	; 255
    17ac:	80 83       	st	Z, r24
    17ae:	70 c0       	rjmp	.+224    	; 0x1890 <DIO_U8SetPortValue+0x16e>
				default:
				Local_U8ErrorState=ERROR_STATE_OK;
    17b0:	81 e0       	ldi	r24, 0x01	; 1
    17b2:	89 83       	std	Y+1, r24	; 0x01
    17b4:	6d c0       	rjmp	.+218    	; 0x1890 <DIO_U8SetPortValue+0x16e>
				break;	
			}
		}
		else if(Copy_U8Value == DIO_PORT_IN)
    17b6:	8b 81       	ldd	r24, Y+3	; 0x03
    17b8:	88 23       	and	r24, r24
    17ba:	91 f5       	brne	.+100    	; 0x1820 <DIO_U8SetPortValue+0xfe>
		{
			switch(Copy_U8PortNumb)
    17bc:	8a 81       	ldd	r24, Y+2	; 0x02
    17be:	28 2f       	mov	r18, r24
    17c0:	30 e0       	ldi	r19, 0x00	; 0
    17c2:	3f 83       	std	Y+7, r19	; 0x07
    17c4:	2e 83       	std	Y+6, r18	; 0x06
    17c6:	8e 81       	ldd	r24, Y+6	; 0x06
    17c8:	9f 81       	ldd	r25, Y+7	; 0x07
    17ca:	81 30       	cpi	r24, 0x01	; 1
    17cc:	91 05       	cpc	r25, r1
    17ce:	c9 f0       	breq	.+50     	; 0x1802 <DIO_U8SetPortValue+0xe0>
    17d0:	2e 81       	ldd	r18, Y+6	; 0x06
    17d2:	3f 81       	ldd	r19, Y+7	; 0x07
    17d4:	22 30       	cpi	r18, 0x02	; 2
    17d6:	31 05       	cpc	r19, r1
    17d8:	2c f4       	brge	.+10     	; 0x17e4 <DIO_U8SetPortValue+0xc2>
    17da:	8e 81       	ldd	r24, Y+6	; 0x06
    17dc:	9f 81       	ldd	r25, Y+7	; 0x07
    17de:	00 97       	sbiw	r24, 0x00	; 0
    17e0:	61 f0       	breq	.+24     	; 0x17fa <DIO_U8SetPortValue+0xd8>
    17e2:	1b c0       	rjmp	.+54     	; 0x181a <DIO_U8SetPortValue+0xf8>
    17e4:	2e 81       	ldd	r18, Y+6	; 0x06
    17e6:	3f 81       	ldd	r19, Y+7	; 0x07
    17e8:	22 30       	cpi	r18, 0x02	; 2
    17ea:	31 05       	cpc	r19, r1
    17ec:	71 f0       	breq	.+28     	; 0x180a <DIO_U8SetPortValue+0xe8>
    17ee:	8e 81       	ldd	r24, Y+6	; 0x06
    17f0:	9f 81       	ldd	r25, Y+7	; 0x07
    17f2:	83 30       	cpi	r24, 0x03	; 3
    17f4:	91 05       	cpc	r25, r1
    17f6:	69 f0       	breq	.+26     	; 0x1812 <DIO_U8SetPortValue+0xf0>
    17f8:	10 c0       	rjmp	.+32     	; 0x181a <DIO_U8SetPortValue+0xf8>
			{
				case DIO_PORTA: PORTA=DIO_PORT_LOW; break;
    17fa:	eb e3       	ldi	r30, 0x3B	; 59
    17fc:	f0 e0       	ldi	r31, 0x00	; 0
    17fe:	10 82       	st	Z, r1
    1800:	47 c0       	rjmp	.+142    	; 0x1890 <DIO_U8SetPortValue+0x16e>
				case DIO_PORTB: PORTB=DIO_PORT_LOW; break;
    1802:	e8 e3       	ldi	r30, 0x38	; 56
    1804:	f0 e0       	ldi	r31, 0x00	; 0
    1806:	10 82       	st	Z, r1
    1808:	43 c0       	rjmp	.+134    	; 0x1890 <DIO_U8SetPortValue+0x16e>
				case DIO_PORTC: PORTC=DIO_PORT_LOW; break;
    180a:	e5 e3       	ldi	r30, 0x35	; 53
    180c:	f0 e0       	ldi	r31, 0x00	; 0
    180e:	10 82       	st	Z, r1
    1810:	3f c0       	rjmp	.+126    	; 0x1890 <DIO_U8SetPortValue+0x16e>
				case DIO_PORTD: PORTD=DIO_PORT_LOW; break;
    1812:	e2 e3       	ldi	r30, 0x32	; 50
    1814:	f0 e0       	ldi	r31, 0x00	; 0
    1816:	10 82       	st	Z, r1
    1818:	3b c0       	rjmp	.+118    	; 0x1890 <DIO_U8SetPortValue+0x16e>
				default:
				Local_U8ErrorState=ERROR_STATE_OK;
    181a:	81 e0       	ldi	r24, 0x01	; 1
    181c:	89 83       	std	Y+1, r24	; 0x01
    181e:	38 c0       	rjmp	.+112    	; 0x1890 <DIO_U8SetPortValue+0x16e>
				break;	
			}
		}
		else
		{
			switch(Copy_U8PortNumb)
    1820:	8a 81       	ldd	r24, Y+2	; 0x02
    1822:	28 2f       	mov	r18, r24
    1824:	30 e0       	ldi	r19, 0x00	; 0
    1826:	3d 83       	std	Y+5, r19	; 0x05
    1828:	2c 83       	std	Y+4, r18	; 0x04
    182a:	8c 81       	ldd	r24, Y+4	; 0x04
    182c:	9d 81       	ldd	r25, Y+5	; 0x05
    182e:	81 30       	cpi	r24, 0x01	; 1
    1830:	91 05       	cpc	r25, r1
    1832:	d1 f0       	breq	.+52     	; 0x1868 <DIO_U8SetPortValue+0x146>
    1834:	2c 81       	ldd	r18, Y+4	; 0x04
    1836:	3d 81       	ldd	r19, Y+5	; 0x05
    1838:	22 30       	cpi	r18, 0x02	; 2
    183a:	31 05       	cpc	r19, r1
    183c:	2c f4       	brge	.+10     	; 0x1848 <DIO_U8SetPortValue+0x126>
    183e:	8c 81       	ldd	r24, Y+4	; 0x04
    1840:	9d 81       	ldd	r25, Y+5	; 0x05
    1842:	00 97       	sbiw	r24, 0x00	; 0
    1844:	61 f0       	breq	.+24     	; 0x185e <DIO_U8SetPortValue+0x13c>
    1846:	1f c0       	rjmp	.+62     	; 0x1886 <DIO_U8SetPortValue+0x164>
    1848:	2c 81       	ldd	r18, Y+4	; 0x04
    184a:	3d 81       	ldd	r19, Y+5	; 0x05
    184c:	22 30       	cpi	r18, 0x02	; 2
    184e:	31 05       	cpc	r19, r1
    1850:	81 f0       	breq	.+32     	; 0x1872 <DIO_U8SetPortValue+0x150>
    1852:	8c 81       	ldd	r24, Y+4	; 0x04
    1854:	9d 81       	ldd	r25, Y+5	; 0x05
    1856:	83 30       	cpi	r24, 0x03	; 3
    1858:	91 05       	cpc	r25, r1
    185a:	81 f0       	breq	.+32     	; 0x187c <DIO_U8SetPortValue+0x15a>
    185c:	14 c0       	rjmp	.+40     	; 0x1886 <DIO_U8SetPortValue+0x164>
			{
				case DIO_PORTA: PORTA=Copy_U8Value; break;
    185e:	eb e3       	ldi	r30, 0x3B	; 59
    1860:	f0 e0       	ldi	r31, 0x00	; 0
    1862:	8b 81       	ldd	r24, Y+3	; 0x03
    1864:	80 83       	st	Z, r24
    1866:	14 c0       	rjmp	.+40     	; 0x1890 <DIO_U8SetPortValue+0x16e>
				case DIO_PORTB: PORTB=Copy_U8Value; break;
    1868:	e8 e3       	ldi	r30, 0x38	; 56
    186a:	f0 e0       	ldi	r31, 0x00	; 0
    186c:	8b 81       	ldd	r24, Y+3	; 0x03
    186e:	80 83       	st	Z, r24
    1870:	0f c0       	rjmp	.+30     	; 0x1890 <DIO_U8SetPortValue+0x16e>
				case DIO_PORTC: PORTC=Copy_U8Value; break;
    1872:	e5 e3       	ldi	r30, 0x35	; 53
    1874:	f0 e0       	ldi	r31, 0x00	; 0
    1876:	8b 81       	ldd	r24, Y+3	; 0x03
    1878:	80 83       	st	Z, r24
    187a:	0a c0       	rjmp	.+20     	; 0x1890 <DIO_U8SetPortValue+0x16e>
				case DIO_PORTD: PORTD=Copy_U8Value; break;
    187c:	e2 e3       	ldi	r30, 0x32	; 50
    187e:	f0 e0       	ldi	r31, 0x00	; 0
    1880:	8b 81       	ldd	r24, Y+3	; 0x03
    1882:	80 83       	st	Z, r24
    1884:	05 c0       	rjmp	.+10     	; 0x1890 <DIO_U8SetPortValue+0x16e>
				default:
				Local_U8ErrorState=ERROR_STATE_OK;
    1886:	81 e0       	ldi	r24, 0x01	; 1
    1888:	89 83       	std	Y+1, r24	; 0x01
    188a:	02 c0       	rjmp	.+4      	; 0x1890 <DIO_U8SetPortValue+0x16e>
		}
		
	}
	else
	{
		 Local_U8ErrorState=ERROR_STATE_OK;
    188c:	81 e0       	ldi	r24, 0x01	; 1
    188e:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_U8ErrorState;
    1890:	89 81       	ldd	r24, Y+1	; 0x01
}
    1892:	29 96       	adiw	r28, 0x09	; 9
    1894:	0f b6       	in	r0, 0x3f	; 63
    1896:	f8 94       	cli
    1898:	de bf       	out	0x3e, r29	; 62
    189a:	0f be       	out	0x3f, r0	; 63
    189c:	cd bf       	out	0x3d, r28	; 61
    189e:	cf 91       	pop	r28
    18a0:	df 91       	pop	r29
    18a2:	08 95       	ret

000018a4 <DIO_U8GetPortValue>:

u8 DIO_U8GetPortValue(u8 Copy_U8PortNumb,u8 *Copy_U8Value)
{
    18a4:	df 93       	push	r29
    18a6:	cf 93       	push	r28
    18a8:	00 d0       	rcall	.+0      	; 0x18aa <DIO_U8GetPortValue+0x6>
    18aa:	00 d0       	rcall	.+0      	; 0x18ac <DIO_U8GetPortValue+0x8>
    18ac:	00 d0       	rcall	.+0      	; 0x18ae <DIO_U8GetPortValue+0xa>
    18ae:	cd b7       	in	r28, 0x3d	; 61
    18b0:	de b7       	in	r29, 0x3e	; 62
    18b2:	8a 83       	std	Y+2, r24	; 0x02
    18b4:	7c 83       	std	Y+4, r23	; 0x04
    18b6:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_U8ErrorState=ERROR_STATE_NOK;
    18b8:	19 82       	std	Y+1, r1	; 0x01
	if((Copy_U8PortNumb <= DIO_PORTD))
    18ba:	8a 81       	ldd	r24, Y+2	; 0x02
    18bc:	84 30       	cpi	r24, 0x04	; 4
    18be:	08 f0       	brcs	.+2      	; 0x18c2 <DIO_U8GetPortValue+0x1e>
    18c0:	3e c0       	rjmp	.+124    	; 0x193e <DIO_U8GetPortValue+0x9a>
	{
		switch(Copy_U8PortNumb)
    18c2:	8a 81       	ldd	r24, Y+2	; 0x02
    18c4:	28 2f       	mov	r18, r24
    18c6:	30 e0       	ldi	r19, 0x00	; 0
    18c8:	3e 83       	std	Y+6, r19	; 0x06
    18ca:	2d 83       	std	Y+5, r18	; 0x05
    18cc:	8d 81       	ldd	r24, Y+5	; 0x05
    18ce:	9e 81       	ldd	r25, Y+6	; 0x06
    18d0:	81 30       	cpi	r24, 0x01	; 1
    18d2:	91 05       	cpc	r25, r1
    18d4:	e1 f0       	breq	.+56     	; 0x190e <DIO_U8GetPortValue+0x6a>
    18d6:	2d 81       	ldd	r18, Y+5	; 0x05
    18d8:	3e 81       	ldd	r19, Y+6	; 0x06
    18da:	22 30       	cpi	r18, 0x02	; 2
    18dc:	31 05       	cpc	r19, r1
    18de:	2c f4       	brge	.+10     	; 0x18ea <DIO_U8GetPortValue+0x46>
    18e0:	8d 81       	ldd	r24, Y+5	; 0x05
    18e2:	9e 81       	ldd	r25, Y+6	; 0x06
    18e4:	00 97       	sbiw	r24, 0x00	; 0
    18e6:	61 f0       	breq	.+24     	; 0x1900 <DIO_U8GetPortValue+0x5c>
    18e8:	27 c0       	rjmp	.+78     	; 0x1938 <DIO_U8GetPortValue+0x94>
    18ea:	2d 81       	ldd	r18, Y+5	; 0x05
    18ec:	3e 81       	ldd	r19, Y+6	; 0x06
    18ee:	22 30       	cpi	r18, 0x02	; 2
    18f0:	31 05       	cpc	r19, r1
    18f2:	a1 f0       	breq	.+40     	; 0x191c <DIO_U8GetPortValue+0x78>
    18f4:	8d 81       	ldd	r24, Y+5	; 0x05
    18f6:	9e 81       	ldd	r25, Y+6	; 0x06
    18f8:	83 30       	cpi	r24, 0x03	; 3
    18fa:	91 05       	cpc	r25, r1
    18fc:	b1 f0       	breq	.+44     	; 0x192a <DIO_U8GetPortValue+0x86>
    18fe:	1c c0       	rjmp	.+56     	; 0x1938 <DIO_U8GetPortValue+0x94>
		{
			case DIO_PORTA: *Copy_U8Value=PINA; break;
    1900:	e9 e3       	ldi	r30, 0x39	; 57
    1902:	f0 e0       	ldi	r31, 0x00	; 0
    1904:	80 81       	ld	r24, Z
    1906:	eb 81       	ldd	r30, Y+3	; 0x03
    1908:	fc 81       	ldd	r31, Y+4	; 0x04
    190a:	80 83       	st	Z, r24
    190c:	1a c0       	rjmp	.+52     	; 0x1942 <DIO_U8GetPortValue+0x9e>
			case DIO_PORTB: *Copy_U8Value=PINB;; break;
    190e:	e6 e3       	ldi	r30, 0x36	; 54
    1910:	f0 e0       	ldi	r31, 0x00	; 0
    1912:	80 81       	ld	r24, Z
    1914:	eb 81       	ldd	r30, Y+3	; 0x03
    1916:	fc 81       	ldd	r31, Y+4	; 0x04
    1918:	80 83       	st	Z, r24
    191a:	13 c0       	rjmp	.+38     	; 0x1942 <DIO_U8GetPortValue+0x9e>
			case DIO_PORTC: *Copy_U8Value=PINC;; break;
    191c:	e3 e3       	ldi	r30, 0x33	; 51
    191e:	f0 e0       	ldi	r31, 0x00	; 0
    1920:	80 81       	ld	r24, Z
    1922:	eb 81       	ldd	r30, Y+3	; 0x03
    1924:	fc 81       	ldd	r31, Y+4	; 0x04
    1926:	80 83       	st	Z, r24
    1928:	0c c0       	rjmp	.+24     	; 0x1942 <DIO_U8GetPortValue+0x9e>
			case DIO_PORTD: *Copy_U8Value=PIND;; break;
    192a:	e0 e3       	ldi	r30, 0x30	; 48
    192c:	f0 e0       	ldi	r31, 0x00	; 0
    192e:	80 81       	ld	r24, Z
    1930:	eb 81       	ldd	r30, Y+3	; 0x03
    1932:	fc 81       	ldd	r31, Y+4	; 0x04
    1934:	80 83       	st	Z, r24
    1936:	05 c0       	rjmp	.+10     	; 0x1942 <DIO_U8GetPortValue+0x9e>
			default:
			Local_U8ErrorState=ERROR_STATE_OK;
    1938:	81 e0       	ldi	r24, 0x01	; 1
    193a:	89 83       	std	Y+1, r24	; 0x01
    193c:	02 c0       	rjmp	.+4      	; 0x1942 <DIO_U8GetPortValue+0x9e>
			break;	
		}
	}
	else
	{
		 Local_U8ErrorState=ERROR_STATE_OK;
    193e:	81 e0       	ldi	r24, 0x01	; 1
    1940:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_U8ErrorState;
    1942:	89 81       	ldd	r24, Y+1	; 0x01
}
    1944:	26 96       	adiw	r28, 0x06	; 6
    1946:	0f b6       	in	r0, 0x3f	; 63
    1948:	f8 94       	cli
    194a:	de bf       	out	0x3e, r29	; 62
    194c:	0f be       	out	0x3f, r0	; 63
    194e:	cd bf       	out	0x3d, r28	; 61
    1950:	cf 91       	pop	r28
    1952:	df 91       	pop	r29
    1954:	08 95       	ret

00001956 <I2C_VidMasterInit>:
#include "I2C_Interface.h"
#include "I2C_Private.h"


void I2C_VidMasterInit(void)
{
    1956:	df 93       	push	r29
    1958:	cf 93       	push	r28
    195a:	cd b7       	in	r28, 0x3d	; 61
    195c:	de b7       	in	r29, 0x3e	; 62
	/*01- set the Prescaller-> 1*/
	CLR_BIT(I2C_TWSR,TWPS0);
    195e:	a1 e2       	ldi	r26, 0x21	; 33
    1960:	b0 e0       	ldi	r27, 0x00	; 0
    1962:	e1 e2       	ldi	r30, 0x21	; 33
    1964:	f0 e0       	ldi	r31, 0x00	; 0
    1966:	80 81       	ld	r24, Z
    1968:	8e 7f       	andi	r24, 0xFE	; 254
    196a:	8c 93       	st	X, r24
	CLR_BIT(I2C_TWSR,TWPS1);
    196c:	a1 e2       	ldi	r26, 0x21	; 33
    196e:	b0 e0       	ldi	r27, 0x00	; 0
    1970:	e1 e2       	ldi	r30, 0x21	; 33
    1972:	f0 e0       	ldi	r31, 0x00	; 0
    1974:	80 81       	ld	r24, Z
    1976:	8d 7f       	andi	r24, 0xFD	; 253
    1978:	8c 93       	st	X, r24
	/*02- choose Frequancy -->400KHZ Max speed and for 200 200KHZ --> I2C_TWBR=12 */
	I2C_TWBR=2;
    197a:	e0 e2       	ldi	r30, 0x20	; 32
    197c:	f0 e0       	ldi	r31, 0x00	; 0
    197e:	82 e0       	ldi	r24, 0x02	; 2
    1980:	80 83       	st	Z, r24
	/*03- Enable I2C*/
	SET_BIT(I2C_TWCR,TWEN);
    1982:	a6 e5       	ldi	r26, 0x56	; 86
    1984:	b0 e0       	ldi	r27, 0x00	; 0
    1986:	e6 e5       	ldi	r30, 0x56	; 86
    1988:	f0 e0       	ldi	r31, 0x00	; 0
    198a:	80 81       	ld	r24, Z
    198c:	84 60       	ori	r24, 0x04	; 4
    198e:	8c 93       	st	X, r24
}
    1990:	cf 91       	pop	r28
    1992:	df 91       	pop	r29
    1994:	08 95       	ret

00001996 <I2C_VidSlaveInit>:

void I2C_VidSlaveInit(u8 Copy_u8SlaveAddress)
{
    1996:	df 93       	push	r29
    1998:	cf 93       	push	r28
    199a:	0f 92       	push	r0
    199c:	cd b7       	in	r28, 0x3d	; 61
    199e:	de b7       	in	r29, 0x3e	; 62
    19a0:	89 83       	std	Y+1, r24	; 0x01
	/*01- Enable the ACK Bit */
	SET_BIT(I2C_TWCR,TWEA);
    19a2:	a6 e5       	ldi	r26, 0x56	; 86
    19a4:	b0 e0       	ldi	r27, 0x00	; 0
    19a6:	e6 e5       	ldi	r30, 0x56	; 86
    19a8:	f0 e0       	ldi	r31, 0x00	; 0
    19aa:	80 81       	ld	r24, Z
    19ac:	80 64       	ori	r24, 0x40	; 64
    19ae:	8c 93       	st	X, r24
	/*02- Write Slave Address --> only 7 MSB*/
	I2C_TWAR=Copy_u8SlaveAddress<<1;  // as the data is only 7 bits and bit 0 is read write bit
    19b0:	e2 e2       	ldi	r30, 0x22	; 34
    19b2:	f0 e0       	ldi	r31, 0x00	; 0
    19b4:	89 81       	ldd	r24, Y+1	; 0x01
    19b6:	88 0f       	add	r24, r24
    19b8:	80 83       	st	Z, r24
	/*03- Enable I2C */
	SET_BIT(I2C_TWCR,TWEN);
    19ba:	a6 e5       	ldi	r26, 0x56	; 86
    19bc:	b0 e0       	ldi	r27, 0x00	; 0
    19be:	e6 e5       	ldi	r30, 0x56	; 86
    19c0:	f0 e0       	ldi	r31, 0x00	; 0
    19c2:	80 81       	ld	r24, Z
    19c4:	84 60       	ori	r24, 0x04	; 4
    19c6:	8c 93       	st	X, r24
}
    19c8:	0f 90       	pop	r0
    19ca:	cf 91       	pop	r28
    19cc:	df 91       	pop	r29
    19ce:	08 95       	ret

000019d0 <I2C_VidStartCondition>:

void I2C_VidStartCondition(void)
{
    19d0:	df 93       	push	r29
    19d2:	cf 93       	push	r28
    19d4:	cd b7       	in	r28, 0x3d	; 61
    19d6:	de b7       	in	r29, 0x3e	; 62
	/*01- Clear the flag & Enable the SC Pins*/
	
	SET_BIT(I2C_TWCR,TWINT);
    19d8:	a6 e5       	ldi	r26, 0x56	; 86
    19da:	b0 e0       	ldi	r27, 0x00	; 0
    19dc:	e6 e5       	ldi	r30, 0x56	; 86
    19de:	f0 e0       	ldi	r31, 0x00	; 0
    19e0:	80 81       	ld	r24, Z
    19e2:	80 68       	ori	r24, 0x80	; 128
    19e4:	8c 93       	st	X, r24
	SET_BIT(I2C_TWCR,TWSTA);
    19e6:	a6 e5       	ldi	r26, 0x56	; 86
    19e8:	b0 e0       	ldi	r27, 0x00	; 0
    19ea:	e6 e5       	ldi	r30, 0x56	; 86
    19ec:	f0 e0       	ldi	r31, 0x00	; 0
    19ee:	80 81       	ld	r24, Z
    19f0:	80 62       	ori	r24, 0x20	; 32
    19f2:	8c 93       	st	X, r24
	
	/*02- wait for flag to be Cleared ---> Stuck */
	
	while((GET_BIT(I2C_TWCR,TWINT))==0);
    19f4:	e6 e5       	ldi	r30, 0x56	; 86
    19f6:	f0 e0       	ldi	r31, 0x00	; 0
    19f8:	80 81       	ld	r24, Z
    19fa:	88 23       	and	r24, r24
    19fc:	dc f7       	brge	.-10     	; 0x19f4 <I2C_VidStartCondition+0x24>
}
    19fe:	cf 91       	pop	r28
    1a00:	df 91       	pop	r29
    1a02:	08 95       	ret

00001a04 <I2C_VidStopCondition>:

void I2C_VidStopCondition(void)
{
    1a04:	df 93       	push	r29
    1a06:	cf 93       	push	r28
    1a08:	cd b7       	in	r28, 0x3d	; 61
    1a0a:	de b7       	in	r29, 0x3e	; 62
	/*01- Clear the flag & Enable the SC Pins*/
	
	SET_BIT(I2C_TWCR,TWINT);
    1a0c:	a6 e5       	ldi	r26, 0x56	; 86
    1a0e:	b0 e0       	ldi	r27, 0x00	; 0
    1a10:	e6 e5       	ldi	r30, 0x56	; 86
    1a12:	f0 e0       	ldi	r31, 0x00	; 0
    1a14:	80 81       	ld	r24, Z
    1a16:	80 68       	ori	r24, 0x80	; 128
    1a18:	8c 93       	st	X, r24
	SET_BIT(I2C_TWCR,TWSTO);
    1a1a:	a6 e5       	ldi	r26, 0x56	; 86
    1a1c:	b0 e0       	ldi	r27, 0x00	; 0
    1a1e:	e6 e5       	ldi	r30, 0x56	; 86
    1a20:	f0 e0       	ldi	r31, 0x00	; 0
    1a22:	80 81       	ld	r24, Z
    1a24:	80 61       	ori	r24, 0x10	; 16
    1a26:	8c 93       	st	X, r24
}
    1a28:	cf 91       	pop	r28
    1a2a:	df 91       	pop	r29
    1a2c:	08 95       	ret

00001a2e <I2C_VidSlaveAddressWrite>:

void I2C_VidSlaveAddressWrite(u8 Copy_u8SlaveAddress)//written by master
{
    1a2e:	df 93       	push	r29
    1a30:	cf 93       	push	r28
    1a32:	0f 92       	push	r0
    1a34:	cd b7       	in	r28, 0x3d	; 61
    1a36:	de b7       	in	r29, 0x3e	; 62
    1a38:	89 83       	std	Y+1, r24	; 0x01
	/*01- Write Slave Address --> only 7 MSB*/
	I2C_TWDR=Copy_u8SlaveAddress<<1;
    1a3a:	e3 e2       	ldi	r30, 0x23	; 35
    1a3c:	f0 e0       	ldi	r31, 0x00	; 0
    1a3e:	89 81       	ldd	r24, Y+1	; 0x01
    1a40:	88 0f       	add	r24, r24
    1a42:	80 83       	st	Z, r24
	/*02- Clear TWGCE bit to select Write  */
	CLR_BIT(I2C_TWDR,TWGCE);
    1a44:	a3 e2       	ldi	r26, 0x23	; 35
    1a46:	b0 e0       	ldi	r27, 0x00	; 0
    1a48:	e3 e2       	ldi	r30, 0x23	; 35
    1a4a:	f0 e0       	ldi	r31, 0x00	; 0
    1a4c:	80 81       	ld	r24, Z
    1a4e:	8e 7f       	andi	r24, 0xFE	; 254
    1a50:	8c 93       	st	X, r24

	CLR_BIT(I2C_TWCR,TWSTA);
    1a52:	a6 e5       	ldi	r26, 0x56	; 86
    1a54:	b0 e0       	ldi	r27, 0x00	; 0
    1a56:	e6 e5       	ldi	r30, 0x56	; 86
    1a58:	f0 e0       	ldi	r31, 0x00	; 0
    1a5a:	80 81       	ld	r24, Z
    1a5c:	8f 7d       	andi	r24, 0xDF	; 223
    1a5e:	8c 93       	st	X, r24
	/*03-Clear flag */
	SET_BIT(I2C_TWCR,TWINT);
    1a60:	a6 e5       	ldi	r26, 0x56	; 86
    1a62:	b0 e0       	ldi	r27, 0x00	; 0
    1a64:	e6 e5       	ldi	r30, 0x56	; 86
    1a66:	f0 e0       	ldi	r31, 0x00	; 0
    1a68:	80 81       	ld	r24, Z
    1a6a:	80 68       	ori	r24, 0x80	; 128
    1a6c:	8c 93       	st	X, r24
	
	/*04- wait for flag to be Cleared ---> Stuck */
	while((GET_BIT(I2C_TWCR,TWINT))==0);
    1a6e:	e6 e5       	ldi	r30, 0x56	; 86
    1a70:	f0 e0       	ldi	r31, 0x00	; 0
    1a72:	80 81       	ld	r24, Z
    1a74:	88 23       	and	r24, r24
    1a76:	dc f7       	brge	.-10     	; 0x1a6e <I2C_VidSlaveAddressWrite+0x40>

}
    1a78:	0f 90       	pop	r0
    1a7a:	cf 91       	pop	r28
    1a7c:	df 91       	pop	r29
    1a7e:	08 95       	ret

00001a80 <I2C_VidSlaveAddressRead>:

void I2C_VidSlaveAddressRead(u8 Copy_u8SlaveAddress)
{
    1a80:	df 93       	push	r29
    1a82:	cf 93       	push	r28
    1a84:	0f 92       	push	r0
    1a86:	cd b7       	in	r28, 0x3d	; 61
    1a88:	de b7       	in	r29, 0x3e	; 62
    1a8a:	89 83       	std	Y+1, r24	; 0x01
	/*01- Write Slave Address --> only 7 MSB*/
	I2C_TWDR=Copy_u8SlaveAddress<<1;
    1a8c:	e3 e2       	ldi	r30, 0x23	; 35
    1a8e:	f0 e0       	ldi	r31, 0x00	; 0
    1a90:	89 81       	ldd	r24, Y+1	; 0x01
    1a92:	88 0f       	add	r24, r24
    1a94:	80 83       	st	Z, r24
	
	/*02- Clear TWGCE bit to select Write  */
	
	SET_BIT(I2C_TWDR,TWGCE);
    1a96:	a3 e2       	ldi	r26, 0x23	; 35
    1a98:	b0 e0       	ldi	r27, 0x00	; 0
    1a9a:	e3 e2       	ldi	r30, 0x23	; 35
    1a9c:	f0 e0       	ldi	r31, 0x00	; 0
    1a9e:	80 81       	ld	r24, Z
    1aa0:	81 60       	ori	r24, 0x01	; 1
    1aa2:	8c 93       	st	X, r24
	CLR_BIT(I2C_TWCR,TWSTA);
    1aa4:	a6 e5       	ldi	r26, 0x56	; 86
    1aa6:	b0 e0       	ldi	r27, 0x00	; 0
    1aa8:	e6 e5       	ldi	r30, 0x56	; 86
    1aaa:	f0 e0       	ldi	r31, 0x00	; 0
    1aac:	80 81       	ld	r24, Z
    1aae:	8f 7d       	andi	r24, 0xDF	; 223
    1ab0:	8c 93       	st	X, r24
	
	/*03-Clear flag */
	SET_BIT(I2C_TWCR,TWINT);
    1ab2:	a6 e5       	ldi	r26, 0x56	; 86
    1ab4:	b0 e0       	ldi	r27, 0x00	; 0
    1ab6:	e6 e5       	ldi	r30, 0x56	; 86
    1ab8:	f0 e0       	ldi	r31, 0x00	; 0
    1aba:	80 81       	ld	r24, Z
    1abc:	80 68       	ori	r24, 0x80	; 128
    1abe:	8c 93       	st	X, r24
	
	/*04- wait for flag to be Cleared ---> Stuck */
	while((GET_BIT(I2C_TWCR,TWINT))==0);
    1ac0:	e6 e5       	ldi	r30, 0x56	; 86
    1ac2:	f0 e0       	ldi	r31, 0x00	; 0
    1ac4:	80 81       	ld	r24, Z
    1ac6:	88 23       	and	r24, r24
    1ac8:	dc f7       	brge	.-10     	; 0x1ac0 <I2C_VidSlaveAddressRead+0x40>
}
    1aca:	0f 90       	pop	r0
    1acc:	cf 91       	pop	r28
    1ace:	df 91       	pop	r29
    1ad0:	08 95       	ret

00001ad2 <I2C_VidMastarSendData>:

void I2C_VidMastarSendData(u8 Copy_u8Data)
{
    1ad2:	df 93       	push	r29
    1ad4:	cf 93       	push	r28
    1ad6:	0f 92       	push	r0
    1ad8:	cd b7       	in	r28, 0x3d	; 61
    1ada:	de b7       	in	r29, 0x3e	; 62
    1adc:	89 83       	std	Y+1, r24	; 0x01
	/*01- Send the data to I2C Data Register */
	I2C_TWDR=Copy_u8Data;
    1ade:	e3 e2       	ldi	r30, 0x23	; 35
    1ae0:	f0 e0       	ldi	r31, 0x00	; 0
    1ae2:	89 81       	ldd	r24, Y+1	; 0x01
    1ae4:	80 83       	st	Z, r24
	
	/*02-Clear flag */
	SET_BIT(I2C_TWCR,TWINT);
    1ae6:	a6 e5       	ldi	r26, 0x56	; 86
    1ae8:	b0 e0       	ldi	r27, 0x00	; 0
    1aea:	e6 e5       	ldi	r30, 0x56	; 86
    1aec:	f0 e0       	ldi	r31, 0x00	; 0
    1aee:	80 81       	ld	r24, Z
    1af0:	80 68       	ori	r24, 0x80	; 128
    1af2:	8c 93       	st	X, r24
	
	/*03- wait for flag to be Cleared ---> Stuck */
	while((GET_BIT(I2C_TWCR,TWINT))==0);
    1af4:	e6 e5       	ldi	r30, 0x56	; 86
    1af6:	f0 e0       	ldi	r31, 0x00	; 0
    1af8:	80 81       	ld	r24, Z
    1afa:	88 23       	and	r24, r24
    1afc:	dc f7       	brge	.-10     	; 0x1af4 <I2C_VidMastarSendData+0x22>
}
    1afe:	0f 90       	pop	r0
    1b00:	cf 91       	pop	r28
    1b02:	df 91       	pop	r29
    1b04:	08 95       	ret

00001b06 <I2C_VidMastarRecieveData>:

u8 I2C_VidMastarRecieveData(void)
{
    1b06:	df 93       	push	r29
    1b08:	cf 93       	push	r28
    1b0a:	cd b7       	in	r28, 0x3d	; 61
    1b0c:	de b7       	in	r29, 0x3e	; 62
	/*01-Clear flag */
	SET_BIT(I2C_TWCR,TWINT);
    1b0e:	a6 e5       	ldi	r26, 0x56	; 86
    1b10:	b0 e0       	ldi	r27, 0x00	; 0
    1b12:	e6 e5       	ldi	r30, 0x56	; 86
    1b14:	f0 e0       	ldi	r31, 0x00	; 0
    1b16:	80 81       	ld	r24, Z
    1b18:	80 68       	ori	r24, 0x80	; 128
    1b1a:	8c 93       	st	X, r24
	
	/*02- wait for flag to be Cleared ---> Stuck */
	while((GET_BIT(I2C_TWCR,TWINT))==0);
    1b1c:	e6 e5       	ldi	r30, 0x56	; 86
    1b1e:	f0 e0       	ldi	r31, 0x00	; 0
    1b20:	80 81       	ld	r24, Z
    1b22:	88 23       	and	r24, r24
    1b24:	dc f7       	brge	.-10     	; 0x1b1c <I2C_VidMastarRecieveData+0x16>
	
	/*03- read the data to I2C Data Register */
	return I2C_TWDR;
    1b26:	e3 e2       	ldi	r30, 0x23	; 35
    1b28:	f0 e0       	ldi	r31, 0x00	; 0
    1b2a:	80 81       	ld	r24, Z
}
    1b2c:	cf 91       	pop	r28
    1b2e:	df 91       	pop	r29
    1b30:	08 95       	ret

00001b32 <I2C_VidSlaveRecieveData>:

u8 I2C_VidSlaveRecieveData(void)
{
    1b32:	df 93       	push	r29
    1b34:	cf 93       	push	r28
    1b36:	cd b7       	in	r28, 0x3d	; 61
    1b38:	de b7       	in	r29, 0x3e	; 62
	/*01- wait ---> Stuck */
	while((I2C_TWSR&0xf8)!=0x60);
    1b3a:	e1 e2       	ldi	r30, 0x21	; 33
    1b3c:	f0 e0       	ldi	r31, 0x00	; 0
    1b3e:	80 81       	ld	r24, Z
    1b40:	88 2f       	mov	r24, r24
    1b42:	90 e0       	ldi	r25, 0x00	; 0
    1b44:	88 7f       	andi	r24, 0xF8	; 248
    1b46:	90 70       	andi	r25, 0x00	; 0
    1b48:	80 36       	cpi	r24, 0x60	; 96
    1b4a:	91 05       	cpc	r25, r1
    1b4c:	b1 f7       	brne	.-20     	; 0x1b3a <I2C_VidSlaveRecieveData+0x8>

	/*02- set the I2C Init */
	SET_BIT(I2C_TWCR,TWINT);
    1b4e:	a6 e5       	ldi	r26, 0x56	; 86
    1b50:	b0 e0       	ldi	r27, 0x00	; 0
    1b52:	e6 e5       	ldi	r30, 0x56	; 86
    1b54:	f0 e0       	ldi	r31, 0x00	; 0
    1b56:	80 81       	ld	r24, Z
    1b58:	80 68       	ori	r24, 0x80	; 128
    1b5a:	8c 93       	st	X, r24
	/*03- wait ---> Stuck */
	while((I2C_TWSR&0xf8)!=0x80);
    1b5c:	e1 e2       	ldi	r30, 0x21	; 33
    1b5e:	f0 e0       	ldi	r31, 0x00	; 0
    1b60:	80 81       	ld	r24, Z
    1b62:	88 2f       	mov	r24, r24
    1b64:	90 e0       	ldi	r25, 0x00	; 0
    1b66:	88 7f       	andi	r24, 0xF8	; 248
    1b68:	90 70       	andi	r25, 0x00	; 0
    1b6a:	80 38       	cpi	r24, 0x80	; 128
    1b6c:	91 05       	cpc	r25, r1
    1b6e:	b1 f7       	brne	.-20     	; 0x1b5c <I2C_VidSlaveRecieveData+0x2a>

	/*04- read the data to I2C Data Register */
	return I2C_TWDR;
    1b70:	e3 e2       	ldi	r30, 0x23	; 35
    1b72:	f0 e0       	ldi	r31, 0x00	; 0
    1b74:	80 81       	ld	r24, Z

}
    1b76:	cf 91       	pop	r28
    1b78:	df 91       	pop	r29
    1b7a:	08 95       	ret

00001b7c <KPAD_U8GetPressedKey>:
#include "KPAD_Interface.h"
#include "KPAD_Private.h"
#include "KPAD_Config.h"

u8 KPAD_U8GetPressedKey(u8 *Copy_U8Returned)
{
    1b7c:	df 93       	push	r29
    1b7e:	cf 93       	push	r28
    1b80:	cd b7       	in	r28, 0x3d	; 61
    1b82:	de b7       	in	r29, 0x3e	; 62
    1b84:	c0 54       	subi	r28, 0x40	; 64
    1b86:	d0 40       	sbci	r29, 0x00	; 0
    1b88:	0f b6       	in	r0, 0x3f	; 63
    1b8a:	f8 94       	cli
    1b8c:	de bf       	out	0x3e, r29	; 62
    1b8e:	0f be       	out	0x3f, r0	; 63
    1b90:	cd bf       	out	0x3d, r28	; 61
    1b92:	9e ab       	std	Y+54, r25	; 0x36
    1b94:	8d ab       	std	Y+53, r24	; 0x35
	u8 Local_U8ErrorState=ERROR_STATE_NOK;
    1b96:	19 8a       	std	Y+17, r1	; 0x11
	u8 LocaL_U8KPAD_ARR[ROW_NUMBERS][COLUMN_NUMBERS]= KPAD_ARR;
    1b98:	ce 01       	movw	r24, r28
    1b9a:	42 96       	adiw	r24, 0x12	; 18
    1b9c:	98 af       	std	Y+56, r25	; 0x38
    1b9e:	8f ab       	std	Y+55, r24	; 0x37
    1ba0:	e6 e0       	ldi	r30, 0x06	; 6
    1ba2:	f3 e0       	ldi	r31, 0x03	; 3
    1ba4:	fa af       	std	Y+58, r31	; 0x3a
    1ba6:	e9 af       	std	Y+57, r30	; 0x39
    1ba8:	f8 e1       	ldi	r31, 0x18	; 24
    1baa:	fb af       	std	Y+59, r31	; 0x3b
    1bac:	e9 ad       	ldd	r30, Y+57	; 0x39
    1bae:	fa ad       	ldd	r31, Y+58	; 0x3a
    1bb0:	00 80       	ld	r0, Z
    1bb2:	89 ad       	ldd	r24, Y+57	; 0x39
    1bb4:	9a ad       	ldd	r25, Y+58	; 0x3a
    1bb6:	01 96       	adiw	r24, 0x01	; 1
    1bb8:	9a af       	std	Y+58, r25	; 0x3a
    1bba:	89 af       	std	Y+57, r24	; 0x39
    1bbc:	ef a9       	ldd	r30, Y+55	; 0x37
    1bbe:	f8 ad       	ldd	r31, Y+56	; 0x38
    1bc0:	00 82       	st	Z, r0
    1bc2:	8f a9       	ldd	r24, Y+55	; 0x37
    1bc4:	98 ad       	ldd	r25, Y+56	; 0x38
    1bc6:	01 96       	adiw	r24, 0x01	; 1
    1bc8:	98 af       	std	Y+56, r25	; 0x38
    1bca:	8f ab       	std	Y+55, r24	; 0x37
    1bcc:	9b ad       	ldd	r25, Y+59	; 0x3b
    1bce:	91 50       	subi	r25, 0x01	; 1
    1bd0:	9b af       	std	Y+59, r25	; 0x3b
    1bd2:	eb ad       	ldd	r30, Y+59	; 0x3b
    1bd4:	ee 23       	and	r30, r30
    1bd6:	51 f7       	brne	.-44     	; 0x1bac <KPAD_U8GetPressedKey+0x30>
	u8 Local_U8PinState;

	u8 Local_U8ColIndex,Local_U8CRowIndex;
	u8 KPAD_U8RowsPins[ROW_NUMBERS]={KPAD_ROW_PIN0,KPAD_ROW_PIN1,KPAD_ROW_PIN2,KPAD_ROW_PIN3};
    1bd8:	1b a6       	std	Y+43, r1	; 0x2b
    1bda:	81 e0       	ldi	r24, 0x01	; 1
    1bdc:	8c a7       	std	Y+44, r24	; 0x2c
    1bde:	82 e0       	ldi	r24, 0x02	; 2
    1be0:	8d a7       	std	Y+45, r24	; 0x2d
    1be2:	83 e0       	ldi	r24, 0x03	; 3
    1be4:	8e a7       	std	Y+46, r24	; 0x2e
	u8 KPAD_U8ColsPins[COLUMN_NUMBERS]={KPAD_COLUMN_PIN0,KPAD_COLUMN_PIN1,KPAD_COLUMN_PIN2,KPAD_COLUMN_PIN3,KPAD_COLUMN_PIN4 ,KPAD_COLUMN_PIN5};
    1be6:	ce 01       	movw	r24, r28
    1be8:	8f 96       	adiw	r24, 0x2f	; 47
    1bea:	9d af       	std	Y+61, r25	; 0x3d
    1bec:	8c af       	std	Y+60, r24	; 0x3c
    1bee:	e0 e0       	ldi	r30, 0x00	; 0
    1bf0:	f3 e0       	ldi	r31, 0x03	; 3
    1bf2:	ff af       	std	Y+63, r31	; 0x3f
    1bf4:	ee af       	std	Y+62, r30	; 0x3e
    1bf6:	f6 e0       	ldi	r31, 0x06	; 6
    1bf8:	21 96       	adiw	r28, 0x01	; 1
    1bfa:	ff af       	std	Y+63, r31	; 0x3f
    1bfc:	21 97       	sbiw	r28, 0x01	; 1
    1bfe:	ee ad       	ldd	r30, Y+62	; 0x3e
    1c00:	ff ad       	ldd	r31, Y+63	; 0x3f
    1c02:	00 80       	ld	r0, Z
    1c04:	8e ad       	ldd	r24, Y+62	; 0x3e
    1c06:	9f ad       	ldd	r25, Y+63	; 0x3f
    1c08:	01 96       	adiw	r24, 0x01	; 1
    1c0a:	9f af       	std	Y+63, r25	; 0x3f
    1c0c:	8e af       	std	Y+62, r24	; 0x3e
    1c0e:	ec ad       	ldd	r30, Y+60	; 0x3c
    1c10:	fd ad       	ldd	r31, Y+61	; 0x3d
    1c12:	00 82       	st	Z, r0
    1c14:	8c ad       	ldd	r24, Y+60	; 0x3c
    1c16:	9d ad       	ldd	r25, Y+61	; 0x3d
    1c18:	01 96       	adiw	r24, 0x01	; 1
    1c1a:	9d af       	std	Y+61, r25	; 0x3d
    1c1c:	8c af       	std	Y+60, r24	; 0x3c
    1c1e:	21 96       	adiw	r28, 0x01	; 1
    1c20:	9f ad       	ldd	r25, Y+63	; 0x3f
    1c22:	21 97       	sbiw	r28, 0x01	; 1
    1c24:	91 50       	subi	r25, 0x01	; 1
    1c26:	21 96       	adiw	r28, 0x01	; 1
    1c28:	9f af       	std	Y+63, r25	; 0x3f
    1c2a:	21 97       	sbiw	r28, 0x01	; 1
    1c2c:	21 96       	adiw	r28, 0x01	; 1
    1c2e:	ef ad       	ldd	r30, Y+63	; 0x3f
    1c30:	21 97       	sbiw	r28, 0x01	; 1
    1c32:	ee 23       	and	r30, r30
    1c34:	21 f7       	brne	.-56     	; 0x1bfe <KPAD_U8GetPressedKey+0x82>

	if(Copy_U8Returned !=NULL)
    1c36:	8d a9       	ldd	r24, Y+53	; 0x35
    1c38:	9e a9       	ldd	r25, Y+54	; 0x36
    1c3a:	00 97       	sbiw	r24, 0x00	; 0
    1c3c:	09 f4       	brne	.+2      	; 0x1c40 <KPAD_U8GetPressedKey+0xc4>
    1c3e:	e9 c0       	rjmp	.+466    	; 0x1e12 <KPAD_U8GetPressedKey+0x296>
	{
		*Copy_U8Returned=0xff;
    1c40:	ed a9       	ldd	r30, Y+53	; 0x35
    1c42:	fe a9       	ldd	r31, Y+54	; 0x36
    1c44:	8f ef       	ldi	r24, 0xFF	; 255
    1c46:	80 83       	st	Z, r24
		for(Local_U8ColIndex=0;Local_U8ColIndex <COLUMN_NUMBERS ; Local_U8ColIndex++)
    1c48:	18 8a       	std	Y+16, r1	; 0x10
    1c4a:	de c0       	rjmp	.+444    	; 0x1e08 <KPAD_U8GetPressedKey+0x28c>
		{
			DIO_U8SetPinValue(KPAD_COLUMN_PORT,KPAD_U8ColsPins[Local_U8ColIndex],DIO_LOW);
    1c4c:	88 89       	ldd	r24, Y+16	; 0x10
    1c4e:	28 2f       	mov	r18, r24
    1c50:	30 e0       	ldi	r19, 0x00	; 0
    1c52:	ce 01       	movw	r24, r28
    1c54:	8f 96       	adiw	r24, 0x2f	; 47
    1c56:	fc 01       	movw	r30, r24
    1c58:	e2 0f       	add	r30, r18
    1c5a:	f3 1f       	adc	r31, r19
    1c5c:	90 81       	ld	r25, Z
    1c5e:	81 e0       	ldi	r24, 0x01	; 1
    1c60:	69 2f       	mov	r22, r25
    1c62:	40 e0       	ldi	r20, 0x00	; 0
    1c64:	0e 94 8e 08 	call	0x111c	; 0x111c <DIO_U8SetPinValue>
			for(Local_U8CRowIndex=0; Local_U8CRowIndex < ROW_NUMBERS ; Local_U8CRowIndex++)
    1c68:	1f 86       	std	Y+15, r1	; 0x0f
    1c6a:	b9 c0       	rjmp	.+370    	; 0x1dde <KPAD_U8GetPressedKey+0x262>
			{
				DIO_U8GetPinValue(KPAD_ROW_PORT ,KPAD_U8RowsPins[Local_U8CRowIndex],&Local_U8PinState);
    1c6c:	8f 85       	ldd	r24, Y+15	; 0x0f
    1c6e:	28 2f       	mov	r18, r24
    1c70:	30 e0       	ldi	r19, 0x00	; 0
    1c72:	ce 01       	movw	r24, r28
    1c74:	8b 96       	adiw	r24, 0x2b	; 43
    1c76:	fc 01       	movw	r30, r24
    1c78:	e2 0f       	add	r30, r18
    1c7a:	f3 1f       	adc	r31, r19
    1c7c:	90 81       	ld	r25, Z
    1c7e:	9e 01       	movw	r18, r28
    1c80:	26 5d       	subi	r18, 0xD6	; 214
    1c82:	3f 4f       	sbci	r19, 0xFF	; 255
    1c84:	83 e0       	ldi	r24, 0x03	; 3
    1c86:	69 2f       	mov	r22, r25
    1c88:	a9 01       	movw	r20, r18
    1c8a:	0e 94 aa 09 	call	0x1354	; 0x1354 <DIO_U8GetPinValue>
				if(Local_U8PinState==DIO_LOW)
    1c8e:	8a a5       	ldd	r24, Y+42	; 0x2a
    1c90:	88 23       	and	r24, r24
    1c92:	09 f0       	breq	.+2      	; 0x1c96 <KPAD_U8GetPressedKey+0x11a>
    1c94:	a1 c0       	rjmp	.+322    	; 0x1dd8 <KPAD_U8GetPressedKey+0x25c>
    1c96:	80 e0       	ldi	r24, 0x00	; 0
    1c98:	90 e0       	ldi	r25, 0x00	; 0
    1c9a:	a0 ef       	ldi	r26, 0xF0	; 240
    1c9c:	b1 e4       	ldi	r27, 0x41	; 65
    1c9e:	8b 87       	std	Y+11, r24	; 0x0b
    1ca0:	9c 87       	std	Y+12, r25	; 0x0c
    1ca2:	ad 87       	std	Y+13, r26	; 0x0d
    1ca4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ca6:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ca8:	7c 85       	ldd	r23, Y+12	; 0x0c
    1caa:	8d 85       	ldd	r24, Y+13	; 0x0d
    1cac:	9e 85       	ldd	r25, Y+14	; 0x0e
    1cae:	20 e0       	ldi	r18, 0x00	; 0
    1cb0:	30 e0       	ldi	r19, 0x00	; 0
    1cb2:	4a ef       	ldi	r20, 0xFA	; 250
    1cb4:	54 e4       	ldi	r21, 0x44	; 68
    1cb6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cba:	dc 01       	movw	r26, r24
    1cbc:	cb 01       	movw	r24, r22
    1cbe:	8f 83       	std	Y+7, r24	; 0x07
    1cc0:	98 87       	std	Y+8, r25	; 0x08
    1cc2:	a9 87       	std	Y+9, r26	; 0x09
    1cc4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1cc6:	6f 81       	ldd	r22, Y+7	; 0x07
    1cc8:	78 85       	ldd	r23, Y+8	; 0x08
    1cca:	89 85       	ldd	r24, Y+9	; 0x09
    1ccc:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cce:	20 e0       	ldi	r18, 0x00	; 0
    1cd0:	30 e0       	ldi	r19, 0x00	; 0
    1cd2:	40 e8       	ldi	r20, 0x80	; 128
    1cd4:	5f e3       	ldi	r21, 0x3F	; 63
    1cd6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1cda:	88 23       	and	r24, r24
    1cdc:	2c f4       	brge	.+10     	; 0x1ce8 <KPAD_U8GetPressedKey+0x16c>
		__ticks = 1;
    1cde:	81 e0       	ldi	r24, 0x01	; 1
    1ce0:	90 e0       	ldi	r25, 0x00	; 0
    1ce2:	9e 83       	std	Y+6, r25	; 0x06
    1ce4:	8d 83       	std	Y+5, r24	; 0x05
    1ce6:	3f c0       	rjmp	.+126    	; 0x1d66 <KPAD_U8GetPressedKey+0x1ea>
	else if (__tmp > 65535)
    1ce8:	6f 81       	ldd	r22, Y+7	; 0x07
    1cea:	78 85       	ldd	r23, Y+8	; 0x08
    1cec:	89 85       	ldd	r24, Y+9	; 0x09
    1cee:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cf0:	20 e0       	ldi	r18, 0x00	; 0
    1cf2:	3f ef       	ldi	r19, 0xFF	; 255
    1cf4:	4f e7       	ldi	r20, 0x7F	; 127
    1cf6:	57 e4       	ldi	r21, 0x47	; 71
    1cf8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1cfc:	18 16       	cp	r1, r24
    1cfe:	4c f5       	brge	.+82     	; 0x1d52 <KPAD_U8GetPressedKey+0x1d6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d00:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d02:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d04:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d06:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d08:	20 e0       	ldi	r18, 0x00	; 0
    1d0a:	30 e0       	ldi	r19, 0x00	; 0
    1d0c:	40 e2       	ldi	r20, 0x20	; 32
    1d0e:	51 e4       	ldi	r21, 0x41	; 65
    1d10:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d14:	dc 01       	movw	r26, r24
    1d16:	cb 01       	movw	r24, r22
    1d18:	bc 01       	movw	r22, r24
    1d1a:	cd 01       	movw	r24, r26
    1d1c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d20:	dc 01       	movw	r26, r24
    1d22:	cb 01       	movw	r24, r22
    1d24:	9e 83       	std	Y+6, r25	; 0x06
    1d26:	8d 83       	std	Y+5, r24	; 0x05
    1d28:	0f c0       	rjmp	.+30     	; 0x1d48 <KPAD_U8GetPressedKey+0x1cc>
    1d2a:	88 ec       	ldi	r24, 0xC8	; 200
    1d2c:	90 e0       	ldi	r25, 0x00	; 0
    1d2e:	9c 83       	std	Y+4, r25	; 0x04
    1d30:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1d32:	8b 81       	ldd	r24, Y+3	; 0x03
    1d34:	9c 81       	ldd	r25, Y+4	; 0x04
    1d36:	01 97       	sbiw	r24, 0x01	; 1
    1d38:	f1 f7       	brne	.-4      	; 0x1d36 <KPAD_U8GetPressedKey+0x1ba>
    1d3a:	9c 83       	std	Y+4, r25	; 0x04
    1d3c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d3e:	8d 81       	ldd	r24, Y+5	; 0x05
    1d40:	9e 81       	ldd	r25, Y+6	; 0x06
    1d42:	01 97       	sbiw	r24, 0x01	; 1
    1d44:	9e 83       	std	Y+6, r25	; 0x06
    1d46:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d48:	8d 81       	ldd	r24, Y+5	; 0x05
    1d4a:	9e 81       	ldd	r25, Y+6	; 0x06
    1d4c:	00 97       	sbiw	r24, 0x00	; 0
    1d4e:	69 f7       	brne	.-38     	; 0x1d2a <KPAD_U8GetPressedKey+0x1ae>
    1d50:	26 c0       	rjmp	.+76     	; 0x1d9e <KPAD_U8GetPressedKey+0x222>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d52:	6f 81       	ldd	r22, Y+7	; 0x07
    1d54:	78 85       	ldd	r23, Y+8	; 0x08
    1d56:	89 85       	ldd	r24, Y+9	; 0x09
    1d58:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d5a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d5e:	dc 01       	movw	r26, r24
    1d60:	cb 01       	movw	r24, r22
    1d62:	9e 83       	std	Y+6, r25	; 0x06
    1d64:	8d 83       	std	Y+5, r24	; 0x05
    1d66:	8d 81       	ldd	r24, Y+5	; 0x05
    1d68:	9e 81       	ldd	r25, Y+6	; 0x06
    1d6a:	9a 83       	std	Y+2, r25	; 0x02
    1d6c:	89 83       	std	Y+1, r24	; 0x01
    1d6e:	89 81       	ldd	r24, Y+1	; 0x01
    1d70:	9a 81       	ldd	r25, Y+2	; 0x02
    1d72:	01 97       	sbiw	r24, 0x01	; 1
    1d74:	f1 f7       	brne	.-4      	; 0x1d72 <KPAD_U8GetPressedKey+0x1f6>
    1d76:	9a 83       	std	Y+2, r25	; 0x02
    1d78:	89 83       	std	Y+1, r24	; 0x01
    1d7a:	11 c0       	rjmp	.+34     	; 0x1d9e <KPAD_U8GetPressedKey+0x222>
						_delay_ms(30);

						/* Polling on the pressed Key */
						while(Local_U8PinState==DIO_LOW)
						{
							DIO_U8GetPinValue(KPAD_ROW_PORT ,KPAD_U8RowsPins[Local_U8CRowIndex],&Local_U8PinState);
    1d7c:	8f 85       	ldd	r24, Y+15	; 0x0f
    1d7e:	28 2f       	mov	r18, r24
    1d80:	30 e0       	ldi	r19, 0x00	; 0
    1d82:	ce 01       	movw	r24, r28
    1d84:	8b 96       	adiw	r24, 0x2b	; 43
    1d86:	fc 01       	movw	r30, r24
    1d88:	e2 0f       	add	r30, r18
    1d8a:	f3 1f       	adc	r31, r19
    1d8c:	90 81       	ld	r25, Z
    1d8e:	9e 01       	movw	r18, r28
    1d90:	26 5d       	subi	r18, 0xD6	; 214
    1d92:	3f 4f       	sbci	r19, 0xFF	; 255
    1d94:	83 e0       	ldi	r24, 0x03	; 3
    1d96:	69 2f       	mov	r22, r25
    1d98:	a9 01       	movw	r20, r18
    1d9a:	0e 94 aa 09 	call	0x1354	; 0x1354 <DIO_U8GetPinValue>
				if(Local_U8PinState==DIO_LOW)
					{
						_delay_ms(30);

						/* Polling on the pressed Key */
						while(Local_U8PinState==DIO_LOW)
    1d9e:	8a a5       	ldd	r24, Y+42	; 0x2a
    1da0:	88 23       	and	r24, r24
    1da2:	61 f3       	breq	.-40     	; 0x1d7c <KPAD_U8GetPressedKey+0x200>
						{
							DIO_U8GetPinValue(KPAD_ROW_PORT ,KPAD_U8RowsPins[Local_U8CRowIndex],&Local_U8PinState);
						}
						*Copy_U8Returned=LocaL_U8KPAD_ARR[Local_U8CRowIndex][Local_U8ColIndex];
    1da4:	8f 85       	ldd	r24, Y+15	; 0x0f
    1da6:	28 2f       	mov	r18, r24
    1da8:	30 e0       	ldi	r19, 0x00	; 0
    1daa:	88 89       	ldd	r24, Y+16	; 0x10
    1dac:	48 2f       	mov	r20, r24
    1dae:	50 e0       	ldi	r21, 0x00	; 0
    1db0:	c9 01       	movw	r24, r18
    1db2:	88 0f       	add	r24, r24
    1db4:	99 1f       	adc	r25, r25
    1db6:	82 0f       	add	r24, r18
    1db8:	93 1f       	adc	r25, r19
    1dba:	9c 01       	movw	r18, r24
    1dbc:	22 0f       	add	r18, r18
    1dbe:	33 1f       	adc	r19, r19
    1dc0:	ce 01       	movw	r24, r28
    1dc2:	01 96       	adiw	r24, 0x01	; 1
    1dc4:	82 0f       	add	r24, r18
    1dc6:	93 1f       	adc	r25, r19
    1dc8:	84 0f       	add	r24, r20
    1dca:	95 1f       	adc	r25, r21
    1dcc:	fc 01       	movw	r30, r24
    1dce:	71 96       	adiw	r30, 0x11	; 17
    1dd0:	80 81       	ld	r24, Z
    1dd2:	ed a9       	ldd	r30, Y+53	; 0x35
    1dd4:	fe a9       	ldd	r31, Y+54	; 0x36
    1dd6:	80 83       	st	Z, r24
	{
		*Copy_U8Returned=0xff;
		for(Local_U8ColIndex=0;Local_U8ColIndex <COLUMN_NUMBERS ; Local_U8ColIndex++)
		{
			DIO_U8SetPinValue(KPAD_COLUMN_PORT,KPAD_U8ColsPins[Local_U8ColIndex],DIO_LOW);
			for(Local_U8CRowIndex=0; Local_U8CRowIndex < ROW_NUMBERS ; Local_U8CRowIndex++)
    1dd8:	8f 85       	ldd	r24, Y+15	; 0x0f
    1dda:	8f 5f       	subi	r24, 0xFF	; 255
    1ddc:	8f 87       	std	Y+15, r24	; 0x0f
    1dde:	8f 85       	ldd	r24, Y+15	; 0x0f
    1de0:	84 30       	cpi	r24, 0x04	; 4
    1de2:	08 f4       	brcc	.+2      	; 0x1de6 <KPAD_U8GetPressedKey+0x26a>
    1de4:	43 cf       	rjmp	.-378    	; 0x1c6c <KPAD_U8GetPressedKey+0xf0>
						}
						*Copy_U8Returned=LocaL_U8KPAD_ARR[Local_U8CRowIndex][Local_U8ColIndex];

					}
			}
			DIO_U8SetPinValue(KPAD_COLUMN_PORT,KPAD_U8ColsPins[Local_U8ColIndex],DIO_HIGH);
    1de6:	88 89       	ldd	r24, Y+16	; 0x10
    1de8:	28 2f       	mov	r18, r24
    1dea:	30 e0       	ldi	r19, 0x00	; 0
    1dec:	ce 01       	movw	r24, r28
    1dee:	8f 96       	adiw	r24, 0x2f	; 47
    1df0:	fc 01       	movw	r30, r24
    1df2:	e2 0f       	add	r30, r18
    1df4:	f3 1f       	adc	r31, r19
    1df6:	90 81       	ld	r25, Z
    1df8:	81 e0       	ldi	r24, 0x01	; 1
    1dfa:	69 2f       	mov	r22, r25
    1dfc:	41 e0       	ldi	r20, 0x01	; 1
    1dfe:	0e 94 8e 08 	call	0x111c	; 0x111c <DIO_U8SetPinValue>
	u8 KPAD_U8ColsPins[COLUMN_NUMBERS]={KPAD_COLUMN_PIN0,KPAD_COLUMN_PIN1,KPAD_COLUMN_PIN2,KPAD_COLUMN_PIN3,KPAD_COLUMN_PIN4 ,KPAD_COLUMN_PIN5};

	if(Copy_U8Returned !=NULL)
	{
		*Copy_U8Returned=0xff;
		for(Local_U8ColIndex=0;Local_U8ColIndex <COLUMN_NUMBERS ; Local_U8ColIndex++)
    1e02:	88 89       	ldd	r24, Y+16	; 0x10
    1e04:	8f 5f       	subi	r24, 0xFF	; 255
    1e06:	88 8b       	std	Y+16, r24	; 0x10
    1e08:	88 89       	ldd	r24, Y+16	; 0x10
    1e0a:	86 30       	cpi	r24, 0x06	; 6
    1e0c:	08 f4       	brcc	.+2      	; 0x1e10 <KPAD_U8GetPressedKey+0x294>
    1e0e:	1e cf       	rjmp	.-452    	; 0x1c4c <KPAD_U8GetPressedKey+0xd0>
    1e10:	02 c0       	rjmp	.+4      	; 0x1e16 <KPAD_U8GetPressedKey+0x29a>
		}

	}
	else
	{
		Local_U8ErrorState=ERROR_STATE_OK;
    1e12:	81 e0       	ldi	r24, 0x01	; 1
    1e14:	89 8b       	std	Y+17, r24	; 0x11
	}

return Local_U8ErrorState;
    1e16:	89 89       	ldd	r24, Y+17	; 0x11

}
    1e18:	c0 5c       	subi	r28, 0xC0	; 192
    1e1a:	df 4f       	sbci	r29, 0xFF	; 255
    1e1c:	0f b6       	in	r0, 0x3f	; 63
    1e1e:	f8 94       	cli
    1e20:	de bf       	out	0x3e, r29	; 62
    1e22:	0f be       	out	0x3f, r0	; 63
    1e24:	cd bf       	out	0x3d, r28	; 61
    1e26:	cf 91       	pop	r28
    1e28:	df 91       	pop	r29
    1e2a:	08 95       	ret

00001e2c <KPAD_Void_INIT>:

void KPAD_Void_INIT(void)
{
    1e2c:	df 93       	push	r29
    1e2e:	cf 93       	push	r28
    1e30:	cd b7       	in	r28, 0x3d	; 61
    1e32:	de b7       	in	r29, 0x3e	; 62
	//KEYPAD
	DIO_U8SetPortDirection(KPAD_COLUMN_PORT ,0xff);
    1e34:	81 e0       	ldi	r24, 0x01	; 1
    1e36:	6f ef       	ldi	r22, 0xFF	; 255
    1e38:	0e 94 d0 0a 	call	0x15a0	; 0x15a0 <DIO_U8SetPortDirection>
	DIO_U8SetPortValue(KPAD_COLUMN_PORT ,DIO_PORT_OUT);
    1e3c:	81 e0       	ldi	r24, 0x01	; 1
    1e3e:	6f ef       	ldi	r22, 0xFF	; 255
    1e40:	0e 94 91 0b 	call	0x1722	; 0x1722 <DIO_U8SetPortValue>

	DIO_U8SetPinDirection(KPAD_ROW_PORT,DIO_PIN0,DIO_PIN_IN);
    1e44:	83 e0       	ldi	r24, 0x03	; 3
    1e46:	60 e0       	ldi	r22, 0x00	; 0
    1e48:	40 e0       	ldi	r20, 0x00	; 0
    1e4a:	0e 94 75 07 	call	0xeea	; 0xeea <DIO_U8SetPinDirection>
	DIO_U8SetPinDirection(KPAD_ROW_PORT,DIO_PIN1,DIO_PIN_IN);
    1e4e:	83 e0       	ldi	r24, 0x03	; 3
    1e50:	61 e0       	ldi	r22, 0x01	; 1
    1e52:	40 e0       	ldi	r20, 0x00	; 0
    1e54:	0e 94 75 07 	call	0xeea	; 0xeea <DIO_U8SetPinDirection>
	DIO_U8SetPinDirection(KPAD_ROW_PORT,DIO_PIN2,DIO_PIN_IN);
    1e58:	83 e0       	ldi	r24, 0x03	; 3
    1e5a:	62 e0       	ldi	r22, 0x02	; 2
    1e5c:	40 e0       	ldi	r20, 0x00	; 0
    1e5e:	0e 94 75 07 	call	0xeea	; 0xeea <DIO_U8SetPinDirection>
	DIO_U8SetPinDirection(KPAD_ROW_PORT,DIO_PIN3,DIO_PIN_IN);
    1e62:	83 e0       	ldi	r24, 0x03	; 3
    1e64:	63 e0       	ldi	r22, 0x03	; 3
    1e66:	40 e0       	ldi	r20, 0x00	; 0
    1e68:	0e 94 75 07 	call	0xeea	; 0xeea <DIO_U8SetPinDirection>

	DIO_U8SetPinValue(KPAD_ROW_PORT,DIO_PIN0,DIO_PIN_OUT);
    1e6c:	83 e0       	ldi	r24, 0x03	; 3
    1e6e:	60 e0       	ldi	r22, 0x00	; 0
    1e70:	41 e0       	ldi	r20, 0x01	; 1
    1e72:	0e 94 8e 08 	call	0x111c	; 0x111c <DIO_U8SetPinValue>
	DIO_U8SetPinValue(KPAD_ROW_PORT,DIO_PIN1,DIO_PIN_OUT);
    1e76:	83 e0       	ldi	r24, 0x03	; 3
    1e78:	61 e0       	ldi	r22, 0x01	; 1
    1e7a:	41 e0       	ldi	r20, 0x01	; 1
    1e7c:	0e 94 8e 08 	call	0x111c	; 0x111c <DIO_U8SetPinValue>
	DIO_U8SetPinValue(KPAD_ROW_PORT,DIO_PIN2,DIO_PIN_OUT);
    1e80:	83 e0       	ldi	r24, 0x03	; 3
    1e82:	62 e0       	ldi	r22, 0x02	; 2
    1e84:	41 e0       	ldi	r20, 0x01	; 1
    1e86:	0e 94 8e 08 	call	0x111c	; 0x111c <DIO_U8SetPinValue>
	DIO_U8SetPinValue(KPAD_ROW_PORT,DIO_PIN3,DIO_PIN_OUT);
    1e8a:	83 e0       	ldi	r24, 0x03	; 3
    1e8c:	63 e0       	ldi	r22, 0x03	; 3
    1e8e:	41 e0       	ldi	r20, 0x01	; 1
    1e90:	0e 94 8e 08 	call	0x111c	; 0x111c <DIO_U8SetPinValue>

}
    1e94:	cf 91       	pop	r28
    1e96:	df 91       	pop	r29
    1e98:	08 95       	ret

00001e9a <LCD_VoidSendCommand>:
#include "LCD_Interface.h"
#include "LCD_Private.h"
#include "LCD_Config.h"

void LCD_VoidSendCommand(u8 Copy_U8Command)
{
    1e9a:	0f 93       	push	r16
    1e9c:	1f 93       	push	r17
    1e9e:	df 93       	push	r29
    1ea0:	cf 93       	push	r28
    1ea2:	cd b7       	in	r28, 0x3d	; 61
    1ea4:	de b7       	in	r29, 0x3e	; 62
    1ea6:	c7 55       	subi	r28, 0x57	; 87
    1ea8:	d0 40       	sbci	r29, 0x00	; 0
    1eaa:	0f b6       	in	r0, 0x3f	; 63
    1eac:	f8 94       	cli
    1eae:	de bf       	out	0x3e, r29	; 62
    1eb0:	0f be       	out	0x3f, r0	; 63
    1eb2:	cd bf       	out	0x3d, r28	; 61
    1eb4:	fe 01       	movw	r30, r28
    1eb6:	e9 5a       	subi	r30, 0xA9	; 169
    1eb8:	ff 4f       	sbci	r31, 0xFF	; 255
    1eba:	80 83       	st	Z, r24
	DIO_U8SetPinValue(LCD_CONTROL_PORT,CONTROL_E,DIO_HIGH);
	_delay_ms(2);
	DIO_U8SetPinValue(LCD_CONTROL_PORT,CONTROL_E,DIO_LOW);
#elif LCD_MODE == LCD_4BIT_MODE
	/* Set RS -> Low  --> to send Command*/
	DIO_U8SetPinValue(LCD_CONTROL_PORT,CONTROL_RS,DIO_LOW);
    1ebc:	83 e0       	ldi	r24, 0x03	; 3
    1ebe:	62 e0       	ldi	r22, 0x02	; 2
    1ec0:	40 e0       	ldi	r20, 0x00	; 0
    1ec2:	0e 94 8e 08 	call	0x111c	; 0x111c <DIO_U8SetPinValue>

	/* Set RW -> Low  --> to Write*/
	DIO_U8SetPinValue(LCD_CONTROL_PORT,CONTROL_RW,DIO_LOW);
    1ec6:	83 e0       	ldi	r24, 0x03	; 3
    1ec8:	63 e0       	ldi	r22, 0x03	; 3
    1eca:	40 e0       	ldi	r20, 0x00	; 0
    1ecc:	0e 94 8e 08 	call	0x111c	; 0x111c <DIO_U8SetPinValue>

	/* Send the Command to Data Port */
	DIO_U8SetPortValue(LCD_DATA_PORT,Copy_U8Command);
    1ed0:	fe 01       	movw	r30, r28
    1ed2:	e9 5a       	subi	r30, 0xA9	; 169
    1ed4:	ff 4f       	sbci	r31, 0xFF	; 255
    1ed6:	80 e0       	ldi	r24, 0x00	; 0
    1ed8:	60 81       	ld	r22, Z
    1eda:	0e 94 91 0b 	call	0x1722	; 0x1722 <DIO_U8SetPortValue>
	/*Enable sequence to send command*/
	DIO_U8SetPinValue(LCD_CONTROL_PORT,CONTROL_E,DIO_HIGH);
    1ede:	83 e0       	ldi	r24, 0x03	; 3
    1ee0:	64 e0       	ldi	r22, 0x04	; 4
    1ee2:	41 e0       	ldi	r20, 0x01	; 1
    1ee4:	0e 94 8e 08 	call	0x111c	; 0x111c <DIO_U8SetPinValue>
    1ee8:	fe 01       	movw	r30, r28
    1eea:	ed 5a       	subi	r30, 0xAD	; 173
    1eec:	ff 4f       	sbci	r31, 0xFF	; 255
    1eee:	80 e0       	ldi	r24, 0x00	; 0
    1ef0:	90 e0       	ldi	r25, 0x00	; 0
    1ef2:	a0 e8       	ldi	r26, 0x80	; 128
    1ef4:	bf e3       	ldi	r27, 0x3F	; 63
    1ef6:	80 83       	st	Z, r24
    1ef8:	91 83       	std	Z+1, r25	; 0x01
    1efa:	a2 83       	std	Z+2, r26	; 0x02
    1efc:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1efe:	8e 01       	movw	r16, r28
    1f00:	01 5b       	subi	r16, 0xB1	; 177
    1f02:	1f 4f       	sbci	r17, 0xFF	; 255
    1f04:	fe 01       	movw	r30, r28
    1f06:	ed 5a       	subi	r30, 0xAD	; 173
    1f08:	ff 4f       	sbci	r31, 0xFF	; 255
    1f0a:	60 81       	ld	r22, Z
    1f0c:	71 81       	ldd	r23, Z+1	; 0x01
    1f0e:	82 81       	ldd	r24, Z+2	; 0x02
    1f10:	93 81       	ldd	r25, Z+3	; 0x03
    1f12:	2b ea       	ldi	r18, 0xAB	; 171
    1f14:	3a ea       	ldi	r19, 0xAA	; 170
    1f16:	4a e2       	ldi	r20, 0x2A	; 42
    1f18:	50 e4       	ldi	r21, 0x40	; 64
    1f1a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f1e:	dc 01       	movw	r26, r24
    1f20:	cb 01       	movw	r24, r22
    1f22:	f8 01       	movw	r30, r16
    1f24:	80 83       	st	Z, r24
    1f26:	91 83       	std	Z+1, r25	; 0x01
    1f28:	a2 83       	std	Z+2, r26	; 0x02
    1f2a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1f2c:	fe 01       	movw	r30, r28
    1f2e:	e1 5b       	subi	r30, 0xB1	; 177
    1f30:	ff 4f       	sbci	r31, 0xFF	; 255
    1f32:	60 81       	ld	r22, Z
    1f34:	71 81       	ldd	r23, Z+1	; 0x01
    1f36:	82 81       	ldd	r24, Z+2	; 0x02
    1f38:	93 81       	ldd	r25, Z+3	; 0x03
    1f3a:	20 e0       	ldi	r18, 0x00	; 0
    1f3c:	30 e0       	ldi	r19, 0x00	; 0
    1f3e:	40 e8       	ldi	r20, 0x80	; 128
    1f40:	5f e3       	ldi	r21, 0x3F	; 63
    1f42:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1f46:	88 23       	and	r24, r24
    1f48:	34 f4       	brge	.+12     	; 0x1f56 <LCD_VoidSendCommand+0xbc>
		__ticks = 1;
    1f4a:	fe 01       	movw	r30, r28
    1f4c:	e2 5b       	subi	r30, 0xB2	; 178
    1f4e:	ff 4f       	sbci	r31, 0xFF	; 255
    1f50:	81 e0       	ldi	r24, 0x01	; 1
    1f52:	80 83       	st	Z, r24
    1f54:	e0 c0       	rjmp	.+448    	; 0x2116 <LCD_VoidSendCommand+0x27c>
	else if (__tmp > 255)
    1f56:	fe 01       	movw	r30, r28
    1f58:	e1 5b       	subi	r30, 0xB1	; 177
    1f5a:	ff 4f       	sbci	r31, 0xFF	; 255
    1f5c:	60 81       	ld	r22, Z
    1f5e:	71 81       	ldd	r23, Z+1	; 0x01
    1f60:	82 81       	ldd	r24, Z+2	; 0x02
    1f62:	93 81       	ldd	r25, Z+3	; 0x03
    1f64:	20 e0       	ldi	r18, 0x00	; 0
    1f66:	30 e0       	ldi	r19, 0x00	; 0
    1f68:	4f e7       	ldi	r20, 0x7F	; 127
    1f6a:	53 e4       	ldi	r21, 0x43	; 67
    1f6c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1f70:	18 16       	cp	r1, r24
    1f72:	0c f0       	brlt	.+2      	; 0x1f76 <LCD_VoidSendCommand+0xdc>
    1f74:	c0 c0       	rjmp	.+384    	; 0x20f6 <LCD_VoidSendCommand+0x25c>
	{
		_delay_ms(__us / 1000.0);
    1f76:	fe 01       	movw	r30, r28
    1f78:	ed 5a       	subi	r30, 0xAD	; 173
    1f7a:	ff 4f       	sbci	r31, 0xFF	; 255
    1f7c:	60 81       	ld	r22, Z
    1f7e:	71 81       	ldd	r23, Z+1	; 0x01
    1f80:	82 81       	ldd	r24, Z+2	; 0x02
    1f82:	93 81       	ldd	r25, Z+3	; 0x03
    1f84:	20 e0       	ldi	r18, 0x00	; 0
    1f86:	30 e0       	ldi	r19, 0x00	; 0
    1f88:	4a e7       	ldi	r20, 0x7A	; 122
    1f8a:	54 e4       	ldi	r21, 0x44	; 68
    1f8c:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1f90:	dc 01       	movw	r26, r24
    1f92:	cb 01       	movw	r24, r22
    1f94:	fe 01       	movw	r30, r28
    1f96:	e6 5b       	subi	r30, 0xB6	; 182
    1f98:	ff 4f       	sbci	r31, 0xFF	; 255
    1f9a:	80 83       	st	Z, r24
    1f9c:	91 83       	std	Z+1, r25	; 0x01
    1f9e:	a2 83       	std	Z+2, r26	; 0x02
    1fa0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1fa2:	8e 01       	movw	r16, r28
    1fa4:	0a 5b       	subi	r16, 0xBA	; 186
    1fa6:	1f 4f       	sbci	r17, 0xFF	; 255
    1fa8:	fe 01       	movw	r30, r28
    1faa:	e6 5b       	subi	r30, 0xB6	; 182
    1fac:	ff 4f       	sbci	r31, 0xFF	; 255
    1fae:	60 81       	ld	r22, Z
    1fb0:	71 81       	ldd	r23, Z+1	; 0x01
    1fb2:	82 81       	ldd	r24, Z+2	; 0x02
    1fb4:	93 81       	ldd	r25, Z+3	; 0x03
    1fb6:	20 e0       	ldi	r18, 0x00	; 0
    1fb8:	30 e0       	ldi	r19, 0x00	; 0
    1fba:	4a ef       	ldi	r20, 0xFA	; 250
    1fbc:	54 e4       	ldi	r21, 0x44	; 68
    1fbe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fc2:	dc 01       	movw	r26, r24
    1fc4:	cb 01       	movw	r24, r22
    1fc6:	f8 01       	movw	r30, r16
    1fc8:	80 83       	st	Z, r24
    1fca:	91 83       	std	Z+1, r25	; 0x01
    1fcc:	a2 83       	std	Z+2, r26	; 0x02
    1fce:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1fd0:	fe 01       	movw	r30, r28
    1fd2:	ea 5b       	subi	r30, 0xBA	; 186
    1fd4:	ff 4f       	sbci	r31, 0xFF	; 255
    1fd6:	60 81       	ld	r22, Z
    1fd8:	71 81       	ldd	r23, Z+1	; 0x01
    1fda:	82 81       	ldd	r24, Z+2	; 0x02
    1fdc:	93 81       	ldd	r25, Z+3	; 0x03
    1fde:	20 e0       	ldi	r18, 0x00	; 0
    1fe0:	30 e0       	ldi	r19, 0x00	; 0
    1fe2:	40 e8       	ldi	r20, 0x80	; 128
    1fe4:	5f e3       	ldi	r21, 0x3F	; 63
    1fe6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1fea:	88 23       	and	r24, r24
    1fec:	44 f4       	brge	.+16     	; 0x1ffe <LCD_VoidSendCommand+0x164>
		__ticks = 1;
    1fee:	fe 01       	movw	r30, r28
    1ff0:	ec 5b       	subi	r30, 0xBC	; 188
    1ff2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ff4:	81 e0       	ldi	r24, 0x01	; 1
    1ff6:	90 e0       	ldi	r25, 0x00	; 0
    1ff8:	91 83       	std	Z+1, r25	; 0x01
    1ffa:	80 83       	st	Z, r24
    1ffc:	64 c0       	rjmp	.+200    	; 0x20c6 <LCD_VoidSendCommand+0x22c>
	else if (__tmp > 65535)
    1ffe:	fe 01       	movw	r30, r28
    2000:	ea 5b       	subi	r30, 0xBA	; 186
    2002:	ff 4f       	sbci	r31, 0xFF	; 255
    2004:	60 81       	ld	r22, Z
    2006:	71 81       	ldd	r23, Z+1	; 0x01
    2008:	82 81       	ldd	r24, Z+2	; 0x02
    200a:	93 81       	ldd	r25, Z+3	; 0x03
    200c:	20 e0       	ldi	r18, 0x00	; 0
    200e:	3f ef       	ldi	r19, 0xFF	; 255
    2010:	4f e7       	ldi	r20, 0x7F	; 127
    2012:	57 e4       	ldi	r21, 0x47	; 71
    2014:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2018:	18 16       	cp	r1, r24
    201a:	0c f0       	brlt	.+2      	; 0x201e <LCD_VoidSendCommand+0x184>
    201c:	43 c0       	rjmp	.+134    	; 0x20a4 <LCD_VoidSendCommand+0x20a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    201e:	fe 01       	movw	r30, r28
    2020:	e6 5b       	subi	r30, 0xB6	; 182
    2022:	ff 4f       	sbci	r31, 0xFF	; 255
    2024:	60 81       	ld	r22, Z
    2026:	71 81       	ldd	r23, Z+1	; 0x01
    2028:	82 81       	ldd	r24, Z+2	; 0x02
    202a:	93 81       	ldd	r25, Z+3	; 0x03
    202c:	20 e0       	ldi	r18, 0x00	; 0
    202e:	30 e0       	ldi	r19, 0x00	; 0
    2030:	40 e2       	ldi	r20, 0x20	; 32
    2032:	51 e4       	ldi	r21, 0x41	; 65
    2034:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2038:	dc 01       	movw	r26, r24
    203a:	cb 01       	movw	r24, r22
    203c:	8e 01       	movw	r16, r28
    203e:	0c 5b       	subi	r16, 0xBC	; 188
    2040:	1f 4f       	sbci	r17, 0xFF	; 255
    2042:	bc 01       	movw	r22, r24
    2044:	cd 01       	movw	r24, r26
    2046:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    204a:	dc 01       	movw	r26, r24
    204c:	cb 01       	movw	r24, r22
    204e:	f8 01       	movw	r30, r16
    2050:	91 83       	std	Z+1, r25	; 0x01
    2052:	80 83       	st	Z, r24
    2054:	1f c0       	rjmp	.+62     	; 0x2094 <LCD_VoidSendCommand+0x1fa>
    2056:	fe 01       	movw	r30, r28
    2058:	ee 5b       	subi	r30, 0xBE	; 190
    205a:	ff 4f       	sbci	r31, 0xFF	; 255
    205c:	88 ec       	ldi	r24, 0xC8	; 200
    205e:	90 e0       	ldi	r25, 0x00	; 0
    2060:	91 83       	std	Z+1, r25	; 0x01
    2062:	80 83       	st	Z, r24
    2064:	fe 01       	movw	r30, r28
    2066:	ee 5b       	subi	r30, 0xBE	; 190
    2068:	ff 4f       	sbci	r31, 0xFF	; 255
    206a:	80 81       	ld	r24, Z
    206c:	91 81       	ldd	r25, Z+1	; 0x01
    206e:	01 97       	sbiw	r24, 0x01	; 1
    2070:	f1 f7       	brne	.-4      	; 0x206e <LCD_VoidSendCommand+0x1d4>
    2072:	fe 01       	movw	r30, r28
    2074:	ee 5b       	subi	r30, 0xBE	; 190
    2076:	ff 4f       	sbci	r31, 0xFF	; 255
    2078:	91 83       	std	Z+1, r25	; 0x01
    207a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    207c:	de 01       	movw	r26, r28
    207e:	ac 5b       	subi	r26, 0xBC	; 188
    2080:	bf 4f       	sbci	r27, 0xFF	; 255
    2082:	fe 01       	movw	r30, r28
    2084:	ec 5b       	subi	r30, 0xBC	; 188
    2086:	ff 4f       	sbci	r31, 0xFF	; 255
    2088:	80 81       	ld	r24, Z
    208a:	91 81       	ldd	r25, Z+1	; 0x01
    208c:	01 97       	sbiw	r24, 0x01	; 1
    208e:	11 96       	adiw	r26, 0x01	; 1
    2090:	9c 93       	st	X, r25
    2092:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2094:	fe 01       	movw	r30, r28
    2096:	ec 5b       	subi	r30, 0xBC	; 188
    2098:	ff 4f       	sbci	r31, 0xFF	; 255
    209a:	80 81       	ld	r24, Z
    209c:	91 81       	ldd	r25, Z+1	; 0x01
    209e:	00 97       	sbiw	r24, 0x00	; 0
    20a0:	d1 f6       	brne	.-76     	; 0x2056 <LCD_VoidSendCommand+0x1bc>
    20a2:	42 c0       	rjmp	.+132    	; 0x2128 <LCD_VoidSendCommand+0x28e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20a4:	8e 01       	movw	r16, r28
    20a6:	0c 5b       	subi	r16, 0xBC	; 188
    20a8:	1f 4f       	sbci	r17, 0xFF	; 255
    20aa:	fe 01       	movw	r30, r28
    20ac:	ea 5b       	subi	r30, 0xBA	; 186
    20ae:	ff 4f       	sbci	r31, 0xFF	; 255
    20b0:	60 81       	ld	r22, Z
    20b2:	71 81       	ldd	r23, Z+1	; 0x01
    20b4:	82 81       	ldd	r24, Z+2	; 0x02
    20b6:	93 81       	ldd	r25, Z+3	; 0x03
    20b8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20bc:	dc 01       	movw	r26, r24
    20be:	cb 01       	movw	r24, r22
    20c0:	f8 01       	movw	r30, r16
    20c2:	91 83       	std	Z+1, r25	; 0x01
    20c4:	80 83       	st	Z, r24
    20c6:	de 01       	movw	r26, r28
    20c8:	a0 5c       	subi	r26, 0xC0	; 192
    20ca:	bf 4f       	sbci	r27, 0xFF	; 255
    20cc:	fe 01       	movw	r30, r28
    20ce:	ec 5b       	subi	r30, 0xBC	; 188
    20d0:	ff 4f       	sbci	r31, 0xFF	; 255
    20d2:	80 81       	ld	r24, Z
    20d4:	91 81       	ldd	r25, Z+1	; 0x01
    20d6:	11 96       	adiw	r26, 0x01	; 1
    20d8:	9c 93       	st	X, r25
    20da:	8e 93       	st	-X, r24
    20dc:	fe 01       	movw	r30, r28
    20de:	e0 5c       	subi	r30, 0xC0	; 192
    20e0:	ff 4f       	sbci	r31, 0xFF	; 255
    20e2:	80 81       	ld	r24, Z
    20e4:	91 81       	ldd	r25, Z+1	; 0x01
    20e6:	01 97       	sbiw	r24, 0x01	; 1
    20e8:	f1 f7       	brne	.-4      	; 0x20e6 <LCD_VoidSendCommand+0x24c>
    20ea:	fe 01       	movw	r30, r28
    20ec:	e0 5c       	subi	r30, 0xC0	; 192
    20ee:	ff 4f       	sbci	r31, 0xFF	; 255
    20f0:	91 83       	std	Z+1, r25	; 0x01
    20f2:	80 83       	st	Z, r24
    20f4:	19 c0       	rjmp	.+50     	; 0x2128 <LCD_VoidSendCommand+0x28e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    20f6:	8e 01       	movw	r16, r28
    20f8:	02 5b       	subi	r16, 0xB2	; 178
    20fa:	1f 4f       	sbci	r17, 0xFF	; 255
    20fc:	fe 01       	movw	r30, r28
    20fe:	e1 5b       	subi	r30, 0xB1	; 177
    2100:	ff 4f       	sbci	r31, 0xFF	; 255
    2102:	60 81       	ld	r22, Z
    2104:	71 81       	ldd	r23, Z+1	; 0x01
    2106:	82 81       	ldd	r24, Z+2	; 0x02
    2108:	93 81       	ldd	r25, Z+3	; 0x03
    210a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    210e:	dc 01       	movw	r26, r24
    2110:	cb 01       	movw	r24, r22
    2112:	f8 01       	movw	r30, r16
    2114:	80 83       	st	Z, r24
    2116:	fe 01       	movw	r30, r28
    2118:	e2 5b       	subi	r30, 0xB2	; 178
    211a:	ff 4f       	sbci	r31, 0xFF	; 255
    211c:	80 81       	ld	r24, Z
    211e:	8f af       	std	Y+63, r24	; 0x3f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2120:	8f ad       	ldd	r24, Y+63	; 0x3f
    2122:	8a 95       	dec	r24
    2124:	f1 f7       	brne	.-4      	; 0x2122 <LCD_VoidSendCommand+0x288>
    2126:	8f af       	std	Y+63, r24	; 0x3f
	_delay_us(1);
	DIO_U8SetPinValue(LCD_CONTROL_PORT,CONTROL_E,DIO_LOW);
    2128:	83 e0       	ldi	r24, 0x03	; 3
    212a:	64 e0       	ldi	r22, 0x04	; 4
    212c:	40 e0       	ldi	r20, 0x00	; 0
    212e:	0e 94 8e 08 	call	0x111c	; 0x111c <DIO_U8SetPinValue>
    2132:	80 e0       	ldi	r24, 0x00	; 0
    2134:	90 e0       	ldi	r25, 0x00	; 0
    2136:	a8 e4       	ldi	r26, 0x48	; 72
    2138:	b3 e4       	ldi	r27, 0x43	; 67
    213a:	8b af       	std	Y+59, r24	; 0x3b
    213c:	9c af       	std	Y+60, r25	; 0x3c
    213e:	ad af       	std	Y+61, r26	; 0x3d
    2140:	be af       	std	Y+62, r27	; 0x3e
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2142:	6b ad       	ldd	r22, Y+59	; 0x3b
    2144:	7c ad       	ldd	r23, Y+60	; 0x3c
    2146:	8d ad       	ldd	r24, Y+61	; 0x3d
    2148:	9e ad       	ldd	r25, Y+62	; 0x3e
    214a:	2b ea       	ldi	r18, 0xAB	; 171
    214c:	3a ea       	ldi	r19, 0xAA	; 170
    214e:	4a e2       	ldi	r20, 0x2A	; 42
    2150:	50 e4       	ldi	r21, 0x40	; 64
    2152:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2156:	dc 01       	movw	r26, r24
    2158:	cb 01       	movw	r24, r22
    215a:	8f ab       	std	Y+55, r24	; 0x37
    215c:	98 af       	std	Y+56, r25	; 0x38
    215e:	a9 af       	std	Y+57, r26	; 0x39
    2160:	ba af       	std	Y+58, r27	; 0x3a
	if (__tmp < 1.0)
    2162:	6f a9       	ldd	r22, Y+55	; 0x37
    2164:	78 ad       	ldd	r23, Y+56	; 0x38
    2166:	89 ad       	ldd	r24, Y+57	; 0x39
    2168:	9a ad       	ldd	r25, Y+58	; 0x3a
    216a:	20 e0       	ldi	r18, 0x00	; 0
    216c:	30 e0       	ldi	r19, 0x00	; 0
    216e:	40 e8       	ldi	r20, 0x80	; 128
    2170:	5f e3       	ldi	r21, 0x3F	; 63
    2172:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2176:	88 23       	and	r24, r24
    2178:	1c f4       	brge	.+6      	; 0x2180 <LCD_VoidSendCommand+0x2e6>
		__ticks = 1;
    217a:	81 e0       	ldi	r24, 0x01	; 1
    217c:	8e ab       	std	Y+54, r24	; 0x36
    217e:	91 c0       	rjmp	.+290    	; 0x22a2 <LCD_VoidSendCommand+0x408>
	else if (__tmp > 255)
    2180:	6f a9       	ldd	r22, Y+55	; 0x37
    2182:	78 ad       	ldd	r23, Y+56	; 0x38
    2184:	89 ad       	ldd	r24, Y+57	; 0x39
    2186:	9a ad       	ldd	r25, Y+58	; 0x3a
    2188:	20 e0       	ldi	r18, 0x00	; 0
    218a:	30 e0       	ldi	r19, 0x00	; 0
    218c:	4f e7       	ldi	r20, 0x7F	; 127
    218e:	53 e4       	ldi	r21, 0x43	; 67
    2190:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2194:	18 16       	cp	r1, r24
    2196:	0c f0       	brlt	.+2      	; 0x219a <LCD_VoidSendCommand+0x300>
    2198:	7b c0       	rjmp	.+246    	; 0x2290 <LCD_VoidSendCommand+0x3f6>
	{
		_delay_ms(__us / 1000.0);
    219a:	6b ad       	ldd	r22, Y+59	; 0x3b
    219c:	7c ad       	ldd	r23, Y+60	; 0x3c
    219e:	8d ad       	ldd	r24, Y+61	; 0x3d
    21a0:	9e ad       	ldd	r25, Y+62	; 0x3e
    21a2:	20 e0       	ldi	r18, 0x00	; 0
    21a4:	30 e0       	ldi	r19, 0x00	; 0
    21a6:	4a e7       	ldi	r20, 0x7A	; 122
    21a8:	54 e4       	ldi	r21, 0x44	; 68
    21aa:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    21ae:	dc 01       	movw	r26, r24
    21b0:	cb 01       	movw	r24, r22
    21b2:	8a ab       	std	Y+50, r24	; 0x32
    21b4:	9b ab       	std	Y+51, r25	; 0x33
    21b6:	ac ab       	std	Y+52, r26	; 0x34
    21b8:	bd ab       	std	Y+53, r27	; 0x35
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21ba:	6a a9       	ldd	r22, Y+50	; 0x32
    21bc:	7b a9       	ldd	r23, Y+51	; 0x33
    21be:	8c a9       	ldd	r24, Y+52	; 0x34
    21c0:	9d a9       	ldd	r25, Y+53	; 0x35
    21c2:	20 e0       	ldi	r18, 0x00	; 0
    21c4:	30 e0       	ldi	r19, 0x00	; 0
    21c6:	4a ef       	ldi	r20, 0xFA	; 250
    21c8:	54 e4       	ldi	r21, 0x44	; 68
    21ca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21ce:	dc 01       	movw	r26, r24
    21d0:	cb 01       	movw	r24, r22
    21d2:	8e a7       	std	Y+46, r24	; 0x2e
    21d4:	9f a7       	std	Y+47, r25	; 0x2f
    21d6:	a8 ab       	std	Y+48, r26	; 0x30
    21d8:	b9 ab       	std	Y+49, r27	; 0x31
	if (__tmp < 1.0)
    21da:	6e a5       	ldd	r22, Y+46	; 0x2e
    21dc:	7f a5       	ldd	r23, Y+47	; 0x2f
    21de:	88 a9       	ldd	r24, Y+48	; 0x30
    21e0:	99 a9       	ldd	r25, Y+49	; 0x31
    21e2:	20 e0       	ldi	r18, 0x00	; 0
    21e4:	30 e0       	ldi	r19, 0x00	; 0
    21e6:	40 e8       	ldi	r20, 0x80	; 128
    21e8:	5f e3       	ldi	r21, 0x3F	; 63
    21ea:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    21ee:	88 23       	and	r24, r24
    21f0:	2c f4       	brge	.+10     	; 0x21fc <LCD_VoidSendCommand+0x362>
		__ticks = 1;
    21f2:	81 e0       	ldi	r24, 0x01	; 1
    21f4:	90 e0       	ldi	r25, 0x00	; 0
    21f6:	9d a7       	std	Y+45, r25	; 0x2d
    21f8:	8c a7       	std	Y+44, r24	; 0x2c
    21fa:	3f c0       	rjmp	.+126    	; 0x227a <LCD_VoidSendCommand+0x3e0>
	else if (__tmp > 65535)
    21fc:	6e a5       	ldd	r22, Y+46	; 0x2e
    21fe:	7f a5       	ldd	r23, Y+47	; 0x2f
    2200:	88 a9       	ldd	r24, Y+48	; 0x30
    2202:	99 a9       	ldd	r25, Y+49	; 0x31
    2204:	20 e0       	ldi	r18, 0x00	; 0
    2206:	3f ef       	ldi	r19, 0xFF	; 255
    2208:	4f e7       	ldi	r20, 0x7F	; 127
    220a:	57 e4       	ldi	r21, 0x47	; 71
    220c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2210:	18 16       	cp	r1, r24
    2212:	4c f5       	brge	.+82     	; 0x2266 <LCD_VoidSendCommand+0x3cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2214:	6a a9       	ldd	r22, Y+50	; 0x32
    2216:	7b a9       	ldd	r23, Y+51	; 0x33
    2218:	8c a9       	ldd	r24, Y+52	; 0x34
    221a:	9d a9       	ldd	r25, Y+53	; 0x35
    221c:	20 e0       	ldi	r18, 0x00	; 0
    221e:	30 e0       	ldi	r19, 0x00	; 0
    2220:	40 e2       	ldi	r20, 0x20	; 32
    2222:	51 e4       	ldi	r21, 0x41	; 65
    2224:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2228:	dc 01       	movw	r26, r24
    222a:	cb 01       	movw	r24, r22
    222c:	bc 01       	movw	r22, r24
    222e:	cd 01       	movw	r24, r26
    2230:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2234:	dc 01       	movw	r26, r24
    2236:	cb 01       	movw	r24, r22
    2238:	9d a7       	std	Y+45, r25	; 0x2d
    223a:	8c a7       	std	Y+44, r24	; 0x2c
    223c:	0f c0       	rjmp	.+30     	; 0x225c <LCD_VoidSendCommand+0x3c2>
    223e:	88 ec       	ldi	r24, 0xC8	; 200
    2240:	90 e0       	ldi	r25, 0x00	; 0
    2242:	9b a7       	std	Y+43, r25	; 0x2b
    2244:	8a a7       	std	Y+42, r24	; 0x2a
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2246:	8a a5       	ldd	r24, Y+42	; 0x2a
    2248:	9b a5       	ldd	r25, Y+43	; 0x2b
    224a:	01 97       	sbiw	r24, 0x01	; 1
    224c:	f1 f7       	brne	.-4      	; 0x224a <LCD_VoidSendCommand+0x3b0>
    224e:	9b a7       	std	Y+43, r25	; 0x2b
    2250:	8a a7       	std	Y+42, r24	; 0x2a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2252:	8c a5       	ldd	r24, Y+44	; 0x2c
    2254:	9d a5       	ldd	r25, Y+45	; 0x2d
    2256:	01 97       	sbiw	r24, 0x01	; 1
    2258:	9d a7       	std	Y+45, r25	; 0x2d
    225a:	8c a7       	std	Y+44, r24	; 0x2c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    225c:	8c a5       	ldd	r24, Y+44	; 0x2c
    225e:	9d a5       	ldd	r25, Y+45	; 0x2d
    2260:	00 97       	sbiw	r24, 0x00	; 0
    2262:	69 f7       	brne	.-38     	; 0x223e <LCD_VoidSendCommand+0x3a4>
    2264:	24 c0       	rjmp	.+72     	; 0x22ae <LCD_VoidSendCommand+0x414>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2266:	6e a5       	ldd	r22, Y+46	; 0x2e
    2268:	7f a5       	ldd	r23, Y+47	; 0x2f
    226a:	88 a9       	ldd	r24, Y+48	; 0x30
    226c:	99 a9       	ldd	r25, Y+49	; 0x31
    226e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2272:	dc 01       	movw	r26, r24
    2274:	cb 01       	movw	r24, r22
    2276:	9d a7       	std	Y+45, r25	; 0x2d
    2278:	8c a7       	std	Y+44, r24	; 0x2c
    227a:	8c a5       	ldd	r24, Y+44	; 0x2c
    227c:	9d a5       	ldd	r25, Y+45	; 0x2d
    227e:	99 a7       	std	Y+41, r25	; 0x29
    2280:	88 a7       	std	Y+40, r24	; 0x28
    2282:	88 a5       	ldd	r24, Y+40	; 0x28
    2284:	99 a5       	ldd	r25, Y+41	; 0x29
    2286:	01 97       	sbiw	r24, 0x01	; 1
    2288:	f1 f7       	brne	.-4      	; 0x2286 <LCD_VoidSendCommand+0x3ec>
    228a:	99 a7       	std	Y+41, r25	; 0x29
    228c:	88 a7       	std	Y+40, r24	; 0x28
    228e:	0f c0       	rjmp	.+30     	; 0x22ae <LCD_VoidSendCommand+0x414>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2290:	6f a9       	ldd	r22, Y+55	; 0x37
    2292:	78 ad       	ldd	r23, Y+56	; 0x38
    2294:	89 ad       	ldd	r24, Y+57	; 0x39
    2296:	9a ad       	ldd	r25, Y+58	; 0x3a
    2298:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    229c:	dc 01       	movw	r26, r24
    229e:	cb 01       	movw	r24, r22
    22a0:	8e ab       	std	Y+54, r24	; 0x36
    22a2:	8e a9       	ldd	r24, Y+54	; 0x36
    22a4:	8f a3       	std	Y+39, r24	; 0x27
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    22a6:	8f a1       	ldd	r24, Y+39	; 0x27
    22a8:	8a 95       	dec	r24
    22aa:	f1 f7       	brne	.-4      	; 0x22a8 <LCD_VoidSendCommand+0x40e>
    22ac:	8f a3       	std	Y+39, r24	; 0x27
	_delay_us(200);
	/* Write On Command Least Lower Nibble */
	DIO_U8SetPortValue(LCD_DATA_PORT,(Copy_U8Command << 4));
    22ae:	fe 01       	movw	r30, r28
    22b0:	e9 5a       	subi	r30, 0xA9	; 169
    22b2:	ff 4f       	sbci	r31, 0xFF	; 255
    22b4:	80 81       	ld	r24, Z
    22b6:	98 2f       	mov	r25, r24
    22b8:	92 95       	swap	r25
    22ba:	90 7f       	andi	r25, 0xF0	; 240
    22bc:	80 e0       	ldi	r24, 0x00	; 0
    22be:	69 2f       	mov	r22, r25
    22c0:	0e 94 91 0b 	call	0x1722	; 0x1722 <DIO_U8SetPortValue>
	/*Enable sequence to send command*/
	DIO_U8SetPinValue(LCD_CONTROL_PORT,CONTROL_E,DIO_HIGH);
    22c4:	83 e0       	ldi	r24, 0x03	; 3
    22c6:	64 e0       	ldi	r22, 0x04	; 4
    22c8:	41 e0       	ldi	r20, 0x01	; 1
    22ca:	0e 94 8e 08 	call	0x111c	; 0x111c <DIO_U8SetPinValue>
    22ce:	80 e0       	ldi	r24, 0x00	; 0
    22d0:	90 e0       	ldi	r25, 0x00	; 0
    22d2:	a0 e8       	ldi	r26, 0x80	; 128
    22d4:	bf e3       	ldi	r27, 0x3F	; 63
    22d6:	8b a3       	std	Y+35, r24	; 0x23
    22d8:	9c a3       	std	Y+36, r25	; 0x24
    22da:	ad a3       	std	Y+37, r26	; 0x25
    22dc:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    22de:	6b a1       	ldd	r22, Y+35	; 0x23
    22e0:	7c a1       	ldd	r23, Y+36	; 0x24
    22e2:	8d a1       	ldd	r24, Y+37	; 0x25
    22e4:	9e a1       	ldd	r25, Y+38	; 0x26
    22e6:	2b ea       	ldi	r18, 0xAB	; 171
    22e8:	3a ea       	ldi	r19, 0xAA	; 170
    22ea:	4a e2       	ldi	r20, 0x2A	; 42
    22ec:	50 e4       	ldi	r21, 0x40	; 64
    22ee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22f2:	dc 01       	movw	r26, r24
    22f4:	cb 01       	movw	r24, r22
    22f6:	8f 8f       	std	Y+31, r24	; 0x1f
    22f8:	98 a3       	std	Y+32, r25	; 0x20
    22fa:	a9 a3       	std	Y+33, r26	; 0x21
    22fc:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    22fe:	6f 8d       	ldd	r22, Y+31	; 0x1f
    2300:	78 a1       	ldd	r23, Y+32	; 0x20
    2302:	89 a1       	ldd	r24, Y+33	; 0x21
    2304:	9a a1       	ldd	r25, Y+34	; 0x22
    2306:	20 e0       	ldi	r18, 0x00	; 0
    2308:	30 e0       	ldi	r19, 0x00	; 0
    230a:	40 e8       	ldi	r20, 0x80	; 128
    230c:	5f e3       	ldi	r21, 0x3F	; 63
    230e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2312:	88 23       	and	r24, r24
    2314:	1c f4       	brge	.+6      	; 0x231c <LCD_VoidSendCommand+0x482>
		__ticks = 1;
    2316:	81 e0       	ldi	r24, 0x01	; 1
    2318:	8e 8f       	std	Y+30, r24	; 0x1e
    231a:	91 c0       	rjmp	.+290    	; 0x243e <LCD_VoidSendCommand+0x5a4>
	else if (__tmp > 255)
    231c:	6f 8d       	ldd	r22, Y+31	; 0x1f
    231e:	78 a1       	ldd	r23, Y+32	; 0x20
    2320:	89 a1       	ldd	r24, Y+33	; 0x21
    2322:	9a a1       	ldd	r25, Y+34	; 0x22
    2324:	20 e0       	ldi	r18, 0x00	; 0
    2326:	30 e0       	ldi	r19, 0x00	; 0
    2328:	4f e7       	ldi	r20, 0x7F	; 127
    232a:	53 e4       	ldi	r21, 0x43	; 67
    232c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2330:	18 16       	cp	r1, r24
    2332:	0c f0       	brlt	.+2      	; 0x2336 <LCD_VoidSendCommand+0x49c>
    2334:	7b c0       	rjmp	.+246    	; 0x242c <LCD_VoidSendCommand+0x592>
	{
		_delay_ms(__us / 1000.0);
    2336:	6b a1       	ldd	r22, Y+35	; 0x23
    2338:	7c a1       	ldd	r23, Y+36	; 0x24
    233a:	8d a1       	ldd	r24, Y+37	; 0x25
    233c:	9e a1       	ldd	r25, Y+38	; 0x26
    233e:	20 e0       	ldi	r18, 0x00	; 0
    2340:	30 e0       	ldi	r19, 0x00	; 0
    2342:	4a e7       	ldi	r20, 0x7A	; 122
    2344:	54 e4       	ldi	r21, 0x44	; 68
    2346:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    234a:	dc 01       	movw	r26, r24
    234c:	cb 01       	movw	r24, r22
    234e:	8a 8f       	std	Y+26, r24	; 0x1a
    2350:	9b 8f       	std	Y+27, r25	; 0x1b
    2352:	ac 8f       	std	Y+28, r26	; 0x1c
    2354:	bd 8f       	std	Y+29, r27	; 0x1d
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2356:	6a 8d       	ldd	r22, Y+26	; 0x1a
    2358:	7b 8d       	ldd	r23, Y+27	; 0x1b
    235a:	8c 8d       	ldd	r24, Y+28	; 0x1c
    235c:	9d 8d       	ldd	r25, Y+29	; 0x1d
    235e:	20 e0       	ldi	r18, 0x00	; 0
    2360:	30 e0       	ldi	r19, 0x00	; 0
    2362:	4a ef       	ldi	r20, 0xFA	; 250
    2364:	54 e4       	ldi	r21, 0x44	; 68
    2366:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    236a:	dc 01       	movw	r26, r24
    236c:	cb 01       	movw	r24, r22
    236e:	8e 8b       	std	Y+22, r24	; 0x16
    2370:	9f 8b       	std	Y+23, r25	; 0x17
    2372:	a8 8f       	std	Y+24, r26	; 0x18
    2374:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
    2376:	6e 89       	ldd	r22, Y+22	; 0x16
    2378:	7f 89       	ldd	r23, Y+23	; 0x17
    237a:	88 8d       	ldd	r24, Y+24	; 0x18
    237c:	99 8d       	ldd	r25, Y+25	; 0x19
    237e:	20 e0       	ldi	r18, 0x00	; 0
    2380:	30 e0       	ldi	r19, 0x00	; 0
    2382:	40 e8       	ldi	r20, 0x80	; 128
    2384:	5f e3       	ldi	r21, 0x3F	; 63
    2386:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    238a:	88 23       	and	r24, r24
    238c:	2c f4       	brge	.+10     	; 0x2398 <LCD_VoidSendCommand+0x4fe>
		__ticks = 1;
    238e:	81 e0       	ldi	r24, 0x01	; 1
    2390:	90 e0       	ldi	r25, 0x00	; 0
    2392:	9d 8b       	std	Y+21, r25	; 0x15
    2394:	8c 8b       	std	Y+20, r24	; 0x14
    2396:	3f c0       	rjmp	.+126    	; 0x2416 <LCD_VoidSendCommand+0x57c>
	else if (__tmp > 65535)
    2398:	6e 89       	ldd	r22, Y+22	; 0x16
    239a:	7f 89       	ldd	r23, Y+23	; 0x17
    239c:	88 8d       	ldd	r24, Y+24	; 0x18
    239e:	99 8d       	ldd	r25, Y+25	; 0x19
    23a0:	20 e0       	ldi	r18, 0x00	; 0
    23a2:	3f ef       	ldi	r19, 0xFF	; 255
    23a4:	4f e7       	ldi	r20, 0x7F	; 127
    23a6:	57 e4       	ldi	r21, 0x47	; 71
    23a8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    23ac:	18 16       	cp	r1, r24
    23ae:	4c f5       	brge	.+82     	; 0x2402 <LCD_VoidSendCommand+0x568>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23b0:	6a 8d       	ldd	r22, Y+26	; 0x1a
    23b2:	7b 8d       	ldd	r23, Y+27	; 0x1b
    23b4:	8c 8d       	ldd	r24, Y+28	; 0x1c
    23b6:	9d 8d       	ldd	r25, Y+29	; 0x1d
    23b8:	20 e0       	ldi	r18, 0x00	; 0
    23ba:	30 e0       	ldi	r19, 0x00	; 0
    23bc:	40 e2       	ldi	r20, 0x20	; 32
    23be:	51 e4       	ldi	r21, 0x41	; 65
    23c0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23c4:	dc 01       	movw	r26, r24
    23c6:	cb 01       	movw	r24, r22
    23c8:	bc 01       	movw	r22, r24
    23ca:	cd 01       	movw	r24, r26
    23cc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23d0:	dc 01       	movw	r26, r24
    23d2:	cb 01       	movw	r24, r22
    23d4:	9d 8b       	std	Y+21, r25	; 0x15
    23d6:	8c 8b       	std	Y+20, r24	; 0x14
    23d8:	0f c0       	rjmp	.+30     	; 0x23f8 <LCD_VoidSendCommand+0x55e>
    23da:	88 ec       	ldi	r24, 0xC8	; 200
    23dc:	90 e0       	ldi	r25, 0x00	; 0
    23de:	9b 8b       	std	Y+19, r25	; 0x13
    23e0:	8a 8b       	std	Y+18, r24	; 0x12
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    23e2:	8a 89       	ldd	r24, Y+18	; 0x12
    23e4:	9b 89       	ldd	r25, Y+19	; 0x13
    23e6:	01 97       	sbiw	r24, 0x01	; 1
    23e8:	f1 f7       	brne	.-4      	; 0x23e6 <LCD_VoidSendCommand+0x54c>
    23ea:	9b 8b       	std	Y+19, r25	; 0x13
    23ec:	8a 8b       	std	Y+18, r24	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23ee:	8c 89       	ldd	r24, Y+20	; 0x14
    23f0:	9d 89       	ldd	r25, Y+21	; 0x15
    23f2:	01 97       	sbiw	r24, 0x01	; 1
    23f4:	9d 8b       	std	Y+21, r25	; 0x15
    23f6:	8c 8b       	std	Y+20, r24	; 0x14
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23f8:	8c 89       	ldd	r24, Y+20	; 0x14
    23fa:	9d 89       	ldd	r25, Y+21	; 0x15
    23fc:	00 97       	sbiw	r24, 0x00	; 0
    23fe:	69 f7       	brne	.-38     	; 0x23da <LCD_VoidSendCommand+0x540>
    2400:	24 c0       	rjmp	.+72     	; 0x244a <LCD_VoidSendCommand+0x5b0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2402:	6e 89       	ldd	r22, Y+22	; 0x16
    2404:	7f 89       	ldd	r23, Y+23	; 0x17
    2406:	88 8d       	ldd	r24, Y+24	; 0x18
    2408:	99 8d       	ldd	r25, Y+25	; 0x19
    240a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    240e:	dc 01       	movw	r26, r24
    2410:	cb 01       	movw	r24, r22
    2412:	9d 8b       	std	Y+21, r25	; 0x15
    2414:	8c 8b       	std	Y+20, r24	; 0x14
    2416:	8c 89       	ldd	r24, Y+20	; 0x14
    2418:	9d 89       	ldd	r25, Y+21	; 0x15
    241a:	99 8b       	std	Y+17, r25	; 0x11
    241c:	88 8b       	std	Y+16, r24	; 0x10
    241e:	88 89       	ldd	r24, Y+16	; 0x10
    2420:	99 89       	ldd	r25, Y+17	; 0x11
    2422:	01 97       	sbiw	r24, 0x01	; 1
    2424:	f1 f7       	brne	.-4      	; 0x2422 <LCD_VoidSendCommand+0x588>
    2426:	99 8b       	std	Y+17, r25	; 0x11
    2428:	88 8b       	std	Y+16, r24	; 0x10
    242a:	0f c0       	rjmp	.+30     	; 0x244a <LCD_VoidSendCommand+0x5b0>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    242c:	6f 8d       	ldd	r22, Y+31	; 0x1f
    242e:	78 a1       	ldd	r23, Y+32	; 0x20
    2430:	89 a1       	ldd	r24, Y+33	; 0x21
    2432:	9a a1       	ldd	r25, Y+34	; 0x22
    2434:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2438:	dc 01       	movw	r26, r24
    243a:	cb 01       	movw	r24, r22
    243c:	8e 8f       	std	Y+30, r24	; 0x1e
    243e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2440:	8f 87       	std	Y+15, r24	; 0x0f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2442:	8f 85       	ldd	r24, Y+15	; 0x0f
    2444:	8a 95       	dec	r24
    2446:	f1 f7       	brne	.-4      	; 0x2444 <LCD_VoidSendCommand+0x5aa>
    2448:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_us(1);
	DIO_U8SetPinValue(LCD_CONTROL_PORT,CONTROL_E,DIO_LOW);
    244a:	83 e0       	ldi	r24, 0x03	; 3
    244c:	64 e0       	ldi	r22, 0x04	; 4
    244e:	40 e0       	ldi	r20, 0x00	; 0
    2450:	0e 94 8e 08 	call	0x111c	; 0x111c <DIO_U8SetPinValue>
    2454:	80 e0       	ldi	r24, 0x00	; 0
    2456:	90 e0       	ldi	r25, 0x00	; 0
    2458:	a0 e0       	ldi	r26, 0x00	; 0
    245a:	b0 e4       	ldi	r27, 0x40	; 64
    245c:	8b 87       	std	Y+11, r24	; 0x0b
    245e:	9c 87       	std	Y+12, r25	; 0x0c
    2460:	ad 87       	std	Y+13, r26	; 0x0d
    2462:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2464:	6b 85       	ldd	r22, Y+11	; 0x0b
    2466:	7c 85       	ldd	r23, Y+12	; 0x0c
    2468:	8d 85       	ldd	r24, Y+13	; 0x0d
    246a:	9e 85       	ldd	r25, Y+14	; 0x0e
    246c:	20 e0       	ldi	r18, 0x00	; 0
    246e:	30 e0       	ldi	r19, 0x00	; 0
    2470:	4a ef       	ldi	r20, 0xFA	; 250
    2472:	54 e4       	ldi	r21, 0x44	; 68
    2474:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2478:	dc 01       	movw	r26, r24
    247a:	cb 01       	movw	r24, r22
    247c:	8f 83       	std	Y+7, r24	; 0x07
    247e:	98 87       	std	Y+8, r25	; 0x08
    2480:	a9 87       	std	Y+9, r26	; 0x09
    2482:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2484:	6f 81       	ldd	r22, Y+7	; 0x07
    2486:	78 85       	ldd	r23, Y+8	; 0x08
    2488:	89 85       	ldd	r24, Y+9	; 0x09
    248a:	9a 85       	ldd	r25, Y+10	; 0x0a
    248c:	20 e0       	ldi	r18, 0x00	; 0
    248e:	30 e0       	ldi	r19, 0x00	; 0
    2490:	40 e8       	ldi	r20, 0x80	; 128
    2492:	5f e3       	ldi	r21, 0x3F	; 63
    2494:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2498:	88 23       	and	r24, r24
    249a:	2c f4       	brge	.+10     	; 0x24a6 <LCD_VoidSendCommand+0x60c>
		__ticks = 1;
    249c:	81 e0       	ldi	r24, 0x01	; 1
    249e:	90 e0       	ldi	r25, 0x00	; 0
    24a0:	9e 83       	std	Y+6, r25	; 0x06
    24a2:	8d 83       	std	Y+5, r24	; 0x05
    24a4:	3f c0       	rjmp	.+126    	; 0x2524 <LCD_VoidSendCommand+0x68a>
	else if (__tmp > 65535)
    24a6:	6f 81       	ldd	r22, Y+7	; 0x07
    24a8:	78 85       	ldd	r23, Y+8	; 0x08
    24aa:	89 85       	ldd	r24, Y+9	; 0x09
    24ac:	9a 85       	ldd	r25, Y+10	; 0x0a
    24ae:	20 e0       	ldi	r18, 0x00	; 0
    24b0:	3f ef       	ldi	r19, 0xFF	; 255
    24b2:	4f e7       	ldi	r20, 0x7F	; 127
    24b4:	57 e4       	ldi	r21, 0x47	; 71
    24b6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    24ba:	18 16       	cp	r1, r24
    24bc:	4c f5       	brge	.+82     	; 0x2510 <LCD_VoidSendCommand+0x676>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24be:	6b 85       	ldd	r22, Y+11	; 0x0b
    24c0:	7c 85       	ldd	r23, Y+12	; 0x0c
    24c2:	8d 85       	ldd	r24, Y+13	; 0x0d
    24c4:	9e 85       	ldd	r25, Y+14	; 0x0e
    24c6:	20 e0       	ldi	r18, 0x00	; 0
    24c8:	30 e0       	ldi	r19, 0x00	; 0
    24ca:	40 e2       	ldi	r20, 0x20	; 32
    24cc:	51 e4       	ldi	r21, 0x41	; 65
    24ce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24d2:	dc 01       	movw	r26, r24
    24d4:	cb 01       	movw	r24, r22
    24d6:	bc 01       	movw	r22, r24
    24d8:	cd 01       	movw	r24, r26
    24da:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24de:	dc 01       	movw	r26, r24
    24e0:	cb 01       	movw	r24, r22
    24e2:	9e 83       	std	Y+6, r25	; 0x06
    24e4:	8d 83       	std	Y+5, r24	; 0x05
    24e6:	0f c0       	rjmp	.+30     	; 0x2506 <LCD_VoidSendCommand+0x66c>
    24e8:	88 ec       	ldi	r24, 0xC8	; 200
    24ea:	90 e0       	ldi	r25, 0x00	; 0
    24ec:	9c 83       	std	Y+4, r25	; 0x04
    24ee:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    24f0:	8b 81       	ldd	r24, Y+3	; 0x03
    24f2:	9c 81       	ldd	r25, Y+4	; 0x04
    24f4:	01 97       	sbiw	r24, 0x01	; 1
    24f6:	f1 f7       	brne	.-4      	; 0x24f4 <LCD_VoidSendCommand+0x65a>
    24f8:	9c 83       	std	Y+4, r25	; 0x04
    24fa:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24fc:	8d 81       	ldd	r24, Y+5	; 0x05
    24fe:	9e 81       	ldd	r25, Y+6	; 0x06
    2500:	01 97       	sbiw	r24, 0x01	; 1
    2502:	9e 83       	std	Y+6, r25	; 0x06
    2504:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2506:	8d 81       	ldd	r24, Y+5	; 0x05
    2508:	9e 81       	ldd	r25, Y+6	; 0x06
    250a:	00 97       	sbiw	r24, 0x00	; 0
    250c:	69 f7       	brne	.-38     	; 0x24e8 <LCD_VoidSendCommand+0x64e>
    250e:	14 c0       	rjmp	.+40     	; 0x2538 <LCD_VoidSendCommand+0x69e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2510:	6f 81       	ldd	r22, Y+7	; 0x07
    2512:	78 85       	ldd	r23, Y+8	; 0x08
    2514:	89 85       	ldd	r24, Y+9	; 0x09
    2516:	9a 85       	ldd	r25, Y+10	; 0x0a
    2518:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    251c:	dc 01       	movw	r26, r24
    251e:	cb 01       	movw	r24, r22
    2520:	9e 83       	std	Y+6, r25	; 0x06
    2522:	8d 83       	std	Y+5, r24	; 0x05
    2524:	8d 81       	ldd	r24, Y+5	; 0x05
    2526:	9e 81       	ldd	r25, Y+6	; 0x06
    2528:	9a 83       	std	Y+2, r25	; 0x02
    252a:	89 83       	std	Y+1, r24	; 0x01
    252c:	89 81       	ldd	r24, Y+1	; 0x01
    252e:	9a 81       	ldd	r25, Y+2	; 0x02
    2530:	01 97       	sbiw	r24, 0x01	; 1
    2532:	f1 f7       	brne	.-4      	; 0x2530 <LCD_VoidSendCommand+0x696>
    2534:	9a 83       	std	Y+2, r25	; 0x02
    2536:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
#endif
}
    2538:	c9 5a       	subi	r28, 0xA9	; 169
    253a:	df 4f       	sbci	r29, 0xFF	; 255
    253c:	0f b6       	in	r0, 0x3f	; 63
    253e:	f8 94       	cli
    2540:	de bf       	out	0x3e, r29	; 62
    2542:	0f be       	out	0x3f, r0	; 63
    2544:	cd bf       	out	0x3d, r28	; 61
    2546:	cf 91       	pop	r28
    2548:	df 91       	pop	r29
    254a:	1f 91       	pop	r17
    254c:	0f 91       	pop	r16
    254e:	08 95       	ret

00002550 <LCD_VoidLCDInit>:

void LCD_VoidLCDInit(void)
{
    2550:	df 93       	push	r29
    2552:	cf 93       	push	r28
    2554:	cd b7       	in	r28, 0x3d	; 61
    2556:	de b7       	in	r29, 0x3e	; 62
    2558:	6c 97       	sbiw	r28, 0x1c	; 28
    255a:	0f b6       	in	r0, 0x3f	; 63
    255c:	f8 94       	cli
    255e:	de bf       	out	0x3e, r29	; 62
    2560:	0f be       	out	0x3f, r0	; 63
    2562:	cd bf       	out	0x3d, r28	; 61

	/* clear Display */
	LCD_VoidSendCommand(LCD_CLEAR);
#elif LCD_MODE == LCD_4BIT_MODE
	/* Set Direction Data PORT -> High */
	DIO_U8SetPortDirection(LCD_DATA_PORT, 0xF0);
    2564:	80 e0       	ldi	r24, 0x00	; 0
    2566:	60 ef       	ldi	r22, 0xF0	; 240
    2568:	0e 94 d0 0a 	call	0x15a0	; 0x15a0 <DIO_U8SetPortDirection>

	/* Set Direction Control PORT ( E,RS,RW ) -> High */
	DIO_U8SetPinDirection(LCD_CONTROL_PORT, CONTROL_E, HIGH);
    256c:	83 e0       	ldi	r24, 0x03	; 3
    256e:	64 e0       	ldi	r22, 0x04	; 4
    2570:	41 e0       	ldi	r20, 0x01	; 1
    2572:	0e 94 75 07 	call	0xeea	; 0xeea <DIO_U8SetPinDirection>
	DIO_U8SetPinDirection(LCD_CONTROL_PORT, CONTROL_RS, HIGH);
    2576:	83 e0       	ldi	r24, 0x03	; 3
    2578:	62 e0       	ldi	r22, 0x02	; 2
    257a:	41 e0       	ldi	r20, 0x01	; 1
    257c:	0e 94 75 07 	call	0xeea	; 0xeea <DIO_U8SetPinDirection>
	DIO_U8SetPinDirection(LCD_CONTROL_PORT, CONTROL_RW, HIGH);
    2580:	83 e0       	ldi	r24, 0x03	; 3
    2582:	63 e0       	ldi	r22, 0x03	; 3
    2584:	41 e0       	ldi	r20, 0x01	; 1
    2586:	0e 94 75 07 	call	0xeea	; 0xeea <DIO_U8SetPinDirection>
    258a:	80 e0       	ldi	r24, 0x00	; 0
    258c:	90 e0       	ldi	r25, 0x00	; 0
    258e:	ac e0       	ldi	r26, 0x0C	; 12
    2590:	b2 e4       	ldi	r27, 0x42	; 66
    2592:	89 8f       	std	Y+25, r24	; 0x19
    2594:	9a 8f       	std	Y+26, r25	; 0x1a
    2596:	ab 8f       	std	Y+27, r26	; 0x1b
    2598:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    259a:	69 8d       	ldd	r22, Y+25	; 0x19
    259c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    259e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    25a0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    25a2:	20 e0       	ldi	r18, 0x00	; 0
    25a4:	30 e0       	ldi	r19, 0x00	; 0
    25a6:	4a ef       	ldi	r20, 0xFA	; 250
    25a8:	54 e4       	ldi	r21, 0x44	; 68
    25aa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25ae:	dc 01       	movw	r26, r24
    25b0:	cb 01       	movw	r24, r22
    25b2:	8d 8b       	std	Y+21, r24	; 0x15
    25b4:	9e 8b       	std	Y+22, r25	; 0x16
    25b6:	af 8b       	std	Y+23, r26	; 0x17
    25b8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    25ba:	6d 89       	ldd	r22, Y+21	; 0x15
    25bc:	7e 89       	ldd	r23, Y+22	; 0x16
    25be:	8f 89       	ldd	r24, Y+23	; 0x17
    25c0:	98 8d       	ldd	r25, Y+24	; 0x18
    25c2:	20 e0       	ldi	r18, 0x00	; 0
    25c4:	30 e0       	ldi	r19, 0x00	; 0
    25c6:	40 e8       	ldi	r20, 0x80	; 128
    25c8:	5f e3       	ldi	r21, 0x3F	; 63
    25ca:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    25ce:	88 23       	and	r24, r24
    25d0:	2c f4       	brge	.+10     	; 0x25dc <LCD_VoidLCDInit+0x8c>
		__ticks = 1;
    25d2:	81 e0       	ldi	r24, 0x01	; 1
    25d4:	90 e0       	ldi	r25, 0x00	; 0
    25d6:	9c 8b       	std	Y+20, r25	; 0x14
    25d8:	8b 8b       	std	Y+19, r24	; 0x13
    25da:	3f c0       	rjmp	.+126    	; 0x265a <LCD_VoidLCDInit+0x10a>
	else if (__tmp > 65535)
    25dc:	6d 89       	ldd	r22, Y+21	; 0x15
    25de:	7e 89       	ldd	r23, Y+22	; 0x16
    25e0:	8f 89       	ldd	r24, Y+23	; 0x17
    25e2:	98 8d       	ldd	r25, Y+24	; 0x18
    25e4:	20 e0       	ldi	r18, 0x00	; 0
    25e6:	3f ef       	ldi	r19, 0xFF	; 255
    25e8:	4f e7       	ldi	r20, 0x7F	; 127
    25ea:	57 e4       	ldi	r21, 0x47	; 71
    25ec:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    25f0:	18 16       	cp	r1, r24
    25f2:	4c f5       	brge	.+82     	; 0x2646 <LCD_VoidLCDInit+0xf6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    25f4:	69 8d       	ldd	r22, Y+25	; 0x19
    25f6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    25f8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    25fa:	9c 8d       	ldd	r25, Y+28	; 0x1c
    25fc:	20 e0       	ldi	r18, 0x00	; 0
    25fe:	30 e0       	ldi	r19, 0x00	; 0
    2600:	40 e2       	ldi	r20, 0x20	; 32
    2602:	51 e4       	ldi	r21, 0x41	; 65
    2604:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2608:	dc 01       	movw	r26, r24
    260a:	cb 01       	movw	r24, r22
    260c:	bc 01       	movw	r22, r24
    260e:	cd 01       	movw	r24, r26
    2610:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2614:	dc 01       	movw	r26, r24
    2616:	cb 01       	movw	r24, r22
    2618:	9c 8b       	std	Y+20, r25	; 0x14
    261a:	8b 8b       	std	Y+19, r24	; 0x13
    261c:	0f c0       	rjmp	.+30     	; 0x263c <LCD_VoidLCDInit+0xec>
    261e:	88 ec       	ldi	r24, 0xC8	; 200
    2620:	90 e0       	ldi	r25, 0x00	; 0
    2622:	9a 8b       	std	Y+18, r25	; 0x12
    2624:	89 8b       	std	Y+17, r24	; 0x11
    2626:	89 89       	ldd	r24, Y+17	; 0x11
    2628:	9a 89       	ldd	r25, Y+18	; 0x12
    262a:	01 97       	sbiw	r24, 0x01	; 1
    262c:	f1 f7       	brne	.-4      	; 0x262a <LCD_VoidLCDInit+0xda>
    262e:	9a 8b       	std	Y+18, r25	; 0x12
    2630:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2632:	8b 89       	ldd	r24, Y+19	; 0x13
    2634:	9c 89       	ldd	r25, Y+20	; 0x14
    2636:	01 97       	sbiw	r24, 0x01	; 1
    2638:	9c 8b       	std	Y+20, r25	; 0x14
    263a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    263c:	8b 89       	ldd	r24, Y+19	; 0x13
    263e:	9c 89       	ldd	r25, Y+20	; 0x14
    2640:	00 97       	sbiw	r24, 0x00	; 0
    2642:	69 f7       	brne	.-38     	; 0x261e <LCD_VoidLCDInit+0xce>
    2644:	14 c0       	rjmp	.+40     	; 0x266e <LCD_VoidLCDInit+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2646:	6d 89       	ldd	r22, Y+21	; 0x15
    2648:	7e 89       	ldd	r23, Y+22	; 0x16
    264a:	8f 89       	ldd	r24, Y+23	; 0x17
    264c:	98 8d       	ldd	r25, Y+24	; 0x18
    264e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2652:	dc 01       	movw	r26, r24
    2654:	cb 01       	movw	r24, r22
    2656:	9c 8b       	std	Y+20, r25	; 0x14
    2658:	8b 8b       	std	Y+19, r24	; 0x13
    265a:	8b 89       	ldd	r24, Y+19	; 0x13
    265c:	9c 89       	ldd	r25, Y+20	; 0x14
    265e:	98 8b       	std	Y+16, r25	; 0x10
    2660:	8f 87       	std	Y+15, r24	; 0x0f
    2662:	8f 85       	ldd	r24, Y+15	; 0x0f
    2664:	98 89       	ldd	r25, Y+16	; 0x10
    2666:	01 97       	sbiw	r24, 0x01	; 1
    2668:	f1 f7       	brne	.-4      	; 0x2666 <LCD_VoidLCDInit+0x116>
    266a:	98 8b       	std	Y+16, r25	; 0x10
    266c:	8f 87       	std	Y+15, r24	; 0x0f
	/* LCD Power ON delay always >15ms */
	_delay_ms(35);
	LCD_VoidSendCommand(0x33);
    266e:	83 e3       	ldi	r24, 0x33	; 51
    2670:	0e 94 4d 0f 	call	0x1e9a	; 0x1e9a <LCD_VoidSendCommand>
	/* send for 4 bit initialization of LCD  */
	LCD_VoidSendCommand(0x32);
    2674:	82 e3       	ldi	r24, 0x32	; 50
    2676:	0e 94 4d 0f 	call	0x1e9a	; 0x1e9a <LCD_VoidSendCommand>
	/* Use 2 line and initialize 5*7 matrix in (4-bit mode)*/
	LCD_VoidSendCommand(0x28);
    267a:	88 e2       	ldi	r24, 0x28	; 40
    267c:	0e 94 4d 0f 	call	0x1e9a	; 0x1e9a <LCD_VoidSendCommand>
	/* Display on cursor off */
	LCD_VoidSendCommand(0x0c);
    2680:	8c e0       	ldi	r24, 0x0C	; 12
    2682:	0e 94 4d 0f 	call	0x1e9a	; 0x1e9a <LCD_VoidSendCommand>
	/* Increment cursor (shift cursor to right) */
	LCD_VoidSendCommand(0x06);
    2686:	86 e0       	ldi	r24, 0x06	; 6
    2688:	0e 94 4d 0f 	call	0x1e9a	; 0x1e9a <LCD_VoidSendCommand>
	/* Clear display screen*/
	LCD_VoidSendCommand(0x01);
    268c:	81 e0       	ldi	r24, 0x01	; 1
    268e:	0e 94 4d 0f 	call	0x1e9a	; 0x1e9a <LCD_VoidSendCommand>
    2692:	80 e0       	ldi	r24, 0x00	; 0
    2694:	90 e0       	ldi	r25, 0x00	; 0
    2696:	a0 e0       	ldi	r26, 0x00	; 0
    2698:	b0 e4       	ldi	r27, 0x40	; 64
    269a:	8b 87       	std	Y+11, r24	; 0x0b
    269c:	9c 87       	std	Y+12, r25	; 0x0c
    269e:	ad 87       	std	Y+13, r26	; 0x0d
    26a0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    26a2:	6b 85       	ldd	r22, Y+11	; 0x0b
    26a4:	7c 85       	ldd	r23, Y+12	; 0x0c
    26a6:	8d 85       	ldd	r24, Y+13	; 0x0d
    26a8:	9e 85       	ldd	r25, Y+14	; 0x0e
    26aa:	20 e0       	ldi	r18, 0x00	; 0
    26ac:	30 e0       	ldi	r19, 0x00	; 0
    26ae:	4a ef       	ldi	r20, 0xFA	; 250
    26b0:	54 e4       	ldi	r21, 0x44	; 68
    26b2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26b6:	dc 01       	movw	r26, r24
    26b8:	cb 01       	movw	r24, r22
    26ba:	8f 83       	std	Y+7, r24	; 0x07
    26bc:	98 87       	std	Y+8, r25	; 0x08
    26be:	a9 87       	std	Y+9, r26	; 0x09
    26c0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    26c2:	6f 81       	ldd	r22, Y+7	; 0x07
    26c4:	78 85       	ldd	r23, Y+8	; 0x08
    26c6:	89 85       	ldd	r24, Y+9	; 0x09
    26c8:	9a 85       	ldd	r25, Y+10	; 0x0a
    26ca:	20 e0       	ldi	r18, 0x00	; 0
    26cc:	30 e0       	ldi	r19, 0x00	; 0
    26ce:	40 e8       	ldi	r20, 0x80	; 128
    26d0:	5f e3       	ldi	r21, 0x3F	; 63
    26d2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    26d6:	88 23       	and	r24, r24
    26d8:	2c f4       	brge	.+10     	; 0x26e4 <LCD_VoidLCDInit+0x194>
		__ticks = 1;
    26da:	81 e0       	ldi	r24, 0x01	; 1
    26dc:	90 e0       	ldi	r25, 0x00	; 0
    26de:	9e 83       	std	Y+6, r25	; 0x06
    26e0:	8d 83       	std	Y+5, r24	; 0x05
    26e2:	3f c0       	rjmp	.+126    	; 0x2762 <LCD_VoidLCDInit+0x212>
	else if (__tmp > 65535)
    26e4:	6f 81       	ldd	r22, Y+7	; 0x07
    26e6:	78 85       	ldd	r23, Y+8	; 0x08
    26e8:	89 85       	ldd	r24, Y+9	; 0x09
    26ea:	9a 85       	ldd	r25, Y+10	; 0x0a
    26ec:	20 e0       	ldi	r18, 0x00	; 0
    26ee:	3f ef       	ldi	r19, 0xFF	; 255
    26f0:	4f e7       	ldi	r20, 0x7F	; 127
    26f2:	57 e4       	ldi	r21, 0x47	; 71
    26f4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    26f8:	18 16       	cp	r1, r24
    26fa:	4c f5       	brge	.+82     	; 0x274e <LCD_VoidLCDInit+0x1fe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26fc:	6b 85       	ldd	r22, Y+11	; 0x0b
    26fe:	7c 85       	ldd	r23, Y+12	; 0x0c
    2700:	8d 85       	ldd	r24, Y+13	; 0x0d
    2702:	9e 85       	ldd	r25, Y+14	; 0x0e
    2704:	20 e0       	ldi	r18, 0x00	; 0
    2706:	30 e0       	ldi	r19, 0x00	; 0
    2708:	40 e2       	ldi	r20, 0x20	; 32
    270a:	51 e4       	ldi	r21, 0x41	; 65
    270c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2710:	dc 01       	movw	r26, r24
    2712:	cb 01       	movw	r24, r22
    2714:	bc 01       	movw	r22, r24
    2716:	cd 01       	movw	r24, r26
    2718:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    271c:	dc 01       	movw	r26, r24
    271e:	cb 01       	movw	r24, r22
    2720:	9e 83       	std	Y+6, r25	; 0x06
    2722:	8d 83       	std	Y+5, r24	; 0x05
    2724:	0f c0       	rjmp	.+30     	; 0x2744 <LCD_VoidLCDInit+0x1f4>
    2726:	88 ec       	ldi	r24, 0xC8	; 200
    2728:	90 e0       	ldi	r25, 0x00	; 0
    272a:	9c 83       	std	Y+4, r25	; 0x04
    272c:	8b 83       	std	Y+3, r24	; 0x03
    272e:	8b 81       	ldd	r24, Y+3	; 0x03
    2730:	9c 81       	ldd	r25, Y+4	; 0x04
    2732:	01 97       	sbiw	r24, 0x01	; 1
    2734:	f1 f7       	brne	.-4      	; 0x2732 <LCD_VoidLCDInit+0x1e2>
    2736:	9c 83       	std	Y+4, r25	; 0x04
    2738:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    273a:	8d 81       	ldd	r24, Y+5	; 0x05
    273c:	9e 81       	ldd	r25, Y+6	; 0x06
    273e:	01 97       	sbiw	r24, 0x01	; 1
    2740:	9e 83       	std	Y+6, r25	; 0x06
    2742:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2744:	8d 81       	ldd	r24, Y+5	; 0x05
    2746:	9e 81       	ldd	r25, Y+6	; 0x06
    2748:	00 97       	sbiw	r24, 0x00	; 0
    274a:	69 f7       	brne	.-38     	; 0x2726 <LCD_VoidLCDInit+0x1d6>
    274c:	14 c0       	rjmp	.+40     	; 0x2776 <LCD_VoidLCDInit+0x226>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    274e:	6f 81       	ldd	r22, Y+7	; 0x07
    2750:	78 85       	ldd	r23, Y+8	; 0x08
    2752:	89 85       	ldd	r24, Y+9	; 0x09
    2754:	9a 85       	ldd	r25, Y+10	; 0x0a
    2756:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    275a:	dc 01       	movw	r26, r24
    275c:	cb 01       	movw	r24, r22
    275e:	9e 83       	std	Y+6, r25	; 0x06
    2760:	8d 83       	std	Y+5, r24	; 0x05
    2762:	8d 81       	ldd	r24, Y+5	; 0x05
    2764:	9e 81       	ldd	r25, Y+6	; 0x06
    2766:	9a 83       	std	Y+2, r25	; 0x02
    2768:	89 83       	std	Y+1, r24	; 0x01
    276a:	89 81       	ldd	r24, Y+1	; 0x01
    276c:	9a 81       	ldd	r25, Y+2	; 0x02
    276e:	01 97       	sbiw	r24, 0x01	; 1
    2770:	f1 f7       	brne	.-4      	; 0x276e <LCD_VoidLCDInit+0x21e>
    2772:	9a 83       	std	Y+2, r25	; 0x02
    2774:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	LCD_VoidSendCommand (0x80);
    2776:	80 e8       	ldi	r24, 0x80	; 128
    2778:	0e 94 4d 0f 	call	0x1e9a	; 0x1e9a <LCD_VoidSendCommand>
	/* End Of Init */
#endif
}
    277c:	6c 96       	adiw	r28, 0x1c	; 28
    277e:	0f b6       	in	r0, 0x3f	; 63
    2780:	f8 94       	cli
    2782:	de bf       	out	0x3e, r29	; 62
    2784:	0f be       	out	0x3f, r0	; 63
    2786:	cd bf       	out	0x3d, r28	; 61
    2788:	cf 91       	pop	r28
    278a:	df 91       	pop	r29
    278c:	08 95       	ret

0000278e <LCD_VoidSendData>:

void LCD_VoidSendData(u8 Copy_U8Data)
{
    278e:	0f 93       	push	r16
    2790:	1f 93       	push	r17
    2792:	df 93       	push	r29
    2794:	cf 93       	push	r28
    2796:	cd b7       	in	r28, 0x3d	; 61
    2798:	de b7       	in	r29, 0x3e	; 62
    279a:	c7 55       	subi	r28, 0x57	; 87
    279c:	d0 40       	sbci	r29, 0x00	; 0
    279e:	0f b6       	in	r0, 0x3f	; 63
    27a0:	f8 94       	cli
    27a2:	de bf       	out	0x3e, r29	; 62
    27a4:	0f be       	out	0x3f, r0	; 63
    27a6:	cd bf       	out	0x3d, r28	; 61
    27a8:	fe 01       	movw	r30, r28
    27aa:	e9 5a       	subi	r30, 0xA9	; 169
    27ac:	ff 4f       	sbci	r31, 0xFF	; 255
    27ae:	80 83       	st	Z, r24
	DIO_U8SetPinValue(LCD_CONTROL_PORT,CONTROL_E,DIO_HIGH);
	_delay_ms(2);
	DIO_U8SetPinValue(LCD_CONTROL_PORT,CONTROL_E,DIO_LOW);
#elif LCD_MODE == LCD_4BIT_MODE
	/* Set RS -> High  --> to send data*/
	DIO_U8SetPinValue(LCD_CONTROL_PORT,CONTROL_RS,DIO_HIGH);
    27b0:	83 e0       	ldi	r24, 0x03	; 3
    27b2:	62 e0       	ldi	r22, 0x02	; 2
    27b4:	41 e0       	ldi	r20, 0x01	; 1
    27b6:	0e 94 8e 08 	call	0x111c	; 0x111c <DIO_U8SetPinValue>

	/* Set RW -> Low  --> to Write*/
	DIO_U8SetPinValue(LCD_CONTROL_PORT,CONTROL_RW,DIO_LOW);
    27ba:	83 e0       	ldi	r24, 0x03	; 3
    27bc:	63 e0       	ldi	r22, 0x03	; 3
    27be:	40 e0       	ldi	r20, 0x00	; 0
    27c0:	0e 94 8e 08 	call	0x111c	; 0x111c <DIO_U8SetPinValue>
	/* Write On Char */
	DIO_U8SetPortValue(LCD_DATA_PORT, Copy_U8Data);
    27c4:	fe 01       	movw	r30, r28
    27c6:	e9 5a       	subi	r30, 0xA9	; 169
    27c8:	ff 4f       	sbci	r31, 0xFF	; 255
    27ca:	80 e0       	ldi	r24, 0x00	; 0
    27cc:	60 81       	ld	r22, Z
    27ce:	0e 94 91 0b 	call	0x1722	; 0x1722 <DIO_U8SetPortValue>
	/*Enable sequence to send command*/
	DIO_U8SetPinValue(LCD_CONTROL_PORT,CONTROL_E,DIO_HIGH);
    27d2:	83 e0       	ldi	r24, 0x03	; 3
    27d4:	64 e0       	ldi	r22, 0x04	; 4
    27d6:	41 e0       	ldi	r20, 0x01	; 1
    27d8:	0e 94 8e 08 	call	0x111c	; 0x111c <DIO_U8SetPinValue>
    27dc:	fe 01       	movw	r30, r28
    27de:	ed 5a       	subi	r30, 0xAD	; 173
    27e0:	ff 4f       	sbci	r31, 0xFF	; 255
    27e2:	80 e0       	ldi	r24, 0x00	; 0
    27e4:	90 e0       	ldi	r25, 0x00	; 0
    27e6:	a0 e8       	ldi	r26, 0x80	; 128
    27e8:	bf e3       	ldi	r27, 0x3F	; 63
    27ea:	80 83       	st	Z, r24
    27ec:	91 83       	std	Z+1, r25	; 0x01
    27ee:	a2 83       	std	Z+2, r26	; 0x02
    27f0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    27f2:	8e 01       	movw	r16, r28
    27f4:	01 5b       	subi	r16, 0xB1	; 177
    27f6:	1f 4f       	sbci	r17, 0xFF	; 255
    27f8:	fe 01       	movw	r30, r28
    27fa:	ed 5a       	subi	r30, 0xAD	; 173
    27fc:	ff 4f       	sbci	r31, 0xFF	; 255
    27fe:	60 81       	ld	r22, Z
    2800:	71 81       	ldd	r23, Z+1	; 0x01
    2802:	82 81       	ldd	r24, Z+2	; 0x02
    2804:	93 81       	ldd	r25, Z+3	; 0x03
    2806:	2b ea       	ldi	r18, 0xAB	; 171
    2808:	3a ea       	ldi	r19, 0xAA	; 170
    280a:	4a e2       	ldi	r20, 0x2A	; 42
    280c:	50 e4       	ldi	r21, 0x40	; 64
    280e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2812:	dc 01       	movw	r26, r24
    2814:	cb 01       	movw	r24, r22
    2816:	f8 01       	movw	r30, r16
    2818:	80 83       	st	Z, r24
    281a:	91 83       	std	Z+1, r25	; 0x01
    281c:	a2 83       	std	Z+2, r26	; 0x02
    281e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2820:	fe 01       	movw	r30, r28
    2822:	e1 5b       	subi	r30, 0xB1	; 177
    2824:	ff 4f       	sbci	r31, 0xFF	; 255
    2826:	60 81       	ld	r22, Z
    2828:	71 81       	ldd	r23, Z+1	; 0x01
    282a:	82 81       	ldd	r24, Z+2	; 0x02
    282c:	93 81       	ldd	r25, Z+3	; 0x03
    282e:	20 e0       	ldi	r18, 0x00	; 0
    2830:	30 e0       	ldi	r19, 0x00	; 0
    2832:	40 e8       	ldi	r20, 0x80	; 128
    2834:	5f e3       	ldi	r21, 0x3F	; 63
    2836:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    283a:	88 23       	and	r24, r24
    283c:	34 f4       	brge	.+12     	; 0x284a <LCD_VoidSendData+0xbc>
		__ticks = 1;
    283e:	fe 01       	movw	r30, r28
    2840:	e2 5b       	subi	r30, 0xB2	; 178
    2842:	ff 4f       	sbci	r31, 0xFF	; 255
    2844:	81 e0       	ldi	r24, 0x01	; 1
    2846:	80 83       	st	Z, r24
    2848:	e0 c0       	rjmp	.+448    	; 0x2a0a <LCD_VoidSendData+0x27c>
	else if (__tmp > 255)
    284a:	fe 01       	movw	r30, r28
    284c:	e1 5b       	subi	r30, 0xB1	; 177
    284e:	ff 4f       	sbci	r31, 0xFF	; 255
    2850:	60 81       	ld	r22, Z
    2852:	71 81       	ldd	r23, Z+1	; 0x01
    2854:	82 81       	ldd	r24, Z+2	; 0x02
    2856:	93 81       	ldd	r25, Z+3	; 0x03
    2858:	20 e0       	ldi	r18, 0x00	; 0
    285a:	30 e0       	ldi	r19, 0x00	; 0
    285c:	4f e7       	ldi	r20, 0x7F	; 127
    285e:	53 e4       	ldi	r21, 0x43	; 67
    2860:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2864:	18 16       	cp	r1, r24
    2866:	0c f0       	brlt	.+2      	; 0x286a <LCD_VoidSendData+0xdc>
    2868:	c0 c0       	rjmp	.+384    	; 0x29ea <LCD_VoidSendData+0x25c>
	{
		_delay_ms(__us / 1000.0);
    286a:	fe 01       	movw	r30, r28
    286c:	ed 5a       	subi	r30, 0xAD	; 173
    286e:	ff 4f       	sbci	r31, 0xFF	; 255
    2870:	60 81       	ld	r22, Z
    2872:	71 81       	ldd	r23, Z+1	; 0x01
    2874:	82 81       	ldd	r24, Z+2	; 0x02
    2876:	93 81       	ldd	r25, Z+3	; 0x03
    2878:	20 e0       	ldi	r18, 0x00	; 0
    287a:	30 e0       	ldi	r19, 0x00	; 0
    287c:	4a e7       	ldi	r20, 0x7A	; 122
    287e:	54 e4       	ldi	r21, 0x44	; 68
    2880:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2884:	dc 01       	movw	r26, r24
    2886:	cb 01       	movw	r24, r22
    2888:	fe 01       	movw	r30, r28
    288a:	e6 5b       	subi	r30, 0xB6	; 182
    288c:	ff 4f       	sbci	r31, 0xFF	; 255
    288e:	80 83       	st	Z, r24
    2890:	91 83       	std	Z+1, r25	; 0x01
    2892:	a2 83       	std	Z+2, r26	; 0x02
    2894:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2896:	8e 01       	movw	r16, r28
    2898:	0a 5b       	subi	r16, 0xBA	; 186
    289a:	1f 4f       	sbci	r17, 0xFF	; 255
    289c:	fe 01       	movw	r30, r28
    289e:	e6 5b       	subi	r30, 0xB6	; 182
    28a0:	ff 4f       	sbci	r31, 0xFF	; 255
    28a2:	60 81       	ld	r22, Z
    28a4:	71 81       	ldd	r23, Z+1	; 0x01
    28a6:	82 81       	ldd	r24, Z+2	; 0x02
    28a8:	93 81       	ldd	r25, Z+3	; 0x03
    28aa:	20 e0       	ldi	r18, 0x00	; 0
    28ac:	30 e0       	ldi	r19, 0x00	; 0
    28ae:	4a ef       	ldi	r20, 0xFA	; 250
    28b0:	54 e4       	ldi	r21, 0x44	; 68
    28b2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28b6:	dc 01       	movw	r26, r24
    28b8:	cb 01       	movw	r24, r22
    28ba:	f8 01       	movw	r30, r16
    28bc:	80 83       	st	Z, r24
    28be:	91 83       	std	Z+1, r25	; 0x01
    28c0:	a2 83       	std	Z+2, r26	; 0x02
    28c2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    28c4:	fe 01       	movw	r30, r28
    28c6:	ea 5b       	subi	r30, 0xBA	; 186
    28c8:	ff 4f       	sbci	r31, 0xFF	; 255
    28ca:	60 81       	ld	r22, Z
    28cc:	71 81       	ldd	r23, Z+1	; 0x01
    28ce:	82 81       	ldd	r24, Z+2	; 0x02
    28d0:	93 81       	ldd	r25, Z+3	; 0x03
    28d2:	20 e0       	ldi	r18, 0x00	; 0
    28d4:	30 e0       	ldi	r19, 0x00	; 0
    28d6:	40 e8       	ldi	r20, 0x80	; 128
    28d8:	5f e3       	ldi	r21, 0x3F	; 63
    28da:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    28de:	88 23       	and	r24, r24
    28e0:	44 f4       	brge	.+16     	; 0x28f2 <LCD_VoidSendData+0x164>
		__ticks = 1;
    28e2:	fe 01       	movw	r30, r28
    28e4:	ec 5b       	subi	r30, 0xBC	; 188
    28e6:	ff 4f       	sbci	r31, 0xFF	; 255
    28e8:	81 e0       	ldi	r24, 0x01	; 1
    28ea:	90 e0       	ldi	r25, 0x00	; 0
    28ec:	91 83       	std	Z+1, r25	; 0x01
    28ee:	80 83       	st	Z, r24
    28f0:	64 c0       	rjmp	.+200    	; 0x29ba <LCD_VoidSendData+0x22c>
	else if (__tmp > 65535)
    28f2:	fe 01       	movw	r30, r28
    28f4:	ea 5b       	subi	r30, 0xBA	; 186
    28f6:	ff 4f       	sbci	r31, 0xFF	; 255
    28f8:	60 81       	ld	r22, Z
    28fa:	71 81       	ldd	r23, Z+1	; 0x01
    28fc:	82 81       	ldd	r24, Z+2	; 0x02
    28fe:	93 81       	ldd	r25, Z+3	; 0x03
    2900:	20 e0       	ldi	r18, 0x00	; 0
    2902:	3f ef       	ldi	r19, 0xFF	; 255
    2904:	4f e7       	ldi	r20, 0x7F	; 127
    2906:	57 e4       	ldi	r21, 0x47	; 71
    2908:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    290c:	18 16       	cp	r1, r24
    290e:	0c f0       	brlt	.+2      	; 0x2912 <LCD_VoidSendData+0x184>
    2910:	43 c0       	rjmp	.+134    	; 0x2998 <LCD_VoidSendData+0x20a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2912:	fe 01       	movw	r30, r28
    2914:	e6 5b       	subi	r30, 0xB6	; 182
    2916:	ff 4f       	sbci	r31, 0xFF	; 255
    2918:	60 81       	ld	r22, Z
    291a:	71 81       	ldd	r23, Z+1	; 0x01
    291c:	82 81       	ldd	r24, Z+2	; 0x02
    291e:	93 81       	ldd	r25, Z+3	; 0x03
    2920:	20 e0       	ldi	r18, 0x00	; 0
    2922:	30 e0       	ldi	r19, 0x00	; 0
    2924:	40 e2       	ldi	r20, 0x20	; 32
    2926:	51 e4       	ldi	r21, 0x41	; 65
    2928:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    292c:	dc 01       	movw	r26, r24
    292e:	cb 01       	movw	r24, r22
    2930:	8e 01       	movw	r16, r28
    2932:	0c 5b       	subi	r16, 0xBC	; 188
    2934:	1f 4f       	sbci	r17, 0xFF	; 255
    2936:	bc 01       	movw	r22, r24
    2938:	cd 01       	movw	r24, r26
    293a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    293e:	dc 01       	movw	r26, r24
    2940:	cb 01       	movw	r24, r22
    2942:	f8 01       	movw	r30, r16
    2944:	91 83       	std	Z+1, r25	; 0x01
    2946:	80 83       	st	Z, r24
    2948:	1f c0       	rjmp	.+62     	; 0x2988 <LCD_VoidSendData+0x1fa>
    294a:	fe 01       	movw	r30, r28
    294c:	ee 5b       	subi	r30, 0xBE	; 190
    294e:	ff 4f       	sbci	r31, 0xFF	; 255
    2950:	88 ec       	ldi	r24, 0xC8	; 200
    2952:	90 e0       	ldi	r25, 0x00	; 0
    2954:	91 83       	std	Z+1, r25	; 0x01
    2956:	80 83       	st	Z, r24
    2958:	fe 01       	movw	r30, r28
    295a:	ee 5b       	subi	r30, 0xBE	; 190
    295c:	ff 4f       	sbci	r31, 0xFF	; 255
    295e:	80 81       	ld	r24, Z
    2960:	91 81       	ldd	r25, Z+1	; 0x01
    2962:	01 97       	sbiw	r24, 0x01	; 1
    2964:	f1 f7       	brne	.-4      	; 0x2962 <LCD_VoidSendData+0x1d4>
    2966:	fe 01       	movw	r30, r28
    2968:	ee 5b       	subi	r30, 0xBE	; 190
    296a:	ff 4f       	sbci	r31, 0xFF	; 255
    296c:	91 83       	std	Z+1, r25	; 0x01
    296e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2970:	de 01       	movw	r26, r28
    2972:	ac 5b       	subi	r26, 0xBC	; 188
    2974:	bf 4f       	sbci	r27, 0xFF	; 255
    2976:	fe 01       	movw	r30, r28
    2978:	ec 5b       	subi	r30, 0xBC	; 188
    297a:	ff 4f       	sbci	r31, 0xFF	; 255
    297c:	80 81       	ld	r24, Z
    297e:	91 81       	ldd	r25, Z+1	; 0x01
    2980:	01 97       	sbiw	r24, 0x01	; 1
    2982:	11 96       	adiw	r26, 0x01	; 1
    2984:	9c 93       	st	X, r25
    2986:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2988:	fe 01       	movw	r30, r28
    298a:	ec 5b       	subi	r30, 0xBC	; 188
    298c:	ff 4f       	sbci	r31, 0xFF	; 255
    298e:	80 81       	ld	r24, Z
    2990:	91 81       	ldd	r25, Z+1	; 0x01
    2992:	00 97       	sbiw	r24, 0x00	; 0
    2994:	d1 f6       	brne	.-76     	; 0x294a <LCD_VoidSendData+0x1bc>
    2996:	42 c0       	rjmp	.+132    	; 0x2a1c <LCD_VoidSendData+0x28e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2998:	8e 01       	movw	r16, r28
    299a:	0c 5b       	subi	r16, 0xBC	; 188
    299c:	1f 4f       	sbci	r17, 0xFF	; 255
    299e:	fe 01       	movw	r30, r28
    29a0:	ea 5b       	subi	r30, 0xBA	; 186
    29a2:	ff 4f       	sbci	r31, 0xFF	; 255
    29a4:	60 81       	ld	r22, Z
    29a6:	71 81       	ldd	r23, Z+1	; 0x01
    29a8:	82 81       	ldd	r24, Z+2	; 0x02
    29aa:	93 81       	ldd	r25, Z+3	; 0x03
    29ac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29b0:	dc 01       	movw	r26, r24
    29b2:	cb 01       	movw	r24, r22
    29b4:	f8 01       	movw	r30, r16
    29b6:	91 83       	std	Z+1, r25	; 0x01
    29b8:	80 83       	st	Z, r24
    29ba:	de 01       	movw	r26, r28
    29bc:	a0 5c       	subi	r26, 0xC0	; 192
    29be:	bf 4f       	sbci	r27, 0xFF	; 255
    29c0:	fe 01       	movw	r30, r28
    29c2:	ec 5b       	subi	r30, 0xBC	; 188
    29c4:	ff 4f       	sbci	r31, 0xFF	; 255
    29c6:	80 81       	ld	r24, Z
    29c8:	91 81       	ldd	r25, Z+1	; 0x01
    29ca:	11 96       	adiw	r26, 0x01	; 1
    29cc:	9c 93       	st	X, r25
    29ce:	8e 93       	st	-X, r24
    29d0:	fe 01       	movw	r30, r28
    29d2:	e0 5c       	subi	r30, 0xC0	; 192
    29d4:	ff 4f       	sbci	r31, 0xFF	; 255
    29d6:	80 81       	ld	r24, Z
    29d8:	91 81       	ldd	r25, Z+1	; 0x01
    29da:	01 97       	sbiw	r24, 0x01	; 1
    29dc:	f1 f7       	brne	.-4      	; 0x29da <LCD_VoidSendData+0x24c>
    29de:	fe 01       	movw	r30, r28
    29e0:	e0 5c       	subi	r30, 0xC0	; 192
    29e2:	ff 4f       	sbci	r31, 0xFF	; 255
    29e4:	91 83       	std	Z+1, r25	; 0x01
    29e6:	80 83       	st	Z, r24
    29e8:	19 c0       	rjmp	.+50     	; 0x2a1c <LCD_VoidSendData+0x28e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    29ea:	8e 01       	movw	r16, r28
    29ec:	02 5b       	subi	r16, 0xB2	; 178
    29ee:	1f 4f       	sbci	r17, 0xFF	; 255
    29f0:	fe 01       	movw	r30, r28
    29f2:	e1 5b       	subi	r30, 0xB1	; 177
    29f4:	ff 4f       	sbci	r31, 0xFF	; 255
    29f6:	60 81       	ld	r22, Z
    29f8:	71 81       	ldd	r23, Z+1	; 0x01
    29fa:	82 81       	ldd	r24, Z+2	; 0x02
    29fc:	93 81       	ldd	r25, Z+3	; 0x03
    29fe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a02:	dc 01       	movw	r26, r24
    2a04:	cb 01       	movw	r24, r22
    2a06:	f8 01       	movw	r30, r16
    2a08:	80 83       	st	Z, r24
    2a0a:	fe 01       	movw	r30, r28
    2a0c:	e2 5b       	subi	r30, 0xB2	; 178
    2a0e:	ff 4f       	sbci	r31, 0xFF	; 255
    2a10:	80 81       	ld	r24, Z
    2a12:	8f af       	std	Y+63, r24	; 0x3f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2a14:	8f ad       	ldd	r24, Y+63	; 0x3f
    2a16:	8a 95       	dec	r24
    2a18:	f1 f7       	brne	.-4      	; 0x2a16 <LCD_VoidSendData+0x288>
    2a1a:	8f af       	std	Y+63, r24	; 0x3f
	_delay_us(1);
	DIO_U8SetPinValue(LCD_CONTROL_PORT,CONTROL_E,DIO_LOW);
    2a1c:	83 e0       	ldi	r24, 0x03	; 3
    2a1e:	64 e0       	ldi	r22, 0x04	; 4
    2a20:	40 e0       	ldi	r20, 0x00	; 0
    2a22:	0e 94 8e 08 	call	0x111c	; 0x111c <DIO_U8SetPinValue>
    2a26:	80 e0       	ldi	r24, 0x00	; 0
    2a28:	90 e0       	ldi	r25, 0x00	; 0
    2a2a:	a8 e4       	ldi	r26, 0x48	; 72
    2a2c:	b3 e4       	ldi	r27, 0x43	; 67
    2a2e:	8b af       	std	Y+59, r24	; 0x3b
    2a30:	9c af       	std	Y+60, r25	; 0x3c
    2a32:	ad af       	std	Y+61, r26	; 0x3d
    2a34:	be af       	std	Y+62, r27	; 0x3e
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2a36:	6b ad       	ldd	r22, Y+59	; 0x3b
    2a38:	7c ad       	ldd	r23, Y+60	; 0x3c
    2a3a:	8d ad       	ldd	r24, Y+61	; 0x3d
    2a3c:	9e ad       	ldd	r25, Y+62	; 0x3e
    2a3e:	2b ea       	ldi	r18, 0xAB	; 171
    2a40:	3a ea       	ldi	r19, 0xAA	; 170
    2a42:	4a e2       	ldi	r20, 0x2A	; 42
    2a44:	50 e4       	ldi	r21, 0x40	; 64
    2a46:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a4a:	dc 01       	movw	r26, r24
    2a4c:	cb 01       	movw	r24, r22
    2a4e:	8f ab       	std	Y+55, r24	; 0x37
    2a50:	98 af       	std	Y+56, r25	; 0x38
    2a52:	a9 af       	std	Y+57, r26	; 0x39
    2a54:	ba af       	std	Y+58, r27	; 0x3a
	if (__tmp < 1.0)
    2a56:	6f a9       	ldd	r22, Y+55	; 0x37
    2a58:	78 ad       	ldd	r23, Y+56	; 0x38
    2a5a:	89 ad       	ldd	r24, Y+57	; 0x39
    2a5c:	9a ad       	ldd	r25, Y+58	; 0x3a
    2a5e:	20 e0       	ldi	r18, 0x00	; 0
    2a60:	30 e0       	ldi	r19, 0x00	; 0
    2a62:	40 e8       	ldi	r20, 0x80	; 128
    2a64:	5f e3       	ldi	r21, 0x3F	; 63
    2a66:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2a6a:	88 23       	and	r24, r24
    2a6c:	1c f4       	brge	.+6      	; 0x2a74 <LCD_VoidSendData+0x2e6>
		__ticks = 1;
    2a6e:	81 e0       	ldi	r24, 0x01	; 1
    2a70:	8e ab       	std	Y+54, r24	; 0x36
    2a72:	91 c0       	rjmp	.+290    	; 0x2b96 <LCD_VoidSendData+0x408>
	else if (__tmp > 255)
    2a74:	6f a9       	ldd	r22, Y+55	; 0x37
    2a76:	78 ad       	ldd	r23, Y+56	; 0x38
    2a78:	89 ad       	ldd	r24, Y+57	; 0x39
    2a7a:	9a ad       	ldd	r25, Y+58	; 0x3a
    2a7c:	20 e0       	ldi	r18, 0x00	; 0
    2a7e:	30 e0       	ldi	r19, 0x00	; 0
    2a80:	4f e7       	ldi	r20, 0x7F	; 127
    2a82:	53 e4       	ldi	r21, 0x43	; 67
    2a84:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2a88:	18 16       	cp	r1, r24
    2a8a:	0c f0       	brlt	.+2      	; 0x2a8e <LCD_VoidSendData+0x300>
    2a8c:	7b c0       	rjmp	.+246    	; 0x2b84 <LCD_VoidSendData+0x3f6>
	{
		_delay_ms(__us / 1000.0);
    2a8e:	6b ad       	ldd	r22, Y+59	; 0x3b
    2a90:	7c ad       	ldd	r23, Y+60	; 0x3c
    2a92:	8d ad       	ldd	r24, Y+61	; 0x3d
    2a94:	9e ad       	ldd	r25, Y+62	; 0x3e
    2a96:	20 e0       	ldi	r18, 0x00	; 0
    2a98:	30 e0       	ldi	r19, 0x00	; 0
    2a9a:	4a e7       	ldi	r20, 0x7A	; 122
    2a9c:	54 e4       	ldi	r21, 0x44	; 68
    2a9e:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2aa2:	dc 01       	movw	r26, r24
    2aa4:	cb 01       	movw	r24, r22
    2aa6:	8a ab       	std	Y+50, r24	; 0x32
    2aa8:	9b ab       	std	Y+51, r25	; 0x33
    2aaa:	ac ab       	std	Y+52, r26	; 0x34
    2aac:	bd ab       	std	Y+53, r27	; 0x35
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2aae:	6a a9       	ldd	r22, Y+50	; 0x32
    2ab0:	7b a9       	ldd	r23, Y+51	; 0x33
    2ab2:	8c a9       	ldd	r24, Y+52	; 0x34
    2ab4:	9d a9       	ldd	r25, Y+53	; 0x35
    2ab6:	20 e0       	ldi	r18, 0x00	; 0
    2ab8:	30 e0       	ldi	r19, 0x00	; 0
    2aba:	4a ef       	ldi	r20, 0xFA	; 250
    2abc:	54 e4       	ldi	r21, 0x44	; 68
    2abe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ac2:	dc 01       	movw	r26, r24
    2ac4:	cb 01       	movw	r24, r22
    2ac6:	8e a7       	std	Y+46, r24	; 0x2e
    2ac8:	9f a7       	std	Y+47, r25	; 0x2f
    2aca:	a8 ab       	std	Y+48, r26	; 0x30
    2acc:	b9 ab       	std	Y+49, r27	; 0x31
	if (__tmp < 1.0)
    2ace:	6e a5       	ldd	r22, Y+46	; 0x2e
    2ad0:	7f a5       	ldd	r23, Y+47	; 0x2f
    2ad2:	88 a9       	ldd	r24, Y+48	; 0x30
    2ad4:	99 a9       	ldd	r25, Y+49	; 0x31
    2ad6:	20 e0       	ldi	r18, 0x00	; 0
    2ad8:	30 e0       	ldi	r19, 0x00	; 0
    2ada:	40 e8       	ldi	r20, 0x80	; 128
    2adc:	5f e3       	ldi	r21, 0x3F	; 63
    2ade:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2ae2:	88 23       	and	r24, r24
    2ae4:	2c f4       	brge	.+10     	; 0x2af0 <LCD_VoidSendData+0x362>
		__ticks = 1;
    2ae6:	81 e0       	ldi	r24, 0x01	; 1
    2ae8:	90 e0       	ldi	r25, 0x00	; 0
    2aea:	9d a7       	std	Y+45, r25	; 0x2d
    2aec:	8c a7       	std	Y+44, r24	; 0x2c
    2aee:	3f c0       	rjmp	.+126    	; 0x2b6e <LCD_VoidSendData+0x3e0>
	else if (__tmp > 65535)
    2af0:	6e a5       	ldd	r22, Y+46	; 0x2e
    2af2:	7f a5       	ldd	r23, Y+47	; 0x2f
    2af4:	88 a9       	ldd	r24, Y+48	; 0x30
    2af6:	99 a9       	ldd	r25, Y+49	; 0x31
    2af8:	20 e0       	ldi	r18, 0x00	; 0
    2afa:	3f ef       	ldi	r19, 0xFF	; 255
    2afc:	4f e7       	ldi	r20, 0x7F	; 127
    2afe:	57 e4       	ldi	r21, 0x47	; 71
    2b00:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2b04:	18 16       	cp	r1, r24
    2b06:	4c f5       	brge	.+82     	; 0x2b5a <LCD_VoidSendData+0x3cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b08:	6a a9       	ldd	r22, Y+50	; 0x32
    2b0a:	7b a9       	ldd	r23, Y+51	; 0x33
    2b0c:	8c a9       	ldd	r24, Y+52	; 0x34
    2b0e:	9d a9       	ldd	r25, Y+53	; 0x35
    2b10:	20 e0       	ldi	r18, 0x00	; 0
    2b12:	30 e0       	ldi	r19, 0x00	; 0
    2b14:	40 e2       	ldi	r20, 0x20	; 32
    2b16:	51 e4       	ldi	r21, 0x41	; 65
    2b18:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b1c:	dc 01       	movw	r26, r24
    2b1e:	cb 01       	movw	r24, r22
    2b20:	bc 01       	movw	r22, r24
    2b22:	cd 01       	movw	r24, r26
    2b24:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b28:	dc 01       	movw	r26, r24
    2b2a:	cb 01       	movw	r24, r22
    2b2c:	9d a7       	std	Y+45, r25	; 0x2d
    2b2e:	8c a7       	std	Y+44, r24	; 0x2c
    2b30:	0f c0       	rjmp	.+30     	; 0x2b50 <LCD_VoidSendData+0x3c2>
    2b32:	88 ec       	ldi	r24, 0xC8	; 200
    2b34:	90 e0       	ldi	r25, 0x00	; 0
    2b36:	9b a7       	std	Y+43, r25	; 0x2b
    2b38:	8a a7       	std	Y+42, r24	; 0x2a
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2b3a:	8a a5       	ldd	r24, Y+42	; 0x2a
    2b3c:	9b a5       	ldd	r25, Y+43	; 0x2b
    2b3e:	01 97       	sbiw	r24, 0x01	; 1
    2b40:	f1 f7       	brne	.-4      	; 0x2b3e <LCD_VoidSendData+0x3b0>
    2b42:	9b a7       	std	Y+43, r25	; 0x2b
    2b44:	8a a7       	std	Y+42, r24	; 0x2a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b46:	8c a5       	ldd	r24, Y+44	; 0x2c
    2b48:	9d a5       	ldd	r25, Y+45	; 0x2d
    2b4a:	01 97       	sbiw	r24, 0x01	; 1
    2b4c:	9d a7       	std	Y+45, r25	; 0x2d
    2b4e:	8c a7       	std	Y+44, r24	; 0x2c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b50:	8c a5       	ldd	r24, Y+44	; 0x2c
    2b52:	9d a5       	ldd	r25, Y+45	; 0x2d
    2b54:	00 97       	sbiw	r24, 0x00	; 0
    2b56:	69 f7       	brne	.-38     	; 0x2b32 <LCD_VoidSendData+0x3a4>
    2b58:	24 c0       	rjmp	.+72     	; 0x2ba2 <LCD_VoidSendData+0x414>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b5a:	6e a5       	ldd	r22, Y+46	; 0x2e
    2b5c:	7f a5       	ldd	r23, Y+47	; 0x2f
    2b5e:	88 a9       	ldd	r24, Y+48	; 0x30
    2b60:	99 a9       	ldd	r25, Y+49	; 0x31
    2b62:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b66:	dc 01       	movw	r26, r24
    2b68:	cb 01       	movw	r24, r22
    2b6a:	9d a7       	std	Y+45, r25	; 0x2d
    2b6c:	8c a7       	std	Y+44, r24	; 0x2c
    2b6e:	8c a5       	ldd	r24, Y+44	; 0x2c
    2b70:	9d a5       	ldd	r25, Y+45	; 0x2d
    2b72:	99 a7       	std	Y+41, r25	; 0x29
    2b74:	88 a7       	std	Y+40, r24	; 0x28
    2b76:	88 a5       	ldd	r24, Y+40	; 0x28
    2b78:	99 a5       	ldd	r25, Y+41	; 0x29
    2b7a:	01 97       	sbiw	r24, 0x01	; 1
    2b7c:	f1 f7       	brne	.-4      	; 0x2b7a <LCD_VoidSendData+0x3ec>
    2b7e:	99 a7       	std	Y+41, r25	; 0x29
    2b80:	88 a7       	std	Y+40, r24	; 0x28
    2b82:	0f c0       	rjmp	.+30     	; 0x2ba2 <LCD_VoidSendData+0x414>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2b84:	6f a9       	ldd	r22, Y+55	; 0x37
    2b86:	78 ad       	ldd	r23, Y+56	; 0x38
    2b88:	89 ad       	ldd	r24, Y+57	; 0x39
    2b8a:	9a ad       	ldd	r25, Y+58	; 0x3a
    2b8c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b90:	dc 01       	movw	r26, r24
    2b92:	cb 01       	movw	r24, r22
    2b94:	8e ab       	std	Y+54, r24	; 0x36
    2b96:	8e a9       	ldd	r24, Y+54	; 0x36
    2b98:	8f a3       	std	Y+39, r24	; 0x27
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2b9a:	8f a1       	ldd	r24, Y+39	; 0x27
    2b9c:	8a 95       	dec	r24
    2b9e:	f1 f7       	brne	.-4      	; 0x2b9c <LCD_VoidSendData+0x40e>
    2ba0:	8f a3       	std	Y+39, r24	; 0x27
	_delay_us(200);
	/* Write On Char Least Signifit */
	DIO_U8SetPortValue(LCD_DATA_PORT, (Copy_U8Data << 4));
    2ba2:	fe 01       	movw	r30, r28
    2ba4:	e9 5a       	subi	r30, 0xA9	; 169
    2ba6:	ff 4f       	sbci	r31, 0xFF	; 255
    2ba8:	80 81       	ld	r24, Z
    2baa:	98 2f       	mov	r25, r24
    2bac:	92 95       	swap	r25
    2bae:	90 7f       	andi	r25, 0xF0	; 240
    2bb0:	80 e0       	ldi	r24, 0x00	; 0
    2bb2:	69 2f       	mov	r22, r25
    2bb4:	0e 94 91 0b 	call	0x1722	; 0x1722 <DIO_U8SetPortValue>
	/*Enable sequence to send command*/
	DIO_U8SetPinValue(LCD_CONTROL_PORT, CONTROL_E, DIO_HIGH);
    2bb8:	83 e0       	ldi	r24, 0x03	; 3
    2bba:	64 e0       	ldi	r22, 0x04	; 4
    2bbc:	41 e0       	ldi	r20, 0x01	; 1
    2bbe:	0e 94 8e 08 	call	0x111c	; 0x111c <DIO_U8SetPinValue>
    2bc2:	80 e0       	ldi	r24, 0x00	; 0
    2bc4:	90 e0       	ldi	r25, 0x00	; 0
    2bc6:	a0 e8       	ldi	r26, 0x80	; 128
    2bc8:	bf e3       	ldi	r27, 0x3F	; 63
    2bca:	8b a3       	std	Y+35, r24	; 0x23
    2bcc:	9c a3       	std	Y+36, r25	; 0x24
    2bce:	ad a3       	std	Y+37, r26	; 0x25
    2bd0:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2bd2:	6b a1       	ldd	r22, Y+35	; 0x23
    2bd4:	7c a1       	ldd	r23, Y+36	; 0x24
    2bd6:	8d a1       	ldd	r24, Y+37	; 0x25
    2bd8:	9e a1       	ldd	r25, Y+38	; 0x26
    2bda:	2b ea       	ldi	r18, 0xAB	; 171
    2bdc:	3a ea       	ldi	r19, 0xAA	; 170
    2bde:	4a e2       	ldi	r20, 0x2A	; 42
    2be0:	50 e4       	ldi	r21, 0x40	; 64
    2be2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2be6:	dc 01       	movw	r26, r24
    2be8:	cb 01       	movw	r24, r22
    2bea:	8f 8f       	std	Y+31, r24	; 0x1f
    2bec:	98 a3       	std	Y+32, r25	; 0x20
    2bee:	a9 a3       	std	Y+33, r26	; 0x21
    2bf0:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    2bf2:	6f 8d       	ldd	r22, Y+31	; 0x1f
    2bf4:	78 a1       	ldd	r23, Y+32	; 0x20
    2bf6:	89 a1       	ldd	r24, Y+33	; 0x21
    2bf8:	9a a1       	ldd	r25, Y+34	; 0x22
    2bfa:	20 e0       	ldi	r18, 0x00	; 0
    2bfc:	30 e0       	ldi	r19, 0x00	; 0
    2bfe:	40 e8       	ldi	r20, 0x80	; 128
    2c00:	5f e3       	ldi	r21, 0x3F	; 63
    2c02:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2c06:	88 23       	and	r24, r24
    2c08:	1c f4       	brge	.+6      	; 0x2c10 <LCD_VoidSendData+0x482>
		__ticks = 1;
    2c0a:	81 e0       	ldi	r24, 0x01	; 1
    2c0c:	8e 8f       	std	Y+30, r24	; 0x1e
    2c0e:	91 c0       	rjmp	.+290    	; 0x2d32 <LCD_VoidSendData+0x5a4>
	else if (__tmp > 255)
    2c10:	6f 8d       	ldd	r22, Y+31	; 0x1f
    2c12:	78 a1       	ldd	r23, Y+32	; 0x20
    2c14:	89 a1       	ldd	r24, Y+33	; 0x21
    2c16:	9a a1       	ldd	r25, Y+34	; 0x22
    2c18:	20 e0       	ldi	r18, 0x00	; 0
    2c1a:	30 e0       	ldi	r19, 0x00	; 0
    2c1c:	4f e7       	ldi	r20, 0x7F	; 127
    2c1e:	53 e4       	ldi	r21, 0x43	; 67
    2c20:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2c24:	18 16       	cp	r1, r24
    2c26:	0c f0       	brlt	.+2      	; 0x2c2a <LCD_VoidSendData+0x49c>
    2c28:	7b c0       	rjmp	.+246    	; 0x2d20 <LCD_VoidSendData+0x592>
	{
		_delay_ms(__us / 1000.0);
    2c2a:	6b a1       	ldd	r22, Y+35	; 0x23
    2c2c:	7c a1       	ldd	r23, Y+36	; 0x24
    2c2e:	8d a1       	ldd	r24, Y+37	; 0x25
    2c30:	9e a1       	ldd	r25, Y+38	; 0x26
    2c32:	20 e0       	ldi	r18, 0x00	; 0
    2c34:	30 e0       	ldi	r19, 0x00	; 0
    2c36:	4a e7       	ldi	r20, 0x7A	; 122
    2c38:	54 e4       	ldi	r21, 0x44	; 68
    2c3a:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2c3e:	dc 01       	movw	r26, r24
    2c40:	cb 01       	movw	r24, r22
    2c42:	8a 8f       	std	Y+26, r24	; 0x1a
    2c44:	9b 8f       	std	Y+27, r25	; 0x1b
    2c46:	ac 8f       	std	Y+28, r26	; 0x1c
    2c48:	bd 8f       	std	Y+29, r27	; 0x1d
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c4a:	6a 8d       	ldd	r22, Y+26	; 0x1a
    2c4c:	7b 8d       	ldd	r23, Y+27	; 0x1b
    2c4e:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2c50:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2c52:	20 e0       	ldi	r18, 0x00	; 0
    2c54:	30 e0       	ldi	r19, 0x00	; 0
    2c56:	4a ef       	ldi	r20, 0xFA	; 250
    2c58:	54 e4       	ldi	r21, 0x44	; 68
    2c5a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c5e:	dc 01       	movw	r26, r24
    2c60:	cb 01       	movw	r24, r22
    2c62:	8e 8b       	std	Y+22, r24	; 0x16
    2c64:	9f 8b       	std	Y+23, r25	; 0x17
    2c66:	a8 8f       	std	Y+24, r26	; 0x18
    2c68:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
    2c6a:	6e 89       	ldd	r22, Y+22	; 0x16
    2c6c:	7f 89       	ldd	r23, Y+23	; 0x17
    2c6e:	88 8d       	ldd	r24, Y+24	; 0x18
    2c70:	99 8d       	ldd	r25, Y+25	; 0x19
    2c72:	20 e0       	ldi	r18, 0x00	; 0
    2c74:	30 e0       	ldi	r19, 0x00	; 0
    2c76:	40 e8       	ldi	r20, 0x80	; 128
    2c78:	5f e3       	ldi	r21, 0x3F	; 63
    2c7a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2c7e:	88 23       	and	r24, r24
    2c80:	2c f4       	brge	.+10     	; 0x2c8c <LCD_VoidSendData+0x4fe>
		__ticks = 1;
    2c82:	81 e0       	ldi	r24, 0x01	; 1
    2c84:	90 e0       	ldi	r25, 0x00	; 0
    2c86:	9d 8b       	std	Y+21, r25	; 0x15
    2c88:	8c 8b       	std	Y+20, r24	; 0x14
    2c8a:	3f c0       	rjmp	.+126    	; 0x2d0a <LCD_VoidSendData+0x57c>
	else if (__tmp > 65535)
    2c8c:	6e 89       	ldd	r22, Y+22	; 0x16
    2c8e:	7f 89       	ldd	r23, Y+23	; 0x17
    2c90:	88 8d       	ldd	r24, Y+24	; 0x18
    2c92:	99 8d       	ldd	r25, Y+25	; 0x19
    2c94:	20 e0       	ldi	r18, 0x00	; 0
    2c96:	3f ef       	ldi	r19, 0xFF	; 255
    2c98:	4f e7       	ldi	r20, 0x7F	; 127
    2c9a:	57 e4       	ldi	r21, 0x47	; 71
    2c9c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2ca0:	18 16       	cp	r1, r24
    2ca2:	4c f5       	brge	.+82     	; 0x2cf6 <LCD_VoidSendData+0x568>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ca4:	6a 8d       	ldd	r22, Y+26	; 0x1a
    2ca6:	7b 8d       	ldd	r23, Y+27	; 0x1b
    2ca8:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2caa:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2cac:	20 e0       	ldi	r18, 0x00	; 0
    2cae:	30 e0       	ldi	r19, 0x00	; 0
    2cb0:	40 e2       	ldi	r20, 0x20	; 32
    2cb2:	51 e4       	ldi	r21, 0x41	; 65
    2cb4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cb8:	dc 01       	movw	r26, r24
    2cba:	cb 01       	movw	r24, r22
    2cbc:	bc 01       	movw	r22, r24
    2cbe:	cd 01       	movw	r24, r26
    2cc0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cc4:	dc 01       	movw	r26, r24
    2cc6:	cb 01       	movw	r24, r22
    2cc8:	9d 8b       	std	Y+21, r25	; 0x15
    2cca:	8c 8b       	std	Y+20, r24	; 0x14
    2ccc:	0f c0       	rjmp	.+30     	; 0x2cec <LCD_VoidSendData+0x55e>
    2cce:	88 ec       	ldi	r24, 0xC8	; 200
    2cd0:	90 e0       	ldi	r25, 0x00	; 0
    2cd2:	9b 8b       	std	Y+19, r25	; 0x13
    2cd4:	8a 8b       	std	Y+18, r24	; 0x12
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2cd6:	8a 89       	ldd	r24, Y+18	; 0x12
    2cd8:	9b 89       	ldd	r25, Y+19	; 0x13
    2cda:	01 97       	sbiw	r24, 0x01	; 1
    2cdc:	f1 f7       	brne	.-4      	; 0x2cda <LCD_VoidSendData+0x54c>
    2cde:	9b 8b       	std	Y+19, r25	; 0x13
    2ce0:	8a 8b       	std	Y+18, r24	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ce2:	8c 89       	ldd	r24, Y+20	; 0x14
    2ce4:	9d 89       	ldd	r25, Y+21	; 0x15
    2ce6:	01 97       	sbiw	r24, 0x01	; 1
    2ce8:	9d 8b       	std	Y+21, r25	; 0x15
    2cea:	8c 8b       	std	Y+20, r24	; 0x14
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2cec:	8c 89       	ldd	r24, Y+20	; 0x14
    2cee:	9d 89       	ldd	r25, Y+21	; 0x15
    2cf0:	00 97       	sbiw	r24, 0x00	; 0
    2cf2:	69 f7       	brne	.-38     	; 0x2cce <LCD_VoidSendData+0x540>
    2cf4:	24 c0       	rjmp	.+72     	; 0x2d3e <LCD_VoidSendData+0x5b0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2cf6:	6e 89       	ldd	r22, Y+22	; 0x16
    2cf8:	7f 89       	ldd	r23, Y+23	; 0x17
    2cfa:	88 8d       	ldd	r24, Y+24	; 0x18
    2cfc:	99 8d       	ldd	r25, Y+25	; 0x19
    2cfe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d02:	dc 01       	movw	r26, r24
    2d04:	cb 01       	movw	r24, r22
    2d06:	9d 8b       	std	Y+21, r25	; 0x15
    2d08:	8c 8b       	std	Y+20, r24	; 0x14
    2d0a:	8c 89       	ldd	r24, Y+20	; 0x14
    2d0c:	9d 89       	ldd	r25, Y+21	; 0x15
    2d0e:	99 8b       	std	Y+17, r25	; 0x11
    2d10:	88 8b       	std	Y+16, r24	; 0x10
    2d12:	88 89       	ldd	r24, Y+16	; 0x10
    2d14:	99 89       	ldd	r25, Y+17	; 0x11
    2d16:	01 97       	sbiw	r24, 0x01	; 1
    2d18:	f1 f7       	brne	.-4      	; 0x2d16 <LCD_VoidSendData+0x588>
    2d1a:	99 8b       	std	Y+17, r25	; 0x11
    2d1c:	88 8b       	std	Y+16, r24	; 0x10
    2d1e:	0f c0       	rjmp	.+30     	; 0x2d3e <LCD_VoidSendData+0x5b0>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2d20:	6f 8d       	ldd	r22, Y+31	; 0x1f
    2d22:	78 a1       	ldd	r23, Y+32	; 0x20
    2d24:	89 a1       	ldd	r24, Y+33	; 0x21
    2d26:	9a a1       	ldd	r25, Y+34	; 0x22
    2d28:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d2c:	dc 01       	movw	r26, r24
    2d2e:	cb 01       	movw	r24, r22
    2d30:	8e 8f       	std	Y+30, r24	; 0x1e
    2d32:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2d34:	8f 87       	std	Y+15, r24	; 0x0f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2d36:	8f 85       	ldd	r24, Y+15	; 0x0f
    2d38:	8a 95       	dec	r24
    2d3a:	f1 f7       	brne	.-4      	; 0x2d38 <LCD_VoidSendData+0x5aa>
    2d3c:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_us(1);
	DIO_U8SetPinValue(LCD_CONTROL_PORT, CONTROL_E, DIO_LOW);
    2d3e:	83 e0       	ldi	r24, 0x03	; 3
    2d40:	64 e0       	ldi	r22, 0x04	; 4
    2d42:	40 e0       	ldi	r20, 0x00	; 0
    2d44:	0e 94 8e 08 	call	0x111c	; 0x111c <DIO_U8SetPinValue>
    2d48:	80 e0       	ldi	r24, 0x00	; 0
    2d4a:	90 e0       	ldi	r25, 0x00	; 0
    2d4c:	a0 e0       	ldi	r26, 0x00	; 0
    2d4e:	b0 e4       	ldi	r27, 0x40	; 64
    2d50:	8b 87       	std	Y+11, r24	; 0x0b
    2d52:	9c 87       	std	Y+12, r25	; 0x0c
    2d54:	ad 87       	std	Y+13, r26	; 0x0d
    2d56:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d58:	6b 85       	ldd	r22, Y+11	; 0x0b
    2d5a:	7c 85       	ldd	r23, Y+12	; 0x0c
    2d5c:	8d 85       	ldd	r24, Y+13	; 0x0d
    2d5e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2d60:	20 e0       	ldi	r18, 0x00	; 0
    2d62:	30 e0       	ldi	r19, 0x00	; 0
    2d64:	4a ef       	ldi	r20, 0xFA	; 250
    2d66:	54 e4       	ldi	r21, 0x44	; 68
    2d68:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d6c:	dc 01       	movw	r26, r24
    2d6e:	cb 01       	movw	r24, r22
    2d70:	8f 83       	std	Y+7, r24	; 0x07
    2d72:	98 87       	std	Y+8, r25	; 0x08
    2d74:	a9 87       	std	Y+9, r26	; 0x09
    2d76:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2d78:	6f 81       	ldd	r22, Y+7	; 0x07
    2d7a:	78 85       	ldd	r23, Y+8	; 0x08
    2d7c:	89 85       	ldd	r24, Y+9	; 0x09
    2d7e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d80:	20 e0       	ldi	r18, 0x00	; 0
    2d82:	30 e0       	ldi	r19, 0x00	; 0
    2d84:	40 e8       	ldi	r20, 0x80	; 128
    2d86:	5f e3       	ldi	r21, 0x3F	; 63
    2d88:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2d8c:	88 23       	and	r24, r24
    2d8e:	2c f4       	brge	.+10     	; 0x2d9a <LCD_VoidSendData+0x60c>
		__ticks = 1;
    2d90:	81 e0       	ldi	r24, 0x01	; 1
    2d92:	90 e0       	ldi	r25, 0x00	; 0
    2d94:	9e 83       	std	Y+6, r25	; 0x06
    2d96:	8d 83       	std	Y+5, r24	; 0x05
    2d98:	3f c0       	rjmp	.+126    	; 0x2e18 <LCD_VoidSendData+0x68a>
	else if (__tmp > 65535)
    2d9a:	6f 81       	ldd	r22, Y+7	; 0x07
    2d9c:	78 85       	ldd	r23, Y+8	; 0x08
    2d9e:	89 85       	ldd	r24, Y+9	; 0x09
    2da0:	9a 85       	ldd	r25, Y+10	; 0x0a
    2da2:	20 e0       	ldi	r18, 0x00	; 0
    2da4:	3f ef       	ldi	r19, 0xFF	; 255
    2da6:	4f e7       	ldi	r20, 0x7F	; 127
    2da8:	57 e4       	ldi	r21, 0x47	; 71
    2daa:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2dae:	18 16       	cp	r1, r24
    2db0:	4c f5       	brge	.+82     	; 0x2e04 <LCD_VoidSendData+0x676>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2db2:	6b 85       	ldd	r22, Y+11	; 0x0b
    2db4:	7c 85       	ldd	r23, Y+12	; 0x0c
    2db6:	8d 85       	ldd	r24, Y+13	; 0x0d
    2db8:	9e 85       	ldd	r25, Y+14	; 0x0e
    2dba:	20 e0       	ldi	r18, 0x00	; 0
    2dbc:	30 e0       	ldi	r19, 0x00	; 0
    2dbe:	40 e2       	ldi	r20, 0x20	; 32
    2dc0:	51 e4       	ldi	r21, 0x41	; 65
    2dc2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2dc6:	dc 01       	movw	r26, r24
    2dc8:	cb 01       	movw	r24, r22
    2dca:	bc 01       	movw	r22, r24
    2dcc:	cd 01       	movw	r24, r26
    2dce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2dd2:	dc 01       	movw	r26, r24
    2dd4:	cb 01       	movw	r24, r22
    2dd6:	9e 83       	std	Y+6, r25	; 0x06
    2dd8:	8d 83       	std	Y+5, r24	; 0x05
    2dda:	0f c0       	rjmp	.+30     	; 0x2dfa <LCD_VoidSendData+0x66c>
    2ddc:	88 ec       	ldi	r24, 0xC8	; 200
    2dde:	90 e0       	ldi	r25, 0x00	; 0
    2de0:	9c 83       	std	Y+4, r25	; 0x04
    2de2:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2de4:	8b 81       	ldd	r24, Y+3	; 0x03
    2de6:	9c 81       	ldd	r25, Y+4	; 0x04
    2de8:	01 97       	sbiw	r24, 0x01	; 1
    2dea:	f1 f7       	brne	.-4      	; 0x2de8 <LCD_VoidSendData+0x65a>
    2dec:	9c 83       	std	Y+4, r25	; 0x04
    2dee:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2df0:	8d 81       	ldd	r24, Y+5	; 0x05
    2df2:	9e 81       	ldd	r25, Y+6	; 0x06
    2df4:	01 97       	sbiw	r24, 0x01	; 1
    2df6:	9e 83       	std	Y+6, r25	; 0x06
    2df8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2dfa:	8d 81       	ldd	r24, Y+5	; 0x05
    2dfc:	9e 81       	ldd	r25, Y+6	; 0x06
    2dfe:	00 97       	sbiw	r24, 0x00	; 0
    2e00:	69 f7       	brne	.-38     	; 0x2ddc <LCD_VoidSendData+0x64e>
    2e02:	14 c0       	rjmp	.+40     	; 0x2e2c <LCD_VoidSendData+0x69e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e04:	6f 81       	ldd	r22, Y+7	; 0x07
    2e06:	78 85       	ldd	r23, Y+8	; 0x08
    2e08:	89 85       	ldd	r24, Y+9	; 0x09
    2e0a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e0c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e10:	dc 01       	movw	r26, r24
    2e12:	cb 01       	movw	r24, r22
    2e14:	9e 83       	std	Y+6, r25	; 0x06
    2e16:	8d 83       	std	Y+5, r24	; 0x05
    2e18:	8d 81       	ldd	r24, Y+5	; 0x05
    2e1a:	9e 81       	ldd	r25, Y+6	; 0x06
    2e1c:	9a 83       	std	Y+2, r25	; 0x02
    2e1e:	89 83       	std	Y+1, r24	; 0x01
    2e20:	89 81       	ldd	r24, Y+1	; 0x01
    2e22:	9a 81       	ldd	r25, Y+2	; 0x02
    2e24:	01 97       	sbiw	r24, 0x01	; 1
    2e26:	f1 f7       	brne	.-4      	; 0x2e24 <LCD_VoidSendData+0x696>
    2e28:	9a 83       	std	Y+2, r25	; 0x02
    2e2a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
#endif
}
    2e2c:	c9 5a       	subi	r28, 0xA9	; 169
    2e2e:	df 4f       	sbci	r29, 0xFF	; 255
    2e30:	0f b6       	in	r0, 0x3f	; 63
    2e32:	f8 94       	cli
    2e34:	de bf       	out	0x3e, r29	; 62
    2e36:	0f be       	out	0x3f, r0	; 63
    2e38:	cd bf       	out	0x3d, r28	; 61
    2e3a:	cf 91       	pop	r28
    2e3c:	df 91       	pop	r29
    2e3e:	1f 91       	pop	r17
    2e40:	0f 91       	pop	r16
    2e42:	08 95       	ret

00002e44 <LCD_VoidSendString>:
void LCD_VoidSendString(u8 *Copy_U8String)
{
    2e44:	df 93       	push	r29
    2e46:	cf 93       	push	r28
    2e48:	00 d0       	rcall	.+0      	; 0x2e4a <LCD_VoidSendString+0x6>
    2e4a:	cd b7       	in	r28, 0x3d	; 61
    2e4c:	de b7       	in	r29, 0x3e	; 62
    2e4e:	9a 83       	std	Y+2, r25	; 0x02
    2e50:	89 83       	std	Y+1, r24	; 0x01
    2e52:	11 c0       	rjmp	.+34     	; 0x2e76 <LCD_VoidSendString+0x32>
	static u8 i=0;
	while(Copy_U8String[i] != '\0')
	{
		LCD_VoidSendData(Copy_U8String[i]);
    2e54:	80 91 1e 03 	lds	r24, 0x031E
    2e58:	28 2f       	mov	r18, r24
    2e5a:	30 e0       	ldi	r19, 0x00	; 0
    2e5c:	89 81       	ldd	r24, Y+1	; 0x01
    2e5e:	9a 81       	ldd	r25, Y+2	; 0x02
    2e60:	fc 01       	movw	r30, r24
    2e62:	e2 0f       	add	r30, r18
    2e64:	f3 1f       	adc	r31, r19
    2e66:	80 81       	ld	r24, Z
    2e68:	0e 94 c7 13 	call	0x278e	; 0x278e <LCD_VoidSendData>
		i++;
    2e6c:	80 91 1e 03 	lds	r24, 0x031E
    2e70:	8f 5f       	subi	r24, 0xFF	; 255
    2e72:	80 93 1e 03 	sts	0x031E, r24
#endif
}
void LCD_VoidSendString(u8 *Copy_U8String)
{
	static u8 i=0;
	while(Copy_U8String[i] != '\0')
    2e76:	80 91 1e 03 	lds	r24, 0x031E
    2e7a:	28 2f       	mov	r18, r24
    2e7c:	30 e0       	ldi	r19, 0x00	; 0
    2e7e:	89 81       	ldd	r24, Y+1	; 0x01
    2e80:	9a 81       	ldd	r25, Y+2	; 0x02
    2e82:	fc 01       	movw	r30, r24
    2e84:	e2 0f       	add	r30, r18
    2e86:	f3 1f       	adc	r31, r19
    2e88:	80 81       	ld	r24, Z
    2e8a:	88 23       	and	r24, r24
    2e8c:	19 f7       	brne	.-58     	; 0x2e54 <LCD_VoidSendString+0x10>
		LCD_VoidSendData(Copy_U8String[i]);
		i++;
	}


}
    2e8e:	0f 90       	pop	r0
    2e90:	0f 90       	pop	r0
    2e92:	cf 91       	pop	r28
    2e94:	df 91       	pop	r29
    2e96:	08 95       	ret

00002e98 <LCD_VoidGoToRowCol>:
void LCD_VoidGoToRowCol(u8 Copy_U8Row ,u8 Copy_U8Col)
{
    2e98:	df 93       	push	r29
    2e9a:	cf 93       	push	r28
    2e9c:	00 d0       	rcall	.+0      	; 0x2e9e <LCD_VoidGoToRowCol+0x6>
    2e9e:	00 d0       	rcall	.+0      	; 0x2ea0 <LCD_VoidGoToRowCol+0x8>
    2ea0:	cd b7       	in	r28, 0x3d	; 61
    2ea2:	de b7       	in	r29, 0x3e	; 62
    2ea4:	89 83       	std	Y+1, r24	; 0x01
    2ea6:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_U8Row)
    2ea8:	89 81       	ldd	r24, Y+1	; 0x01
    2eaa:	28 2f       	mov	r18, r24
    2eac:	30 e0       	ldi	r19, 0x00	; 0
    2eae:	3c 83       	std	Y+4, r19	; 0x04
    2eb0:	2b 83       	std	Y+3, r18	; 0x03
    2eb2:	8b 81       	ldd	r24, Y+3	; 0x03
    2eb4:	9c 81       	ldd	r25, Y+4	; 0x04
    2eb6:	00 97       	sbiw	r24, 0x00	; 0
    2eb8:	31 f0       	breq	.+12     	; 0x2ec6 <LCD_VoidGoToRowCol+0x2e>
    2eba:	2b 81       	ldd	r18, Y+3	; 0x03
    2ebc:	3c 81       	ldd	r19, Y+4	; 0x04
    2ebe:	21 30       	cpi	r18, 0x01	; 1
    2ec0:	31 05       	cpc	r19, r1
    2ec2:	31 f0       	breq	.+12     	; 0x2ed0 <LCD_VoidGoToRowCol+0x38>
    2ec4:	09 c0       	rjmp	.+18     	; 0x2ed8 <LCD_VoidGoToRowCol+0x40>
	{
		case 0:LCD_VoidSendCommand(0x80+Copy_U8Col);break;
    2ec6:	8a 81       	ldd	r24, Y+2	; 0x02
    2ec8:	80 58       	subi	r24, 0x80	; 128
    2eca:	0e 94 4d 0f 	call	0x1e9a	; 0x1e9a <LCD_VoidSendCommand>
    2ece:	04 c0       	rjmp	.+8      	; 0x2ed8 <LCD_VoidGoToRowCol+0x40>
		case 1:LCD_VoidSendCommand(0xc0+Copy_U8Col);break;
    2ed0:	8a 81       	ldd	r24, Y+2	; 0x02
    2ed2:	80 54       	subi	r24, 0x40	; 64
    2ed4:	0e 94 4d 0f 	call	0x1e9a	; 0x1e9a <LCD_VoidSendCommand>
	}
}
    2ed8:	0f 90       	pop	r0
    2eda:	0f 90       	pop	r0
    2edc:	0f 90       	pop	r0
    2ede:	0f 90       	pop	r0
    2ee0:	cf 91       	pop	r28
    2ee2:	df 91       	pop	r29
    2ee4:	08 95       	ret

00002ee6 <LCD_VoidSendNumber>:


void LCD_VoidSendNumber(s32 Copy_s32Number)
{
    2ee6:	0f 93       	push	r16
    2ee8:	1f 93       	push	r17
    2eea:	df 93       	push	r29
    2eec:	cf 93       	push	r28
    2eee:	cd b7       	in	r28, 0x3d	; 61
    2ef0:	de b7       	in	r29, 0x3e	; 62
    2ef2:	60 97       	sbiw	r28, 0x10	; 16
    2ef4:	0f b6       	in	r0, 0x3f	; 63
    2ef6:	f8 94       	cli
    2ef8:	de bf       	out	0x3e, r29	; 62
    2efa:	0f be       	out	0x3f, r0	; 63
    2efc:	cd bf       	out	0x3d, r28	; 61
    2efe:	6d 87       	std	Y+13, r22	; 0x0d
    2f00:	7e 87       	std	Y+14, r23	; 0x0e
    2f02:	8f 87       	std	Y+15, r24	; 0x0f
    2f04:	98 8b       	std	Y+16, r25	; 0x10
    u8 Local_u8Array[11]; // Increased array size to accommodate negative sign
    s8 Local_counter = 0;
    2f06:	19 82       	std	Y+1, r1	; 0x01

    if (Copy_s32Number < 0)
    2f08:	8d 85       	ldd	r24, Y+13	; 0x0d
    2f0a:	9e 85       	ldd	r25, Y+14	; 0x0e
    2f0c:	af 85       	ldd	r26, Y+15	; 0x0f
    2f0e:	b8 89       	ldd	r27, Y+16	; 0x10
    2f10:	bb 23       	and	r27, r27
    2f12:	9c f4       	brge	.+38     	; 0x2f3a <LCD_VoidSendNumber+0x54>
    {
    	LCD_VoidSendData('-'); // Display negative sign
    2f14:	8d e2       	ldi	r24, 0x2D	; 45
    2f16:	0e 94 c7 13 	call	0x278e	; 0x278e <LCD_VoidSendData>
    	Copy_s32Number = -Copy_s32Number; // Convert negative number to positive for processing
    2f1a:	8d 85       	ldd	r24, Y+13	; 0x0d
    2f1c:	9e 85       	ldd	r25, Y+14	; 0x0e
    2f1e:	af 85       	ldd	r26, Y+15	; 0x0f
    2f20:	b8 89       	ldd	r27, Y+16	; 0x10
    2f22:	b0 95       	com	r27
    2f24:	a0 95       	com	r26
    2f26:	90 95       	com	r25
    2f28:	81 95       	neg	r24
    2f2a:	9f 4f       	sbci	r25, 0xFF	; 255
    2f2c:	af 4f       	sbci	r26, 0xFF	; 255
    2f2e:	bf 4f       	sbci	r27, 0xFF	; 255
    2f30:	8d 87       	std	Y+13, r24	; 0x0d
    2f32:	9e 87       	std	Y+14, r25	; 0x0e
    2f34:	af 87       	std	Y+15, r26	; 0x0f
    2f36:	b8 8b       	std	Y+16, r27	; 0x10
    2f38:	3c c0       	rjmp	.+120    	; 0x2fb2 <LCD_VoidSendNumber+0xcc>
    }
    else if (Copy_s32Number == 0)
    2f3a:	8d 85       	ldd	r24, Y+13	; 0x0d
    2f3c:	9e 85       	ldd	r25, Y+14	; 0x0e
    2f3e:	af 85       	ldd	r26, Y+15	; 0x0f
    2f40:	b8 89       	ldd	r27, Y+16	; 0x10
    2f42:	00 97       	sbiw	r24, 0x00	; 0
    2f44:	a1 05       	cpc	r26, r1
    2f46:	b1 05       	cpc	r27, r1
    2f48:	a1 f5       	brne	.+104    	; 0x2fb2 <LCD_VoidSendNumber+0xcc>
    {
    	LCD_VoidSendData('0');
    2f4a:	80 e3       	ldi	r24, 0x30	; 48
    2f4c:	0e 94 c7 13 	call	0x278e	; 0x278e <LCD_VoidSendData>
    2f50:	30 c0       	rjmp	.+96     	; 0x2fb2 <LCD_VoidSendNumber+0xcc>
    }

    while (Copy_s32Number > LOW)
    {
        Local_u8Array[Local_counter++] = (Copy_s32Number % 10) + 48;
    2f52:	89 81       	ldd	r24, Y+1	; 0x01
    2f54:	08 2f       	mov	r16, r24
    2f56:	11 27       	eor	r17, r17
    2f58:	07 fd       	sbrc	r16, 7
    2f5a:	10 95       	com	r17
    2f5c:	8d 85       	ldd	r24, Y+13	; 0x0d
    2f5e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2f60:	af 85       	ldd	r26, Y+15	; 0x0f
    2f62:	b8 89       	ldd	r27, Y+16	; 0x10
    2f64:	2a e0       	ldi	r18, 0x0A	; 10
    2f66:	30 e0       	ldi	r19, 0x00	; 0
    2f68:	40 e0       	ldi	r20, 0x00	; 0
    2f6a:	50 e0       	ldi	r21, 0x00	; 0
    2f6c:	bc 01       	movw	r22, r24
    2f6e:	cd 01       	movw	r24, r26
    2f70:	0e 94 13 3d 	call	0x7a26	; 0x7a26 <__divmodsi4>
    2f74:	dc 01       	movw	r26, r24
    2f76:	cb 01       	movw	r24, r22
    2f78:	28 2f       	mov	r18, r24
    2f7a:	20 5d       	subi	r18, 0xD0	; 208
    2f7c:	ce 01       	movw	r24, r28
    2f7e:	02 96       	adiw	r24, 0x02	; 2
    2f80:	fc 01       	movw	r30, r24
    2f82:	e0 0f       	add	r30, r16
    2f84:	f1 1f       	adc	r31, r17
    2f86:	20 83       	st	Z, r18
    2f88:	89 81       	ldd	r24, Y+1	; 0x01
    2f8a:	8f 5f       	subi	r24, 0xFF	; 255
    2f8c:	89 83       	std	Y+1, r24	; 0x01
        Copy_s32Number /= 10;
    2f8e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2f90:	9e 85       	ldd	r25, Y+14	; 0x0e
    2f92:	af 85       	ldd	r26, Y+15	; 0x0f
    2f94:	b8 89       	ldd	r27, Y+16	; 0x10
    2f96:	2a e0       	ldi	r18, 0x0A	; 10
    2f98:	30 e0       	ldi	r19, 0x00	; 0
    2f9a:	40 e0       	ldi	r20, 0x00	; 0
    2f9c:	50 e0       	ldi	r21, 0x00	; 0
    2f9e:	bc 01       	movw	r22, r24
    2fa0:	cd 01       	movw	r24, r26
    2fa2:	0e 94 13 3d 	call	0x7a26	; 0x7a26 <__divmodsi4>
    2fa6:	da 01       	movw	r26, r20
    2fa8:	c9 01       	movw	r24, r18
    2faa:	8d 87       	std	Y+13, r24	; 0x0d
    2fac:	9e 87       	std	Y+14, r25	; 0x0e
    2fae:	af 87       	std	Y+15, r26	; 0x0f
    2fb0:	b8 8b       	std	Y+16, r27	; 0x10
    else if (Copy_s32Number == 0)
    {
    	LCD_VoidSendData('0');
    }

    while (Copy_s32Number > LOW)
    2fb2:	8d 85       	ldd	r24, Y+13	; 0x0d
    2fb4:	9e 85       	ldd	r25, Y+14	; 0x0e
    2fb6:	af 85       	ldd	r26, Y+15	; 0x0f
    2fb8:	b8 89       	ldd	r27, Y+16	; 0x10
    2fba:	18 16       	cp	r1, r24
    2fbc:	19 06       	cpc	r1, r25
    2fbe:	1a 06       	cpc	r1, r26
    2fc0:	1b 06       	cpc	r1, r27
    2fc2:	3c f2       	brlt	.-114    	; 0x2f52 <LCD_VoidSendNumber+0x6c>
    {
        Local_u8Array[Local_counter++] = (Copy_s32Number % 10) + 48;
        Copy_s32Number /= 10;
    }

    Local_counter--;
    2fc4:	89 81       	ldd	r24, Y+1	; 0x01
    2fc6:	81 50       	subi	r24, 0x01	; 1
    2fc8:	89 83       	std	Y+1, r24	; 0x01
    2fca:	10 c0       	rjmp	.+32     	; 0x2fec <LCD_VoidSendNumber+0x106>

    // Loop for sending the reverse of the array
    while (Local_counter >= 0)
    {
    	LCD_VoidSendData(Local_u8Array[Local_counter]);
    2fcc:	89 81       	ldd	r24, Y+1	; 0x01
    2fce:	28 2f       	mov	r18, r24
    2fd0:	33 27       	eor	r19, r19
    2fd2:	27 fd       	sbrc	r18, 7
    2fd4:	30 95       	com	r19
    2fd6:	ce 01       	movw	r24, r28
    2fd8:	02 96       	adiw	r24, 0x02	; 2
    2fda:	fc 01       	movw	r30, r24
    2fdc:	e2 0f       	add	r30, r18
    2fde:	f3 1f       	adc	r31, r19
    2fe0:	80 81       	ld	r24, Z
    2fe2:	0e 94 c7 13 	call	0x278e	; 0x278e <LCD_VoidSendData>
        Local_counter--;
    2fe6:	89 81       	ldd	r24, Y+1	; 0x01
    2fe8:	81 50       	subi	r24, 0x01	; 1
    2fea:	89 83       	std	Y+1, r24	; 0x01
    }

    Local_counter--;

    // Loop for sending the reverse of the array
    while (Local_counter >= 0)
    2fec:	89 81       	ldd	r24, Y+1	; 0x01
    2fee:	88 23       	and	r24, r24
    2ff0:	6c f7       	brge	.-38     	; 0x2fcc <LCD_VoidSendNumber+0xe6>
    {
    	LCD_VoidSendData(Local_u8Array[Local_counter]);
        Local_counter--;
    }
}
    2ff2:	60 96       	adiw	r28, 0x10	; 16
    2ff4:	0f b6       	in	r0, 0x3f	; 63
    2ff6:	f8 94       	cli
    2ff8:	de bf       	out	0x3e, r29	; 62
    2ffa:	0f be       	out	0x3f, r0	; 63
    2ffc:	cd bf       	out	0x3d, r28	; 61
    2ffe:	cf 91       	pop	r28
    3000:	df 91       	pop	r29
    3002:	1f 91       	pop	r17
    3004:	0f 91       	pop	r16
    3006:	08 95       	ret

00003008 <LCD_u8WriteString>:
u8 LCD_u8WriteString(u8 *Copy_U8String)
{
    3008:	df 93       	push	r29
    300a:	cf 93       	push	r28
    300c:	00 d0       	rcall	.+0      	; 0x300e <LCD_u8WriteString+0x6>
    300e:	0f 92       	push	r0
    3010:	cd b7       	in	r28, 0x3d	; 61
    3012:	de b7       	in	r29, 0x3e	; 62
    3014:	9b 83       	std	Y+3, r25	; 0x03
    3016:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_U8ErrorState = ERROR_STATE_OK;
    3018:	81 e0       	ldi	r24, 0x01	; 1
    301a:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_U8String != NULL)
    301c:	8a 81       	ldd	r24, Y+2	; 0x02
    301e:	9b 81       	ldd	r25, Y+3	; 0x03
    3020:	00 97       	sbiw	r24, 0x00	; 0
    3022:	91 f0       	breq	.+36     	; 0x3048 <LCD_u8WriteString+0x40>
    3024:	0b c0       	rjmp	.+22     	; 0x303c <LCD_u8WriteString+0x34>
	{
		while(*Copy_U8String > NULL_STR)
		{
			LCD_VoidSendData(*Copy_U8String++);
    3026:	ea 81       	ldd	r30, Y+2	; 0x02
    3028:	fb 81       	ldd	r31, Y+3	; 0x03
    302a:	20 81       	ld	r18, Z
    302c:	8a 81       	ldd	r24, Y+2	; 0x02
    302e:	9b 81       	ldd	r25, Y+3	; 0x03
    3030:	01 96       	adiw	r24, 0x01	; 1
    3032:	9b 83       	std	Y+3, r25	; 0x03
    3034:	8a 83       	std	Y+2, r24	; 0x02
    3036:	82 2f       	mov	r24, r18
    3038:	0e 94 c7 13 	call	0x278e	; 0x278e <LCD_VoidSendData>
u8 LCD_u8WriteString(u8 *Copy_U8String)
{
	u8 Local_U8ErrorState = ERROR_STATE_OK;
	if(Copy_U8String != NULL)
	{
		while(*Copy_U8String > NULL_STR)
    303c:	ea 81       	ldd	r30, Y+2	; 0x02
    303e:	fb 81       	ldd	r31, Y+3	; 0x03
    3040:	80 81       	ld	r24, Z
    3042:	88 23       	and	r24, r24
    3044:	81 f7       	brne	.-32     	; 0x3026 <LCD_u8WriteString+0x1e>
    3046:	01 c0       	rjmp	.+2      	; 0x304a <LCD_u8WriteString+0x42>
			LCD_VoidSendData(*Copy_U8String++);
		}
	}
	else
	{
		Local_U8ErrorState = ERROR_STATE_NOK;
    3048:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_U8ErrorState;
    304a:	89 81       	ldd	r24, Y+1	; 0x01
}
    304c:	0f 90       	pop	r0
    304e:	0f 90       	pop	r0
    3050:	0f 90       	pop	r0
    3052:	cf 91       	pop	r28
    3054:	df 91       	pop	r29
    3056:	08 95       	ret

00003058 <SERVO_U8SetServoAngle>:
#include "DIO_interface.h"
#include "Timer.h"
#include "SERVO_Interface.h"

u8 SERVO_U8SetServoAngle(s8 Copy_S8Angle)
{
    3058:	df 93       	push	r29
    305a:	cf 93       	push	r28
    305c:	cd b7       	in	r28, 0x3d	; 61
    305e:	de b7       	in	r29, 0x3e	; 62
    3060:	a0 97       	sbiw	r28, 0x20	; 32
    3062:	0f b6       	in	r0, 0x3f	; 63
    3064:	f8 94       	cli
    3066:	de bf       	out	0x3e, r29	; 62
    3068:	0f be       	out	0x3f, r0	; 63
    306a:	cd bf       	out	0x3d, r28	; 61
    306c:	88 a3       	std	Y+32, r24	; 0x20
	u8 Local_U8ErrorState = ERROR_STATE_OK;
    306e:	81 e0       	ldi	r24, 0x01	; 1
    3070:	8f 8f       	std	Y+31, r24	; 0x1f

	if((Copy_S8Angle<= 90  )&&(Copy_S8Angle >= -90))
    3072:	88 a1       	ldd	r24, Y+32	; 0x20
    3074:	8b 35       	cpi	r24, 0x5B	; 91
    3076:	0c f0       	brlt	.+2      	; 0x307a <SERVO_U8SetServoAngle+0x22>
    3078:	52 c1       	rjmp	.+676    	; 0x331e <SERVO_U8SetServoAngle+0x2c6>
    307a:	88 a1       	ldd	r24, Y+32	; 0x20
    307c:	86 3a       	cpi	r24, 0xA6	; 166
    307e:	0c f4       	brge	.+2      	; 0x3082 <SERVO_U8SetServoAngle+0x2a>
    3080:	4e c1       	rjmp	.+668    	; 0x331e <SERVO_U8SetServoAngle+0x2c6>
	{
		if(Copy_S8Angle >=0)
    3082:	88 a1       	ldd	r24, Y+32	; 0x20
    3084:	88 23       	and	r24, r24
    3086:	0c f4       	brge	.+2      	; 0x308a <SERVO_U8SetServoAngle+0x32>
    3088:	a5 c0       	rjmp	.+330    	; 0x31d4 <SERVO_U8SetServoAngle+0x17c>
		{
			for(s8 local_S16Counter=0; local_S16Counter<=Copy_S8Angle;local_S16Counter++)
    308a:	1e 8e       	std	Y+30, r1	; 0x1e
    308c:	9d c0       	rjmp	.+314    	; 0x31c8 <SERVO_U8SetServoAngle+0x170>
				{
					TIMER_VidCTCTimer1Preload(5.550*local_S16Counter+1500);
    308e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3090:	99 27       	eor	r25, r25
    3092:	87 fd       	sbrc	r24, 7
    3094:	90 95       	com	r25
    3096:	a9 2f       	mov	r26, r25
    3098:	b9 2f       	mov	r27, r25
    309a:	bc 01       	movw	r22, r24
    309c:	cd 01       	movw	r24, r26
    309e:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    30a2:	dc 01       	movw	r26, r24
    30a4:	cb 01       	movw	r24, r22
    30a6:	bc 01       	movw	r22, r24
    30a8:	cd 01       	movw	r24, r26
    30aa:	2a e9       	ldi	r18, 0x9A	; 154
    30ac:	39 e9       	ldi	r19, 0x99	; 153
    30ae:	41 eb       	ldi	r20, 0xB1	; 177
    30b0:	50 e4       	ldi	r21, 0x40	; 64
    30b2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30b6:	dc 01       	movw	r26, r24
    30b8:	cb 01       	movw	r24, r22
    30ba:	bc 01       	movw	r22, r24
    30bc:	cd 01       	movw	r24, r26
    30be:	20 e0       	ldi	r18, 0x00	; 0
    30c0:	30 e8       	ldi	r19, 0x80	; 128
    30c2:	4b eb       	ldi	r20, 0xBB	; 187
    30c4:	54 e4       	ldi	r21, 0x44	; 68
    30c6:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    30ca:	dc 01       	movw	r26, r24
    30cc:	cb 01       	movw	r24, r22
    30ce:	bc 01       	movw	r22, r24
    30d0:	cd 01       	movw	r24, r26
    30d2:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
    30d6:	dc 01       	movw	r26, r24
    30d8:	cb 01       	movw	r24, r22
    30da:	0e 94 11 33 	call	0x6622	; 0x6622 <TIMER_VidCTCTimer1Preload>
    30de:	80 e0       	ldi	r24, 0x00	; 0
    30e0:	90 e0       	ldi	r25, 0x00	; 0
    30e2:	a8 e4       	ldi	r26, 0x48	; 72
    30e4:	b2 e4       	ldi	r27, 0x42	; 66
    30e6:	89 8f       	std	Y+25, r24	; 0x19
    30e8:	9a 8f       	std	Y+26, r25	; 0x1a
    30ea:	ab 8f       	std	Y+27, r26	; 0x1b
    30ec:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    30ee:	69 8d       	ldd	r22, Y+25	; 0x19
    30f0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    30f2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    30f4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    30f6:	20 e0       	ldi	r18, 0x00	; 0
    30f8:	30 e0       	ldi	r19, 0x00	; 0
    30fa:	4a ef       	ldi	r20, 0xFA	; 250
    30fc:	54 e4       	ldi	r21, 0x44	; 68
    30fe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3102:	dc 01       	movw	r26, r24
    3104:	cb 01       	movw	r24, r22
    3106:	8d 8b       	std	Y+21, r24	; 0x15
    3108:	9e 8b       	std	Y+22, r25	; 0x16
    310a:	af 8b       	std	Y+23, r26	; 0x17
    310c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    310e:	6d 89       	ldd	r22, Y+21	; 0x15
    3110:	7e 89       	ldd	r23, Y+22	; 0x16
    3112:	8f 89       	ldd	r24, Y+23	; 0x17
    3114:	98 8d       	ldd	r25, Y+24	; 0x18
    3116:	20 e0       	ldi	r18, 0x00	; 0
    3118:	30 e0       	ldi	r19, 0x00	; 0
    311a:	40 e8       	ldi	r20, 0x80	; 128
    311c:	5f e3       	ldi	r21, 0x3F	; 63
    311e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3122:	88 23       	and	r24, r24
    3124:	2c f4       	brge	.+10     	; 0x3130 <SERVO_U8SetServoAngle+0xd8>
		__ticks = 1;
    3126:	81 e0       	ldi	r24, 0x01	; 1
    3128:	90 e0       	ldi	r25, 0x00	; 0
    312a:	9c 8b       	std	Y+20, r25	; 0x14
    312c:	8b 8b       	std	Y+19, r24	; 0x13
    312e:	3f c0       	rjmp	.+126    	; 0x31ae <SERVO_U8SetServoAngle+0x156>
	else if (__tmp > 65535)
    3130:	6d 89       	ldd	r22, Y+21	; 0x15
    3132:	7e 89       	ldd	r23, Y+22	; 0x16
    3134:	8f 89       	ldd	r24, Y+23	; 0x17
    3136:	98 8d       	ldd	r25, Y+24	; 0x18
    3138:	20 e0       	ldi	r18, 0x00	; 0
    313a:	3f ef       	ldi	r19, 0xFF	; 255
    313c:	4f e7       	ldi	r20, 0x7F	; 127
    313e:	57 e4       	ldi	r21, 0x47	; 71
    3140:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3144:	18 16       	cp	r1, r24
    3146:	4c f5       	brge	.+82     	; 0x319a <SERVO_U8SetServoAngle+0x142>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3148:	69 8d       	ldd	r22, Y+25	; 0x19
    314a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    314c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    314e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3150:	20 e0       	ldi	r18, 0x00	; 0
    3152:	30 e0       	ldi	r19, 0x00	; 0
    3154:	40 e2       	ldi	r20, 0x20	; 32
    3156:	51 e4       	ldi	r21, 0x41	; 65
    3158:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    315c:	dc 01       	movw	r26, r24
    315e:	cb 01       	movw	r24, r22
    3160:	bc 01       	movw	r22, r24
    3162:	cd 01       	movw	r24, r26
    3164:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3168:	dc 01       	movw	r26, r24
    316a:	cb 01       	movw	r24, r22
    316c:	9c 8b       	std	Y+20, r25	; 0x14
    316e:	8b 8b       	std	Y+19, r24	; 0x13
    3170:	0f c0       	rjmp	.+30     	; 0x3190 <SERVO_U8SetServoAngle+0x138>
    3172:	88 ec       	ldi	r24, 0xC8	; 200
    3174:	90 e0       	ldi	r25, 0x00	; 0
    3176:	9a 8b       	std	Y+18, r25	; 0x12
    3178:	89 8b       	std	Y+17, r24	; 0x11
    317a:	89 89       	ldd	r24, Y+17	; 0x11
    317c:	9a 89       	ldd	r25, Y+18	; 0x12
    317e:	01 97       	sbiw	r24, 0x01	; 1
    3180:	f1 f7       	brne	.-4      	; 0x317e <SERVO_U8SetServoAngle+0x126>
    3182:	9a 8b       	std	Y+18, r25	; 0x12
    3184:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3186:	8b 89       	ldd	r24, Y+19	; 0x13
    3188:	9c 89       	ldd	r25, Y+20	; 0x14
    318a:	01 97       	sbiw	r24, 0x01	; 1
    318c:	9c 8b       	std	Y+20, r25	; 0x14
    318e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3190:	8b 89       	ldd	r24, Y+19	; 0x13
    3192:	9c 89       	ldd	r25, Y+20	; 0x14
    3194:	00 97       	sbiw	r24, 0x00	; 0
    3196:	69 f7       	brne	.-38     	; 0x3172 <SERVO_U8SetServoAngle+0x11a>
    3198:	14 c0       	rjmp	.+40     	; 0x31c2 <SERVO_U8SetServoAngle+0x16a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    319a:	6d 89       	ldd	r22, Y+21	; 0x15
    319c:	7e 89       	ldd	r23, Y+22	; 0x16
    319e:	8f 89       	ldd	r24, Y+23	; 0x17
    31a0:	98 8d       	ldd	r25, Y+24	; 0x18
    31a2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31a6:	dc 01       	movw	r26, r24
    31a8:	cb 01       	movw	r24, r22
    31aa:	9c 8b       	std	Y+20, r25	; 0x14
    31ac:	8b 8b       	std	Y+19, r24	; 0x13
    31ae:	8b 89       	ldd	r24, Y+19	; 0x13
    31b0:	9c 89       	ldd	r25, Y+20	; 0x14
    31b2:	98 8b       	std	Y+16, r25	; 0x10
    31b4:	8f 87       	std	Y+15, r24	; 0x0f
    31b6:	8f 85       	ldd	r24, Y+15	; 0x0f
    31b8:	98 89       	ldd	r25, Y+16	; 0x10
    31ba:	01 97       	sbiw	r24, 0x01	; 1
    31bc:	f1 f7       	brne	.-4      	; 0x31ba <SERVO_U8SetServoAngle+0x162>
    31be:	98 8b       	std	Y+16, r25	; 0x10
    31c0:	8f 87       	std	Y+15, r24	; 0x0f

	if((Copy_S8Angle<= 90  )&&(Copy_S8Angle >= -90))
	{
		if(Copy_S8Angle >=0)
		{
			for(s8 local_S16Counter=0; local_S16Counter<=Copy_S8Angle;local_S16Counter++)
    31c2:	8e 8d       	ldd	r24, Y+30	; 0x1e
    31c4:	8f 5f       	subi	r24, 0xFF	; 255
    31c6:	8e 8f       	std	Y+30, r24	; 0x1e
    31c8:	9e 8d       	ldd	r25, Y+30	; 0x1e
    31ca:	88 a1       	ldd	r24, Y+32	; 0x20
    31cc:	89 17       	cp	r24, r25
    31ce:	0c f0       	brlt	.+2      	; 0x31d2 <SERVO_U8SetServoAngle+0x17a>
    31d0:	5e cf       	rjmp	.-324    	; 0x308e <SERVO_U8SetServoAngle+0x36>
    31d2:	a6 c0       	rjmp	.+332    	; 0x3320 <SERVO_U8SetServoAngle+0x2c8>
					_delay_ms(50);
				}
		}
		else
		{
			for(s8 local_S16Counter=0; local_S16Counter >=Copy_S8Angle;local_S16Counter--) // for negative
    31d4:	1d 8e       	std	Y+29, r1	; 0x1d
    31d6:	9d c0       	rjmp	.+314    	; 0x3312 <SERVO_U8SetServoAngle+0x2ba>
				{
					TIMER_VidCTCTimer1Preload(5.569*local_S16Counter+1500);
    31d8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    31da:	99 27       	eor	r25, r25
    31dc:	87 fd       	sbrc	r24, 7
    31de:	90 95       	com	r25
    31e0:	a9 2f       	mov	r26, r25
    31e2:	b9 2f       	mov	r27, r25
    31e4:	bc 01       	movw	r22, r24
    31e6:	cd 01       	movw	r24, r26
    31e8:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    31ec:	dc 01       	movw	r26, r24
    31ee:	cb 01       	movw	r24, r22
    31f0:	bc 01       	movw	r22, r24
    31f2:	cd 01       	movw	r24, r26
    31f4:	2f e3       	ldi	r18, 0x3F	; 63
    31f6:	35 e3       	ldi	r19, 0x35	; 53
    31f8:	42 eb       	ldi	r20, 0xB2	; 178
    31fa:	50 e4       	ldi	r21, 0x40	; 64
    31fc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3200:	dc 01       	movw	r26, r24
    3202:	cb 01       	movw	r24, r22
    3204:	bc 01       	movw	r22, r24
    3206:	cd 01       	movw	r24, r26
    3208:	20 e0       	ldi	r18, 0x00	; 0
    320a:	30 e8       	ldi	r19, 0x80	; 128
    320c:	4b eb       	ldi	r20, 0xBB	; 187
    320e:	54 e4       	ldi	r21, 0x44	; 68
    3210:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    3214:	dc 01       	movw	r26, r24
    3216:	cb 01       	movw	r24, r22
    3218:	bc 01       	movw	r22, r24
    321a:	cd 01       	movw	r24, r26
    321c:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
    3220:	dc 01       	movw	r26, r24
    3222:	cb 01       	movw	r24, r22
    3224:	0e 94 11 33 	call	0x6622	; 0x6622 <TIMER_VidCTCTimer1Preload>
    3228:	80 e0       	ldi	r24, 0x00	; 0
    322a:	90 e0       	ldi	r25, 0x00	; 0
    322c:	a8 e4       	ldi	r26, 0x48	; 72
    322e:	b2 e4       	ldi	r27, 0x42	; 66
    3230:	8b 87       	std	Y+11, r24	; 0x0b
    3232:	9c 87       	std	Y+12, r25	; 0x0c
    3234:	ad 87       	std	Y+13, r26	; 0x0d
    3236:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3238:	6b 85       	ldd	r22, Y+11	; 0x0b
    323a:	7c 85       	ldd	r23, Y+12	; 0x0c
    323c:	8d 85       	ldd	r24, Y+13	; 0x0d
    323e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3240:	20 e0       	ldi	r18, 0x00	; 0
    3242:	30 e0       	ldi	r19, 0x00	; 0
    3244:	4a ef       	ldi	r20, 0xFA	; 250
    3246:	54 e4       	ldi	r21, 0x44	; 68
    3248:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    324c:	dc 01       	movw	r26, r24
    324e:	cb 01       	movw	r24, r22
    3250:	8f 83       	std	Y+7, r24	; 0x07
    3252:	98 87       	std	Y+8, r25	; 0x08
    3254:	a9 87       	std	Y+9, r26	; 0x09
    3256:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3258:	6f 81       	ldd	r22, Y+7	; 0x07
    325a:	78 85       	ldd	r23, Y+8	; 0x08
    325c:	89 85       	ldd	r24, Y+9	; 0x09
    325e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3260:	20 e0       	ldi	r18, 0x00	; 0
    3262:	30 e0       	ldi	r19, 0x00	; 0
    3264:	40 e8       	ldi	r20, 0x80	; 128
    3266:	5f e3       	ldi	r21, 0x3F	; 63
    3268:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    326c:	88 23       	and	r24, r24
    326e:	2c f4       	brge	.+10     	; 0x327a <SERVO_U8SetServoAngle+0x222>
		__ticks = 1;
    3270:	81 e0       	ldi	r24, 0x01	; 1
    3272:	90 e0       	ldi	r25, 0x00	; 0
    3274:	9e 83       	std	Y+6, r25	; 0x06
    3276:	8d 83       	std	Y+5, r24	; 0x05
    3278:	3f c0       	rjmp	.+126    	; 0x32f8 <SERVO_U8SetServoAngle+0x2a0>
	else if (__tmp > 65535)
    327a:	6f 81       	ldd	r22, Y+7	; 0x07
    327c:	78 85       	ldd	r23, Y+8	; 0x08
    327e:	89 85       	ldd	r24, Y+9	; 0x09
    3280:	9a 85       	ldd	r25, Y+10	; 0x0a
    3282:	20 e0       	ldi	r18, 0x00	; 0
    3284:	3f ef       	ldi	r19, 0xFF	; 255
    3286:	4f e7       	ldi	r20, 0x7F	; 127
    3288:	57 e4       	ldi	r21, 0x47	; 71
    328a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    328e:	18 16       	cp	r1, r24
    3290:	4c f5       	brge	.+82     	; 0x32e4 <SERVO_U8SetServoAngle+0x28c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3292:	6b 85       	ldd	r22, Y+11	; 0x0b
    3294:	7c 85       	ldd	r23, Y+12	; 0x0c
    3296:	8d 85       	ldd	r24, Y+13	; 0x0d
    3298:	9e 85       	ldd	r25, Y+14	; 0x0e
    329a:	20 e0       	ldi	r18, 0x00	; 0
    329c:	30 e0       	ldi	r19, 0x00	; 0
    329e:	40 e2       	ldi	r20, 0x20	; 32
    32a0:	51 e4       	ldi	r21, 0x41	; 65
    32a2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    32a6:	dc 01       	movw	r26, r24
    32a8:	cb 01       	movw	r24, r22
    32aa:	bc 01       	movw	r22, r24
    32ac:	cd 01       	movw	r24, r26
    32ae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32b2:	dc 01       	movw	r26, r24
    32b4:	cb 01       	movw	r24, r22
    32b6:	9e 83       	std	Y+6, r25	; 0x06
    32b8:	8d 83       	std	Y+5, r24	; 0x05
    32ba:	0f c0       	rjmp	.+30     	; 0x32da <SERVO_U8SetServoAngle+0x282>
    32bc:	88 ec       	ldi	r24, 0xC8	; 200
    32be:	90 e0       	ldi	r25, 0x00	; 0
    32c0:	9c 83       	std	Y+4, r25	; 0x04
    32c2:	8b 83       	std	Y+3, r24	; 0x03
    32c4:	8b 81       	ldd	r24, Y+3	; 0x03
    32c6:	9c 81       	ldd	r25, Y+4	; 0x04
    32c8:	01 97       	sbiw	r24, 0x01	; 1
    32ca:	f1 f7       	brne	.-4      	; 0x32c8 <SERVO_U8SetServoAngle+0x270>
    32cc:	9c 83       	std	Y+4, r25	; 0x04
    32ce:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    32d0:	8d 81       	ldd	r24, Y+5	; 0x05
    32d2:	9e 81       	ldd	r25, Y+6	; 0x06
    32d4:	01 97       	sbiw	r24, 0x01	; 1
    32d6:	9e 83       	std	Y+6, r25	; 0x06
    32d8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    32da:	8d 81       	ldd	r24, Y+5	; 0x05
    32dc:	9e 81       	ldd	r25, Y+6	; 0x06
    32de:	00 97       	sbiw	r24, 0x00	; 0
    32e0:	69 f7       	brne	.-38     	; 0x32bc <SERVO_U8SetServoAngle+0x264>
    32e2:	14 c0       	rjmp	.+40     	; 0x330c <SERVO_U8SetServoAngle+0x2b4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    32e4:	6f 81       	ldd	r22, Y+7	; 0x07
    32e6:	78 85       	ldd	r23, Y+8	; 0x08
    32e8:	89 85       	ldd	r24, Y+9	; 0x09
    32ea:	9a 85       	ldd	r25, Y+10	; 0x0a
    32ec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32f0:	dc 01       	movw	r26, r24
    32f2:	cb 01       	movw	r24, r22
    32f4:	9e 83       	std	Y+6, r25	; 0x06
    32f6:	8d 83       	std	Y+5, r24	; 0x05
    32f8:	8d 81       	ldd	r24, Y+5	; 0x05
    32fa:	9e 81       	ldd	r25, Y+6	; 0x06
    32fc:	9a 83       	std	Y+2, r25	; 0x02
    32fe:	89 83       	std	Y+1, r24	; 0x01
    3300:	89 81       	ldd	r24, Y+1	; 0x01
    3302:	9a 81       	ldd	r25, Y+2	; 0x02
    3304:	01 97       	sbiw	r24, 0x01	; 1
    3306:	f1 f7       	brne	.-4      	; 0x3304 <SERVO_U8SetServoAngle+0x2ac>
    3308:	9a 83       	std	Y+2, r25	; 0x02
    330a:	89 83       	std	Y+1, r24	; 0x01
					_delay_ms(50);
				}
		}
		else
		{
			for(s8 local_S16Counter=0; local_S16Counter >=Copy_S8Angle;local_S16Counter--) // for negative
    330c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    330e:	81 50       	subi	r24, 0x01	; 1
    3310:	8d 8f       	std	Y+29, r24	; 0x1d
    3312:	9d 8d       	ldd	r25, Y+29	; 0x1d
    3314:	88 a1       	ldd	r24, Y+32	; 0x20
    3316:	98 17       	cp	r25, r24
    3318:	0c f0       	brlt	.+2      	; 0x331c <SERVO_U8SetServoAngle+0x2c4>
    331a:	5e cf       	rjmp	.-324    	; 0x31d8 <SERVO_U8SetServoAngle+0x180>
    331c:	01 c0       	rjmp	.+2      	; 0x3320 <SERVO_U8SetServoAngle+0x2c8>


	}
	else
	{
		Local_U8ErrorState = ERROR_STATE_NOK;
    331e:	1f 8e       	std	Y+31, r1	; 0x1f
	}
	return Local_U8ErrorState;
    3320:	8f 8d       	ldd	r24, Y+31	; 0x1f
}
    3322:	a0 96       	adiw	r28, 0x20	; 32
    3324:	0f b6       	in	r0, 0x3f	; 63
    3326:	f8 94       	cli
    3328:	de bf       	out	0x3e, r29	; 62
    332a:	0f be       	out	0x3f, r0	; 63
    332c:	cd bf       	out	0x3d, r28	; 61
    332e:	cf 91       	pop	r28
    3330:	df 91       	pop	r29
    3332:	08 95       	ret

00003334 <SM_VoidServo_APP>:


static s16 mine = 0;

void SM_VoidServo_APP(void)
{
    3334:	df 93       	push	r29
    3336:	cf 93       	push	r28
    3338:	cd b7       	in	r28, 0x3d	; 61
    333a:	de b7       	in	r29, 0x3e	; 62
    333c:	ea 97       	sbiw	r28, 0x3a	; 58
    333e:	0f b6       	in	r0, 0x3f	; 63
    3340:	f8 94       	cli
    3342:	de bf       	out	0x3e, r29	; 62
    3344:	0f be       	out	0x3f, r0	; 63
    3346:	cd bf       	out	0x3d, r28	; 61
    static s8 isNegative = 1;
    u8 Pressed_Key;

    KPAD_U8GetPressedKey(&Pressed_Key);
    3348:	ce 01       	movw	r24, r28
    334a:	ca 96       	adiw	r24, 0x3a	; 58
    334c:	0e 94 be 0d 	call	0x1b7c	; 0x1b7c <KPAD_U8GetPressedKey>

    if ((Pressed_Key >= '0') && (Pressed_Key <= '9')) {
    3350:	8a ad       	ldd	r24, Y+58	; 0x3a
    3352:	80 33       	cpi	r24, 0x30	; 48
    3354:	08 f1       	brcs	.+66     	; 0x3398 <SM_VoidServo_APP+0x64>
    3356:	8a ad       	ldd	r24, Y+58	; 0x3a
    3358:	8a 33       	cpi	r24, 0x3A	; 58
    335a:	f0 f4       	brcc	.+60     	; 0x3398 <SM_VoidServo_APP+0x64>
        LCD_VoidSendData(Pressed_Key);
    335c:	8a ad       	ldd	r24, Y+58	; 0x3a
    335e:	0e 94 c7 13 	call	0x278e	; 0x278e <LCD_VoidSendData>
        u8 angle = Pressed_Key - '0';
    3362:	8a ad       	ldd	r24, Y+58	; 0x3a
    3364:	80 53       	subi	r24, 0x30	; 48
    3366:	89 af       	std	Y+57, r24	; 0x39
        mine = mine * 10 + angle;
    3368:	80 91 1f 03 	lds	r24, 0x031F
    336c:	90 91 20 03 	lds	r25, 0x0320
    3370:	9c 01       	movw	r18, r24
    3372:	22 0f       	add	r18, r18
    3374:	33 1f       	adc	r19, r19
    3376:	c9 01       	movw	r24, r18
    3378:	88 0f       	add	r24, r24
    337a:	99 1f       	adc	r25, r25
    337c:	88 0f       	add	r24, r24
    337e:	99 1f       	adc	r25, r25
    3380:	28 0f       	add	r18, r24
    3382:	39 1f       	adc	r19, r25
    3384:	89 ad       	ldd	r24, Y+57	; 0x39
    3386:	88 2f       	mov	r24, r24
    3388:	90 e0       	ldi	r25, 0x00	; 0
    338a:	82 0f       	add	r24, r18
    338c:	93 1f       	adc	r25, r19
    338e:	90 93 20 03 	sts	0x0320, r25
    3392:	80 93 1f 03 	sts	0x031F, r24
    3396:	30 c2       	rjmp	.+1120   	; 0x37f8 <SM_VoidServo_APP+0x4c4>
    }
    else if (Pressed_Key == '-')
    3398:	8a ad       	ldd	r24, Y+58	; 0x3a
    339a:	8d 32       	cpi	r24, 0x2D	; 45
    339c:	39 f4       	brne	.+14     	; 0x33ac <SM_VoidServo_APP+0x78>
     {
    	isNegative =-1;
    339e:	8f ef       	ldi	r24, 0xFF	; 255
    33a0:	80 93 f5 02 	sts	0x02F5, r24
    	LCD_VoidSendData('-');
    33a4:	8d e2       	ldi	r24, 0x2D	; 45
    33a6:	0e 94 c7 13 	call	0x278e	; 0x278e <LCD_VoidSendData>
    33aa:	26 c2       	rjmp	.+1100   	; 0x37f8 <SM_VoidServo_APP+0x4c4>
     }
    else if (Pressed_Key == '=')
    33ac:	8a ad       	ldd	r24, Y+58	; 0x3a
    33ae:	8d 33       	cpi	r24, 0x3D	; 61
    33b0:	09 f0       	breq	.+2      	; 0x33b4 <SM_VoidServo_APP+0x80>
    33b2:	16 c2       	rjmp	.+1068   	; 0x37e0 <SM_VoidServo_APP+0x4ac>
    {
        if(isNegative == -1)
    33b4:	80 91 f5 02 	lds	r24, 0x02F5
    33b8:	8f 3f       	cpi	r24, 0xFF	; 255
    33ba:	59 f4       	brne	.+22     	; 0x33d2 <SM_VoidServo_APP+0x9e>
        {
        	mine = -mine;
    33bc:	80 91 1f 03 	lds	r24, 0x031F
    33c0:	90 91 20 03 	lds	r25, 0x0320
    33c4:	90 95       	com	r25
    33c6:	81 95       	neg	r24
    33c8:	9f 4f       	sbci	r25, 0xFF	; 255
    33ca:	90 93 20 03 	sts	0x0320, r25
    33ce:	80 93 1f 03 	sts	0x031F, r24
        }
        if((mine <=90) &&(mine >= -90))
    33d2:	80 91 1f 03 	lds	r24, 0x031F
    33d6:	90 91 20 03 	lds	r25, 0x0320
    33da:	8b 35       	cpi	r24, 0x5B	; 91
    33dc:	91 05       	cpc	r25, r1
    33de:	0c f0       	brlt	.+2      	; 0x33e2 <SM_VoidServo_APP+0xae>
    33e0:	0b c1       	rjmp	.+534    	; 0x35f8 <SM_VoidServo_APP+0x2c4>
    33e2:	80 91 1f 03 	lds	r24, 0x031F
    33e6:	90 91 20 03 	lds	r25, 0x0320
    33ea:	2f ef       	ldi	r18, 0xFF	; 255
    33ec:	86 3a       	cpi	r24, 0xA6	; 166
    33ee:	92 07       	cpc	r25, r18
    33f0:	0c f4       	brge	.+2      	; 0x33f4 <SM_VoidServo_APP+0xc0>
    33f2:	02 c1       	rjmp	.+516    	; 0x35f8 <SM_VoidServo_APP+0x2c4>
        {
        LCD_VoidSendCommand(1);
    33f4:	81 e0       	ldi	r24, 0x01	; 1
    33f6:	0e 94 4d 0f 	call	0x1e9a	; 0x1e9a <LCD_VoidSendCommand>
    33fa:	80 e0       	ldi	r24, 0x00	; 0
    33fc:	90 e0       	ldi	r25, 0x00	; 0
    33fe:	af e2       	ldi	r26, 0x2F	; 47
    3400:	b4 e4       	ldi	r27, 0x44	; 68
    3402:	8d ab       	std	Y+53, r24	; 0x35
    3404:	9e ab       	std	Y+54, r25	; 0x36
    3406:	af ab       	std	Y+55, r26	; 0x37
    3408:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    340a:	6d a9       	ldd	r22, Y+53	; 0x35
    340c:	7e a9       	ldd	r23, Y+54	; 0x36
    340e:	8f a9       	ldd	r24, Y+55	; 0x37
    3410:	98 ad       	ldd	r25, Y+56	; 0x38
    3412:	20 e0       	ldi	r18, 0x00	; 0
    3414:	30 e0       	ldi	r19, 0x00	; 0
    3416:	4a ef       	ldi	r20, 0xFA	; 250
    3418:	54 e4       	ldi	r21, 0x44	; 68
    341a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    341e:	dc 01       	movw	r26, r24
    3420:	cb 01       	movw	r24, r22
    3422:	89 ab       	std	Y+49, r24	; 0x31
    3424:	9a ab       	std	Y+50, r25	; 0x32
    3426:	ab ab       	std	Y+51, r26	; 0x33
    3428:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    342a:	69 a9       	ldd	r22, Y+49	; 0x31
    342c:	7a a9       	ldd	r23, Y+50	; 0x32
    342e:	8b a9       	ldd	r24, Y+51	; 0x33
    3430:	9c a9       	ldd	r25, Y+52	; 0x34
    3432:	20 e0       	ldi	r18, 0x00	; 0
    3434:	30 e0       	ldi	r19, 0x00	; 0
    3436:	40 e8       	ldi	r20, 0x80	; 128
    3438:	5f e3       	ldi	r21, 0x3F	; 63
    343a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    343e:	88 23       	and	r24, r24
    3440:	2c f4       	brge	.+10     	; 0x344c <SM_VoidServo_APP+0x118>
		__ticks = 1;
    3442:	81 e0       	ldi	r24, 0x01	; 1
    3444:	90 e0       	ldi	r25, 0x00	; 0
    3446:	98 ab       	std	Y+48, r25	; 0x30
    3448:	8f a7       	std	Y+47, r24	; 0x2f
    344a:	3f c0       	rjmp	.+126    	; 0x34ca <SM_VoidServo_APP+0x196>
	else if (__tmp > 65535)
    344c:	69 a9       	ldd	r22, Y+49	; 0x31
    344e:	7a a9       	ldd	r23, Y+50	; 0x32
    3450:	8b a9       	ldd	r24, Y+51	; 0x33
    3452:	9c a9       	ldd	r25, Y+52	; 0x34
    3454:	20 e0       	ldi	r18, 0x00	; 0
    3456:	3f ef       	ldi	r19, 0xFF	; 255
    3458:	4f e7       	ldi	r20, 0x7F	; 127
    345a:	57 e4       	ldi	r21, 0x47	; 71
    345c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3460:	18 16       	cp	r1, r24
    3462:	4c f5       	brge	.+82     	; 0x34b6 <SM_VoidServo_APP+0x182>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3464:	6d a9       	ldd	r22, Y+53	; 0x35
    3466:	7e a9       	ldd	r23, Y+54	; 0x36
    3468:	8f a9       	ldd	r24, Y+55	; 0x37
    346a:	98 ad       	ldd	r25, Y+56	; 0x38
    346c:	20 e0       	ldi	r18, 0x00	; 0
    346e:	30 e0       	ldi	r19, 0x00	; 0
    3470:	40 e2       	ldi	r20, 0x20	; 32
    3472:	51 e4       	ldi	r21, 0x41	; 65
    3474:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3478:	dc 01       	movw	r26, r24
    347a:	cb 01       	movw	r24, r22
    347c:	bc 01       	movw	r22, r24
    347e:	cd 01       	movw	r24, r26
    3480:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3484:	dc 01       	movw	r26, r24
    3486:	cb 01       	movw	r24, r22
    3488:	98 ab       	std	Y+48, r25	; 0x30
    348a:	8f a7       	std	Y+47, r24	; 0x2f
    348c:	0f c0       	rjmp	.+30     	; 0x34ac <SM_VoidServo_APP+0x178>
    348e:	88 ec       	ldi	r24, 0xC8	; 200
    3490:	90 e0       	ldi	r25, 0x00	; 0
    3492:	9e a7       	std	Y+46, r25	; 0x2e
    3494:	8d a7       	std	Y+45, r24	; 0x2d
    3496:	8d a5       	ldd	r24, Y+45	; 0x2d
    3498:	9e a5       	ldd	r25, Y+46	; 0x2e
    349a:	01 97       	sbiw	r24, 0x01	; 1
    349c:	f1 f7       	brne	.-4      	; 0x349a <SM_VoidServo_APP+0x166>
    349e:	9e a7       	std	Y+46, r25	; 0x2e
    34a0:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    34a2:	8f a5       	ldd	r24, Y+47	; 0x2f
    34a4:	98 a9       	ldd	r25, Y+48	; 0x30
    34a6:	01 97       	sbiw	r24, 0x01	; 1
    34a8:	98 ab       	std	Y+48, r25	; 0x30
    34aa:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    34ac:	8f a5       	ldd	r24, Y+47	; 0x2f
    34ae:	98 a9       	ldd	r25, Y+48	; 0x30
    34b0:	00 97       	sbiw	r24, 0x00	; 0
    34b2:	69 f7       	brne	.-38     	; 0x348e <SM_VoidServo_APP+0x15a>
    34b4:	14 c0       	rjmp	.+40     	; 0x34de <SM_VoidServo_APP+0x1aa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    34b6:	69 a9       	ldd	r22, Y+49	; 0x31
    34b8:	7a a9       	ldd	r23, Y+50	; 0x32
    34ba:	8b a9       	ldd	r24, Y+51	; 0x33
    34bc:	9c a9       	ldd	r25, Y+52	; 0x34
    34be:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    34c2:	dc 01       	movw	r26, r24
    34c4:	cb 01       	movw	r24, r22
    34c6:	98 ab       	std	Y+48, r25	; 0x30
    34c8:	8f a7       	std	Y+47, r24	; 0x2f
    34ca:	8f a5       	ldd	r24, Y+47	; 0x2f
    34cc:	98 a9       	ldd	r25, Y+48	; 0x30
    34ce:	9c a7       	std	Y+44, r25	; 0x2c
    34d0:	8b a7       	std	Y+43, r24	; 0x2b
    34d2:	8b a5       	ldd	r24, Y+43	; 0x2b
    34d4:	9c a5       	ldd	r25, Y+44	; 0x2c
    34d6:	01 97       	sbiw	r24, 0x01	; 1
    34d8:	f1 f7       	brne	.-4      	; 0x34d6 <SM_VoidServo_APP+0x1a2>
    34da:	9c a7       	std	Y+44, r25	; 0x2c
    34dc:	8b a7       	std	Y+43, r24	; 0x2b
        _delay_ms(700);
        LCD_u8WriteString("YOUR ANGLE= ");
    34de:	80 e6       	ldi	r24, 0x60	; 96
    34e0:	90 e0       	ldi	r25, 0x00	; 0
    34e2:	0e 94 04 18 	call	0x3008	; 0x3008 <LCD_u8WriteString>

        LCD_VoidSendNumber(mine);
    34e6:	80 91 1f 03 	lds	r24, 0x031F
    34ea:	90 91 20 03 	lds	r25, 0x0320
    34ee:	aa 27       	eor	r26, r26
    34f0:	97 fd       	sbrc	r25, 7
    34f2:	a0 95       	com	r26
    34f4:	ba 2f       	mov	r27, r26
    34f6:	bc 01       	movw	r22, r24
    34f8:	cd 01       	movw	r24, r26
    34fa:	0e 94 73 17 	call	0x2ee6	; 0x2ee6 <LCD_VoidSendNumber>
    34fe:	80 e0       	ldi	r24, 0x00	; 0
    3500:	90 e0       	ldi	r25, 0x00	; 0
    3502:	af e2       	ldi	r26, 0x2F	; 47
    3504:	b4 e4       	ldi	r27, 0x44	; 68
    3506:	8f a3       	std	Y+39, r24	; 0x27
    3508:	98 a7       	std	Y+40, r25	; 0x28
    350a:	a9 a7       	std	Y+41, r26	; 0x29
    350c:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    350e:	6f a1       	ldd	r22, Y+39	; 0x27
    3510:	78 a5       	ldd	r23, Y+40	; 0x28
    3512:	89 a5       	ldd	r24, Y+41	; 0x29
    3514:	9a a5       	ldd	r25, Y+42	; 0x2a
    3516:	20 e0       	ldi	r18, 0x00	; 0
    3518:	30 e0       	ldi	r19, 0x00	; 0
    351a:	4a ef       	ldi	r20, 0xFA	; 250
    351c:	54 e4       	ldi	r21, 0x44	; 68
    351e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3522:	dc 01       	movw	r26, r24
    3524:	cb 01       	movw	r24, r22
    3526:	8b a3       	std	Y+35, r24	; 0x23
    3528:	9c a3       	std	Y+36, r25	; 0x24
    352a:	ad a3       	std	Y+37, r26	; 0x25
    352c:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    352e:	6b a1       	ldd	r22, Y+35	; 0x23
    3530:	7c a1       	ldd	r23, Y+36	; 0x24
    3532:	8d a1       	ldd	r24, Y+37	; 0x25
    3534:	9e a1       	ldd	r25, Y+38	; 0x26
    3536:	20 e0       	ldi	r18, 0x00	; 0
    3538:	30 e0       	ldi	r19, 0x00	; 0
    353a:	40 e8       	ldi	r20, 0x80	; 128
    353c:	5f e3       	ldi	r21, 0x3F	; 63
    353e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3542:	88 23       	and	r24, r24
    3544:	2c f4       	brge	.+10     	; 0x3550 <SM_VoidServo_APP+0x21c>
		__ticks = 1;
    3546:	81 e0       	ldi	r24, 0x01	; 1
    3548:	90 e0       	ldi	r25, 0x00	; 0
    354a:	9a a3       	std	Y+34, r25	; 0x22
    354c:	89 a3       	std	Y+33, r24	; 0x21
    354e:	3f c0       	rjmp	.+126    	; 0x35ce <SM_VoidServo_APP+0x29a>
	else if (__tmp > 65535)
    3550:	6b a1       	ldd	r22, Y+35	; 0x23
    3552:	7c a1       	ldd	r23, Y+36	; 0x24
    3554:	8d a1       	ldd	r24, Y+37	; 0x25
    3556:	9e a1       	ldd	r25, Y+38	; 0x26
    3558:	20 e0       	ldi	r18, 0x00	; 0
    355a:	3f ef       	ldi	r19, 0xFF	; 255
    355c:	4f e7       	ldi	r20, 0x7F	; 127
    355e:	57 e4       	ldi	r21, 0x47	; 71
    3560:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3564:	18 16       	cp	r1, r24
    3566:	4c f5       	brge	.+82     	; 0x35ba <SM_VoidServo_APP+0x286>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3568:	6f a1       	ldd	r22, Y+39	; 0x27
    356a:	78 a5       	ldd	r23, Y+40	; 0x28
    356c:	89 a5       	ldd	r24, Y+41	; 0x29
    356e:	9a a5       	ldd	r25, Y+42	; 0x2a
    3570:	20 e0       	ldi	r18, 0x00	; 0
    3572:	30 e0       	ldi	r19, 0x00	; 0
    3574:	40 e2       	ldi	r20, 0x20	; 32
    3576:	51 e4       	ldi	r21, 0x41	; 65
    3578:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    357c:	dc 01       	movw	r26, r24
    357e:	cb 01       	movw	r24, r22
    3580:	bc 01       	movw	r22, r24
    3582:	cd 01       	movw	r24, r26
    3584:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3588:	dc 01       	movw	r26, r24
    358a:	cb 01       	movw	r24, r22
    358c:	9a a3       	std	Y+34, r25	; 0x22
    358e:	89 a3       	std	Y+33, r24	; 0x21
    3590:	0f c0       	rjmp	.+30     	; 0x35b0 <SM_VoidServo_APP+0x27c>
    3592:	88 ec       	ldi	r24, 0xC8	; 200
    3594:	90 e0       	ldi	r25, 0x00	; 0
    3596:	98 a3       	std	Y+32, r25	; 0x20
    3598:	8f 8f       	std	Y+31, r24	; 0x1f
    359a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    359c:	98 a1       	ldd	r25, Y+32	; 0x20
    359e:	01 97       	sbiw	r24, 0x01	; 1
    35a0:	f1 f7       	brne	.-4      	; 0x359e <SM_VoidServo_APP+0x26a>
    35a2:	98 a3       	std	Y+32, r25	; 0x20
    35a4:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    35a6:	89 a1       	ldd	r24, Y+33	; 0x21
    35a8:	9a a1       	ldd	r25, Y+34	; 0x22
    35aa:	01 97       	sbiw	r24, 0x01	; 1
    35ac:	9a a3       	std	Y+34, r25	; 0x22
    35ae:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    35b0:	89 a1       	ldd	r24, Y+33	; 0x21
    35b2:	9a a1       	ldd	r25, Y+34	; 0x22
    35b4:	00 97       	sbiw	r24, 0x00	; 0
    35b6:	69 f7       	brne	.-38     	; 0x3592 <SM_VoidServo_APP+0x25e>
    35b8:	14 c0       	rjmp	.+40     	; 0x35e2 <SM_VoidServo_APP+0x2ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    35ba:	6b a1       	ldd	r22, Y+35	; 0x23
    35bc:	7c a1       	ldd	r23, Y+36	; 0x24
    35be:	8d a1       	ldd	r24, Y+37	; 0x25
    35c0:	9e a1       	ldd	r25, Y+38	; 0x26
    35c2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    35c6:	dc 01       	movw	r26, r24
    35c8:	cb 01       	movw	r24, r22
    35ca:	9a a3       	std	Y+34, r25	; 0x22
    35cc:	89 a3       	std	Y+33, r24	; 0x21
    35ce:	89 a1       	ldd	r24, Y+33	; 0x21
    35d0:	9a a1       	ldd	r25, Y+34	; 0x22
    35d2:	9e 8f       	std	Y+30, r25	; 0x1e
    35d4:	8d 8f       	std	Y+29, r24	; 0x1d
    35d6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    35d8:	9e 8d       	ldd	r25, Y+30	; 0x1e
    35da:	01 97       	sbiw	r24, 0x01	; 1
    35dc:	f1 f7       	brne	.-4      	; 0x35da <SM_VoidServo_APP+0x2a6>
    35de:	9e 8f       	std	Y+30, r25	; 0x1e
    35e0:	8d 8f       	std	Y+29, r24	; 0x1d
        _delay_ms(700);
        LCD_VoidGoToRowCol(1,1);
    35e2:	81 e0       	ldi	r24, 0x01	; 1
    35e4:	61 e0       	ldi	r22, 0x01	; 1
    35e6:	0e 94 4c 17 	call	0x2e98	; 0x2e98 <LCD_VoidGoToRowCol>
        SERVO_U8SetServoAngle(mine);
    35ea:	80 91 1f 03 	lds	r24, 0x031F
    35ee:	90 91 20 03 	lds	r25, 0x0320
    35f2:	0e 94 2c 18 	call	0x3058	; 0x3058 <SERVO_U8SetServoAngle>
    35f6:	00 c1       	rjmp	.+512    	; 0x37f8 <SM_VoidServo_APP+0x4c4>
        }
        else
        {                  // for range 90 : - 90
        	 LCD_VoidSendCommand(1);
    35f8:	81 e0       	ldi	r24, 0x01	; 1
    35fa:	0e 94 4d 0f 	call	0x1e9a	; 0x1e9a <LCD_VoidSendCommand>
    35fe:	80 e0       	ldi	r24, 0x00	; 0
    3600:	90 e0       	ldi	r25, 0x00	; 0
    3602:	af e2       	ldi	r26, 0x2F	; 47
    3604:	b4 e4       	ldi	r27, 0x44	; 68
    3606:	89 8f       	std	Y+25, r24	; 0x19
    3608:	9a 8f       	std	Y+26, r25	; 0x1a
    360a:	ab 8f       	std	Y+27, r26	; 0x1b
    360c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    360e:	69 8d       	ldd	r22, Y+25	; 0x19
    3610:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3612:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3614:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3616:	20 e0       	ldi	r18, 0x00	; 0
    3618:	30 e0       	ldi	r19, 0x00	; 0
    361a:	4a ef       	ldi	r20, 0xFA	; 250
    361c:	54 e4       	ldi	r21, 0x44	; 68
    361e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3622:	dc 01       	movw	r26, r24
    3624:	cb 01       	movw	r24, r22
    3626:	8d 8b       	std	Y+21, r24	; 0x15
    3628:	9e 8b       	std	Y+22, r25	; 0x16
    362a:	af 8b       	std	Y+23, r26	; 0x17
    362c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    362e:	6d 89       	ldd	r22, Y+21	; 0x15
    3630:	7e 89       	ldd	r23, Y+22	; 0x16
    3632:	8f 89       	ldd	r24, Y+23	; 0x17
    3634:	98 8d       	ldd	r25, Y+24	; 0x18
    3636:	20 e0       	ldi	r18, 0x00	; 0
    3638:	30 e0       	ldi	r19, 0x00	; 0
    363a:	40 e8       	ldi	r20, 0x80	; 128
    363c:	5f e3       	ldi	r21, 0x3F	; 63
    363e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3642:	88 23       	and	r24, r24
    3644:	2c f4       	brge	.+10     	; 0x3650 <SM_VoidServo_APP+0x31c>
		__ticks = 1;
    3646:	81 e0       	ldi	r24, 0x01	; 1
    3648:	90 e0       	ldi	r25, 0x00	; 0
    364a:	9c 8b       	std	Y+20, r25	; 0x14
    364c:	8b 8b       	std	Y+19, r24	; 0x13
    364e:	3f c0       	rjmp	.+126    	; 0x36ce <SM_VoidServo_APP+0x39a>
	else if (__tmp > 65535)
    3650:	6d 89       	ldd	r22, Y+21	; 0x15
    3652:	7e 89       	ldd	r23, Y+22	; 0x16
    3654:	8f 89       	ldd	r24, Y+23	; 0x17
    3656:	98 8d       	ldd	r25, Y+24	; 0x18
    3658:	20 e0       	ldi	r18, 0x00	; 0
    365a:	3f ef       	ldi	r19, 0xFF	; 255
    365c:	4f e7       	ldi	r20, 0x7F	; 127
    365e:	57 e4       	ldi	r21, 0x47	; 71
    3660:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3664:	18 16       	cp	r1, r24
    3666:	4c f5       	brge	.+82     	; 0x36ba <SM_VoidServo_APP+0x386>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3668:	69 8d       	ldd	r22, Y+25	; 0x19
    366a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    366c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    366e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3670:	20 e0       	ldi	r18, 0x00	; 0
    3672:	30 e0       	ldi	r19, 0x00	; 0
    3674:	40 e2       	ldi	r20, 0x20	; 32
    3676:	51 e4       	ldi	r21, 0x41	; 65
    3678:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    367c:	dc 01       	movw	r26, r24
    367e:	cb 01       	movw	r24, r22
    3680:	bc 01       	movw	r22, r24
    3682:	cd 01       	movw	r24, r26
    3684:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3688:	dc 01       	movw	r26, r24
    368a:	cb 01       	movw	r24, r22
    368c:	9c 8b       	std	Y+20, r25	; 0x14
    368e:	8b 8b       	std	Y+19, r24	; 0x13
    3690:	0f c0       	rjmp	.+30     	; 0x36b0 <SM_VoidServo_APP+0x37c>
    3692:	88 ec       	ldi	r24, 0xC8	; 200
    3694:	90 e0       	ldi	r25, 0x00	; 0
    3696:	9a 8b       	std	Y+18, r25	; 0x12
    3698:	89 8b       	std	Y+17, r24	; 0x11
    369a:	89 89       	ldd	r24, Y+17	; 0x11
    369c:	9a 89       	ldd	r25, Y+18	; 0x12
    369e:	01 97       	sbiw	r24, 0x01	; 1
    36a0:	f1 f7       	brne	.-4      	; 0x369e <SM_VoidServo_APP+0x36a>
    36a2:	9a 8b       	std	Y+18, r25	; 0x12
    36a4:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    36a6:	8b 89       	ldd	r24, Y+19	; 0x13
    36a8:	9c 89       	ldd	r25, Y+20	; 0x14
    36aa:	01 97       	sbiw	r24, 0x01	; 1
    36ac:	9c 8b       	std	Y+20, r25	; 0x14
    36ae:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    36b0:	8b 89       	ldd	r24, Y+19	; 0x13
    36b2:	9c 89       	ldd	r25, Y+20	; 0x14
    36b4:	00 97       	sbiw	r24, 0x00	; 0
    36b6:	69 f7       	brne	.-38     	; 0x3692 <SM_VoidServo_APP+0x35e>
    36b8:	14 c0       	rjmp	.+40     	; 0x36e2 <SM_VoidServo_APP+0x3ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    36ba:	6d 89       	ldd	r22, Y+21	; 0x15
    36bc:	7e 89       	ldd	r23, Y+22	; 0x16
    36be:	8f 89       	ldd	r24, Y+23	; 0x17
    36c0:	98 8d       	ldd	r25, Y+24	; 0x18
    36c2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    36c6:	dc 01       	movw	r26, r24
    36c8:	cb 01       	movw	r24, r22
    36ca:	9c 8b       	std	Y+20, r25	; 0x14
    36cc:	8b 8b       	std	Y+19, r24	; 0x13
    36ce:	8b 89       	ldd	r24, Y+19	; 0x13
    36d0:	9c 89       	ldd	r25, Y+20	; 0x14
    36d2:	98 8b       	std	Y+16, r25	; 0x10
    36d4:	8f 87       	std	Y+15, r24	; 0x0f
    36d6:	8f 85       	ldd	r24, Y+15	; 0x0f
    36d8:	98 89       	ldd	r25, Y+16	; 0x10
    36da:	01 97       	sbiw	r24, 0x01	; 1
    36dc:	f1 f7       	brne	.-4      	; 0x36da <SM_VoidServo_APP+0x3a6>
    36de:	98 8b       	std	Y+16, r25	; 0x10
    36e0:	8f 87       	std	Y+15, r24	; 0x0f
        	  _delay_ms(700);
        	 LCD_u8WriteString("WRONG CHOICE");
    36e2:	8d e6       	ldi	r24, 0x6D	; 109
    36e4:	90 e0       	ldi	r25, 0x00	; 0
    36e6:	0e 94 04 18 	call	0x3008	; 0x3008 <LCD_u8WriteString>
    36ea:	80 e0       	ldi	r24, 0x00	; 0
    36ec:	90 e0       	ldi	r25, 0x00	; 0
    36ee:	af e2       	ldi	r26, 0x2F	; 47
    36f0:	b4 e4       	ldi	r27, 0x44	; 68
    36f2:	8b 87       	std	Y+11, r24	; 0x0b
    36f4:	9c 87       	std	Y+12, r25	; 0x0c
    36f6:	ad 87       	std	Y+13, r26	; 0x0d
    36f8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    36fa:	6b 85       	ldd	r22, Y+11	; 0x0b
    36fc:	7c 85       	ldd	r23, Y+12	; 0x0c
    36fe:	8d 85       	ldd	r24, Y+13	; 0x0d
    3700:	9e 85       	ldd	r25, Y+14	; 0x0e
    3702:	20 e0       	ldi	r18, 0x00	; 0
    3704:	30 e0       	ldi	r19, 0x00	; 0
    3706:	4a ef       	ldi	r20, 0xFA	; 250
    3708:	54 e4       	ldi	r21, 0x44	; 68
    370a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    370e:	dc 01       	movw	r26, r24
    3710:	cb 01       	movw	r24, r22
    3712:	8f 83       	std	Y+7, r24	; 0x07
    3714:	98 87       	std	Y+8, r25	; 0x08
    3716:	a9 87       	std	Y+9, r26	; 0x09
    3718:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    371a:	6f 81       	ldd	r22, Y+7	; 0x07
    371c:	78 85       	ldd	r23, Y+8	; 0x08
    371e:	89 85       	ldd	r24, Y+9	; 0x09
    3720:	9a 85       	ldd	r25, Y+10	; 0x0a
    3722:	20 e0       	ldi	r18, 0x00	; 0
    3724:	30 e0       	ldi	r19, 0x00	; 0
    3726:	40 e8       	ldi	r20, 0x80	; 128
    3728:	5f e3       	ldi	r21, 0x3F	; 63
    372a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    372e:	88 23       	and	r24, r24
    3730:	2c f4       	brge	.+10     	; 0x373c <SM_VoidServo_APP+0x408>
		__ticks = 1;
    3732:	81 e0       	ldi	r24, 0x01	; 1
    3734:	90 e0       	ldi	r25, 0x00	; 0
    3736:	9e 83       	std	Y+6, r25	; 0x06
    3738:	8d 83       	std	Y+5, r24	; 0x05
    373a:	3f c0       	rjmp	.+126    	; 0x37ba <SM_VoidServo_APP+0x486>
	else if (__tmp > 65535)
    373c:	6f 81       	ldd	r22, Y+7	; 0x07
    373e:	78 85       	ldd	r23, Y+8	; 0x08
    3740:	89 85       	ldd	r24, Y+9	; 0x09
    3742:	9a 85       	ldd	r25, Y+10	; 0x0a
    3744:	20 e0       	ldi	r18, 0x00	; 0
    3746:	3f ef       	ldi	r19, 0xFF	; 255
    3748:	4f e7       	ldi	r20, 0x7F	; 127
    374a:	57 e4       	ldi	r21, 0x47	; 71
    374c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3750:	18 16       	cp	r1, r24
    3752:	4c f5       	brge	.+82     	; 0x37a6 <SM_VoidServo_APP+0x472>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3754:	6b 85       	ldd	r22, Y+11	; 0x0b
    3756:	7c 85       	ldd	r23, Y+12	; 0x0c
    3758:	8d 85       	ldd	r24, Y+13	; 0x0d
    375a:	9e 85       	ldd	r25, Y+14	; 0x0e
    375c:	20 e0       	ldi	r18, 0x00	; 0
    375e:	30 e0       	ldi	r19, 0x00	; 0
    3760:	40 e2       	ldi	r20, 0x20	; 32
    3762:	51 e4       	ldi	r21, 0x41	; 65
    3764:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3768:	dc 01       	movw	r26, r24
    376a:	cb 01       	movw	r24, r22
    376c:	bc 01       	movw	r22, r24
    376e:	cd 01       	movw	r24, r26
    3770:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3774:	dc 01       	movw	r26, r24
    3776:	cb 01       	movw	r24, r22
    3778:	9e 83       	std	Y+6, r25	; 0x06
    377a:	8d 83       	std	Y+5, r24	; 0x05
    377c:	0f c0       	rjmp	.+30     	; 0x379c <SM_VoidServo_APP+0x468>
    377e:	88 ec       	ldi	r24, 0xC8	; 200
    3780:	90 e0       	ldi	r25, 0x00	; 0
    3782:	9c 83       	std	Y+4, r25	; 0x04
    3784:	8b 83       	std	Y+3, r24	; 0x03
    3786:	8b 81       	ldd	r24, Y+3	; 0x03
    3788:	9c 81       	ldd	r25, Y+4	; 0x04
    378a:	01 97       	sbiw	r24, 0x01	; 1
    378c:	f1 f7       	brne	.-4      	; 0x378a <SM_VoidServo_APP+0x456>
    378e:	9c 83       	std	Y+4, r25	; 0x04
    3790:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3792:	8d 81       	ldd	r24, Y+5	; 0x05
    3794:	9e 81       	ldd	r25, Y+6	; 0x06
    3796:	01 97       	sbiw	r24, 0x01	; 1
    3798:	9e 83       	std	Y+6, r25	; 0x06
    379a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    379c:	8d 81       	ldd	r24, Y+5	; 0x05
    379e:	9e 81       	ldd	r25, Y+6	; 0x06
    37a0:	00 97       	sbiw	r24, 0x00	; 0
    37a2:	69 f7       	brne	.-38     	; 0x377e <SM_VoidServo_APP+0x44a>
    37a4:	14 c0       	rjmp	.+40     	; 0x37ce <SM_VoidServo_APP+0x49a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    37a6:	6f 81       	ldd	r22, Y+7	; 0x07
    37a8:	78 85       	ldd	r23, Y+8	; 0x08
    37aa:	89 85       	ldd	r24, Y+9	; 0x09
    37ac:	9a 85       	ldd	r25, Y+10	; 0x0a
    37ae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    37b2:	dc 01       	movw	r26, r24
    37b4:	cb 01       	movw	r24, r22
    37b6:	9e 83       	std	Y+6, r25	; 0x06
    37b8:	8d 83       	std	Y+5, r24	; 0x05
    37ba:	8d 81       	ldd	r24, Y+5	; 0x05
    37bc:	9e 81       	ldd	r25, Y+6	; 0x06
    37be:	9a 83       	std	Y+2, r25	; 0x02
    37c0:	89 83       	std	Y+1, r24	; 0x01
    37c2:	89 81       	ldd	r24, Y+1	; 0x01
    37c4:	9a 81       	ldd	r25, Y+2	; 0x02
    37c6:	01 97       	sbiw	r24, 0x01	; 1
    37c8:	f1 f7       	brne	.-4      	; 0x37c6 <SM_VoidServo_APP+0x492>
    37ca:	9a 83       	std	Y+2, r25	; 0x02
    37cc:	89 83       	std	Y+1, r24	; 0x01
        	 _delay_ms(700);
        	 LCD_VoidGoToRowCol(1,0);
    37ce:	81 e0       	ldi	r24, 0x01	; 1
    37d0:	60 e0       	ldi	r22, 0x00	; 0
    37d2:	0e 94 4c 17 	call	0x2e98	; 0x2e98 <LCD_VoidGoToRowCol>
        	 LCD_u8WriteString("RANGE -90:90");
    37d6:	8a e7       	ldi	r24, 0x7A	; 122
    37d8:	90 e0       	ldi	r25, 0x00	; 0
    37da:	0e 94 04 18 	call	0x3008	; 0x3008 <LCD_u8WriteString>
    37de:	0c c0       	rjmp	.+24     	; 0x37f8 <SM_VoidServo_APP+0x4c4>

        }
    }
    else if (Pressed_Key == 'c')
    37e0:	8a ad       	ldd	r24, Y+58	; 0x3a
    37e2:	83 36       	cpi	r24, 0x63	; 99
    37e4:	49 f4       	brne	.+18     	; 0x37f8 <SM_VoidServo_APP+0x4c4>
    {  // if clear
        LCD_VoidSendCommand(1);
    37e6:	81 e0       	ldi	r24, 0x01	; 1
    37e8:	0e 94 4d 0f 	call	0x1e9a	; 0x1e9a <LCD_VoidSendCommand>
        mine = 0;
    37ec:	10 92 20 03 	sts	0x0320, r1
    37f0:	10 92 1f 03 	sts	0x031F, r1
        isNegative = 0;
    37f4:	10 92 f5 02 	sts	0x02F5, r1
    }

}
    37f8:	ea 96       	adiw	r28, 0x3a	; 58
    37fa:	0f b6       	in	r0, 0x3f	; 63
    37fc:	f8 94       	cli
    37fe:	de bf       	out	0x3e, r29	; 62
    3800:	0f be       	out	0x3f, r0	; 63
    3802:	cd bf       	out	0x3d, r28	; 61
    3804:	cf 91       	pop	r28
    3806:	df 91       	pop	r29
    3808:	08 95       	ret

0000380a <SM_U8LoginSys>:

	static u8 Select=0;
u8 SM_U8LoginSys(void)
 {
    380a:	0f 93       	push	r16
    380c:	1f 93       	push	r17
    380e:	df 93       	push	r29
    3810:	cf 93       	push	r28
    3812:	cd b7       	in	r28, 0x3d	; 61
    3814:	de b7       	in	r29, 0x3e	; 62
    3816:	c8 5d       	subi	r28, 0xD8	; 216
    3818:	d0 40       	sbci	r29, 0x00	; 0
    381a:	0f b6       	in	r0, 0x3f	; 63
    381c:	f8 94       	cli
    381e:	de bf       	out	0x3e, r29	; 62
    3820:	0f be       	out	0x3f, r0	; 63
    3822:	cd bf       	out	0x3d, r28	; 61
	static u8 Local_U8ErrorState = ERROR_STATE_NOK;
	static u16 User_Pass=0;
lable:	LCD_u8WriteString("USER NUMBER = ");
    3824:	87 e8       	ldi	r24, 0x87	; 135
    3826:	90 e0       	ldi	r25, 0x00	; 0
    3828:	0e 94 04 18 	call	0x3008	; 0x3008 <LCD_u8WriteString>
    382c:	fe 01       	movw	r30, r28
    382e:	e1 53       	subi	r30, 0x31	; 49
    3830:	ff 4f       	sbci	r31, 0xFF	; 255
    3832:	80 e0       	ldi	r24, 0x00	; 0
    3834:	90 e0       	ldi	r25, 0x00	; 0
    3836:	af e2       	ldi	r26, 0x2F	; 47
    3838:	b4 e4       	ldi	r27, 0x44	; 68
    383a:	80 83       	st	Z, r24
    383c:	91 83       	std	Z+1, r25	; 0x01
    383e:	a2 83       	std	Z+2, r26	; 0x02
    3840:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3842:	8e 01       	movw	r16, r28
    3844:	05 53       	subi	r16, 0x35	; 53
    3846:	1f 4f       	sbci	r17, 0xFF	; 255
    3848:	fe 01       	movw	r30, r28
    384a:	e1 53       	subi	r30, 0x31	; 49
    384c:	ff 4f       	sbci	r31, 0xFF	; 255
    384e:	60 81       	ld	r22, Z
    3850:	71 81       	ldd	r23, Z+1	; 0x01
    3852:	82 81       	ldd	r24, Z+2	; 0x02
    3854:	93 81       	ldd	r25, Z+3	; 0x03
    3856:	20 e0       	ldi	r18, 0x00	; 0
    3858:	30 e0       	ldi	r19, 0x00	; 0
    385a:	4a ef       	ldi	r20, 0xFA	; 250
    385c:	54 e4       	ldi	r21, 0x44	; 68
    385e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3862:	dc 01       	movw	r26, r24
    3864:	cb 01       	movw	r24, r22
    3866:	f8 01       	movw	r30, r16
    3868:	80 83       	st	Z, r24
    386a:	91 83       	std	Z+1, r25	; 0x01
    386c:	a2 83       	std	Z+2, r26	; 0x02
    386e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3870:	fe 01       	movw	r30, r28
    3872:	e5 53       	subi	r30, 0x35	; 53
    3874:	ff 4f       	sbci	r31, 0xFF	; 255
    3876:	60 81       	ld	r22, Z
    3878:	71 81       	ldd	r23, Z+1	; 0x01
    387a:	82 81       	ldd	r24, Z+2	; 0x02
    387c:	93 81       	ldd	r25, Z+3	; 0x03
    387e:	20 e0       	ldi	r18, 0x00	; 0
    3880:	30 e0       	ldi	r19, 0x00	; 0
    3882:	40 e8       	ldi	r20, 0x80	; 128
    3884:	5f e3       	ldi	r21, 0x3F	; 63
    3886:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    388a:	88 23       	and	r24, r24
    388c:	44 f4       	brge	.+16     	; 0x389e <SM_U8LoginSys+0x94>
		__ticks = 1;
    388e:	fe 01       	movw	r30, r28
    3890:	e7 53       	subi	r30, 0x37	; 55
    3892:	ff 4f       	sbci	r31, 0xFF	; 255
    3894:	81 e0       	ldi	r24, 0x01	; 1
    3896:	90 e0       	ldi	r25, 0x00	; 0
    3898:	91 83       	std	Z+1, r25	; 0x01
    389a:	80 83       	st	Z, r24
    389c:	64 c0       	rjmp	.+200    	; 0x3966 <SM_U8LoginSys+0x15c>
	else if (__tmp > 65535)
    389e:	fe 01       	movw	r30, r28
    38a0:	e5 53       	subi	r30, 0x35	; 53
    38a2:	ff 4f       	sbci	r31, 0xFF	; 255
    38a4:	60 81       	ld	r22, Z
    38a6:	71 81       	ldd	r23, Z+1	; 0x01
    38a8:	82 81       	ldd	r24, Z+2	; 0x02
    38aa:	93 81       	ldd	r25, Z+3	; 0x03
    38ac:	20 e0       	ldi	r18, 0x00	; 0
    38ae:	3f ef       	ldi	r19, 0xFF	; 255
    38b0:	4f e7       	ldi	r20, 0x7F	; 127
    38b2:	57 e4       	ldi	r21, 0x47	; 71
    38b4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    38b8:	18 16       	cp	r1, r24
    38ba:	0c f0       	brlt	.+2      	; 0x38be <SM_U8LoginSys+0xb4>
    38bc:	43 c0       	rjmp	.+134    	; 0x3944 <SM_U8LoginSys+0x13a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    38be:	fe 01       	movw	r30, r28
    38c0:	e1 53       	subi	r30, 0x31	; 49
    38c2:	ff 4f       	sbci	r31, 0xFF	; 255
    38c4:	60 81       	ld	r22, Z
    38c6:	71 81       	ldd	r23, Z+1	; 0x01
    38c8:	82 81       	ldd	r24, Z+2	; 0x02
    38ca:	93 81       	ldd	r25, Z+3	; 0x03
    38cc:	20 e0       	ldi	r18, 0x00	; 0
    38ce:	30 e0       	ldi	r19, 0x00	; 0
    38d0:	40 e2       	ldi	r20, 0x20	; 32
    38d2:	51 e4       	ldi	r21, 0x41	; 65
    38d4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    38d8:	dc 01       	movw	r26, r24
    38da:	cb 01       	movw	r24, r22
    38dc:	8e 01       	movw	r16, r28
    38de:	07 53       	subi	r16, 0x37	; 55
    38e0:	1f 4f       	sbci	r17, 0xFF	; 255
    38e2:	bc 01       	movw	r22, r24
    38e4:	cd 01       	movw	r24, r26
    38e6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    38ea:	dc 01       	movw	r26, r24
    38ec:	cb 01       	movw	r24, r22
    38ee:	f8 01       	movw	r30, r16
    38f0:	91 83       	std	Z+1, r25	; 0x01
    38f2:	80 83       	st	Z, r24
    38f4:	1f c0       	rjmp	.+62     	; 0x3934 <SM_U8LoginSys+0x12a>
    38f6:	fe 01       	movw	r30, r28
    38f8:	e9 53       	subi	r30, 0x39	; 57
    38fa:	ff 4f       	sbci	r31, 0xFF	; 255
    38fc:	88 ec       	ldi	r24, 0xC8	; 200
    38fe:	90 e0       	ldi	r25, 0x00	; 0
    3900:	91 83       	std	Z+1, r25	; 0x01
    3902:	80 83       	st	Z, r24
    3904:	fe 01       	movw	r30, r28
    3906:	e9 53       	subi	r30, 0x39	; 57
    3908:	ff 4f       	sbci	r31, 0xFF	; 255
    390a:	80 81       	ld	r24, Z
    390c:	91 81       	ldd	r25, Z+1	; 0x01
    390e:	01 97       	sbiw	r24, 0x01	; 1
    3910:	f1 f7       	brne	.-4      	; 0x390e <SM_U8LoginSys+0x104>
    3912:	fe 01       	movw	r30, r28
    3914:	e9 53       	subi	r30, 0x39	; 57
    3916:	ff 4f       	sbci	r31, 0xFF	; 255
    3918:	91 83       	std	Z+1, r25	; 0x01
    391a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    391c:	de 01       	movw	r26, r28
    391e:	a7 53       	subi	r26, 0x37	; 55
    3920:	bf 4f       	sbci	r27, 0xFF	; 255
    3922:	fe 01       	movw	r30, r28
    3924:	e7 53       	subi	r30, 0x37	; 55
    3926:	ff 4f       	sbci	r31, 0xFF	; 255
    3928:	80 81       	ld	r24, Z
    392a:	91 81       	ldd	r25, Z+1	; 0x01
    392c:	01 97       	sbiw	r24, 0x01	; 1
    392e:	11 96       	adiw	r26, 0x01	; 1
    3930:	9c 93       	st	X, r25
    3932:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3934:	fe 01       	movw	r30, r28
    3936:	e7 53       	subi	r30, 0x37	; 55
    3938:	ff 4f       	sbci	r31, 0xFF	; 255
    393a:	80 81       	ld	r24, Z
    393c:	91 81       	ldd	r25, Z+1	; 0x01
    393e:	00 97       	sbiw	r24, 0x00	; 0
    3940:	d1 f6       	brne	.-76     	; 0x38f6 <SM_U8LoginSys+0xec>
    3942:	27 c0       	rjmp	.+78     	; 0x3992 <SM_U8LoginSys+0x188>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3944:	8e 01       	movw	r16, r28
    3946:	07 53       	subi	r16, 0x37	; 55
    3948:	1f 4f       	sbci	r17, 0xFF	; 255
    394a:	fe 01       	movw	r30, r28
    394c:	e5 53       	subi	r30, 0x35	; 53
    394e:	ff 4f       	sbci	r31, 0xFF	; 255
    3950:	60 81       	ld	r22, Z
    3952:	71 81       	ldd	r23, Z+1	; 0x01
    3954:	82 81       	ldd	r24, Z+2	; 0x02
    3956:	93 81       	ldd	r25, Z+3	; 0x03
    3958:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    395c:	dc 01       	movw	r26, r24
    395e:	cb 01       	movw	r24, r22
    3960:	f8 01       	movw	r30, r16
    3962:	91 83       	std	Z+1, r25	; 0x01
    3964:	80 83       	st	Z, r24
    3966:	de 01       	movw	r26, r28
    3968:	ab 53       	subi	r26, 0x3B	; 59
    396a:	bf 4f       	sbci	r27, 0xFF	; 255
    396c:	fe 01       	movw	r30, r28
    396e:	e7 53       	subi	r30, 0x37	; 55
    3970:	ff 4f       	sbci	r31, 0xFF	; 255
    3972:	80 81       	ld	r24, Z
    3974:	91 81       	ldd	r25, Z+1	; 0x01
    3976:	8d 93       	st	X+, r24
    3978:	9c 93       	st	X, r25
    397a:	fe 01       	movw	r30, r28
    397c:	eb 53       	subi	r30, 0x3B	; 59
    397e:	ff 4f       	sbci	r31, 0xFF	; 255
    3980:	80 81       	ld	r24, Z
    3982:	91 81       	ldd	r25, Z+1	; 0x01
    3984:	01 97       	sbiw	r24, 0x01	; 1
    3986:	f1 f7       	brne	.-4      	; 0x3984 <SM_U8LoginSys+0x17a>
    3988:	fe 01       	movw	r30, r28
    398a:	eb 53       	subi	r30, 0x3B	; 59
    398c:	ff 4f       	sbci	r31, 0xFF	; 255
    398e:	91 83       	std	Z+1, r25	; 0x01
    3990:	80 83       	st	Z, r24
	_delay_ms(700);


	while(1)
	{
	KPAD_U8GetPressedKey(&Select);
    3992:	81 e2       	ldi	r24, 0x21	; 33
    3994:	93 e0       	ldi	r25, 0x03	; 3
    3996:	0e 94 be 0d 	call	0x1b7c	; 0x1b7c <KPAD_U8GetPressedKey>

	if((Select !=255) &&(Select != '='))
    399a:	80 91 21 03 	lds	r24, 0x0321
    399e:	8f 3f       	cpi	r24, 0xFF	; 255
    39a0:	c1 f3       	breq	.-16     	; 0x3992 <SM_U8LoginSys+0x188>
    39a2:	80 91 21 03 	lds	r24, 0x0321
    39a6:	8d 33       	cpi	r24, 0x3D	; 61
    39a8:	a1 f3       	breq	.-24     	; 0x3992 <SM_U8LoginSys+0x188>
	{

		if((Select != 'c'))
    39aa:	80 91 21 03 	lds	r24, 0x0321
    39ae:	83 36       	cpi	r24, 0x63	; 99
    39b0:	21 f0       	breq	.+8      	; 0x39ba <SM_U8LoginSys+0x1b0>
		{
			LCD_VoidSendData(Select);
    39b2:	80 91 21 03 	lds	r24, 0x0321
    39b6:	0e 94 c7 13 	call	0x278e	; 0x278e <LCD_VoidSendData>
		}


		switch(Select)
    39ba:	80 91 21 03 	lds	r24, 0x0321
    39be:	28 2f       	mov	r18, r24
    39c0:	30 e0       	ldi	r19, 0x00	; 0
    39c2:	c9 52       	subi	r28, 0x29	; 41
    39c4:	df 4f       	sbci	r29, 0xFF	; 255
    39c6:	39 83       	std	Y+1, r19	; 0x01
    39c8:	28 83       	st	Y, r18
    39ca:	c7 5d       	subi	r28, 0xD7	; 215
    39cc:	d0 40       	sbci	r29, 0x00	; 0
    39ce:	c9 52       	subi	r28, 0x29	; 41
    39d0:	df 4f       	sbci	r29, 0xFF	; 255
    39d2:	88 81       	ld	r24, Y
    39d4:	99 81       	ldd	r25, Y+1	; 0x01
    39d6:	c7 5d       	subi	r28, 0xD7	; 215
    39d8:	d0 40       	sbci	r29, 0x00	; 0
    39da:	81 33       	cpi	r24, 0x31	; 49
    39dc:	91 05       	cpc	r25, r1
    39de:	09 f4       	brne	.+2      	; 0x39e2 <SM_U8LoginSys+0x1d8>
    39e0:	75 c3       	rjmp	.+1770   	; 0x40cc <SM_U8LoginSys+0x8c2>
    39e2:	c9 52       	subi	r28, 0x29	; 41
    39e4:	df 4f       	sbci	r29, 0xFF	; 255
    39e6:	e8 81       	ld	r30, Y
    39e8:	f9 81       	ldd	r31, Y+1	; 0x01
    39ea:	c7 5d       	subi	r28, 0xD7	; 215
    39ec:	d0 40       	sbci	r29, 0x00	; 0
    39ee:	e2 33       	cpi	r30, 0x32	; 50
    39f0:	f1 05       	cpc	r31, r1
    39f2:	5c f4       	brge	.+22     	; 0x3a0a <SM_U8LoginSys+0x200>
    39f4:	c9 52       	subi	r28, 0x29	; 41
    39f6:	df 4f       	sbci	r29, 0xFF	; 255
    39f8:	28 81       	ld	r18, Y
    39fa:	39 81       	ldd	r19, Y+1	; 0x01
    39fc:	c7 5d       	subi	r28, 0xD7	; 215
    39fe:	d0 40       	sbci	r29, 0x00	; 0
    3a00:	20 33       	cpi	r18, 0x30	; 48
    3a02:	31 05       	cpc	r19, r1
    3a04:	c9 f0       	breq	.+50     	; 0x3a38 <SM_U8LoginSys+0x22e>
    3a06:	0c 94 c0 26 	jmp	0x4d80	; 0x4d80 <SM_U8LoginSys+0x1576>
    3a0a:	c9 52       	subi	r28, 0x29	; 41
    3a0c:	df 4f       	sbci	r29, 0xFF	; 255
    3a0e:	88 81       	ld	r24, Y
    3a10:	99 81       	ldd	r25, Y+1	; 0x01
    3a12:	c7 5d       	subi	r28, 0xD7	; 215
    3a14:	d0 40       	sbci	r29, 0x00	; 0
    3a16:	82 33       	cpi	r24, 0x32	; 50
    3a18:	91 05       	cpc	r25, r1
    3a1a:	09 f4       	brne	.+2      	; 0x3a1e <SM_U8LoginSys+0x214>
    3a1c:	a0 c6       	rjmp	.+3392   	; 0x475e <SM_U8LoginSys+0xf54>
    3a1e:	c9 52       	subi	r28, 0x29	; 41
    3a20:	df 4f       	sbci	r29, 0xFF	; 255
    3a22:	e8 81       	ld	r30, Y
    3a24:	f9 81       	ldd	r31, Y+1	; 0x01
    3a26:	c7 5d       	subi	r28, 0xD7	; 215
    3a28:	d0 40       	sbci	r29, 0x00	; 0
    3a2a:	e3 36       	cpi	r30, 0x63	; 99
    3a2c:	f1 05       	cpc	r31, r1
    3a2e:	11 f4       	brne	.+4      	; 0x3a34 <SM_U8LoginSys+0x22a>
    3a30:	0c 94 49 26 	jmp	0x4c92	; 0x4c92 <SM_U8LoginSys+0x1488>
    3a34:	0c 94 c0 26 	jmp	0x4d80	; 0x4d80 <SM_U8LoginSys+0x1576>
		{
			case '0':
			{
				LCD_VoidGoToRowCol(1,0);
    3a38:	81 e0       	ldi	r24, 0x01	; 1
    3a3a:	60 e0       	ldi	r22, 0x00	; 0
    3a3c:	0e 94 4c 17 	call	0x2e98	; 0x2e98 <LCD_VoidGoToRowCol>
				LCD_u8WriteString("WELCOME USER_0");
    3a40:	86 e9       	ldi	r24, 0x96	; 150
    3a42:	90 e0       	ldi	r25, 0x00	; 0
    3a44:	0e 94 04 18 	call	0x3008	; 0x3008 <LCD_u8WriteString>
    3a48:	fe 01       	movw	r30, r28
    3a4a:	ef 53       	subi	r30, 0x3F	; 63
    3a4c:	ff 4f       	sbci	r31, 0xFF	; 255
    3a4e:	80 e0       	ldi	r24, 0x00	; 0
    3a50:	90 e0       	ldi	r25, 0x00	; 0
    3a52:	aa e7       	ldi	r26, 0x7A	; 122
    3a54:	b4 e4       	ldi	r27, 0x44	; 68
    3a56:	80 83       	st	Z, r24
    3a58:	91 83       	std	Z+1, r25	; 0x01
    3a5a:	a2 83       	std	Z+2, r26	; 0x02
    3a5c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3a5e:	8e 01       	movw	r16, r28
    3a60:	03 54       	subi	r16, 0x43	; 67
    3a62:	1f 4f       	sbci	r17, 0xFF	; 255
    3a64:	fe 01       	movw	r30, r28
    3a66:	ef 53       	subi	r30, 0x3F	; 63
    3a68:	ff 4f       	sbci	r31, 0xFF	; 255
    3a6a:	60 81       	ld	r22, Z
    3a6c:	71 81       	ldd	r23, Z+1	; 0x01
    3a6e:	82 81       	ldd	r24, Z+2	; 0x02
    3a70:	93 81       	ldd	r25, Z+3	; 0x03
    3a72:	20 e0       	ldi	r18, 0x00	; 0
    3a74:	30 e0       	ldi	r19, 0x00	; 0
    3a76:	4a ef       	ldi	r20, 0xFA	; 250
    3a78:	54 e4       	ldi	r21, 0x44	; 68
    3a7a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a7e:	dc 01       	movw	r26, r24
    3a80:	cb 01       	movw	r24, r22
    3a82:	f8 01       	movw	r30, r16
    3a84:	80 83       	st	Z, r24
    3a86:	91 83       	std	Z+1, r25	; 0x01
    3a88:	a2 83       	std	Z+2, r26	; 0x02
    3a8a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3a8c:	fe 01       	movw	r30, r28
    3a8e:	e3 54       	subi	r30, 0x43	; 67
    3a90:	ff 4f       	sbci	r31, 0xFF	; 255
    3a92:	60 81       	ld	r22, Z
    3a94:	71 81       	ldd	r23, Z+1	; 0x01
    3a96:	82 81       	ldd	r24, Z+2	; 0x02
    3a98:	93 81       	ldd	r25, Z+3	; 0x03
    3a9a:	20 e0       	ldi	r18, 0x00	; 0
    3a9c:	30 e0       	ldi	r19, 0x00	; 0
    3a9e:	40 e8       	ldi	r20, 0x80	; 128
    3aa0:	5f e3       	ldi	r21, 0x3F	; 63
    3aa2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3aa6:	88 23       	and	r24, r24
    3aa8:	44 f4       	brge	.+16     	; 0x3aba <SM_U8LoginSys+0x2b0>
		__ticks = 1;
    3aaa:	fe 01       	movw	r30, r28
    3aac:	e5 54       	subi	r30, 0x45	; 69
    3aae:	ff 4f       	sbci	r31, 0xFF	; 255
    3ab0:	81 e0       	ldi	r24, 0x01	; 1
    3ab2:	90 e0       	ldi	r25, 0x00	; 0
    3ab4:	91 83       	std	Z+1, r25	; 0x01
    3ab6:	80 83       	st	Z, r24
    3ab8:	64 c0       	rjmp	.+200    	; 0x3b82 <SM_U8LoginSys+0x378>
	else if (__tmp > 65535)
    3aba:	fe 01       	movw	r30, r28
    3abc:	e3 54       	subi	r30, 0x43	; 67
    3abe:	ff 4f       	sbci	r31, 0xFF	; 255
    3ac0:	60 81       	ld	r22, Z
    3ac2:	71 81       	ldd	r23, Z+1	; 0x01
    3ac4:	82 81       	ldd	r24, Z+2	; 0x02
    3ac6:	93 81       	ldd	r25, Z+3	; 0x03
    3ac8:	20 e0       	ldi	r18, 0x00	; 0
    3aca:	3f ef       	ldi	r19, 0xFF	; 255
    3acc:	4f e7       	ldi	r20, 0x7F	; 127
    3ace:	57 e4       	ldi	r21, 0x47	; 71
    3ad0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3ad4:	18 16       	cp	r1, r24
    3ad6:	0c f0       	brlt	.+2      	; 0x3ada <SM_U8LoginSys+0x2d0>
    3ad8:	43 c0       	rjmp	.+134    	; 0x3b60 <SM_U8LoginSys+0x356>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3ada:	fe 01       	movw	r30, r28
    3adc:	ef 53       	subi	r30, 0x3F	; 63
    3ade:	ff 4f       	sbci	r31, 0xFF	; 255
    3ae0:	60 81       	ld	r22, Z
    3ae2:	71 81       	ldd	r23, Z+1	; 0x01
    3ae4:	82 81       	ldd	r24, Z+2	; 0x02
    3ae6:	93 81       	ldd	r25, Z+3	; 0x03
    3ae8:	20 e0       	ldi	r18, 0x00	; 0
    3aea:	30 e0       	ldi	r19, 0x00	; 0
    3aec:	40 e2       	ldi	r20, 0x20	; 32
    3aee:	51 e4       	ldi	r21, 0x41	; 65
    3af0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3af4:	dc 01       	movw	r26, r24
    3af6:	cb 01       	movw	r24, r22
    3af8:	8e 01       	movw	r16, r28
    3afa:	05 54       	subi	r16, 0x45	; 69
    3afc:	1f 4f       	sbci	r17, 0xFF	; 255
    3afe:	bc 01       	movw	r22, r24
    3b00:	cd 01       	movw	r24, r26
    3b02:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b06:	dc 01       	movw	r26, r24
    3b08:	cb 01       	movw	r24, r22
    3b0a:	f8 01       	movw	r30, r16
    3b0c:	91 83       	std	Z+1, r25	; 0x01
    3b0e:	80 83       	st	Z, r24
    3b10:	1f c0       	rjmp	.+62     	; 0x3b50 <SM_U8LoginSys+0x346>
    3b12:	fe 01       	movw	r30, r28
    3b14:	e7 54       	subi	r30, 0x47	; 71
    3b16:	ff 4f       	sbci	r31, 0xFF	; 255
    3b18:	88 ec       	ldi	r24, 0xC8	; 200
    3b1a:	90 e0       	ldi	r25, 0x00	; 0
    3b1c:	91 83       	std	Z+1, r25	; 0x01
    3b1e:	80 83       	st	Z, r24
    3b20:	fe 01       	movw	r30, r28
    3b22:	e7 54       	subi	r30, 0x47	; 71
    3b24:	ff 4f       	sbci	r31, 0xFF	; 255
    3b26:	80 81       	ld	r24, Z
    3b28:	91 81       	ldd	r25, Z+1	; 0x01
    3b2a:	01 97       	sbiw	r24, 0x01	; 1
    3b2c:	f1 f7       	brne	.-4      	; 0x3b2a <SM_U8LoginSys+0x320>
    3b2e:	fe 01       	movw	r30, r28
    3b30:	e7 54       	subi	r30, 0x47	; 71
    3b32:	ff 4f       	sbci	r31, 0xFF	; 255
    3b34:	91 83       	std	Z+1, r25	; 0x01
    3b36:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3b38:	de 01       	movw	r26, r28
    3b3a:	a5 54       	subi	r26, 0x45	; 69
    3b3c:	bf 4f       	sbci	r27, 0xFF	; 255
    3b3e:	fe 01       	movw	r30, r28
    3b40:	e5 54       	subi	r30, 0x45	; 69
    3b42:	ff 4f       	sbci	r31, 0xFF	; 255
    3b44:	80 81       	ld	r24, Z
    3b46:	91 81       	ldd	r25, Z+1	; 0x01
    3b48:	01 97       	sbiw	r24, 0x01	; 1
    3b4a:	11 96       	adiw	r26, 0x01	; 1
    3b4c:	9c 93       	st	X, r25
    3b4e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3b50:	fe 01       	movw	r30, r28
    3b52:	e5 54       	subi	r30, 0x45	; 69
    3b54:	ff 4f       	sbci	r31, 0xFF	; 255
    3b56:	80 81       	ld	r24, Z
    3b58:	91 81       	ldd	r25, Z+1	; 0x01
    3b5a:	00 97       	sbiw	r24, 0x00	; 0
    3b5c:	d1 f6       	brne	.-76     	; 0x3b12 <SM_U8LoginSys+0x308>
    3b5e:	27 c0       	rjmp	.+78     	; 0x3bae <SM_U8LoginSys+0x3a4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3b60:	8e 01       	movw	r16, r28
    3b62:	05 54       	subi	r16, 0x45	; 69
    3b64:	1f 4f       	sbci	r17, 0xFF	; 255
    3b66:	fe 01       	movw	r30, r28
    3b68:	e3 54       	subi	r30, 0x43	; 67
    3b6a:	ff 4f       	sbci	r31, 0xFF	; 255
    3b6c:	60 81       	ld	r22, Z
    3b6e:	71 81       	ldd	r23, Z+1	; 0x01
    3b70:	82 81       	ldd	r24, Z+2	; 0x02
    3b72:	93 81       	ldd	r25, Z+3	; 0x03
    3b74:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b78:	dc 01       	movw	r26, r24
    3b7a:	cb 01       	movw	r24, r22
    3b7c:	f8 01       	movw	r30, r16
    3b7e:	91 83       	std	Z+1, r25	; 0x01
    3b80:	80 83       	st	Z, r24
    3b82:	de 01       	movw	r26, r28
    3b84:	a9 54       	subi	r26, 0x49	; 73
    3b86:	bf 4f       	sbci	r27, 0xFF	; 255
    3b88:	fe 01       	movw	r30, r28
    3b8a:	e5 54       	subi	r30, 0x45	; 69
    3b8c:	ff 4f       	sbci	r31, 0xFF	; 255
    3b8e:	80 81       	ld	r24, Z
    3b90:	91 81       	ldd	r25, Z+1	; 0x01
    3b92:	8d 93       	st	X+, r24
    3b94:	9c 93       	st	X, r25
    3b96:	fe 01       	movw	r30, r28
    3b98:	e9 54       	subi	r30, 0x49	; 73
    3b9a:	ff 4f       	sbci	r31, 0xFF	; 255
    3b9c:	80 81       	ld	r24, Z
    3b9e:	91 81       	ldd	r25, Z+1	; 0x01
    3ba0:	01 97       	sbiw	r24, 0x01	; 1
    3ba2:	f1 f7       	brne	.-4      	; 0x3ba0 <SM_U8LoginSys+0x396>
    3ba4:	fe 01       	movw	r30, r28
    3ba6:	e9 54       	subi	r30, 0x49	; 73
    3ba8:	ff 4f       	sbci	r31, 0xFF	; 255
    3baa:	91 83       	std	Z+1, r25	; 0x01
    3bac:	80 83       	st	Z, r24

				_delay_ms(1000);
				LCD_VoidSendCommand(1);
    3bae:	81 e0       	ldi	r24, 0x01	; 1
    3bb0:	0e 94 4d 0f 	call	0x1e9a	; 0x1e9a <LCD_VoidSendCommand>
					for(u8 i=0;i<3;i++)
    3bb4:	fe 01       	movw	r30, r28
    3bb6:	eb 52       	subi	r30, 0x2B	; 43
    3bb8:	ff 4f       	sbci	r31, 0xFF	; 255
    3bba:	10 82       	st	Z, r1
    3bbc:	7f c2       	rjmp	.+1278   	; 0x40bc <SM_U8LoginSys+0x8b2>
				{
					LCD_u8WriteString("ENTER YOUR PASS");
    3bbe:	85 ea       	ldi	r24, 0xA5	; 165
    3bc0:	90 e0       	ldi	r25, 0x00	; 0
    3bc2:	0e 94 04 18 	call	0x3008	; 0x3008 <LCD_u8WriteString>
    3bc6:	fe 01       	movw	r30, r28
    3bc8:	ed 54       	subi	r30, 0x4D	; 77
    3bca:	ff 4f       	sbci	r31, 0xFF	; 255
    3bcc:	80 e0       	ldi	r24, 0x00	; 0
    3bce:	90 e0       	ldi	r25, 0x00	; 0
    3bd0:	af e2       	ldi	r26, 0x2F	; 47
    3bd2:	b4 e4       	ldi	r27, 0x44	; 68
    3bd4:	80 83       	st	Z, r24
    3bd6:	91 83       	std	Z+1, r25	; 0x01
    3bd8:	a2 83       	std	Z+2, r26	; 0x02
    3bda:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3bdc:	8e 01       	movw	r16, r28
    3bde:	01 55       	subi	r16, 0x51	; 81
    3be0:	1f 4f       	sbci	r17, 0xFF	; 255
    3be2:	fe 01       	movw	r30, r28
    3be4:	ed 54       	subi	r30, 0x4D	; 77
    3be6:	ff 4f       	sbci	r31, 0xFF	; 255
    3be8:	60 81       	ld	r22, Z
    3bea:	71 81       	ldd	r23, Z+1	; 0x01
    3bec:	82 81       	ldd	r24, Z+2	; 0x02
    3bee:	93 81       	ldd	r25, Z+3	; 0x03
    3bf0:	20 e0       	ldi	r18, 0x00	; 0
    3bf2:	30 e0       	ldi	r19, 0x00	; 0
    3bf4:	4a ef       	ldi	r20, 0xFA	; 250
    3bf6:	54 e4       	ldi	r21, 0x44	; 68
    3bf8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3bfc:	dc 01       	movw	r26, r24
    3bfe:	cb 01       	movw	r24, r22
    3c00:	f8 01       	movw	r30, r16
    3c02:	80 83       	st	Z, r24
    3c04:	91 83       	std	Z+1, r25	; 0x01
    3c06:	a2 83       	std	Z+2, r26	; 0x02
    3c08:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3c0a:	fe 01       	movw	r30, r28
    3c0c:	e1 55       	subi	r30, 0x51	; 81
    3c0e:	ff 4f       	sbci	r31, 0xFF	; 255
    3c10:	60 81       	ld	r22, Z
    3c12:	71 81       	ldd	r23, Z+1	; 0x01
    3c14:	82 81       	ldd	r24, Z+2	; 0x02
    3c16:	93 81       	ldd	r25, Z+3	; 0x03
    3c18:	20 e0       	ldi	r18, 0x00	; 0
    3c1a:	30 e0       	ldi	r19, 0x00	; 0
    3c1c:	40 e8       	ldi	r20, 0x80	; 128
    3c1e:	5f e3       	ldi	r21, 0x3F	; 63
    3c20:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3c24:	88 23       	and	r24, r24
    3c26:	44 f4       	brge	.+16     	; 0x3c38 <SM_U8LoginSys+0x42e>
		__ticks = 1;
    3c28:	fe 01       	movw	r30, r28
    3c2a:	e3 55       	subi	r30, 0x53	; 83
    3c2c:	ff 4f       	sbci	r31, 0xFF	; 255
    3c2e:	81 e0       	ldi	r24, 0x01	; 1
    3c30:	90 e0       	ldi	r25, 0x00	; 0
    3c32:	91 83       	std	Z+1, r25	; 0x01
    3c34:	80 83       	st	Z, r24
    3c36:	64 c0       	rjmp	.+200    	; 0x3d00 <SM_U8LoginSys+0x4f6>
	else if (__tmp > 65535)
    3c38:	fe 01       	movw	r30, r28
    3c3a:	e1 55       	subi	r30, 0x51	; 81
    3c3c:	ff 4f       	sbci	r31, 0xFF	; 255
    3c3e:	60 81       	ld	r22, Z
    3c40:	71 81       	ldd	r23, Z+1	; 0x01
    3c42:	82 81       	ldd	r24, Z+2	; 0x02
    3c44:	93 81       	ldd	r25, Z+3	; 0x03
    3c46:	20 e0       	ldi	r18, 0x00	; 0
    3c48:	3f ef       	ldi	r19, 0xFF	; 255
    3c4a:	4f e7       	ldi	r20, 0x7F	; 127
    3c4c:	57 e4       	ldi	r21, 0x47	; 71
    3c4e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3c52:	18 16       	cp	r1, r24
    3c54:	0c f0       	brlt	.+2      	; 0x3c58 <SM_U8LoginSys+0x44e>
    3c56:	43 c0       	rjmp	.+134    	; 0x3cde <SM_U8LoginSys+0x4d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3c58:	fe 01       	movw	r30, r28
    3c5a:	ed 54       	subi	r30, 0x4D	; 77
    3c5c:	ff 4f       	sbci	r31, 0xFF	; 255
    3c5e:	60 81       	ld	r22, Z
    3c60:	71 81       	ldd	r23, Z+1	; 0x01
    3c62:	82 81       	ldd	r24, Z+2	; 0x02
    3c64:	93 81       	ldd	r25, Z+3	; 0x03
    3c66:	20 e0       	ldi	r18, 0x00	; 0
    3c68:	30 e0       	ldi	r19, 0x00	; 0
    3c6a:	40 e2       	ldi	r20, 0x20	; 32
    3c6c:	51 e4       	ldi	r21, 0x41	; 65
    3c6e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3c72:	dc 01       	movw	r26, r24
    3c74:	cb 01       	movw	r24, r22
    3c76:	8e 01       	movw	r16, r28
    3c78:	03 55       	subi	r16, 0x53	; 83
    3c7a:	1f 4f       	sbci	r17, 0xFF	; 255
    3c7c:	bc 01       	movw	r22, r24
    3c7e:	cd 01       	movw	r24, r26
    3c80:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c84:	dc 01       	movw	r26, r24
    3c86:	cb 01       	movw	r24, r22
    3c88:	f8 01       	movw	r30, r16
    3c8a:	91 83       	std	Z+1, r25	; 0x01
    3c8c:	80 83       	st	Z, r24
    3c8e:	1f c0       	rjmp	.+62     	; 0x3cce <SM_U8LoginSys+0x4c4>
    3c90:	fe 01       	movw	r30, r28
    3c92:	e5 55       	subi	r30, 0x55	; 85
    3c94:	ff 4f       	sbci	r31, 0xFF	; 255
    3c96:	88 ec       	ldi	r24, 0xC8	; 200
    3c98:	90 e0       	ldi	r25, 0x00	; 0
    3c9a:	91 83       	std	Z+1, r25	; 0x01
    3c9c:	80 83       	st	Z, r24
    3c9e:	fe 01       	movw	r30, r28
    3ca0:	e5 55       	subi	r30, 0x55	; 85
    3ca2:	ff 4f       	sbci	r31, 0xFF	; 255
    3ca4:	80 81       	ld	r24, Z
    3ca6:	91 81       	ldd	r25, Z+1	; 0x01
    3ca8:	01 97       	sbiw	r24, 0x01	; 1
    3caa:	f1 f7       	brne	.-4      	; 0x3ca8 <SM_U8LoginSys+0x49e>
    3cac:	fe 01       	movw	r30, r28
    3cae:	e5 55       	subi	r30, 0x55	; 85
    3cb0:	ff 4f       	sbci	r31, 0xFF	; 255
    3cb2:	91 83       	std	Z+1, r25	; 0x01
    3cb4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3cb6:	de 01       	movw	r26, r28
    3cb8:	a3 55       	subi	r26, 0x53	; 83
    3cba:	bf 4f       	sbci	r27, 0xFF	; 255
    3cbc:	fe 01       	movw	r30, r28
    3cbe:	e3 55       	subi	r30, 0x53	; 83
    3cc0:	ff 4f       	sbci	r31, 0xFF	; 255
    3cc2:	80 81       	ld	r24, Z
    3cc4:	91 81       	ldd	r25, Z+1	; 0x01
    3cc6:	01 97       	sbiw	r24, 0x01	; 1
    3cc8:	11 96       	adiw	r26, 0x01	; 1
    3cca:	9c 93       	st	X, r25
    3ccc:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3cce:	fe 01       	movw	r30, r28
    3cd0:	e3 55       	subi	r30, 0x53	; 83
    3cd2:	ff 4f       	sbci	r31, 0xFF	; 255
    3cd4:	80 81       	ld	r24, Z
    3cd6:	91 81       	ldd	r25, Z+1	; 0x01
    3cd8:	00 97       	sbiw	r24, 0x00	; 0
    3cda:	d1 f6       	brne	.-76     	; 0x3c90 <SM_U8LoginSys+0x486>
    3cdc:	27 c0       	rjmp	.+78     	; 0x3d2c <SM_U8LoginSys+0x522>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3cde:	8e 01       	movw	r16, r28
    3ce0:	03 55       	subi	r16, 0x53	; 83
    3ce2:	1f 4f       	sbci	r17, 0xFF	; 255
    3ce4:	fe 01       	movw	r30, r28
    3ce6:	e1 55       	subi	r30, 0x51	; 81
    3ce8:	ff 4f       	sbci	r31, 0xFF	; 255
    3cea:	60 81       	ld	r22, Z
    3cec:	71 81       	ldd	r23, Z+1	; 0x01
    3cee:	82 81       	ldd	r24, Z+2	; 0x02
    3cf0:	93 81       	ldd	r25, Z+3	; 0x03
    3cf2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3cf6:	dc 01       	movw	r26, r24
    3cf8:	cb 01       	movw	r24, r22
    3cfa:	f8 01       	movw	r30, r16
    3cfc:	91 83       	std	Z+1, r25	; 0x01
    3cfe:	80 83       	st	Z, r24
    3d00:	de 01       	movw	r26, r28
    3d02:	a7 55       	subi	r26, 0x57	; 87
    3d04:	bf 4f       	sbci	r27, 0xFF	; 255
    3d06:	fe 01       	movw	r30, r28
    3d08:	e3 55       	subi	r30, 0x53	; 83
    3d0a:	ff 4f       	sbci	r31, 0xFF	; 255
    3d0c:	80 81       	ld	r24, Z
    3d0e:	91 81       	ldd	r25, Z+1	; 0x01
    3d10:	8d 93       	st	X+, r24
    3d12:	9c 93       	st	X, r25
    3d14:	fe 01       	movw	r30, r28
    3d16:	e7 55       	subi	r30, 0x57	; 87
    3d18:	ff 4f       	sbci	r31, 0xFF	; 255
    3d1a:	80 81       	ld	r24, Z
    3d1c:	91 81       	ldd	r25, Z+1	; 0x01
    3d1e:	01 97       	sbiw	r24, 0x01	; 1
    3d20:	f1 f7       	brne	.-4      	; 0x3d1e <SM_U8LoginSys+0x514>
    3d22:	fe 01       	movw	r30, r28
    3d24:	e7 55       	subi	r30, 0x57	; 87
    3d26:	ff 4f       	sbci	r31, 0xFF	; 255
    3d28:	91 83       	std	Z+1, r25	; 0x01
    3d2a:	80 83       	st	Z, r24
					_delay_ms(700);
					LCD_VoidGoToRowCol(1,0);
    3d2c:	81 e0       	ldi	r24, 0x01	; 1
    3d2e:	60 e0       	ldi	r22, 0x00	; 0
    3d30:	0e 94 4c 17 	call	0x2e98	; 0x2e98 <LCD_VoidGoToRowCol>
					User_Pass= SM_U16EnterPassword();
    3d34:	0e 94 4f 27 	call	0x4e9e	; 0x4e9e <SM_U16EnterPassword>
    3d38:	90 93 23 03 	sts	0x0323, r25
    3d3c:	80 93 22 03 	sts	0x0322, r24
					if(User_Pass ==1111)
    3d40:	80 91 22 03 	lds	r24, 0x0322
    3d44:	90 91 23 03 	lds	r25, 0x0323
    3d48:	f4 e0       	ldi	r31, 0x04	; 4
    3d4a:	87 35       	cpi	r24, 0x57	; 87
    3d4c:	9f 07       	cpc	r25, r31
    3d4e:	81 f4       	brne	.+32     	; 0x3d70 <SM_U8LoginSys+0x566>
					{

						LCD_u8WriteString("WELCOME ALI");
    3d50:	85 eb       	ldi	r24, 0xB5	; 181
    3d52:	90 e0       	ldi	r25, 0x00	; 0
    3d54:	0e 94 04 18 	call	0x3008	; 0x3008 <LCD_u8WriteString>
						Local_U8ErrorState = ERROR_STATE_OK;
    3d58:	81 e0       	ldi	r24, 0x01	; 1
    3d5a:	80 93 24 03 	sts	0x0324, r24
						 return Local_U8ErrorState;
    3d5e:	20 91 24 03 	lds	r18, 0x0324
    3d62:	ca 52       	subi	r28, 0x2A	; 42
    3d64:	df 4f       	sbci	r29, 0xFF	; 255
    3d66:	28 83       	st	Y, r18
    3d68:	c6 5d       	subi	r28, 0xD6	; 214
    3d6a:	d0 40       	sbci	r29, 0x00	; 0
    3d6c:	0c 94 3e 27 	jmp	0x4e7c	; 0x4e7c <SM_U8LoginSys+0x1672>
					}
					else
					{
						LCD_u8WriteString("INCORRECT PASS");
    3d70:	81 ec       	ldi	r24, 0xC1	; 193
    3d72:	90 e0       	ldi	r25, 0x00	; 0
    3d74:	0e 94 04 18 	call	0x3008	; 0x3008 <LCD_u8WriteString>
						LCD_VoidGoToRowCol(1,0);
    3d78:	81 e0       	ldi	r24, 0x01	; 1
    3d7a:	60 e0       	ldi	r22, 0x00	; 0
    3d7c:	0e 94 4c 17 	call	0x2e98	; 0x2e98 <LCD_VoidGoToRowCol>
						LCD_u8WriteString("TRY AGAIN");
    3d80:	80 ed       	ldi	r24, 0xD0	; 208
    3d82:	90 e0       	ldi	r25, 0x00	; 0
    3d84:	0e 94 04 18 	call	0x3008	; 0x3008 <LCD_u8WriteString>
    3d88:	fe 01       	movw	r30, r28
    3d8a:	eb 55       	subi	r30, 0x5B	; 91
    3d8c:	ff 4f       	sbci	r31, 0xFF	; 255
    3d8e:	80 e0       	ldi	r24, 0x00	; 0
    3d90:	90 e0       	ldi	r25, 0x00	; 0
    3d92:	af e2       	ldi	r26, 0x2F	; 47
    3d94:	b4 e4       	ldi	r27, 0x44	; 68
    3d96:	80 83       	st	Z, r24
    3d98:	91 83       	std	Z+1, r25	; 0x01
    3d9a:	a2 83       	std	Z+2, r26	; 0x02
    3d9c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3d9e:	8e 01       	movw	r16, r28
    3da0:	0f 55       	subi	r16, 0x5F	; 95
    3da2:	1f 4f       	sbci	r17, 0xFF	; 255
    3da4:	fe 01       	movw	r30, r28
    3da6:	eb 55       	subi	r30, 0x5B	; 91
    3da8:	ff 4f       	sbci	r31, 0xFF	; 255
    3daa:	60 81       	ld	r22, Z
    3dac:	71 81       	ldd	r23, Z+1	; 0x01
    3dae:	82 81       	ldd	r24, Z+2	; 0x02
    3db0:	93 81       	ldd	r25, Z+3	; 0x03
    3db2:	20 e0       	ldi	r18, 0x00	; 0
    3db4:	30 e0       	ldi	r19, 0x00	; 0
    3db6:	4a ef       	ldi	r20, 0xFA	; 250
    3db8:	54 e4       	ldi	r21, 0x44	; 68
    3dba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3dbe:	dc 01       	movw	r26, r24
    3dc0:	cb 01       	movw	r24, r22
    3dc2:	f8 01       	movw	r30, r16
    3dc4:	80 83       	st	Z, r24
    3dc6:	91 83       	std	Z+1, r25	; 0x01
    3dc8:	a2 83       	std	Z+2, r26	; 0x02
    3dca:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3dcc:	fe 01       	movw	r30, r28
    3dce:	ef 55       	subi	r30, 0x5F	; 95
    3dd0:	ff 4f       	sbci	r31, 0xFF	; 255
    3dd2:	60 81       	ld	r22, Z
    3dd4:	71 81       	ldd	r23, Z+1	; 0x01
    3dd6:	82 81       	ldd	r24, Z+2	; 0x02
    3dd8:	93 81       	ldd	r25, Z+3	; 0x03
    3dda:	20 e0       	ldi	r18, 0x00	; 0
    3ddc:	30 e0       	ldi	r19, 0x00	; 0
    3dde:	40 e8       	ldi	r20, 0x80	; 128
    3de0:	5f e3       	ldi	r21, 0x3F	; 63
    3de2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3de6:	88 23       	and	r24, r24
    3de8:	44 f4       	brge	.+16     	; 0x3dfa <SM_U8LoginSys+0x5f0>
		__ticks = 1;
    3dea:	fe 01       	movw	r30, r28
    3dec:	e1 56       	subi	r30, 0x61	; 97
    3dee:	ff 4f       	sbci	r31, 0xFF	; 255
    3df0:	81 e0       	ldi	r24, 0x01	; 1
    3df2:	90 e0       	ldi	r25, 0x00	; 0
    3df4:	91 83       	std	Z+1, r25	; 0x01
    3df6:	80 83       	st	Z, r24
    3df8:	64 c0       	rjmp	.+200    	; 0x3ec2 <SM_U8LoginSys+0x6b8>
	else if (__tmp > 65535)
    3dfa:	fe 01       	movw	r30, r28
    3dfc:	ef 55       	subi	r30, 0x5F	; 95
    3dfe:	ff 4f       	sbci	r31, 0xFF	; 255
    3e00:	60 81       	ld	r22, Z
    3e02:	71 81       	ldd	r23, Z+1	; 0x01
    3e04:	82 81       	ldd	r24, Z+2	; 0x02
    3e06:	93 81       	ldd	r25, Z+3	; 0x03
    3e08:	20 e0       	ldi	r18, 0x00	; 0
    3e0a:	3f ef       	ldi	r19, 0xFF	; 255
    3e0c:	4f e7       	ldi	r20, 0x7F	; 127
    3e0e:	57 e4       	ldi	r21, 0x47	; 71
    3e10:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3e14:	18 16       	cp	r1, r24
    3e16:	0c f0       	brlt	.+2      	; 0x3e1a <SM_U8LoginSys+0x610>
    3e18:	43 c0       	rjmp	.+134    	; 0x3ea0 <SM_U8LoginSys+0x696>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3e1a:	fe 01       	movw	r30, r28
    3e1c:	eb 55       	subi	r30, 0x5B	; 91
    3e1e:	ff 4f       	sbci	r31, 0xFF	; 255
    3e20:	60 81       	ld	r22, Z
    3e22:	71 81       	ldd	r23, Z+1	; 0x01
    3e24:	82 81       	ldd	r24, Z+2	; 0x02
    3e26:	93 81       	ldd	r25, Z+3	; 0x03
    3e28:	20 e0       	ldi	r18, 0x00	; 0
    3e2a:	30 e0       	ldi	r19, 0x00	; 0
    3e2c:	40 e2       	ldi	r20, 0x20	; 32
    3e2e:	51 e4       	ldi	r21, 0x41	; 65
    3e30:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3e34:	dc 01       	movw	r26, r24
    3e36:	cb 01       	movw	r24, r22
    3e38:	8e 01       	movw	r16, r28
    3e3a:	01 56       	subi	r16, 0x61	; 97
    3e3c:	1f 4f       	sbci	r17, 0xFF	; 255
    3e3e:	bc 01       	movw	r22, r24
    3e40:	cd 01       	movw	r24, r26
    3e42:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3e46:	dc 01       	movw	r26, r24
    3e48:	cb 01       	movw	r24, r22
    3e4a:	f8 01       	movw	r30, r16
    3e4c:	91 83       	std	Z+1, r25	; 0x01
    3e4e:	80 83       	st	Z, r24
    3e50:	1f c0       	rjmp	.+62     	; 0x3e90 <SM_U8LoginSys+0x686>
    3e52:	fe 01       	movw	r30, r28
    3e54:	e3 56       	subi	r30, 0x63	; 99
    3e56:	ff 4f       	sbci	r31, 0xFF	; 255
    3e58:	88 ec       	ldi	r24, 0xC8	; 200
    3e5a:	90 e0       	ldi	r25, 0x00	; 0
    3e5c:	91 83       	std	Z+1, r25	; 0x01
    3e5e:	80 83       	st	Z, r24
    3e60:	fe 01       	movw	r30, r28
    3e62:	e3 56       	subi	r30, 0x63	; 99
    3e64:	ff 4f       	sbci	r31, 0xFF	; 255
    3e66:	80 81       	ld	r24, Z
    3e68:	91 81       	ldd	r25, Z+1	; 0x01
    3e6a:	01 97       	sbiw	r24, 0x01	; 1
    3e6c:	f1 f7       	brne	.-4      	; 0x3e6a <SM_U8LoginSys+0x660>
    3e6e:	fe 01       	movw	r30, r28
    3e70:	e3 56       	subi	r30, 0x63	; 99
    3e72:	ff 4f       	sbci	r31, 0xFF	; 255
    3e74:	91 83       	std	Z+1, r25	; 0x01
    3e76:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3e78:	de 01       	movw	r26, r28
    3e7a:	a1 56       	subi	r26, 0x61	; 97
    3e7c:	bf 4f       	sbci	r27, 0xFF	; 255
    3e7e:	fe 01       	movw	r30, r28
    3e80:	e1 56       	subi	r30, 0x61	; 97
    3e82:	ff 4f       	sbci	r31, 0xFF	; 255
    3e84:	80 81       	ld	r24, Z
    3e86:	91 81       	ldd	r25, Z+1	; 0x01
    3e88:	01 97       	sbiw	r24, 0x01	; 1
    3e8a:	11 96       	adiw	r26, 0x01	; 1
    3e8c:	9c 93       	st	X, r25
    3e8e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3e90:	fe 01       	movw	r30, r28
    3e92:	e1 56       	subi	r30, 0x61	; 97
    3e94:	ff 4f       	sbci	r31, 0xFF	; 255
    3e96:	80 81       	ld	r24, Z
    3e98:	91 81       	ldd	r25, Z+1	; 0x01
    3e9a:	00 97       	sbiw	r24, 0x00	; 0
    3e9c:	d1 f6       	brne	.-76     	; 0x3e52 <SM_U8LoginSys+0x648>
    3e9e:	27 c0       	rjmp	.+78     	; 0x3eee <SM_U8LoginSys+0x6e4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3ea0:	8e 01       	movw	r16, r28
    3ea2:	01 56       	subi	r16, 0x61	; 97
    3ea4:	1f 4f       	sbci	r17, 0xFF	; 255
    3ea6:	fe 01       	movw	r30, r28
    3ea8:	ef 55       	subi	r30, 0x5F	; 95
    3eaa:	ff 4f       	sbci	r31, 0xFF	; 255
    3eac:	60 81       	ld	r22, Z
    3eae:	71 81       	ldd	r23, Z+1	; 0x01
    3eb0:	82 81       	ldd	r24, Z+2	; 0x02
    3eb2:	93 81       	ldd	r25, Z+3	; 0x03
    3eb4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3eb8:	dc 01       	movw	r26, r24
    3eba:	cb 01       	movw	r24, r22
    3ebc:	f8 01       	movw	r30, r16
    3ebe:	91 83       	std	Z+1, r25	; 0x01
    3ec0:	80 83       	st	Z, r24
    3ec2:	de 01       	movw	r26, r28
    3ec4:	a5 56       	subi	r26, 0x65	; 101
    3ec6:	bf 4f       	sbci	r27, 0xFF	; 255
    3ec8:	fe 01       	movw	r30, r28
    3eca:	e1 56       	subi	r30, 0x61	; 97
    3ecc:	ff 4f       	sbci	r31, 0xFF	; 255
    3ece:	80 81       	ld	r24, Z
    3ed0:	91 81       	ldd	r25, Z+1	; 0x01
    3ed2:	8d 93       	st	X+, r24
    3ed4:	9c 93       	st	X, r25
    3ed6:	fe 01       	movw	r30, r28
    3ed8:	e5 56       	subi	r30, 0x65	; 101
    3eda:	ff 4f       	sbci	r31, 0xFF	; 255
    3edc:	80 81       	ld	r24, Z
    3ede:	91 81       	ldd	r25, Z+1	; 0x01
    3ee0:	01 97       	sbiw	r24, 0x01	; 1
    3ee2:	f1 f7       	brne	.-4      	; 0x3ee0 <SM_U8LoginSys+0x6d6>
    3ee4:	fe 01       	movw	r30, r28
    3ee6:	e5 56       	subi	r30, 0x65	; 101
    3ee8:	ff 4f       	sbci	r31, 0xFF	; 255
    3eea:	91 83       	std	Z+1, r25	; 0x01
    3eec:	80 83       	st	Z, r24
						_delay_ms(700);
						LCD_VoidSendCommand(1);
    3eee:	81 e0       	ldi	r24, 0x01	; 1
    3ef0:	0e 94 4d 0f 	call	0x1e9a	; 0x1e9a <LCD_VoidSendCommand>
						if(i==2)
    3ef4:	fe 01       	movw	r30, r28
    3ef6:	eb 52       	subi	r30, 0x2B	; 43
    3ef8:	ff 4f       	sbci	r31, 0xFF	; 255
    3efa:	80 81       	ld	r24, Z
    3efc:	82 30       	cpi	r24, 0x02	; 2
    3efe:	09 f0       	breq	.+2      	; 0x3f02 <SM_U8LoginSys+0x6f8>
    3f00:	d4 c0       	rjmp	.+424    	; 0x40aa <SM_U8LoginSys+0x8a0>
						{
							LCD_VoidGoToRowCol(1,0);
    3f02:	81 e0       	ldi	r24, 0x01	; 1
    3f04:	60 e0       	ldi	r22, 0x00	; 0
    3f06:	0e 94 4c 17 	call	0x2e98	; 0x2e98 <LCD_VoidGoToRowCol>
							LCD_u8WriteString("U entered 3 times WRONG");
    3f0a:	8a ed       	ldi	r24, 0xDA	; 218
    3f0c:	90 e0       	ldi	r25, 0x00	; 0
    3f0e:	0e 94 04 18 	call	0x3008	; 0x3008 <LCD_u8WriteString>
							DIO_U8SetPinDirection(DIO_PORTC,DIO_PIN7,DIO_HIGH);
    3f12:	82 e0       	ldi	r24, 0x02	; 2
    3f14:	67 e0       	ldi	r22, 0x07	; 7
    3f16:	41 e0       	ldi	r20, 0x01	; 1
    3f18:	0e 94 75 07 	call	0xeea	; 0xeea <DIO_U8SetPinDirection>
							DIO_U8SetPinValue(DIO_PORTC,DIO_PIN7,DIO_HIGH);
    3f1c:	82 e0       	ldi	r24, 0x02	; 2
    3f1e:	67 e0       	ldi	r22, 0x07	; 7
    3f20:	41 e0       	ldi	r20, 0x01	; 1
    3f22:	0e 94 8e 08 	call	0x111c	; 0x111c <DIO_U8SetPinValue>
    3f26:	fe 01       	movw	r30, r28
    3f28:	e9 56       	subi	r30, 0x69	; 105
    3f2a:	ff 4f       	sbci	r31, 0xFF	; 255
    3f2c:	80 e0       	ldi	r24, 0x00	; 0
    3f2e:	90 e0       	ldi	r25, 0x00	; 0
    3f30:	aa ef       	ldi	r26, 0xFA	; 250
    3f32:	b3 e4       	ldi	r27, 0x43	; 67
    3f34:	80 83       	st	Z, r24
    3f36:	91 83       	std	Z+1, r25	; 0x01
    3f38:	a2 83       	std	Z+2, r26	; 0x02
    3f3a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3f3c:	8e 01       	movw	r16, r28
    3f3e:	0d 56       	subi	r16, 0x6D	; 109
    3f40:	1f 4f       	sbci	r17, 0xFF	; 255
    3f42:	fe 01       	movw	r30, r28
    3f44:	e9 56       	subi	r30, 0x69	; 105
    3f46:	ff 4f       	sbci	r31, 0xFF	; 255
    3f48:	60 81       	ld	r22, Z
    3f4a:	71 81       	ldd	r23, Z+1	; 0x01
    3f4c:	82 81       	ldd	r24, Z+2	; 0x02
    3f4e:	93 81       	ldd	r25, Z+3	; 0x03
    3f50:	20 e0       	ldi	r18, 0x00	; 0
    3f52:	30 e0       	ldi	r19, 0x00	; 0
    3f54:	4a ef       	ldi	r20, 0xFA	; 250
    3f56:	54 e4       	ldi	r21, 0x44	; 68
    3f58:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3f5c:	dc 01       	movw	r26, r24
    3f5e:	cb 01       	movw	r24, r22
    3f60:	f8 01       	movw	r30, r16
    3f62:	80 83       	st	Z, r24
    3f64:	91 83       	std	Z+1, r25	; 0x01
    3f66:	a2 83       	std	Z+2, r26	; 0x02
    3f68:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3f6a:	fe 01       	movw	r30, r28
    3f6c:	ed 56       	subi	r30, 0x6D	; 109
    3f6e:	ff 4f       	sbci	r31, 0xFF	; 255
    3f70:	60 81       	ld	r22, Z
    3f72:	71 81       	ldd	r23, Z+1	; 0x01
    3f74:	82 81       	ldd	r24, Z+2	; 0x02
    3f76:	93 81       	ldd	r25, Z+3	; 0x03
    3f78:	20 e0       	ldi	r18, 0x00	; 0
    3f7a:	30 e0       	ldi	r19, 0x00	; 0
    3f7c:	40 e8       	ldi	r20, 0x80	; 128
    3f7e:	5f e3       	ldi	r21, 0x3F	; 63
    3f80:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3f84:	88 23       	and	r24, r24
    3f86:	44 f4       	brge	.+16     	; 0x3f98 <SM_U8LoginSys+0x78e>
		__ticks = 1;
    3f88:	fe 01       	movw	r30, r28
    3f8a:	ef 56       	subi	r30, 0x6F	; 111
    3f8c:	ff 4f       	sbci	r31, 0xFF	; 255
    3f8e:	81 e0       	ldi	r24, 0x01	; 1
    3f90:	90 e0       	ldi	r25, 0x00	; 0
    3f92:	91 83       	std	Z+1, r25	; 0x01
    3f94:	80 83       	st	Z, r24
    3f96:	64 c0       	rjmp	.+200    	; 0x4060 <SM_U8LoginSys+0x856>
	else if (__tmp > 65535)
    3f98:	fe 01       	movw	r30, r28
    3f9a:	ed 56       	subi	r30, 0x6D	; 109
    3f9c:	ff 4f       	sbci	r31, 0xFF	; 255
    3f9e:	60 81       	ld	r22, Z
    3fa0:	71 81       	ldd	r23, Z+1	; 0x01
    3fa2:	82 81       	ldd	r24, Z+2	; 0x02
    3fa4:	93 81       	ldd	r25, Z+3	; 0x03
    3fa6:	20 e0       	ldi	r18, 0x00	; 0
    3fa8:	3f ef       	ldi	r19, 0xFF	; 255
    3faa:	4f e7       	ldi	r20, 0x7F	; 127
    3fac:	57 e4       	ldi	r21, 0x47	; 71
    3fae:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3fb2:	18 16       	cp	r1, r24
    3fb4:	0c f0       	brlt	.+2      	; 0x3fb8 <SM_U8LoginSys+0x7ae>
    3fb6:	43 c0       	rjmp	.+134    	; 0x403e <SM_U8LoginSys+0x834>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3fb8:	fe 01       	movw	r30, r28
    3fba:	e9 56       	subi	r30, 0x69	; 105
    3fbc:	ff 4f       	sbci	r31, 0xFF	; 255
    3fbe:	60 81       	ld	r22, Z
    3fc0:	71 81       	ldd	r23, Z+1	; 0x01
    3fc2:	82 81       	ldd	r24, Z+2	; 0x02
    3fc4:	93 81       	ldd	r25, Z+3	; 0x03
    3fc6:	20 e0       	ldi	r18, 0x00	; 0
    3fc8:	30 e0       	ldi	r19, 0x00	; 0
    3fca:	40 e2       	ldi	r20, 0x20	; 32
    3fcc:	51 e4       	ldi	r21, 0x41	; 65
    3fce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3fd2:	dc 01       	movw	r26, r24
    3fd4:	cb 01       	movw	r24, r22
    3fd6:	8e 01       	movw	r16, r28
    3fd8:	0f 56       	subi	r16, 0x6F	; 111
    3fda:	1f 4f       	sbci	r17, 0xFF	; 255
    3fdc:	bc 01       	movw	r22, r24
    3fde:	cd 01       	movw	r24, r26
    3fe0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3fe4:	dc 01       	movw	r26, r24
    3fe6:	cb 01       	movw	r24, r22
    3fe8:	f8 01       	movw	r30, r16
    3fea:	91 83       	std	Z+1, r25	; 0x01
    3fec:	80 83       	st	Z, r24
    3fee:	1f c0       	rjmp	.+62     	; 0x402e <SM_U8LoginSys+0x824>
    3ff0:	fe 01       	movw	r30, r28
    3ff2:	e1 57       	subi	r30, 0x71	; 113
    3ff4:	ff 4f       	sbci	r31, 0xFF	; 255
    3ff6:	88 ec       	ldi	r24, 0xC8	; 200
    3ff8:	90 e0       	ldi	r25, 0x00	; 0
    3ffa:	91 83       	std	Z+1, r25	; 0x01
    3ffc:	80 83       	st	Z, r24
    3ffe:	fe 01       	movw	r30, r28
    4000:	e1 57       	subi	r30, 0x71	; 113
    4002:	ff 4f       	sbci	r31, 0xFF	; 255
    4004:	80 81       	ld	r24, Z
    4006:	91 81       	ldd	r25, Z+1	; 0x01
    4008:	01 97       	sbiw	r24, 0x01	; 1
    400a:	f1 f7       	brne	.-4      	; 0x4008 <SM_U8LoginSys+0x7fe>
    400c:	fe 01       	movw	r30, r28
    400e:	e1 57       	subi	r30, 0x71	; 113
    4010:	ff 4f       	sbci	r31, 0xFF	; 255
    4012:	91 83       	std	Z+1, r25	; 0x01
    4014:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4016:	de 01       	movw	r26, r28
    4018:	af 56       	subi	r26, 0x6F	; 111
    401a:	bf 4f       	sbci	r27, 0xFF	; 255
    401c:	fe 01       	movw	r30, r28
    401e:	ef 56       	subi	r30, 0x6F	; 111
    4020:	ff 4f       	sbci	r31, 0xFF	; 255
    4022:	80 81       	ld	r24, Z
    4024:	91 81       	ldd	r25, Z+1	; 0x01
    4026:	01 97       	sbiw	r24, 0x01	; 1
    4028:	11 96       	adiw	r26, 0x01	; 1
    402a:	9c 93       	st	X, r25
    402c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    402e:	fe 01       	movw	r30, r28
    4030:	ef 56       	subi	r30, 0x6F	; 111
    4032:	ff 4f       	sbci	r31, 0xFF	; 255
    4034:	80 81       	ld	r24, Z
    4036:	91 81       	ldd	r25, Z+1	; 0x01
    4038:	00 97       	sbiw	r24, 0x00	; 0
    403a:	d1 f6       	brne	.-76     	; 0x3ff0 <SM_U8LoginSys+0x7e6>
    403c:	27 c0       	rjmp	.+78     	; 0x408c <SM_U8LoginSys+0x882>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    403e:	8e 01       	movw	r16, r28
    4040:	0f 56       	subi	r16, 0x6F	; 111
    4042:	1f 4f       	sbci	r17, 0xFF	; 255
    4044:	fe 01       	movw	r30, r28
    4046:	ed 56       	subi	r30, 0x6D	; 109
    4048:	ff 4f       	sbci	r31, 0xFF	; 255
    404a:	60 81       	ld	r22, Z
    404c:	71 81       	ldd	r23, Z+1	; 0x01
    404e:	82 81       	ldd	r24, Z+2	; 0x02
    4050:	93 81       	ldd	r25, Z+3	; 0x03
    4052:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4056:	dc 01       	movw	r26, r24
    4058:	cb 01       	movw	r24, r22
    405a:	f8 01       	movw	r30, r16
    405c:	91 83       	std	Z+1, r25	; 0x01
    405e:	80 83       	st	Z, r24
    4060:	de 01       	movw	r26, r28
    4062:	a3 57       	subi	r26, 0x73	; 115
    4064:	bf 4f       	sbci	r27, 0xFF	; 255
    4066:	fe 01       	movw	r30, r28
    4068:	ef 56       	subi	r30, 0x6F	; 111
    406a:	ff 4f       	sbci	r31, 0xFF	; 255
    406c:	80 81       	ld	r24, Z
    406e:	91 81       	ldd	r25, Z+1	; 0x01
    4070:	8d 93       	st	X+, r24
    4072:	9c 93       	st	X, r25
    4074:	fe 01       	movw	r30, r28
    4076:	e3 57       	subi	r30, 0x73	; 115
    4078:	ff 4f       	sbci	r31, 0xFF	; 255
    407a:	80 81       	ld	r24, Z
    407c:	91 81       	ldd	r25, Z+1	; 0x01
    407e:	01 97       	sbiw	r24, 0x01	; 1
    4080:	f1 f7       	brne	.-4      	; 0x407e <SM_U8LoginSys+0x874>
    4082:	fe 01       	movw	r30, r28
    4084:	e3 57       	subi	r30, 0x73	; 115
    4086:	ff 4f       	sbci	r31, 0xFF	; 255
    4088:	91 83       	std	Z+1, r25	; 0x01
    408a:	80 83       	st	Z, r24
							_delay_ms(500);
							DIO_U8SetPinValue(DIO_PORTC,DIO_PIN7,DIO_LOW);
    408c:	82 e0       	ldi	r24, 0x02	; 2
    408e:	67 e0       	ldi	r22, 0x07	; 7
    4090:	40 e0       	ldi	r20, 0x00	; 0
    4092:	0e 94 8e 08 	call	0x111c	; 0x111c <DIO_U8SetPinValue>
							Local_U8ErrorState = ERROR_STATE_NOK;
    4096:	10 92 24 03 	sts	0x0324, r1
							 return Local_U8ErrorState;
    409a:	f0 91 24 03 	lds	r31, 0x0324
    409e:	ca 52       	subi	r28, 0x2A	; 42
    40a0:	df 4f       	sbci	r29, 0xFF	; 255
    40a2:	f8 83       	st	Y, r31
    40a4:	c6 5d       	subi	r28, 0xD6	; 214
    40a6:	d0 40       	sbci	r29, 0x00	; 0
    40a8:	e9 c6       	rjmp	.+3538   	; 0x4e7c <SM_U8LoginSys+0x1672>
				LCD_VoidGoToRowCol(1,0);
				LCD_u8WriteString("WELCOME USER_0");

				_delay_ms(1000);
				LCD_VoidSendCommand(1);
					for(u8 i=0;i<3;i++)
    40aa:	de 01       	movw	r26, r28
    40ac:	ab 52       	subi	r26, 0x2B	; 43
    40ae:	bf 4f       	sbci	r27, 0xFF	; 255
    40b0:	fe 01       	movw	r30, r28
    40b2:	eb 52       	subi	r30, 0x2B	; 43
    40b4:	ff 4f       	sbci	r31, 0xFF	; 255
    40b6:	80 81       	ld	r24, Z
    40b8:	8f 5f       	subi	r24, 0xFF	; 255
    40ba:	8c 93       	st	X, r24
    40bc:	fe 01       	movw	r30, r28
    40be:	eb 52       	subi	r30, 0x2B	; 43
    40c0:	ff 4f       	sbci	r31, 0xFF	; 255
    40c2:	80 81       	ld	r24, Z
    40c4:	83 30       	cpi	r24, 0x03	; 3
    40c6:	08 f4       	brcc	.+2      	; 0x40ca <SM_U8LoginSys+0x8c0>
    40c8:	7a cd       	rjmp	.-1292   	; 0x3bbe <SM_U8LoginSys+0x3b4>
    40ca:	63 cc       	rjmp	.-1850   	; 0x3992 <SM_U8LoginSys+0x188>
					}
				}
			} break;
			case '1':
			{
				LCD_VoidGoToRowCol(1,0);
    40cc:	81 e0       	ldi	r24, 0x01	; 1
    40ce:	60 e0       	ldi	r22, 0x00	; 0
    40d0:	0e 94 4c 17 	call	0x2e98	; 0x2e98 <LCD_VoidGoToRowCol>
				LCD_u8WriteString("WELCOME USER_1");
    40d4:	82 ef       	ldi	r24, 0xF2	; 242
    40d6:	90 e0       	ldi	r25, 0x00	; 0
    40d8:	0e 94 04 18 	call	0x3008	; 0x3008 <LCD_u8WriteString>
    40dc:	fe 01       	movw	r30, r28
    40de:	e7 57       	subi	r30, 0x77	; 119
    40e0:	ff 4f       	sbci	r31, 0xFF	; 255
    40e2:	80 e0       	ldi	r24, 0x00	; 0
    40e4:	90 e0       	ldi	r25, 0x00	; 0
    40e6:	aa e7       	ldi	r26, 0x7A	; 122
    40e8:	b4 e4       	ldi	r27, 0x44	; 68
    40ea:	80 83       	st	Z, r24
    40ec:	91 83       	std	Z+1, r25	; 0x01
    40ee:	a2 83       	std	Z+2, r26	; 0x02
    40f0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    40f2:	8e 01       	movw	r16, r28
    40f4:	0b 57       	subi	r16, 0x7B	; 123
    40f6:	1f 4f       	sbci	r17, 0xFF	; 255
    40f8:	fe 01       	movw	r30, r28
    40fa:	e7 57       	subi	r30, 0x77	; 119
    40fc:	ff 4f       	sbci	r31, 0xFF	; 255
    40fe:	60 81       	ld	r22, Z
    4100:	71 81       	ldd	r23, Z+1	; 0x01
    4102:	82 81       	ldd	r24, Z+2	; 0x02
    4104:	93 81       	ldd	r25, Z+3	; 0x03
    4106:	20 e0       	ldi	r18, 0x00	; 0
    4108:	30 e0       	ldi	r19, 0x00	; 0
    410a:	4a ef       	ldi	r20, 0xFA	; 250
    410c:	54 e4       	ldi	r21, 0x44	; 68
    410e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4112:	dc 01       	movw	r26, r24
    4114:	cb 01       	movw	r24, r22
    4116:	f8 01       	movw	r30, r16
    4118:	80 83       	st	Z, r24
    411a:	91 83       	std	Z+1, r25	; 0x01
    411c:	a2 83       	std	Z+2, r26	; 0x02
    411e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4120:	fe 01       	movw	r30, r28
    4122:	eb 57       	subi	r30, 0x7B	; 123
    4124:	ff 4f       	sbci	r31, 0xFF	; 255
    4126:	60 81       	ld	r22, Z
    4128:	71 81       	ldd	r23, Z+1	; 0x01
    412a:	82 81       	ldd	r24, Z+2	; 0x02
    412c:	93 81       	ldd	r25, Z+3	; 0x03
    412e:	20 e0       	ldi	r18, 0x00	; 0
    4130:	30 e0       	ldi	r19, 0x00	; 0
    4132:	40 e8       	ldi	r20, 0x80	; 128
    4134:	5f e3       	ldi	r21, 0x3F	; 63
    4136:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    413a:	88 23       	and	r24, r24
    413c:	44 f4       	brge	.+16     	; 0x414e <SM_U8LoginSys+0x944>
		__ticks = 1;
    413e:	fe 01       	movw	r30, r28
    4140:	ed 57       	subi	r30, 0x7D	; 125
    4142:	ff 4f       	sbci	r31, 0xFF	; 255
    4144:	81 e0       	ldi	r24, 0x01	; 1
    4146:	90 e0       	ldi	r25, 0x00	; 0
    4148:	91 83       	std	Z+1, r25	; 0x01
    414a:	80 83       	st	Z, r24
    414c:	64 c0       	rjmp	.+200    	; 0x4216 <SM_U8LoginSys+0xa0c>
	else if (__tmp > 65535)
    414e:	fe 01       	movw	r30, r28
    4150:	eb 57       	subi	r30, 0x7B	; 123
    4152:	ff 4f       	sbci	r31, 0xFF	; 255
    4154:	60 81       	ld	r22, Z
    4156:	71 81       	ldd	r23, Z+1	; 0x01
    4158:	82 81       	ldd	r24, Z+2	; 0x02
    415a:	93 81       	ldd	r25, Z+3	; 0x03
    415c:	20 e0       	ldi	r18, 0x00	; 0
    415e:	3f ef       	ldi	r19, 0xFF	; 255
    4160:	4f e7       	ldi	r20, 0x7F	; 127
    4162:	57 e4       	ldi	r21, 0x47	; 71
    4164:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4168:	18 16       	cp	r1, r24
    416a:	0c f0       	brlt	.+2      	; 0x416e <SM_U8LoginSys+0x964>
    416c:	43 c0       	rjmp	.+134    	; 0x41f4 <SM_U8LoginSys+0x9ea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    416e:	fe 01       	movw	r30, r28
    4170:	e7 57       	subi	r30, 0x77	; 119
    4172:	ff 4f       	sbci	r31, 0xFF	; 255
    4174:	60 81       	ld	r22, Z
    4176:	71 81       	ldd	r23, Z+1	; 0x01
    4178:	82 81       	ldd	r24, Z+2	; 0x02
    417a:	93 81       	ldd	r25, Z+3	; 0x03
    417c:	20 e0       	ldi	r18, 0x00	; 0
    417e:	30 e0       	ldi	r19, 0x00	; 0
    4180:	40 e2       	ldi	r20, 0x20	; 32
    4182:	51 e4       	ldi	r21, 0x41	; 65
    4184:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4188:	dc 01       	movw	r26, r24
    418a:	cb 01       	movw	r24, r22
    418c:	8e 01       	movw	r16, r28
    418e:	0d 57       	subi	r16, 0x7D	; 125
    4190:	1f 4f       	sbci	r17, 0xFF	; 255
    4192:	bc 01       	movw	r22, r24
    4194:	cd 01       	movw	r24, r26
    4196:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    419a:	dc 01       	movw	r26, r24
    419c:	cb 01       	movw	r24, r22
    419e:	f8 01       	movw	r30, r16
    41a0:	91 83       	std	Z+1, r25	; 0x01
    41a2:	80 83       	st	Z, r24
    41a4:	1f c0       	rjmp	.+62     	; 0x41e4 <SM_U8LoginSys+0x9da>
    41a6:	fe 01       	movw	r30, r28
    41a8:	ef 57       	subi	r30, 0x7F	; 127
    41aa:	ff 4f       	sbci	r31, 0xFF	; 255
    41ac:	88 ec       	ldi	r24, 0xC8	; 200
    41ae:	90 e0       	ldi	r25, 0x00	; 0
    41b0:	91 83       	std	Z+1, r25	; 0x01
    41b2:	80 83       	st	Z, r24
    41b4:	fe 01       	movw	r30, r28
    41b6:	ef 57       	subi	r30, 0x7F	; 127
    41b8:	ff 4f       	sbci	r31, 0xFF	; 255
    41ba:	80 81       	ld	r24, Z
    41bc:	91 81       	ldd	r25, Z+1	; 0x01
    41be:	01 97       	sbiw	r24, 0x01	; 1
    41c0:	f1 f7       	brne	.-4      	; 0x41be <SM_U8LoginSys+0x9b4>
    41c2:	fe 01       	movw	r30, r28
    41c4:	ef 57       	subi	r30, 0x7F	; 127
    41c6:	ff 4f       	sbci	r31, 0xFF	; 255
    41c8:	91 83       	std	Z+1, r25	; 0x01
    41ca:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    41cc:	de 01       	movw	r26, r28
    41ce:	ad 57       	subi	r26, 0x7D	; 125
    41d0:	bf 4f       	sbci	r27, 0xFF	; 255
    41d2:	fe 01       	movw	r30, r28
    41d4:	ed 57       	subi	r30, 0x7D	; 125
    41d6:	ff 4f       	sbci	r31, 0xFF	; 255
    41d8:	80 81       	ld	r24, Z
    41da:	91 81       	ldd	r25, Z+1	; 0x01
    41dc:	01 97       	sbiw	r24, 0x01	; 1
    41de:	11 96       	adiw	r26, 0x01	; 1
    41e0:	9c 93       	st	X, r25
    41e2:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    41e4:	fe 01       	movw	r30, r28
    41e6:	ed 57       	subi	r30, 0x7D	; 125
    41e8:	ff 4f       	sbci	r31, 0xFF	; 255
    41ea:	80 81       	ld	r24, Z
    41ec:	91 81       	ldd	r25, Z+1	; 0x01
    41ee:	00 97       	sbiw	r24, 0x00	; 0
    41f0:	d1 f6       	brne	.-76     	; 0x41a6 <SM_U8LoginSys+0x99c>
    41f2:	27 c0       	rjmp	.+78     	; 0x4242 <SM_U8LoginSys+0xa38>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    41f4:	8e 01       	movw	r16, r28
    41f6:	0d 57       	subi	r16, 0x7D	; 125
    41f8:	1f 4f       	sbci	r17, 0xFF	; 255
    41fa:	fe 01       	movw	r30, r28
    41fc:	eb 57       	subi	r30, 0x7B	; 123
    41fe:	ff 4f       	sbci	r31, 0xFF	; 255
    4200:	60 81       	ld	r22, Z
    4202:	71 81       	ldd	r23, Z+1	; 0x01
    4204:	82 81       	ldd	r24, Z+2	; 0x02
    4206:	93 81       	ldd	r25, Z+3	; 0x03
    4208:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    420c:	dc 01       	movw	r26, r24
    420e:	cb 01       	movw	r24, r22
    4210:	f8 01       	movw	r30, r16
    4212:	91 83       	std	Z+1, r25	; 0x01
    4214:	80 83       	st	Z, r24
    4216:	de 01       	movw	r26, r28
    4218:	a1 58       	subi	r26, 0x81	; 129
    421a:	bf 4f       	sbci	r27, 0xFF	; 255
    421c:	fe 01       	movw	r30, r28
    421e:	ed 57       	subi	r30, 0x7D	; 125
    4220:	ff 4f       	sbci	r31, 0xFF	; 255
    4222:	80 81       	ld	r24, Z
    4224:	91 81       	ldd	r25, Z+1	; 0x01
    4226:	8d 93       	st	X+, r24
    4228:	9c 93       	st	X, r25
    422a:	fe 01       	movw	r30, r28
    422c:	e1 58       	subi	r30, 0x81	; 129
    422e:	ff 4f       	sbci	r31, 0xFF	; 255
    4230:	80 81       	ld	r24, Z
    4232:	91 81       	ldd	r25, Z+1	; 0x01
    4234:	01 97       	sbiw	r24, 0x01	; 1
    4236:	f1 f7       	brne	.-4      	; 0x4234 <SM_U8LoginSys+0xa2a>
    4238:	fe 01       	movw	r30, r28
    423a:	e1 58       	subi	r30, 0x81	; 129
    423c:	ff 4f       	sbci	r31, 0xFF	; 255
    423e:	91 83       	std	Z+1, r25	; 0x01
    4240:	80 83       	st	Z, r24

				_delay_ms(1000);
				LCD_VoidSendCommand(1);
    4242:	81 e0       	ldi	r24, 0x01	; 1
    4244:	0e 94 4d 0f 	call	0x1e9a	; 0x1e9a <LCD_VoidSendCommand>
					for(u8 i=0;i<3;i++)
    4248:	fe 01       	movw	r30, r28
    424a:	ec 52       	subi	r30, 0x2C	; 44
    424c:	ff 4f       	sbci	r31, 0xFF	; 255
    424e:	10 82       	st	Z, r1
    4250:	7e c2       	rjmp	.+1276   	; 0x474e <SM_U8LoginSys+0xf44>
				{

					LCD_u8WriteString("ENTER YOUR PASS");
    4252:	85 ea       	ldi	r24, 0xA5	; 165
    4254:	90 e0       	ldi	r25, 0x00	; 0
    4256:	0e 94 04 18 	call	0x3008	; 0x3008 <LCD_u8WriteString>
    425a:	fe 01       	movw	r30, r28
    425c:	e5 58       	subi	r30, 0x85	; 133
    425e:	ff 4f       	sbci	r31, 0xFF	; 255
    4260:	80 e0       	ldi	r24, 0x00	; 0
    4262:	90 e0       	ldi	r25, 0x00	; 0
    4264:	af e2       	ldi	r26, 0x2F	; 47
    4266:	b4 e4       	ldi	r27, 0x44	; 68
    4268:	80 83       	st	Z, r24
    426a:	91 83       	std	Z+1, r25	; 0x01
    426c:	a2 83       	std	Z+2, r26	; 0x02
    426e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4270:	8e 01       	movw	r16, r28
    4272:	09 58       	subi	r16, 0x89	; 137
    4274:	1f 4f       	sbci	r17, 0xFF	; 255
    4276:	fe 01       	movw	r30, r28
    4278:	e5 58       	subi	r30, 0x85	; 133
    427a:	ff 4f       	sbci	r31, 0xFF	; 255
    427c:	60 81       	ld	r22, Z
    427e:	71 81       	ldd	r23, Z+1	; 0x01
    4280:	82 81       	ldd	r24, Z+2	; 0x02
    4282:	93 81       	ldd	r25, Z+3	; 0x03
    4284:	20 e0       	ldi	r18, 0x00	; 0
    4286:	30 e0       	ldi	r19, 0x00	; 0
    4288:	4a ef       	ldi	r20, 0xFA	; 250
    428a:	54 e4       	ldi	r21, 0x44	; 68
    428c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4290:	dc 01       	movw	r26, r24
    4292:	cb 01       	movw	r24, r22
    4294:	f8 01       	movw	r30, r16
    4296:	80 83       	st	Z, r24
    4298:	91 83       	std	Z+1, r25	; 0x01
    429a:	a2 83       	std	Z+2, r26	; 0x02
    429c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    429e:	fe 01       	movw	r30, r28
    42a0:	e9 58       	subi	r30, 0x89	; 137
    42a2:	ff 4f       	sbci	r31, 0xFF	; 255
    42a4:	60 81       	ld	r22, Z
    42a6:	71 81       	ldd	r23, Z+1	; 0x01
    42a8:	82 81       	ldd	r24, Z+2	; 0x02
    42aa:	93 81       	ldd	r25, Z+3	; 0x03
    42ac:	20 e0       	ldi	r18, 0x00	; 0
    42ae:	30 e0       	ldi	r19, 0x00	; 0
    42b0:	40 e8       	ldi	r20, 0x80	; 128
    42b2:	5f e3       	ldi	r21, 0x3F	; 63
    42b4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    42b8:	88 23       	and	r24, r24
    42ba:	44 f4       	brge	.+16     	; 0x42cc <SM_U8LoginSys+0xac2>
		__ticks = 1;
    42bc:	fe 01       	movw	r30, r28
    42be:	eb 58       	subi	r30, 0x8B	; 139
    42c0:	ff 4f       	sbci	r31, 0xFF	; 255
    42c2:	81 e0       	ldi	r24, 0x01	; 1
    42c4:	90 e0       	ldi	r25, 0x00	; 0
    42c6:	91 83       	std	Z+1, r25	; 0x01
    42c8:	80 83       	st	Z, r24
    42ca:	64 c0       	rjmp	.+200    	; 0x4394 <SM_U8LoginSys+0xb8a>
	else if (__tmp > 65535)
    42cc:	fe 01       	movw	r30, r28
    42ce:	e9 58       	subi	r30, 0x89	; 137
    42d0:	ff 4f       	sbci	r31, 0xFF	; 255
    42d2:	60 81       	ld	r22, Z
    42d4:	71 81       	ldd	r23, Z+1	; 0x01
    42d6:	82 81       	ldd	r24, Z+2	; 0x02
    42d8:	93 81       	ldd	r25, Z+3	; 0x03
    42da:	20 e0       	ldi	r18, 0x00	; 0
    42dc:	3f ef       	ldi	r19, 0xFF	; 255
    42de:	4f e7       	ldi	r20, 0x7F	; 127
    42e0:	57 e4       	ldi	r21, 0x47	; 71
    42e2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    42e6:	18 16       	cp	r1, r24
    42e8:	0c f0       	brlt	.+2      	; 0x42ec <SM_U8LoginSys+0xae2>
    42ea:	43 c0       	rjmp	.+134    	; 0x4372 <SM_U8LoginSys+0xb68>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    42ec:	fe 01       	movw	r30, r28
    42ee:	e5 58       	subi	r30, 0x85	; 133
    42f0:	ff 4f       	sbci	r31, 0xFF	; 255
    42f2:	60 81       	ld	r22, Z
    42f4:	71 81       	ldd	r23, Z+1	; 0x01
    42f6:	82 81       	ldd	r24, Z+2	; 0x02
    42f8:	93 81       	ldd	r25, Z+3	; 0x03
    42fa:	20 e0       	ldi	r18, 0x00	; 0
    42fc:	30 e0       	ldi	r19, 0x00	; 0
    42fe:	40 e2       	ldi	r20, 0x20	; 32
    4300:	51 e4       	ldi	r21, 0x41	; 65
    4302:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4306:	dc 01       	movw	r26, r24
    4308:	cb 01       	movw	r24, r22
    430a:	8e 01       	movw	r16, r28
    430c:	0b 58       	subi	r16, 0x8B	; 139
    430e:	1f 4f       	sbci	r17, 0xFF	; 255
    4310:	bc 01       	movw	r22, r24
    4312:	cd 01       	movw	r24, r26
    4314:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4318:	dc 01       	movw	r26, r24
    431a:	cb 01       	movw	r24, r22
    431c:	f8 01       	movw	r30, r16
    431e:	91 83       	std	Z+1, r25	; 0x01
    4320:	80 83       	st	Z, r24
    4322:	1f c0       	rjmp	.+62     	; 0x4362 <SM_U8LoginSys+0xb58>
    4324:	fe 01       	movw	r30, r28
    4326:	ed 58       	subi	r30, 0x8D	; 141
    4328:	ff 4f       	sbci	r31, 0xFF	; 255
    432a:	88 ec       	ldi	r24, 0xC8	; 200
    432c:	90 e0       	ldi	r25, 0x00	; 0
    432e:	91 83       	std	Z+1, r25	; 0x01
    4330:	80 83       	st	Z, r24
    4332:	fe 01       	movw	r30, r28
    4334:	ed 58       	subi	r30, 0x8D	; 141
    4336:	ff 4f       	sbci	r31, 0xFF	; 255
    4338:	80 81       	ld	r24, Z
    433a:	91 81       	ldd	r25, Z+1	; 0x01
    433c:	01 97       	sbiw	r24, 0x01	; 1
    433e:	f1 f7       	brne	.-4      	; 0x433c <SM_U8LoginSys+0xb32>
    4340:	fe 01       	movw	r30, r28
    4342:	ed 58       	subi	r30, 0x8D	; 141
    4344:	ff 4f       	sbci	r31, 0xFF	; 255
    4346:	91 83       	std	Z+1, r25	; 0x01
    4348:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    434a:	de 01       	movw	r26, r28
    434c:	ab 58       	subi	r26, 0x8B	; 139
    434e:	bf 4f       	sbci	r27, 0xFF	; 255
    4350:	fe 01       	movw	r30, r28
    4352:	eb 58       	subi	r30, 0x8B	; 139
    4354:	ff 4f       	sbci	r31, 0xFF	; 255
    4356:	80 81       	ld	r24, Z
    4358:	91 81       	ldd	r25, Z+1	; 0x01
    435a:	01 97       	sbiw	r24, 0x01	; 1
    435c:	11 96       	adiw	r26, 0x01	; 1
    435e:	9c 93       	st	X, r25
    4360:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4362:	fe 01       	movw	r30, r28
    4364:	eb 58       	subi	r30, 0x8B	; 139
    4366:	ff 4f       	sbci	r31, 0xFF	; 255
    4368:	80 81       	ld	r24, Z
    436a:	91 81       	ldd	r25, Z+1	; 0x01
    436c:	00 97       	sbiw	r24, 0x00	; 0
    436e:	d1 f6       	brne	.-76     	; 0x4324 <SM_U8LoginSys+0xb1a>
    4370:	27 c0       	rjmp	.+78     	; 0x43c0 <SM_U8LoginSys+0xbb6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4372:	8e 01       	movw	r16, r28
    4374:	0b 58       	subi	r16, 0x8B	; 139
    4376:	1f 4f       	sbci	r17, 0xFF	; 255
    4378:	fe 01       	movw	r30, r28
    437a:	e9 58       	subi	r30, 0x89	; 137
    437c:	ff 4f       	sbci	r31, 0xFF	; 255
    437e:	60 81       	ld	r22, Z
    4380:	71 81       	ldd	r23, Z+1	; 0x01
    4382:	82 81       	ldd	r24, Z+2	; 0x02
    4384:	93 81       	ldd	r25, Z+3	; 0x03
    4386:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    438a:	dc 01       	movw	r26, r24
    438c:	cb 01       	movw	r24, r22
    438e:	f8 01       	movw	r30, r16
    4390:	91 83       	std	Z+1, r25	; 0x01
    4392:	80 83       	st	Z, r24
    4394:	de 01       	movw	r26, r28
    4396:	af 58       	subi	r26, 0x8F	; 143
    4398:	bf 4f       	sbci	r27, 0xFF	; 255
    439a:	fe 01       	movw	r30, r28
    439c:	eb 58       	subi	r30, 0x8B	; 139
    439e:	ff 4f       	sbci	r31, 0xFF	; 255
    43a0:	80 81       	ld	r24, Z
    43a2:	91 81       	ldd	r25, Z+1	; 0x01
    43a4:	8d 93       	st	X+, r24
    43a6:	9c 93       	st	X, r25
    43a8:	fe 01       	movw	r30, r28
    43aa:	ef 58       	subi	r30, 0x8F	; 143
    43ac:	ff 4f       	sbci	r31, 0xFF	; 255
    43ae:	80 81       	ld	r24, Z
    43b0:	91 81       	ldd	r25, Z+1	; 0x01
    43b2:	01 97       	sbiw	r24, 0x01	; 1
    43b4:	f1 f7       	brne	.-4      	; 0x43b2 <SM_U8LoginSys+0xba8>
    43b6:	fe 01       	movw	r30, r28
    43b8:	ef 58       	subi	r30, 0x8F	; 143
    43ba:	ff 4f       	sbci	r31, 0xFF	; 255
    43bc:	91 83       	std	Z+1, r25	; 0x01
    43be:	80 83       	st	Z, r24
					_delay_ms(700);
					LCD_VoidGoToRowCol(1,0);
    43c0:	81 e0       	ldi	r24, 0x01	; 1
    43c2:	60 e0       	ldi	r22, 0x00	; 0
    43c4:	0e 94 4c 17 	call	0x2e98	; 0x2e98 <LCD_VoidGoToRowCol>
					User_Pass= SM_U16EnterPassword();
    43c8:	0e 94 4f 27 	call	0x4e9e	; 0x4e9e <SM_U16EnterPassword>
    43cc:	90 93 23 03 	sts	0x0323, r25
    43d0:	80 93 22 03 	sts	0x0322, r24
					if(User_Pass ==2222)
    43d4:	80 91 22 03 	lds	r24, 0x0322
    43d8:	90 91 23 03 	lds	r25, 0x0323
    43dc:	f8 e0       	ldi	r31, 0x08	; 8
    43de:	8e 3a       	cpi	r24, 0xAE	; 174
    43e0:	9f 07       	cpc	r25, r31
    43e2:	79 f4       	brne	.+30     	; 0x4402 <SM_U8LoginSys+0xbf8>
					{

						LCD_u8WriteString("WELCOME ALAA");
    43e4:	81 e0       	ldi	r24, 0x01	; 1
    43e6:	91 e0       	ldi	r25, 0x01	; 1
    43e8:	0e 94 04 18 	call	0x3008	; 0x3008 <LCD_u8WriteString>
						Local_U8ErrorState = ERROR_STATE_OK;
    43ec:	81 e0       	ldi	r24, 0x01	; 1
    43ee:	80 93 24 03 	sts	0x0324, r24
						 return Local_U8ErrorState;
    43f2:	20 91 24 03 	lds	r18, 0x0324
    43f6:	ca 52       	subi	r28, 0x2A	; 42
    43f8:	df 4f       	sbci	r29, 0xFF	; 255
    43fa:	28 83       	st	Y, r18
    43fc:	c6 5d       	subi	r28, 0xD6	; 214
    43fe:	d0 40       	sbci	r29, 0x00	; 0
    4400:	3d c5       	rjmp	.+2682   	; 0x4e7c <SM_U8LoginSys+0x1672>
					}
					else
					{
						LCD_u8WriteString("INCORRECT PASS");
    4402:	81 ec       	ldi	r24, 0xC1	; 193
    4404:	90 e0       	ldi	r25, 0x00	; 0
    4406:	0e 94 04 18 	call	0x3008	; 0x3008 <LCD_u8WriteString>
						LCD_VoidGoToRowCol(1,0);
    440a:	81 e0       	ldi	r24, 0x01	; 1
    440c:	60 e0       	ldi	r22, 0x00	; 0
    440e:	0e 94 4c 17 	call	0x2e98	; 0x2e98 <LCD_VoidGoToRowCol>
						LCD_u8WriteString("TRY AGAIN");
    4412:	80 ed       	ldi	r24, 0xD0	; 208
    4414:	90 e0       	ldi	r25, 0x00	; 0
    4416:	0e 94 04 18 	call	0x3008	; 0x3008 <LCD_u8WriteString>
    441a:	fe 01       	movw	r30, r28
    441c:	e3 59       	subi	r30, 0x93	; 147
    441e:	ff 4f       	sbci	r31, 0xFF	; 255
    4420:	80 e0       	ldi	r24, 0x00	; 0
    4422:	90 e0       	ldi	r25, 0x00	; 0
    4424:	af e2       	ldi	r26, 0x2F	; 47
    4426:	b4 e4       	ldi	r27, 0x44	; 68
    4428:	80 83       	st	Z, r24
    442a:	91 83       	std	Z+1, r25	; 0x01
    442c:	a2 83       	std	Z+2, r26	; 0x02
    442e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4430:	8e 01       	movw	r16, r28
    4432:	07 59       	subi	r16, 0x97	; 151
    4434:	1f 4f       	sbci	r17, 0xFF	; 255
    4436:	fe 01       	movw	r30, r28
    4438:	e3 59       	subi	r30, 0x93	; 147
    443a:	ff 4f       	sbci	r31, 0xFF	; 255
    443c:	60 81       	ld	r22, Z
    443e:	71 81       	ldd	r23, Z+1	; 0x01
    4440:	82 81       	ldd	r24, Z+2	; 0x02
    4442:	93 81       	ldd	r25, Z+3	; 0x03
    4444:	20 e0       	ldi	r18, 0x00	; 0
    4446:	30 e0       	ldi	r19, 0x00	; 0
    4448:	4a ef       	ldi	r20, 0xFA	; 250
    444a:	54 e4       	ldi	r21, 0x44	; 68
    444c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4450:	dc 01       	movw	r26, r24
    4452:	cb 01       	movw	r24, r22
    4454:	f8 01       	movw	r30, r16
    4456:	80 83       	st	Z, r24
    4458:	91 83       	std	Z+1, r25	; 0x01
    445a:	a2 83       	std	Z+2, r26	; 0x02
    445c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    445e:	fe 01       	movw	r30, r28
    4460:	e7 59       	subi	r30, 0x97	; 151
    4462:	ff 4f       	sbci	r31, 0xFF	; 255
    4464:	60 81       	ld	r22, Z
    4466:	71 81       	ldd	r23, Z+1	; 0x01
    4468:	82 81       	ldd	r24, Z+2	; 0x02
    446a:	93 81       	ldd	r25, Z+3	; 0x03
    446c:	20 e0       	ldi	r18, 0x00	; 0
    446e:	30 e0       	ldi	r19, 0x00	; 0
    4470:	40 e8       	ldi	r20, 0x80	; 128
    4472:	5f e3       	ldi	r21, 0x3F	; 63
    4474:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4478:	88 23       	and	r24, r24
    447a:	44 f4       	brge	.+16     	; 0x448c <SM_U8LoginSys+0xc82>
		__ticks = 1;
    447c:	fe 01       	movw	r30, r28
    447e:	e9 59       	subi	r30, 0x99	; 153
    4480:	ff 4f       	sbci	r31, 0xFF	; 255
    4482:	81 e0       	ldi	r24, 0x01	; 1
    4484:	90 e0       	ldi	r25, 0x00	; 0
    4486:	91 83       	std	Z+1, r25	; 0x01
    4488:	80 83       	st	Z, r24
    448a:	64 c0       	rjmp	.+200    	; 0x4554 <SM_U8LoginSys+0xd4a>
	else if (__tmp > 65535)
    448c:	fe 01       	movw	r30, r28
    448e:	e7 59       	subi	r30, 0x97	; 151
    4490:	ff 4f       	sbci	r31, 0xFF	; 255
    4492:	60 81       	ld	r22, Z
    4494:	71 81       	ldd	r23, Z+1	; 0x01
    4496:	82 81       	ldd	r24, Z+2	; 0x02
    4498:	93 81       	ldd	r25, Z+3	; 0x03
    449a:	20 e0       	ldi	r18, 0x00	; 0
    449c:	3f ef       	ldi	r19, 0xFF	; 255
    449e:	4f e7       	ldi	r20, 0x7F	; 127
    44a0:	57 e4       	ldi	r21, 0x47	; 71
    44a2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    44a6:	18 16       	cp	r1, r24
    44a8:	0c f0       	brlt	.+2      	; 0x44ac <SM_U8LoginSys+0xca2>
    44aa:	43 c0       	rjmp	.+134    	; 0x4532 <SM_U8LoginSys+0xd28>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    44ac:	fe 01       	movw	r30, r28
    44ae:	e3 59       	subi	r30, 0x93	; 147
    44b0:	ff 4f       	sbci	r31, 0xFF	; 255
    44b2:	60 81       	ld	r22, Z
    44b4:	71 81       	ldd	r23, Z+1	; 0x01
    44b6:	82 81       	ldd	r24, Z+2	; 0x02
    44b8:	93 81       	ldd	r25, Z+3	; 0x03
    44ba:	20 e0       	ldi	r18, 0x00	; 0
    44bc:	30 e0       	ldi	r19, 0x00	; 0
    44be:	40 e2       	ldi	r20, 0x20	; 32
    44c0:	51 e4       	ldi	r21, 0x41	; 65
    44c2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    44c6:	dc 01       	movw	r26, r24
    44c8:	cb 01       	movw	r24, r22
    44ca:	8e 01       	movw	r16, r28
    44cc:	09 59       	subi	r16, 0x99	; 153
    44ce:	1f 4f       	sbci	r17, 0xFF	; 255
    44d0:	bc 01       	movw	r22, r24
    44d2:	cd 01       	movw	r24, r26
    44d4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    44d8:	dc 01       	movw	r26, r24
    44da:	cb 01       	movw	r24, r22
    44dc:	f8 01       	movw	r30, r16
    44de:	91 83       	std	Z+1, r25	; 0x01
    44e0:	80 83       	st	Z, r24
    44e2:	1f c0       	rjmp	.+62     	; 0x4522 <SM_U8LoginSys+0xd18>
    44e4:	fe 01       	movw	r30, r28
    44e6:	eb 59       	subi	r30, 0x9B	; 155
    44e8:	ff 4f       	sbci	r31, 0xFF	; 255
    44ea:	88 ec       	ldi	r24, 0xC8	; 200
    44ec:	90 e0       	ldi	r25, 0x00	; 0
    44ee:	91 83       	std	Z+1, r25	; 0x01
    44f0:	80 83       	st	Z, r24
    44f2:	fe 01       	movw	r30, r28
    44f4:	eb 59       	subi	r30, 0x9B	; 155
    44f6:	ff 4f       	sbci	r31, 0xFF	; 255
    44f8:	80 81       	ld	r24, Z
    44fa:	91 81       	ldd	r25, Z+1	; 0x01
    44fc:	01 97       	sbiw	r24, 0x01	; 1
    44fe:	f1 f7       	brne	.-4      	; 0x44fc <SM_U8LoginSys+0xcf2>
    4500:	fe 01       	movw	r30, r28
    4502:	eb 59       	subi	r30, 0x9B	; 155
    4504:	ff 4f       	sbci	r31, 0xFF	; 255
    4506:	91 83       	std	Z+1, r25	; 0x01
    4508:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    450a:	de 01       	movw	r26, r28
    450c:	a9 59       	subi	r26, 0x99	; 153
    450e:	bf 4f       	sbci	r27, 0xFF	; 255
    4510:	fe 01       	movw	r30, r28
    4512:	e9 59       	subi	r30, 0x99	; 153
    4514:	ff 4f       	sbci	r31, 0xFF	; 255
    4516:	80 81       	ld	r24, Z
    4518:	91 81       	ldd	r25, Z+1	; 0x01
    451a:	01 97       	sbiw	r24, 0x01	; 1
    451c:	11 96       	adiw	r26, 0x01	; 1
    451e:	9c 93       	st	X, r25
    4520:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4522:	fe 01       	movw	r30, r28
    4524:	e9 59       	subi	r30, 0x99	; 153
    4526:	ff 4f       	sbci	r31, 0xFF	; 255
    4528:	80 81       	ld	r24, Z
    452a:	91 81       	ldd	r25, Z+1	; 0x01
    452c:	00 97       	sbiw	r24, 0x00	; 0
    452e:	d1 f6       	brne	.-76     	; 0x44e4 <SM_U8LoginSys+0xcda>
    4530:	27 c0       	rjmp	.+78     	; 0x4580 <SM_U8LoginSys+0xd76>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4532:	8e 01       	movw	r16, r28
    4534:	09 59       	subi	r16, 0x99	; 153
    4536:	1f 4f       	sbci	r17, 0xFF	; 255
    4538:	fe 01       	movw	r30, r28
    453a:	e7 59       	subi	r30, 0x97	; 151
    453c:	ff 4f       	sbci	r31, 0xFF	; 255
    453e:	60 81       	ld	r22, Z
    4540:	71 81       	ldd	r23, Z+1	; 0x01
    4542:	82 81       	ldd	r24, Z+2	; 0x02
    4544:	93 81       	ldd	r25, Z+3	; 0x03
    4546:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    454a:	dc 01       	movw	r26, r24
    454c:	cb 01       	movw	r24, r22
    454e:	f8 01       	movw	r30, r16
    4550:	91 83       	std	Z+1, r25	; 0x01
    4552:	80 83       	st	Z, r24
    4554:	de 01       	movw	r26, r28
    4556:	ad 59       	subi	r26, 0x9D	; 157
    4558:	bf 4f       	sbci	r27, 0xFF	; 255
    455a:	fe 01       	movw	r30, r28
    455c:	e9 59       	subi	r30, 0x99	; 153
    455e:	ff 4f       	sbci	r31, 0xFF	; 255
    4560:	80 81       	ld	r24, Z
    4562:	91 81       	ldd	r25, Z+1	; 0x01
    4564:	8d 93       	st	X+, r24
    4566:	9c 93       	st	X, r25
    4568:	fe 01       	movw	r30, r28
    456a:	ed 59       	subi	r30, 0x9D	; 157
    456c:	ff 4f       	sbci	r31, 0xFF	; 255
    456e:	80 81       	ld	r24, Z
    4570:	91 81       	ldd	r25, Z+1	; 0x01
    4572:	01 97       	sbiw	r24, 0x01	; 1
    4574:	f1 f7       	brne	.-4      	; 0x4572 <SM_U8LoginSys+0xd68>
    4576:	fe 01       	movw	r30, r28
    4578:	ed 59       	subi	r30, 0x9D	; 157
    457a:	ff 4f       	sbci	r31, 0xFF	; 255
    457c:	91 83       	std	Z+1, r25	; 0x01
    457e:	80 83       	st	Z, r24
						_delay_ms(700);
						LCD_VoidSendCommand(1);
    4580:	81 e0       	ldi	r24, 0x01	; 1
    4582:	0e 94 4d 0f 	call	0x1e9a	; 0x1e9a <LCD_VoidSendCommand>
						if(i==2)
    4586:	fe 01       	movw	r30, r28
    4588:	ec 52       	subi	r30, 0x2C	; 44
    458a:	ff 4f       	sbci	r31, 0xFF	; 255
    458c:	80 81       	ld	r24, Z
    458e:	82 30       	cpi	r24, 0x02	; 2
    4590:	09 f0       	breq	.+2      	; 0x4594 <SM_U8LoginSys+0xd8a>
    4592:	d4 c0       	rjmp	.+424    	; 0x473c <SM_U8LoginSys+0xf32>
						{
							LCD_VoidGoToRowCol(1,0);
    4594:	81 e0       	ldi	r24, 0x01	; 1
    4596:	60 e0       	ldi	r22, 0x00	; 0
    4598:	0e 94 4c 17 	call	0x2e98	; 0x2e98 <LCD_VoidGoToRowCol>
							LCD_u8WriteString("U entered 3 times WRONG");
    459c:	8a ed       	ldi	r24, 0xDA	; 218
    459e:	90 e0       	ldi	r25, 0x00	; 0
    45a0:	0e 94 04 18 	call	0x3008	; 0x3008 <LCD_u8WriteString>

							DIO_U8SetPinDirection(DIO_PORTC,DIO_PIN7,DIO_HIGH);
    45a4:	82 e0       	ldi	r24, 0x02	; 2
    45a6:	67 e0       	ldi	r22, 0x07	; 7
    45a8:	41 e0       	ldi	r20, 0x01	; 1
    45aa:	0e 94 75 07 	call	0xeea	; 0xeea <DIO_U8SetPinDirection>
							DIO_U8SetPinValue(DIO_PORTC,DIO_PIN7,DIO_HIGH);
    45ae:	82 e0       	ldi	r24, 0x02	; 2
    45b0:	67 e0       	ldi	r22, 0x07	; 7
    45b2:	41 e0       	ldi	r20, 0x01	; 1
    45b4:	0e 94 8e 08 	call	0x111c	; 0x111c <DIO_U8SetPinValue>
    45b8:	fe 01       	movw	r30, r28
    45ba:	e1 5a       	subi	r30, 0xA1	; 161
    45bc:	ff 4f       	sbci	r31, 0xFF	; 255
    45be:	80 e0       	ldi	r24, 0x00	; 0
    45c0:	90 e0       	ldi	r25, 0x00	; 0
    45c2:	aa ef       	ldi	r26, 0xFA	; 250
    45c4:	b3 e4       	ldi	r27, 0x43	; 67
    45c6:	80 83       	st	Z, r24
    45c8:	91 83       	std	Z+1, r25	; 0x01
    45ca:	a2 83       	std	Z+2, r26	; 0x02
    45cc:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    45ce:	8e 01       	movw	r16, r28
    45d0:	05 5a       	subi	r16, 0xA5	; 165
    45d2:	1f 4f       	sbci	r17, 0xFF	; 255
    45d4:	fe 01       	movw	r30, r28
    45d6:	e1 5a       	subi	r30, 0xA1	; 161
    45d8:	ff 4f       	sbci	r31, 0xFF	; 255
    45da:	60 81       	ld	r22, Z
    45dc:	71 81       	ldd	r23, Z+1	; 0x01
    45de:	82 81       	ldd	r24, Z+2	; 0x02
    45e0:	93 81       	ldd	r25, Z+3	; 0x03
    45e2:	20 e0       	ldi	r18, 0x00	; 0
    45e4:	30 e0       	ldi	r19, 0x00	; 0
    45e6:	4a ef       	ldi	r20, 0xFA	; 250
    45e8:	54 e4       	ldi	r21, 0x44	; 68
    45ea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    45ee:	dc 01       	movw	r26, r24
    45f0:	cb 01       	movw	r24, r22
    45f2:	f8 01       	movw	r30, r16
    45f4:	80 83       	st	Z, r24
    45f6:	91 83       	std	Z+1, r25	; 0x01
    45f8:	a2 83       	std	Z+2, r26	; 0x02
    45fa:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    45fc:	fe 01       	movw	r30, r28
    45fe:	e5 5a       	subi	r30, 0xA5	; 165
    4600:	ff 4f       	sbci	r31, 0xFF	; 255
    4602:	60 81       	ld	r22, Z
    4604:	71 81       	ldd	r23, Z+1	; 0x01
    4606:	82 81       	ldd	r24, Z+2	; 0x02
    4608:	93 81       	ldd	r25, Z+3	; 0x03
    460a:	20 e0       	ldi	r18, 0x00	; 0
    460c:	30 e0       	ldi	r19, 0x00	; 0
    460e:	40 e8       	ldi	r20, 0x80	; 128
    4610:	5f e3       	ldi	r21, 0x3F	; 63
    4612:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4616:	88 23       	and	r24, r24
    4618:	44 f4       	brge	.+16     	; 0x462a <SM_U8LoginSys+0xe20>
		__ticks = 1;
    461a:	fe 01       	movw	r30, r28
    461c:	e7 5a       	subi	r30, 0xA7	; 167
    461e:	ff 4f       	sbci	r31, 0xFF	; 255
    4620:	81 e0       	ldi	r24, 0x01	; 1
    4622:	90 e0       	ldi	r25, 0x00	; 0
    4624:	91 83       	std	Z+1, r25	; 0x01
    4626:	80 83       	st	Z, r24
    4628:	64 c0       	rjmp	.+200    	; 0x46f2 <SM_U8LoginSys+0xee8>
	else if (__tmp > 65535)
    462a:	fe 01       	movw	r30, r28
    462c:	e5 5a       	subi	r30, 0xA5	; 165
    462e:	ff 4f       	sbci	r31, 0xFF	; 255
    4630:	60 81       	ld	r22, Z
    4632:	71 81       	ldd	r23, Z+1	; 0x01
    4634:	82 81       	ldd	r24, Z+2	; 0x02
    4636:	93 81       	ldd	r25, Z+3	; 0x03
    4638:	20 e0       	ldi	r18, 0x00	; 0
    463a:	3f ef       	ldi	r19, 0xFF	; 255
    463c:	4f e7       	ldi	r20, 0x7F	; 127
    463e:	57 e4       	ldi	r21, 0x47	; 71
    4640:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4644:	18 16       	cp	r1, r24
    4646:	0c f0       	brlt	.+2      	; 0x464a <SM_U8LoginSys+0xe40>
    4648:	43 c0       	rjmp	.+134    	; 0x46d0 <SM_U8LoginSys+0xec6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    464a:	fe 01       	movw	r30, r28
    464c:	e1 5a       	subi	r30, 0xA1	; 161
    464e:	ff 4f       	sbci	r31, 0xFF	; 255
    4650:	60 81       	ld	r22, Z
    4652:	71 81       	ldd	r23, Z+1	; 0x01
    4654:	82 81       	ldd	r24, Z+2	; 0x02
    4656:	93 81       	ldd	r25, Z+3	; 0x03
    4658:	20 e0       	ldi	r18, 0x00	; 0
    465a:	30 e0       	ldi	r19, 0x00	; 0
    465c:	40 e2       	ldi	r20, 0x20	; 32
    465e:	51 e4       	ldi	r21, 0x41	; 65
    4660:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4664:	dc 01       	movw	r26, r24
    4666:	cb 01       	movw	r24, r22
    4668:	8e 01       	movw	r16, r28
    466a:	07 5a       	subi	r16, 0xA7	; 167
    466c:	1f 4f       	sbci	r17, 0xFF	; 255
    466e:	bc 01       	movw	r22, r24
    4670:	cd 01       	movw	r24, r26
    4672:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4676:	dc 01       	movw	r26, r24
    4678:	cb 01       	movw	r24, r22
    467a:	f8 01       	movw	r30, r16
    467c:	91 83       	std	Z+1, r25	; 0x01
    467e:	80 83       	st	Z, r24
    4680:	1f c0       	rjmp	.+62     	; 0x46c0 <SM_U8LoginSys+0xeb6>
    4682:	fe 01       	movw	r30, r28
    4684:	e9 5a       	subi	r30, 0xA9	; 169
    4686:	ff 4f       	sbci	r31, 0xFF	; 255
    4688:	88 ec       	ldi	r24, 0xC8	; 200
    468a:	90 e0       	ldi	r25, 0x00	; 0
    468c:	91 83       	std	Z+1, r25	; 0x01
    468e:	80 83       	st	Z, r24
    4690:	fe 01       	movw	r30, r28
    4692:	e9 5a       	subi	r30, 0xA9	; 169
    4694:	ff 4f       	sbci	r31, 0xFF	; 255
    4696:	80 81       	ld	r24, Z
    4698:	91 81       	ldd	r25, Z+1	; 0x01
    469a:	01 97       	sbiw	r24, 0x01	; 1
    469c:	f1 f7       	brne	.-4      	; 0x469a <SM_U8LoginSys+0xe90>
    469e:	fe 01       	movw	r30, r28
    46a0:	e9 5a       	subi	r30, 0xA9	; 169
    46a2:	ff 4f       	sbci	r31, 0xFF	; 255
    46a4:	91 83       	std	Z+1, r25	; 0x01
    46a6:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    46a8:	de 01       	movw	r26, r28
    46aa:	a7 5a       	subi	r26, 0xA7	; 167
    46ac:	bf 4f       	sbci	r27, 0xFF	; 255
    46ae:	fe 01       	movw	r30, r28
    46b0:	e7 5a       	subi	r30, 0xA7	; 167
    46b2:	ff 4f       	sbci	r31, 0xFF	; 255
    46b4:	80 81       	ld	r24, Z
    46b6:	91 81       	ldd	r25, Z+1	; 0x01
    46b8:	01 97       	sbiw	r24, 0x01	; 1
    46ba:	11 96       	adiw	r26, 0x01	; 1
    46bc:	9c 93       	st	X, r25
    46be:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    46c0:	fe 01       	movw	r30, r28
    46c2:	e7 5a       	subi	r30, 0xA7	; 167
    46c4:	ff 4f       	sbci	r31, 0xFF	; 255
    46c6:	80 81       	ld	r24, Z
    46c8:	91 81       	ldd	r25, Z+1	; 0x01
    46ca:	00 97       	sbiw	r24, 0x00	; 0
    46cc:	d1 f6       	brne	.-76     	; 0x4682 <SM_U8LoginSys+0xe78>
    46ce:	27 c0       	rjmp	.+78     	; 0x471e <SM_U8LoginSys+0xf14>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    46d0:	8e 01       	movw	r16, r28
    46d2:	07 5a       	subi	r16, 0xA7	; 167
    46d4:	1f 4f       	sbci	r17, 0xFF	; 255
    46d6:	fe 01       	movw	r30, r28
    46d8:	e5 5a       	subi	r30, 0xA5	; 165
    46da:	ff 4f       	sbci	r31, 0xFF	; 255
    46dc:	60 81       	ld	r22, Z
    46de:	71 81       	ldd	r23, Z+1	; 0x01
    46e0:	82 81       	ldd	r24, Z+2	; 0x02
    46e2:	93 81       	ldd	r25, Z+3	; 0x03
    46e4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    46e8:	dc 01       	movw	r26, r24
    46ea:	cb 01       	movw	r24, r22
    46ec:	f8 01       	movw	r30, r16
    46ee:	91 83       	std	Z+1, r25	; 0x01
    46f0:	80 83       	st	Z, r24
    46f2:	de 01       	movw	r26, r28
    46f4:	ab 5a       	subi	r26, 0xAB	; 171
    46f6:	bf 4f       	sbci	r27, 0xFF	; 255
    46f8:	fe 01       	movw	r30, r28
    46fa:	e7 5a       	subi	r30, 0xA7	; 167
    46fc:	ff 4f       	sbci	r31, 0xFF	; 255
    46fe:	80 81       	ld	r24, Z
    4700:	91 81       	ldd	r25, Z+1	; 0x01
    4702:	8d 93       	st	X+, r24
    4704:	9c 93       	st	X, r25
    4706:	fe 01       	movw	r30, r28
    4708:	eb 5a       	subi	r30, 0xAB	; 171
    470a:	ff 4f       	sbci	r31, 0xFF	; 255
    470c:	80 81       	ld	r24, Z
    470e:	91 81       	ldd	r25, Z+1	; 0x01
    4710:	01 97       	sbiw	r24, 0x01	; 1
    4712:	f1 f7       	brne	.-4      	; 0x4710 <SM_U8LoginSys+0xf06>
    4714:	fe 01       	movw	r30, r28
    4716:	eb 5a       	subi	r30, 0xAB	; 171
    4718:	ff 4f       	sbci	r31, 0xFF	; 255
    471a:	91 83       	std	Z+1, r25	; 0x01
    471c:	80 83       	st	Z, r24
							_delay_ms(500);
							DIO_U8SetPinValue(DIO_PORTC,DIO_PIN7,DIO_LOW);
    471e:	82 e0       	ldi	r24, 0x02	; 2
    4720:	67 e0       	ldi	r22, 0x07	; 7
    4722:	40 e0       	ldi	r20, 0x00	; 0
    4724:	0e 94 8e 08 	call	0x111c	; 0x111c <DIO_U8SetPinValue>
							Local_U8ErrorState = ERROR_STATE_NOK;
    4728:	10 92 24 03 	sts	0x0324, r1
							 return Local_U8ErrorState;
    472c:	f0 91 24 03 	lds	r31, 0x0324
    4730:	ca 52       	subi	r28, 0x2A	; 42
    4732:	df 4f       	sbci	r29, 0xFF	; 255
    4734:	f8 83       	st	Y, r31
    4736:	c6 5d       	subi	r28, 0xD6	; 214
    4738:	d0 40       	sbci	r29, 0x00	; 0
    473a:	a0 c3       	rjmp	.+1856   	; 0x4e7c <SM_U8LoginSys+0x1672>
				LCD_VoidGoToRowCol(1,0);
				LCD_u8WriteString("WELCOME USER_1");

				_delay_ms(1000);
				LCD_VoidSendCommand(1);
					for(u8 i=0;i<3;i++)
    473c:	de 01       	movw	r26, r28
    473e:	ac 52       	subi	r26, 0x2C	; 44
    4740:	bf 4f       	sbci	r27, 0xFF	; 255
    4742:	fe 01       	movw	r30, r28
    4744:	ec 52       	subi	r30, 0x2C	; 44
    4746:	ff 4f       	sbci	r31, 0xFF	; 255
    4748:	80 81       	ld	r24, Z
    474a:	8f 5f       	subi	r24, 0xFF	; 255
    474c:	8c 93       	st	X, r24
    474e:	fe 01       	movw	r30, r28
    4750:	ec 52       	subi	r30, 0x2C	; 44
    4752:	ff 4f       	sbci	r31, 0xFF	; 255
    4754:	80 81       	ld	r24, Z
    4756:	83 30       	cpi	r24, 0x03	; 3
    4758:	08 f4       	brcc	.+2      	; 0x475c <SM_U8LoginSys+0xf52>
    475a:	7b cd       	rjmp	.-1290   	; 0x4252 <SM_U8LoginSys+0xa48>
    475c:	1a c9       	rjmp	.-3532   	; 0x3992 <SM_U8LoginSys+0x188>
					}
				}
			} break;
			case '2':
			{
				LCD_VoidGoToRowCol(1,0);
    475e:	81 e0       	ldi	r24, 0x01	; 1
    4760:	60 e0       	ldi	r22, 0x00	; 0
    4762:	0e 94 4c 17 	call	0x2e98	; 0x2e98 <LCD_VoidGoToRowCol>
				LCD_u8WriteString("WELCOME USER_2");
    4766:	8e e0       	ldi	r24, 0x0E	; 14
    4768:	91 e0       	ldi	r25, 0x01	; 1
    476a:	0e 94 04 18 	call	0x3008	; 0x3008 <LCD_u8WriteString>
    476e:	fe 01       	movw	r30, r28
    4770:	ef 5a       	subi	r30, 0xAF	; 175
    4772:	ff 4f       	sbci	r31, 0xFF	; 255
    4774:	80 e0       	ldi	r24, 0x00	; 0
    4776:	90 e0       	ldi	r25, 0x00	; 0
    4778:	aa e7       	ldi	r26, 0x7A	; 122
    477a:	b4 e4       	ldi	r27, 0x44	; 68
    477c:	80 83       	st	Z, r24
    477e:	91 83       	std	Z+1, r25	; 0x01
    4780:	a2 83       	std	Z+2, r26	; 0x02
    4782:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4784:	8e 01       	movw	r16, r28
    4786:	03 5b       	subi	r16, 0xB3	; 179
    4788:	1f 4f       	sbci	r17, 0xFF	; 255
    478a:	fe 01       	movw	r30, r28
    478c:	ef 5a       	subi	r30, 0xAF	; 175
    478e:	ff 4f       	sbci	r31, 0xFF	; 255
    4790:	60 81       	ld	r22, Z
    4792:	71 81       	ldd	r23, Z+1	; 0x01
    4794:	82 81       	ldd	r24, Z+2	; 0x02
    4796:	93 81       	ldd	r25, Z+3	; 0x03
    4798:	20 e0       	ldi	r18, 0x00	; 0
    479a:	30 e0       	ldi	r19, 0x00	; 0
    479c:	4a ef       	ldi	r20, 0xFA	; 250
    479e:	54 e4       	ldi	r21, 0x44	; 68
    47a0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    47a4:	dc 01       	movw	r26, r24
    47a6:	cb 01       	movw	r24, r22
    47a8:	f8 01       	movw	r30, r16
    47aa:	80 83       	st	Z, r24
    47ac:	91 83       	std	Z+1, r25	; 0x01
    47ae:	a2 83       	std	Z+2, r26	; 0x02
    47b0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    47b2:	fe 01       	movw	r30, r28
    47b4:	e3 5b       	subi	r30, 0xB3	; 179
    47b6:	ff 4f       	sbci	r31, 0xFF	; 255
    47b8:	60 81       	ld	r22, Z
    47ba:	71 81       	ldd	r23, Z+1	; 0x01
    47bc:	82 81       	ldd	r24, Z+2	; 0x02
    47be:	93 81       	ldd	r25, Z+3	; 0x03
    47c0:	20 e0       	ldi	r18, 0x00	; 0
    47c2:	30 e0       	ldi	r19, 0x00	; 0
    47c4:	40 e8       	ldi	r20, 0x80	; 128
    47c6:	5f e3       	ldi	r21, 0x3F	; 63
    47c8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    47cc:	88 23       	and	r24, r24
    47ce:	44 f4       	brge	.+16     	; 0x47e0 <SM_U8LoginSys+0xfd6>
		__ticks = 1;
    47d0:	fe 01       	movw	r30, r28
    47d2:	e5 5b       	subi	r30, 0xB5	; 181
    47d4:	ff 4f       	sbci	r31, 0xFF	; 255
    47d6:	81 e0       	ldi	r24, 0x01	; 1
    47d8:	90 e0       	ldi	r25, 0x00	; 0
    47da:	91 83       	std	Z+1, r25	; 0x01
    47dc:	80 83       	st	Z, r24
    47de:	64 c0       	rjmp	.+200    	; 0x48a8 <SM_U8LoginSys+0x109e>
	else if (__tmp > 65535)
    47e0:	fe 01       	movw	r30, r28
    47e2:	e3 5b       	subi	r30, 0xB3	; 179
    47e4:	ff 4f       	sbci	r31, 0xFF	; 255
    47e6:	60 81       	ld	r22, Z
    47e8:	71 81       	ldd	r23, Z+1	; 0x01
    47ea:	82 81       	ldd	r24, Z+2	; 0x02
    47ec:	93 81       	ldd	r25, Z+3	; 0x03
    47ee:	20 e0       	ldi	r18, 0x00	; 0
    47f0:	3f ef       	ldi	r19, 0xFF	; 255
    47f2:	4f e7       	ldi	r20, 0x7F	; 127
    47f4:	57 e4       	ldi	r21, 0x47	; 71
    47f6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    47fa:	18 16       	cp	r1, r24
    47fc:	0c f0       	brlt	.+2      	; 0x4800 <SM_U8LoginSys+0xff6>
    47fe:	43 c0       	rjmp	.+134    	; 0x4886 <SM_U8LoginSys+0x107c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4800:	fe 01       	movw	r30, r28
    4802:	ef 5a       	subi	r30, 0xAF	; 175
    4804:	ff 4f       	sbci	r31, 0xFF	; 255
    4806:	60 81       	ld	r22, Z
    4808:	71 81       	ldd	r23, Z+1	; 0x01
    480a:	82 81       	ldd	r24, Z+2	; 0x02
    480c:	93 81       	ldd	r25, Z+3	; 0x03
    480e:	20 e0       	ldi	r18, 0x00	; 0
    4810:	30 e0       	ldi	r19, 0x00	; 0
    4812:	40 e2       	ldi	r20, 0x20	; 32
    4814:	51 e4       	ldi	r21, 0x41	; 65
    4816:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    481a:	dc 01       	movw	r26, r24
    481c:	cb 01       	movw	r24, r22
    481e:	8e 01       	movw	r16, r28
    4820:	05 5b       	subi	r16, 0xB5	; 181
    4822:	1f 4f       	sbci	r17, 0xFF	; 255
    4824:	bc 01       	movw	r22, r24
    4826:	cd 01       	movw	r24, r26
    4828:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    482c:	dc 01       	movw	r26, r24
    482e:	cb 01       	movw	r24, r22
    4830:	f8 01       	movw	r30, r16
    4832:	91 83       	std	Z+1, r25	; 0x01
    4834:	80 83       	st	Z, r24
    4836:	1f c0       	rjmp	.+62     	; 0x4876 <SM_U8LoginSys+0x106c>
    4838:	fe 01       	movw	r30, r28
    483a:	e7 5b       	subi	r30, 0xB7	; 183
    483c:	ff 4f       	sbci	r31, 0xFF	; 255
    483e:	88 ec       	ldi	r24, 0xC8	; 200
    4840:	90 e0       	ldi	r25, 0x00	; 0
    4842:	91 83       	std	Z+1, r25	; 0x01
    4844:	80 83       	st	Z, r24
    4846:	fe 01       	movw	r30, r28
    4848:	e7 5b       	subi	r30, 0xB7	; 183
    484a:	ff 4f       	sbci	r31, 0xFF	; 255
    484c:	80 81       	ld	r24, Z
    484e:	91 81       	ldd	r25, Z+1	; 0x01
    4850:	01 97       	sbiw	r24, 0x01	; 1
    4852:	f1 f7       	brne	.-4      	; 0x4850 <SM_U8LoginSys+0x1046>
    4854:	fe 01       	movw	r30, r28
    4856:	e7 5b       	subi	r30, 0xB7	; 183
    4858:	ff 4f       	sbci	r31, 0xFF	; 255
    485a:	91 83       	std	Z+1, r25	; 0x01
    485c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    485e:	de 01       	movw	r26, r28
    4860:	a5 5b       	subi	r26, 0xB5	; 181
    4862:	bf 4f       	sbci	r27, 0xFF	; 255
    4864:	fe 01       	movw	r30, r28
    4866:	e5 5b       	subi	r30, 0xB5	; 181
    4868:	ff 4f       	sbci	r31, 0xFF	; 255
    486a:	80 81       	ld	r24, Z
    486c:	91 81       	ldd	r25, Z+1	; 0x01
    486e:	01 97       	sbiw	r24, 0x01	; 1
    4870:	11 96       	adiw	r26, 0x01	; 1
    4872:	9c 93       	st	X, r25
    4874:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4876:	fe 01       	movw	r30, r28
    4878:	e5 5b       	subi	r30, 0xB5	; 181
    487a:	ff 4f       	sbci	r31, 0xFF	; 255
    487c:	80 81       	ld	r24, Z
    487e:	91 81       	ldd	r25, Z+1	; 0x01
    4880:	00 97       	sbiw	r24, 0x00	; 0
    4882:	d1 f6       	brne	.-76     	; 0x4838 <SM_U8LoginSys+0x102e>
    4884:	27 c0       	rjmp	.+78     	; 0x48d4 <SM_U8LoginSys+0x10ca>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4886:	8e 01       	movw	r16, r28
    4888:	05 5b       	subi	r16, 0xB5	; 181
    488a:	1f 4f       	sbci	r17, 0xFF	; 255
    488c:	fe 01       	movw	r30, r28
    488e:	e3 5b       	subi	r30, 0xB3	; 179
    4890:	ff 4f       	sbci	r31, 0xFF	; 255
    4892:	60 81       	ld	r22, Z
    4894:	71 81       	ldd	r23, Z+1	; 0x01
    4896:	82 81       	ldd	r24, Z+2	; 0x02
    4898:	93 81       	ldd	r25, Z+3	; 0x03
    489a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    489e:	dc 01       	movw	r26, r24
    48a0:	cb 01       	movw	r24, r22
    48a2:	f8 01       	movw	r30, r16
    48a4:	91 83       	std	Z+1, r25	; 0x01
    48a6:	80 83       	st	Z, r24
    48a8:	de 01       	movw	r26, r28
    48aa:	a9 5b       	subi	r26, 0xB9	; 185
    48ac:	bf 4f       	sbci	r27, 0xFF	; 255
    48ae:	fe 01       	movw	r30, r28
    48b0:	e5 5b       	subi	r30, 0xB5	; 181
    48b2:	ff 4f       	sbci	r31, 0xFF	; 255
    48b4:	80 81       	ld	r24, Z
    48b6:	91 81       	ldd	r25, Z+1	; 0x01
    48b8:	8d 93       	st	X+, r24
    48ba:	9c 93       	st	X, r25
    48bc:	fe 01       	movw	r30, r28
    48be:	e9 5b       	subi	r30, 0xB9	; 185
    48c0:	ff 4f       	sbci	r31, 0xFF	; 255
    48c2:	80 81       	ld	r24, Z
    48c4:	91 81       	ldd	r25, Z+1	; 0x01
    48c6:	01 97       	sbiw	r24, 0x01	; 1
    48c8:	f1 f7       	brne	.-4      	; 0x48c6 <SM_U8LoginSys+0x10bc>
    48ca:	fe 01       	movw	r30, r28
    48cc:	e9 5b       	subi	r30, 0xB9	; 185
    48ce:	ff 4f       	sbci	r31, 0xFF	; 255
    48d0:	91 83       	std	Z+1, r25	; 0x01
    48d2:	80 83       	st	Z, r24

				_delay_ms(1000);
				LCD_VoidSendCommand(1);
    48d4:	81 e0       	ldi	r24, 0x01	; 1
    48d6:	0e 94 4d 0f 	call	0x1e9a	; 0x1e9a <LCD_VoidSendCommand>
					for(u8 i=0;i<3;i++)
    48da:	fe 01       	movw	r30, r28
    48dc:	ed 52       	subi	r30, 0x2D	; 45
    48de:	ff 4f       	sbci	r31, 0xFF	; 255
    48e0:	10 82       	st	Z, r1
    48e2:	ce c1       	rjmp	.+924    	; 0x4c80 <SM_U8LoginSys+0x1476>
				{

					LCD_u8WriteString("ENTER YOUR PASS");
    48e4:	85 ea       	ldi	r24, 0xA5	; 165
    48e6:	90 e0       	ldi	r25, 0x00	; 0
    48e8:	0e 94 04 18 	call	0x3008	; 0x3008 <LCD_u8WriteString>
    48ec:	fe 01       	movw	r30, r28
    48ee:	ed 5b       	subi	r30, 0xBD	; 189
    48f0:	ff 4f       	sbci	r31, 0xFF	; 255
    48f2:	80 e0       	ldi	r24, 0x00	; 0
    48f4:	90 e0       	ldi	r25, 0x00	; 0
    48f6:	af e2       	ldi	r26, 0x2F	; 47
    48f8:	b4 e4       	ldi	r27, 0x44	; 68
    48fa:	80 83       	st	Z, r24
    48fc:	91 83       	std	Z+1, r25	; 0x01
    48fe:	a2 83       	std	Z+2, r26	; 0x02
    4900:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4902:	8e 01       	movw	r16, r28
    4904:	01 5c       	subi	r16, 0xC1	; 193
    4906:	1f 4f       	sbci	r17, 0xFF	; 255
    4908:	fe 01       	movw	r30, r28
    490a:	ed 5b       	subi	r30, 0xBD	; 189
    490c:	ff 4f       	sbci	r31, 0xFF	; 255
    490e:	60 81       	ld	r22, Z
    4910:	71 81       	ldd	r23, Z+1	; 0x01
    4912:	82 81       	ldd	r24, Z+2	; 0x02
    4914:	93 81       	ldd	r25, Z+3	; 0x03
    4916:	20 e0       	ldi	r18, 0x00	; 0
    4918:	30 e0       	ldi	r19, 0x00	; 0
    491a:	4a ef       	ldi	r20, 0xFA	; 250
    491c:	54 e4       	ldi	r21, 0x44	; 68
    491e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4922:	dc 01       	movw	r26, r24
    4924:	cb 01       	movw	r24, r22
    4926:	f8 01       	movw	r30, r16
    4928:	80 83       	st	Z, r24
    492a:	91 83       	std	Z+1, r25	; 0x01
    492c:	a2 83       	std	Z+2, r26	; 0x02
    492e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4930:	fe 01       	movw	r30, r28
    4932:	ff 96       	adiw	r30, 0x3f	; 63
    4934:	60 81       	ld	r22, Z
    4936:	71 81       	ldd	r23, Z+1	; 0x01
    4938:	82 81       	ldd	r24, Z+2	; 0x02
    493a:	93 81       	ldd	r25, Z+3	; 0x03
    493c:	20 e0       	ldi	r18, 0x00	; 0
    493e:	30 e0       	ldi	r19, 0x00	; 0
    4940:	40 e8       	ldi	r20, 0x80	; 128
    4942:	5f e3       	ldi	r21, 0x3F	; 63
    4944:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4948:	88 23       	and	r24, r24
    494a:	2c f4       	brge	.+10     	; 0x4956 <SM_U8LoginSys+0x114c>
		__ticks = 1;
    494c:	81 e0       	ldi	r24, 0x01	; 1
    494e:	90 e0       	ldi	r25, 0x00	; 0
    4950:	9e af       	std	Y+62, r25	; 0x3e
    4952:	8d af       	std	Y+61, r24	; 0x3d
    4954:	46 c0       	rjmp	.+140    	; 0x49e2 <SM_U8LoginSys+0x11d8>
	else if (__tmp > 65535)
    4956:	fe 01       	movw	r30, r28
    4958:	ff 96       	adiw	r30, 0x3f	; 63
    495a:	60 81       	ld	r22, Z
    495c:	71 81       	ldd	r23, Z+1	; 0x01
    495e:	82 81       	ldd	r24, Z+2	; 0x02
    4960:	93 81       	ldd	r25, Z+3	; 0x03
    4962:	20 e0       	ldi	r18, 0x00	; 0
    4964:	3f ef       	ldi	r19, 0xFF	; 255
    4966:	4f e7       	ldi	r20, 0x7F	; 127
    4968:	57 e4       	ldi	r21, 0x47	; 71
    496a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    496e:	18 16       	cp	r1, r24
    4970:	64 f5       	brge	.+88     	; 0x49ca <SM_U8LoginSys+0x11c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4972:	fe 01       	movw	r30, r28
    4974:	ed 5b       	subi	r30, 0xBD	; 189
    4976:	ff 4f       	sbci	r31, 0xFF	; 255
    4978:	60 81       	ld	r22, Z
    497a:	71 81       	ldd	r23, Z+1	; 0x01
    497c:	82 81       	ldd	r24, Z+2	; 0x02
    497e:	93 81       	ldd	r25, Z+3	; 0x03
    4980:	20 e0       	ldi	r18, 0x00	; 0
    4982:	30 e0       	ldi	r19, 0x00	; 0
    4984:	40 e2       	ldi	r20, 0x20	; 32
    4986:	51 e4       	ldi	r21, 0x41	; 65
    4988:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    498c:	dc 01       	movw	r26, r24
    498e:	cb 01       	movw	r24, r22
    4990:	bc 01       	movw	r22, r24
    4992:	cd 01       	movw	r24, r26
    4994:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4998:	dc 01       	movw	r26, r24
    499a:	cb 01       	movw	r24, r22
    499c:	9e af       	std	Y+62, r25	; 0x3e
    499e:	8d af       	std	Y+61, r24	; 0x3d
    49a0:	0f c0       	rjmp	.+30     	; 0x49c0 <SM_U8LoginSys+0x11b6>
    49a2:	88 ec       	ldi	r24, 0xC8	; 200
    49a4:	90 e0       	ldi	r25, 0x00	; 0
    49a6:	9c af       	std	Y+60, r25	; 0x3c
    49a8:	8b af       	std	Y+59, r24	; 0x3b
    49aa:	8b ad       	ldd	r24, Y+59	; 0x3b
    49ac:	9c ad       	ldd	r25, Y+60	; 0x3c
    49ae:	01 97       	sbiw	r24, 0x01	; 1
    49b0:	f1 f7       	brne	.-4      	; 0x49ae <SM_U8LoginSys+0x11a4>
    49b2:	9c af       	std	Y+60, r25	; 0x3c
    49b4:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    49b6:	8d ad       	ldd	r24, Y+61	; 0x3d
    49b8:	9e ad       	ldd	r25, Y+62	; 0x3e
    49ba:	01 97       	sbiw	r24, 0x01	; 1
    49bc:	9e af       	std	Y+62, r25	; 0x3e
    49be:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    49c0:	8d ad       	ldd	r24, Y+61	; 0x3d
    49c2:	9e ad       	ldd	r25, Y+62	; 0x3e
    49c4:	00 97       	sbiw	r24, 0x00	; 0
    49c6:	69 f7       	brne	.-38     	; 0x49a2 <SM_U8LoginSys+0x1198>
    49c8:	16 c0       	rjmp	.+44     	; 0x49f6 <SM_U8LoginSys+0x11ec>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    49ca:	fe 01       	movw	r30, r28
    49cc:	ff 96       	adiw	r30, 0x3f	; 63
    49ce:	60 81       	ld	r22, Z
    49d0:	71 81       	ldd	r23, Z+1	; 0x01
    49d2:	82 81       	ldd	r24, Z+2	; 0x02
    49d4:	93 81       	ldd	r25, Z+3	; 0x03
    49d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    49da:	dc 01       	movw	r26, r24
    49dc:	cb 01       	movw	r24, r22
    49de:	9e af       	std	Y+62, r25	; 0x3e
    49e0:	8d af       	std	Y+61, r24	; 0x3d
    49e2:	8d ad       	ldd	r24, Y+61	; 0x3d
    49e4:	9e ad       	ldd	r25, Y+62	; 0x3e
    49e6:	9a af       	std	Y+58, r25	; 0x3a
    49e8:	89 af       	std	Y+57, r24	; 0x39
    49ea:	89 ad       	ldd	r24, Y+57	; 0x39
    49ec:	9a ad       	ldd	r25, Y+58	; 0x3a
    49ee:	01 97       	sbiw	r24, 0x01	; 1
    49f0:	f1 f7       	brne	.-4      	; 0x49ee <SM_U8LoginSys+0x11e4>
    49f2:	9a af       	std	Y+58, r25	; 0x3a
    49f4:	89 af       	std	Y+57, r24	; 0x39
					_delay_ms(700);
					LCD_VoidGoToRowCol(1,0);
    49f6:	81 e0       	ldi	r24, 0x01	; 1
    49f8:	60 e0       	ldi	r22, 0x00	; 0
    49fa:	0e 94 4c 17 	call	0x2e98	; 0x2e98 <LCD_VoidGoToRowCol>
					User_Pass= SM_U16EnterPassword();
    49fe:	0e 94 4f 27 	call	0x4e9e	; 0x4e9e <SM_U16EnterPassword>
    4a02:	90 93 23 03 	sts	0x0323, r25
    4a06:	80 93 22 03 	sts	0x0322, r24
					if(User_Pass ==3333)
    4a0a:	80 91 22 03 	lds	r24, 0x0322
    4a0e:	90 91 23 03 	lds	r25, 0x0323
    4a12:	fd e0       	ldi	r31, 0x0D	; 13
    4a14:	85 30       	cpi	r24, 0x05	; 5
    4a16:	9f 07       	cpc	r25, r31
    4a18:	79 f4       	brne	.+30     	; 0x4a38 <SM_U8LoginSys+0x122e>
					{

						LCD_u8WriteString("WELCOME MAI");
    4a1a:	8d e1       	ldi	r24, 0x1D	; 29
    4a1c:	91 e0       	ldi	r25, 0x01	; 1
    4a1e:	0e 94 04 18 	call	0x3008	; 0x3008 <LCD_u8WriteString>

						Local_U8ErrorState = ERROR_STATE_OK;
    4a22:	81 e0       	ldi	r24, 0x01	; 1
    4a24:	80 93 24 03 	sts	0x0324, r24
						 return Local_U8ErrorState;
    4a28:	20 91 24 03 	lds	r18, 0x0324
    4a2c:	ca 52       	subi	r28, 0x2A	; 42
    4a2e:	df 4f       	sbci	r29, 0xFF	; 255
    4a30:	28 83       	st	Y, r18
    4a32:	c6 5d       	subi	r28, 0xD6	; 214
    4a34:	d0 40       	sbci	r29, 0x00	; 0
    4a36:	22 c2       	rjmp	.+1092   	; 0x4e7c <SM_U8LoginSys+0x1672>

					}
					else
					{
						LCD_u8WriteString("INCORRECT PASS");
    4a38:	81 ec       	ldi	r24, 0xC1	; 193
    4a3a:	90 e0       	ldi	r25, 0x00	; 0
    4a3c:	0e 94 04 18 	call	0x3008	; 0x3008 <LCD_u8WriteString>
						LCD_VoidGoToRowCol(1,0);
    4a40:	81 e0       	ldi	r24, 0x01	; 1
    4a42:	60 e0       	ldi	r22, 0x00	; 0
    4a44:	0e 94 4c 17 	call	0x2e98	; 0x2e98 <LCD_VoidGoToRowCol>
						LCD_u8WriteString("TRY AGAIN");
    4a48:	80 ed       	ldi	r24, 0xD0	; 208
    4a4a:	90 e0       	ldi	r25, 0x00	; 0
    4a4c:	0e 94 04 18 	call	0x3008	; 0x3008 <LCD_u8WriteString>
    4a50:	80 e0       	ldi	r24, 0x00	; 0
    4a52:	90 e0       	ldi	r25, 0x00	; 0
    4a54:	af e2       	ldi	r26, 0x2F	; 47
    4a56:	b4 e4       	ldi	r27, 0x44	; 68
    4a58:	8d ab       	std	Y+53, r24	; 0x35
    4a5a:	9e ab       	std	Y+54, r25	; 0x36
    4a5c:	af ab       	std	Y+55, r26	; 0x37
    4a5e:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4a60:	6d a9       	ldd	r22, Y+53	; 0x35
    4a62:	7e a9       	ldd	r23, Y+54	; 0x36
    4a64:	8f a9       	ldd	r24, Y+55	; 0x37
    4a66:	98 ad       	ldd	r25, Y+56	; 0x38
    4a68:	20 e0       	ldi	r18, 0x00	; 0
    4a6a:	30 e0       	ldi	r19, 0x00	; 0
    4a6c:	4a ef       	ldi	r20, 0xFA	; 250
    4a6e:	54 e4       	ldi	r21, 0x44	; 68
    4a70:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4a74:	dc 01       	movw	r26, r24
    4a76:	cb 01       	movw	r24, r22
    4a78:	89 ab       	std	Y+49, r24	; 0x31
    4a7a:	9a ab       	std	Y+50, r25	; 0x32
    4a7c:	ab ab       	std	Y+51, r26	; 0x33
    4a7e:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    4a80:	69 a9       	ldd	r22, Y+49	; 0x31
    4a82:	7a a9       	ldd	r23, Y+50	; 0x32
    4a84:	8b a9       	ldd	r24, Y+51	; 0x33
    4a86:	9c a9       	ldd	r25, Y+52	; 0x34
    4a88:	20 e0       	ldi	r18, 0x00	; 0
    4a8a:	30 e0       	ldi	r19, 0x00	; 0
    4a8c:	40 e8       	ldi	r20, 0x80	; 128
    4a8e:	5f e3       	ldi	r21, 0x3F	; 63
    4a90:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4a94:	88 23       	and	r24, r24
    4a96:	2c f4       	brge	.+10     	; 0x4aa2 <SM_U8LoginSys+0x1298>
		__ticks = 1;
    4a98:	81 e0       	ldi	r24, 0x01	; 1
    4a9a:	90 e0       	ldi	r25, 0x00	; 0
    4a9c:	98 ab       	std	Y+48, r25	; 0x30
    4a9e:	8f a7       	std	Y+47, r24	; 0x2f
    4aa0:	3f c0       	rjmp	.+126    	; 0x4b20 <SM_U8LoginSys+0x1316>
	else if (__tmp > 65535)
    4aa2:	69 a9       	ldd	r22, Y+49	; 0x31
    4aa4:	7a a9       	ldd	r23, Y+50	; 0x32
    4aa6:	8b a9       	ldd	r24, Y+51	; 0x33
    4aa8:	9c a9       	ldd	r25, Y+52	; 0x34
    4aaa:	20 e0       	ldi	r18, 0x00	; 0
    4aac:	3f ef       	ldi	r19, 0xFF	; 255
    4aae:	4f e7       	ldi	r20, 0x7F	; 127
    4ab0:	57 e4       	ldi	r21, 0x47	; 71
    4ab2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4ab6:	18 16       	cp	r1, r24
    4ab8:	4c f5       	brge	.+82     	; 0x4b0c <SM_U8LoginSys+0x1302>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4aba:	6d a9       	ldd	r22, Y+53	; 0x35
    4abc:	7e a9       	ldd	r23, Y+54	; 0x36
    4abe:	8f a9       	ldd	r24, Y+55	; 0x37
    4ac0:	98 ad       	ldd	r25, Y+56	; 0x38
    4ac2:	20 e0       	ldi	r18, 0x00	; 0
    4ac4:	30 e0       	ldi	r19, 0x00	; 0
    4ac6:	40 e2       	ldi	r20, 0x20	; 32
    4ac8:	51 e4       	ldi	r21, 0x41	; 65
    4aca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4ace:	dc 01       	movw	r26, r24
    4ad0:	cb 01       	movw	r24, r22
    4ad2:	bc 01       	movw	r22, r24
    4ad4:	cd 01       	movw	r24, r26
    4ad6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4ada:	dc 01       	movw	r26, r24
    4adc:	cb 01       	movw	r24, r22
    4ade:	98 ab       	std	Y+48, r25	; 0x30
    4ae0:	8f a7       	std	Y+47, r24	; 0x2f
    4ae2:	0f c0       	rjmp	.+30     	; 0x4b02 <SM_U8LoginSys+0x12f8>
    4ae4:	88 ec       	ldi	r24, 0xC8	; 200
    4ae6:	90 e0       	ldi	r25, 0x00	; 0
    4ae8:	9e a7       	std	Y+46, r25	; 0x2e
    4aea:	8d a7       	std	Y+45, r24	; 0x2d
    4aec:	8d a5       	ldd	r24, Y+45	; 0x2d
    4aee:	9e a5       	ldd	r25, Y+46	; 0x2e
    4af0:	01 97       	sbiw	r24, 0x01	; 1
    4af2:	f1 f7       	brne	.-4      	; 0x4af0 <SM_U8LoginSys+0x12e6>
    4af4:	9e a7       	std	Y+46, r25	; 0x2e
    4af6:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4af8:	8f a5       	ldd	r24, Y+47	; 0x2f
    4afa:	98 a9       	ldd	r25, Y+48	; 0x30
    4afc:	01 97       	sbiw	r24, 0x01	; 1
    4afe:	98 ab       	std	Y+48, r25	; 0x30
    4b00:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4b02:	8f a5       	ldd	r24, Y+47	; 0x2f
    4b04:	98 a9       	ldd	r25, Y+48	; 0x30
    4b06:	00 97       	sbiw	r24, 0x00	; 0
    4b08:	69 f7       	brne	.-38     	; 0x4ae4 <SM_U8LoginSys+0x12da>
    4b0a:	14 c0       	rjmp	.+40     	; 0x4b34 <SM_U8LoginSys+0x132a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4b0c:	69 a9       	ldd	r22, Y+49	; 0x31
    4b0e:	7a a9       	ldd	r23, Y+50	; 0x32
    4b10:	8b a9       	ldd	r24, Y+51	; 0x33
    4b12:	9c a9       	ldd	r25, Y+52	; 0x34
    4b14:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4b18:	dc 01       	movw	r26, r24
    4b1a:	cb 01       	movw	r24, r22
    4b1c:	98 ab       	std	Y+48, r25	; 0x30
    4b1e:	8f a7       	std	Y+47, r24	; 0x2f
    4b20:	8f a5       	ldd	r24, Y+47	; 0x2f
    4b22:	98 a9       	ldd	r25, Y+48	; 0x30
    4b24:	9c a7       	std	Y+44, r25	; 0x2c
    4b26:	8b a7       	std	Y+43, r24	; 0x2b
    4b28:	8b a5       	ldd	r24, Y+43	; 0x2b
    4b2a:	9c a5       	ldd	r25, Y+44	; 0x2c
    4b2c:	01 97       	sbiw	r24, 0x01	; 1
    4b2e:	f1 f7       	brne	.-4      	; 0x4b2c <SM_U8LoginSys+0x1322>
    4b30:	9c a7       	std	Y+44, r25	; 0x2c
    4b32:	8b a7       	std	Y+43, r24	; 0x2b
						_delay_ms(700);
						LCD_VoidSendCommand(1);
    4b34:	81 e0       	ldi	r24, 0x01	; 1
    4b36:	0e 94 4d 0f 	call	0x1e9a	; 0x1e9a <LCD_VoidSendCommand>
						if(i==2)
    4b3a:	fe 01       	movw	r30, r28
    4b3c:	ed 52       	subi	r30, 0x2D	; 45
    4b3e:	ff 4f       	sbci	r31, 0xFF	; 255
    4b40:	80 81       	ld	r24, Z
    4b42:	82 30       	cpi	r24, 0x02	; 2
    4b44:	09 f0       	breq	.+2      	; 0x4b48 <SM_U8LoginSys+0x133e>
    4b46:	93 c0       	rjmp	.+294    	; 0x4c6e <SM_U8LoginSys+0x1464>
						{
							LCD_VoidGoToRowCol(1,0);
    4b48:	81 e0       	ldi	r24, 0x01	; 1
    4b4a:	60 e0       	ldi	r22, 0x00	; 0
    4b4c:	0e 94 4c 17 	call	0x2e98	; 0x2e98 <LCD_VoidGoToRowCol>
							LCD_u8WriteString("U entered 3 times WRONG");
    4b50:	8a ed       	ldi	r24, 0xDA	; 218
    4b52:	90 e0       	ldi	r25, 0x00	; 0
    4b54:	0e 94 04 18 	call	0x3008	; 0x3008 <LCD_u8WriteString>
							DIO_U8SetPinDirection(DIO_PORTC,DIO_PIN7,DIO_HIGH);
    4b58:	82 e0       	ldi	r24, 0x02	; 2
    4b5a:	67 e0       	ldi	r22, 0x07	; 7
    4b5c:	41 e0       	ldi	r20, 0x01	; 1
    4b5e:	0e 94 75 07 	call	0xeea	; 0xeea <DIO_U8SetPinDirection>
							DIO_U8SetPinValue(DIO_PORTC,DIO_PIN7,DIO_HIGH);
    4b62:	82 e0       	ldi	r24, 0x02	; 2
    4b64:	67 e0       	ldi	r22, 0x07	; 7
    4b66:	41 e0       	ldi	r20, 0x01	; 1
    4b68:	0e 94 8e 08 	call	0x111c	; 0x111c <DIO_U8SetPinValue>
    4b6c:	80 e0       	ldi	r24, 0x00	; 0
    4b6e:	90 e0       	ldi	r25, 0x00	; 0
    4b70:	aa ef       	ldi	r26, 0xFA	; 250
    4b72:	b3 e4       	ldi	r27, 0x43	; 67
    4b74:	8f a3       	std	Y+39, r24	; 0x27
    4b76:	98 a7       	std	Y+40, r25	; 0x28
    4b78:	a9 a7       	std	Y+41, r26	; 0x29
    4b7a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4b7c:	6f a1       	ldd	r22, Y+39	; 0x27
    4b7e:	78 a5       	ldd	r23, Y+40	; 0x28
    4b80:	89 a5       	ldd	r24, Y+41	; 0x29
    4b82:	9a a5       	ldd	r25, Y+42	; 0x2a
    4b84:	20 e0       	ldi	r18, 0x00	; 0
    4b86:	30 e0       	ldi	r19, 0x00	; 0
    4b88:	4a ef       	ldi	r20, 0xFA	; 250
    4b8a:	54 e4       	ldi	r21, 0x44	; 68
    4b8c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4b90:	dc 01       	movw	r26, r24
    4b92:	cb 01       	movw	r24, r22
    4b94:	8b a3       	std	Y+35, r24	; 0x23
    4b96:	9c a3       	std	Y+36, r25	; 0x24
    4b98:	ad a3       	std	Y+37, r26	; 0x25
    4b9a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    4b9c:	6b a1       	ldd	r22, Y+35	; 0x23
    4b9e:	7c a1       	ldd	r23, Y+36	; 0x24
    4ba0:	8d a1       	ldd	r24, Y+37	; 0x25
    4ba2:	9e a1       	ldd	r25, Y+38	; 0x26
    4ba4:	20 e0       	ldi	r18, 0x00	; 0
    4ba6:	30 e0       	ldi	r19, 0x00	; 0
    4ba8:	40 e8       	ldi	r20, 0x80	; 128
    4baa:	5f e3       	ldi	r21, 0x3F	; 63
    4bac:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4bb0:	88 23       	and	r24, r24
    4bb2:	2c f4       	brge	.+10     	; 0x4bbe <SM_U8LoginSys+0x13b4>
		__ticks = 1;
    4bb4:	81 e0       	ldi	r24, 0x01	; 1
    4bb6:	90 e0       	ldi	r25, 0x00	; 0
    4bb8:	9a a3       	std	Y+34, r25	; 0x22
    4bba:	89 a3       	std	Y+33, r24	; 0x21
    4bbc:	3f c0       	rjmp	.+126    	; 0x4c3c <SM_U8LoginSys+0x1432>
	else if (__tmp > 65535)
    4bbe:	6b a1       	ldd	r22, Y+35	; 0x23
    4bc0:	7c a1       	ldd	r23, Y+36	; 0x24
    4bc2:	8d a1       	ldd	r24, Y+37	; 0x25
    4bc4:	9e a1       	ldd	r25, Y+38	; 0x26
    4bc6:	20 e0       	ldi	r18, 0x00	; 0
    4bc8:	3f ef       	ldi	r19, 0xFF	; 255
    4bca:	4f e7       	ldi	r20, 0x7F	; 127
    4bcc:	57 e4       	ldi	r21, 0x47	; 71
    4bce:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4bd2:	18 16       	cp	r1, r24
    4bd4:	4c f5       	brge	.+82     	; 0x4c28 <SM_U8LoginSys+0x141e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4bd6:	6f a1       	ldd	r22, Y+39	; 0x27
    4bd8:	78 a5       	ldd	r23, Y+40	; 0x28
    4bda:	89 a5       	ldd	r24, Y+41	; 0x29
    4bdc:	9a a5       	ldd	r25, Y+42	; 0x2a
    4bde:	20 e0       	ldi	r18, 0x00	; 0
    4be0:	30 e0       	ldi	r19, 0x00	; 0
    4be2:	40 e2       	ldi	r20, 0x20	; 32
    4be4:	51 e4       	ldi	r21, 0x41	; 65
    4be6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4bea:	dc 01       	movw	r26, r24
    4bec:	cb 01       	movw	r24, r22
    4bee:	bc 01       	movw	r22, r24
    4bf0:	cd 01       	movw	r24, r26
    4bf2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4bf6:	dc 01       	movw	r26, r24
    4bf8:	cb 01       	movw	r24, r22
    4bfa:	9a a3       	std	Y+34, r25	; 0x22
    4bfc:	89 a3       	std	Y+33, r24	; 0x21
    4bfe:	0f c0       	rjmp	.+30     	; 0x4c1e <SM_U8LoginSys+0x1414>
    4c00:	88 ec       	ldi	r24, 0xC8	; 200
    4c02:	90 e0       	ldi	r25, 0x00	; 0
    4c04:	98 a3       	std	Y+32, r25	; 0x20
    4c06:	8f 8f       	std	Y+31, r24	; 0x1f
    4c08:	8f 8d       	ldd	r24, Y+31	; 0x1f
    4c0a:	98 a1       	ldd	r25, Y+32	; 0x20
    4c0c:	01 97       	sbiw	r24, 0x01	; 1
    4c0e:	f1 f7       	brne	.-4      	; 0x4c0c <SM_U8LoginSys+0x1402>
    4c10:	98 a3       	std	Y+32, r25	; 0x20
    4c12:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4c14:	89 a1       	ldd	r24, Y+33	; 0x21
    4c16:	9a a1       	ldd	r25, Y+34	; 0x22
    4c18:	01 97       	sbiw	r24, 0x01	; 1
    4c1a:	9a a3       	std	Y+34, r25	; 0x22
    4c1c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4c1e:	89 a1       	ldd	r24, Y+33	; 0x21
    4c20:	9a a1       	ldd	r25, Y+34	; 0x22
    4c22:	00 97       	sbiw	r24, 0x00	; 0
    4c24:	69 f7       	brne	.-38     	; 0x4c00 <SM_U8LoginSys+0x13f6>
    4c26:	14 c0       	rjmp	.+40     	; 0x4c50 <SM_U8LoginSys+0x1446>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4c28:	6b a1       	ldd	r22, Y+35	; 0x23
    4c2a:	7c a1       	ldd	r23, Y+36	; 0x24
    4c2c:	8d a1       	ldd	r24, Y+37	; 0x25
    4c2e:	9e a1       	ldd	r25, Y+38	; 0x26
    4c30:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4c34:	dc 01       	movw	r26, r24
    4c36:	cb 01       	movw	r24, r22
    4c38:	9a a3       	std	Y+34, r25	; 0x22
    4c3a:	89 a3       	std	Y+33, r24	; 0x21
    4c3c:	89 a1       	ldd	r24, Y+33	; 0x21
    4c3e:	9a a1       	ldd	r25, Y+34	; 0x22
    4c40:	9e 8f       	std	Y+30, r25	; 0x1e
    4c42:	8d 8f       	std	Y+29, r24	; 0x1d
    4c44:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4c46:	9e 8d       	ldd	r25, Y+30	; 0x1e
    4c48:	01 97       	sbiw	r24, 0x01	; 1
    4c4a:	f1 f7       	brne	.-4      	; 0x4c48 <SM_U8LoginSys+0x143e>
    4c4c:	9e 8f       	std	Y+30, r25	; 0x1e
    4c4e:	8d 8f       	std	Y+29, r24	; 0x1d
							_delay_ms(500);
							DIO_U8SetPinValue(DIO_PORTC,DIO_PIN7,DIO_LOW);
    4c50:	82 e0       	ldi	r24, 0x02	; 2
    4c52:	67 e0       	ldi	r22, 0x07	; 7
    4c54:	40 e0       	ldi	r20, 0x00	; 0
    4c56:	0e 94 8e 08 	call	0x111c	; 0x111c <DIO_U8SetPinValue>
							Local_U8ErrorState = ERROR_STATE_NOK;
    4c5a:	10 92 24 03 	sts	0x0324, r1
							 return Local_U8ErrorState;
    4c5e:	30 91 24 03 	lds	r19, 0x0324
    4c62:	ca 52       	subi	r28, 0x2A	; 42
    4c64:	df 4f       	sbci	r29, 0xFF	; 255
    4c66:	38 83       	st	Y, r19
    4c68:	c6 5d       	subi	r28, 0xD6	; 214
    4c6a:	d0 40       	sbci	r29, 0x00	; 0
    4c6c:	07 c1       	rjmp	.+526    	; 0x4e7c <SM_U8LoginSys+0x1672>
				LCD_VoidGoToRowCol(1,0);
				LCD_u8WriteString("WELCOME USER_2");

				_delay_ms(1000);
				LCD_VoidSendCommand(1);
					for(u8 i=0;i<3;i++)
    4c6e:	de 01       	movw	r26, r28
    4c70:	ad 52       	subi	r26, 0x2D	; 45
    4c72:	bf 4f       	sbci	r27, 0xFF	; 255
    4c74:	fe 01       	movw	r30, r28
    4c76:	ed 52       	subi	r30, 0x2D	; 45
    4c78:	ff 4f       	sbci	r31, 0xFF	; 255
    4c7a:	80 81       	ld	r24, Z
    4c7c:	8f 5f       	subi	r24, 0xFF	; 255
    4c7e:	8c 93       	st	X, r24
    4c80:	fe 01       	movw	r30, r28
    4c82:	ed 52       	subi	r30, 0x2D	; 45
    4c84:	ff 4f       	sbci	r31, 0xFF	; 255
    4c86:	80 81       	ld	r24, Z
    4c88:	83 30       	cpi	r24, 0x03	; 3
    4c8a:	08 f4       	brcc	.+2      	; 0x4c8e <SM_U8LoginSys+0x1484>
    4c8c:	2b ce       	rjmp	.-938    	; 0x48e4 <SM_U8LoginSys+0x10da>
    4c8e:	0c 94 c9 1c 	jmp	0x3992	; 0x3992 <SM_U8LoginSys+0x188>
							Local_U8ErrorState = ERROR_STATE_NOK;
							 return Local_U8ErrorState;
						}
					}
				}
			} break;
    4c92:	80 e0       	ldi	r24, 0x00	; 0
    4c94:	90 e0       	ldi	r25, 0x00	; 0
    4c96:	a8 e4       	ldi	r26, 0x48	; 72
    4c98:	b2 e4       	ldi	r27, 0x42	; 66
    4c9a:	89 8f       	std	Y+25, r24	; 0x19
    4c9c:	9a 8f       	std	Y+26, r25	; 0x1a
    4c9e:	ab 8f       	std	Y+27, r26	; 0x1b
    4ca0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4ca2:	69 8d       	ldd	r22, Y+25	; 0x19
    4ca4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4ca6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4ca8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4caa:	20 e0       	ldi	r18, 0x00	; 0
    4cac:	30 e0       	ldi	r19, 0x00	; 0
    4cae:	4a ef       	ldi	r20, 0xFA	; 250
    4cb0:	54 e4       	ldi	r21, 0x44	; 68
    4cb2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4cb6:	dc 01       	movw	r26, r24
    4cb8:	cb 01       	movw	r24, r22
    4cba:	8d 8b       	std	Y+21, r24	; 0x15
    4cbc:	9e 8b       	std	Y+22, r25	; 0x16
    4cbe:	af 8b       	std	Y+23, r26	; 0x17
    4cc0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    4cc2:	6d 89       	ldd	r22, Y+21	; 0x15
    4cc4:	7e 89       	ldd	r23, Y+22	; 0x16
    4cc6:	8f 89       	ldd	r24, Y+23	; 0x17
    4cc8:	98 8d       	ldd	r25, Y+24	; 0x18
    4cca:	20 e0       	ldi	r18, 0x00	; 0
    4ccc:	30 e0       	ldi	r19, 0x00	; 0
    4cce:	40 e8       	ldi	r20, 0x80	; 128
    4cd0:	5f e3       	ldi	r21, 0x3F	; 63
    4cd2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4cd6:	88 23       	and	r24, r24
    4cd8:	2c f4       	brge	.+10     	; 0x4ce4 <SM_U8LoginSys+0x14da>
		__ticks = 1;
    4cda:	81 e0       	ldi	r24, 0x01	; 1
    4cdc:	90 e0       	ldi	r25, 0x00	; 0
    4cde:	9c 8b       	std	Y+20, r25	; 0x14
    4ce0:	8b 8b       	std	Y+19, r24	; 0x13
    4ce2:	3f c0       	rjmp	.+126    	; 0x4d62 <SM_U8LoginSys+0x1558>
	else if (__tmp > 65535)
    4ce4:	6d 89       	ldd	r22, Y+21	; 0x15
    4ce6:	7e 89       	ldd	r23, Y+22	; 0x16
    4ce8:	8f 89       	ldd	r24, Y+23	; 0x17
    4cea:	98 8d       	ldd	r25, Y+24	; 0x18
    4cec:	20 e0       	ldi	r18, 0x00	; 0
    4cee:	3f ef       	ldi	r19, 0xFF	; 255
    4cf0:	4f e7       	ldi	r20, 0x7F	; 127
    4cf2:	57 e4       	ldi	r21, 0x47	; 71
    4cf4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4cf8:	18 16       	cp	r1, r24
    4cfa:	4c f5       	brge	.+82     	; 0x4d4e <SM_U8LoginSys+0x1544>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4cfc:	69 8d       	ldd	r22, Y+25	; 0x19
    4cfe:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4d00:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4d02:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4d04:	20 e0       	ldi	r18, 0x00	; 0
    4d06:	30 e0       	ldi	r19, 0x00	; 0
    4d08:	40 e2       	ldi	r20, 0x20	; 32
    4d0a:	51 e4       	ldi	r21, 0x41	; 65
    4d0c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4d10:	dc 01       	movw	r26, r24
    4d12:	cb 01       	movw	r24, r22
    4d14:	bc 01       	movw	r22, r24
    4d16:	cd 01       	movw	r24, r26
    4d18:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4d1c:	dc 01       	movw	r26, r24
    4d1e:	cb 01       	movw	r24, r22
    4d20:	9c 8b       	std	Y+20, r25	; 0x14
    4d22:	8b 8b       	std	Y+19, r24	; 0x13
    4d24:	0f c0       	rjmp	.+30     	; 0x4d44 <SM_U8LoginSys+0x153a>
    4d26:	88 ec       	ldi	r24, 0xC8	; 200
    4d28:	90 e0       	ldi	r25, 0x00	; 0
    4d2a:	9a 8b       	std	Y+18, r25	; 0x12
    4d2c:	89 8b       	std	Y+17, r24	; 0x11
    4d2e:	89 89       	ldd	r24, Y+17	; 0x11
    4d30:	9a 89       	ldd	r25, Y+18	; 0x12
    4d32:	01 97       	sbiw	r24, 0x01	; 1
    4d34:	f1 f7       	brne	.-4      	; 0x4d32 <SM_U8LoginSys+0x1528>
    4d36:	9a 8b       	std	Y+18, r25	; 0x12
    4d38:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4d3a:	8b 89       	ldd	r24, Y+19	; 0x13
    4d3c:	9c 89       	ldd	r25, Y+20	; 0x14
    4d3e:	01 97       	sbiw	r24, 0x01	; 1
    4d40:	9c 8b       	std	Y+20, r25	; 0x14
    4d42:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4d44:	8b 89       	ldd	r24, Y+19	; 0x13
    4d46:	9c 89       	ldd	r25, Y+20	; 0x14
    4d48:	00 97       	sbiw	r24, 0x00	; 0
    4d4a:	69 f7       	brne	.-38     	; 0x4d26 <SM_U8LoginSys+0x151c>
    4d4c:	14 c0       	rjmp	.+40     	; 0x4d76 <SM_U8LoginSys+0x156c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4d4e:	6d 89       	ldd	r22, Y+21	; 0x15
    4d50:	7e 89       	ldd	r23, Y+22	; 0x16
    4d52:	8f 89       	ldd	r24, Y+23	; 0x17
    4d54:	98 8d       	ldd	r25, Y+24	; 0x18
    4d56:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4d5a:	dc 01       	movw	r26, r24
    4d5c:	cb 01       	movw	r24, r22
    4d5e:	9c 8b       	std	Y+20, r25	; 0x14
    4d60:	8b 8b       	std	Y+19, r24	; 0x13
    4d62:	8b 89       	ldd	r24, Y+19	; 0x13
    4d64:	9c 89       	ldd	r25, Y+20	; 0x14
    4d66:	98 8b       	std	Y+16, r25	; 0x10
    4d68:	8f 87       	std	Y+15, r24	; 0x0f
    4d6a:	8f 85       	ldd	r24, Y+15	; 0x0f
    4d6c:	98 89       	ldd	r25, Y+16	; 0x10
    4d6e:	01 97       	sbiw	r24, 0x01	; 1
    4d70:	f1 f7       	brne	.-4      	; 0x4d6e <SM_U8LoginSys+0x1564>
    4d72:	98 8b       	std	Y+16, r25	; 0x10
    4d74:	8f 87       	std	Y+15, r24	; 0x0f

			case 'c':
			{
				_delay_ms(50);
				LCD_VoidSendCommand(1);
    4d76:	81 e0       	ldi	r24, 0x01	; 1
    4d78:	0e 94 4d 0f 	call	0x1e9a	; 0x1e9a <LCD_VoidSendCommand>
    4d7c:	0c 94 c9 1c 	jmp	0x3992	; 0x3992 <SM_U8LoginSys+0x188>
			} break;
			default :
				LCD_VoidSendCommand(1);
    4d80:	81 e0       	ldi	r24, 0x01	; 1
    4d82:	0e 94 4d 0f 	call	0x1e9a	; 0x1e9a <LCD_VoidSendCommand>

				LCD_u8WriteString("INVALID USER");
    4d86:	89 e2       	ldi	r24, 0x29	; 41
    4d88:	91 e0       	ldi	r25, 0x01	; 1
    4d8a:	0e 94 04 18 	call	0x3008	; 0x3008 <LCD_u8WriteString>
    4d8e:	80 e0       	ldi	r24, 0x00	; 0
    4d90:	90 e0       	ldi	r25, 0x00	; 0
    4d92:	af e2       	ldi	r26, 0x2F	; 47
    4d94:	b4 e4       	ldi	r27, 0x44	; 68
    4d96:	8b 87       	std	Y+11, r24	; 0x0b
    4d98:	9c 87       	std	Y+12, r25	; 0x0c
    4d9a:	ad 87       	std	Y+13, r26	; 0x0d
    4d9c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4d9e:	6b 85       	ldd	r22, Y+11	; 0x0b
    4da0:	7c 85       	ldd	r23, Y+12	; 0x0c
    4da2:	8d 85       	ldd	r24, Y+13	; 0x0d
    4da4:	9e 85       	ldd	r25, Y+14	; 0x0e
    4da6:	20 e0       	ldi	r18, 0x00	; 0
    4da8:	30 e0       	ldi	r19, 0x00	; 0
    4daa:	4a ef       	ldi	r20, 0xFA	; 250
    4dac:	54 e4       	ldi	r21, 0x44	; 68
    4dae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4db2:	dc 01       	movw	r26, r24
    4db4:	cb 01       	movw	r24, r22
    4db6:	8f 83       	std	Y+7, r24	; 0x07
    4db8:	98 87       	std	Y+8, r25	; 0x08
    4dba:	a9 87       	std	Y+9, r26	; 0x09
    4dbc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4dbe:	6f 81       	ldd	r22, Y+7	; 0x07
    4dc0:	78 85       	ldd	r23, Y+8	; 0x08
    4dc2:	89 85       	ldd	r24, Y+9	; 0x09
    4dc4:	9a 85       	ldd	r25, Y+10	; 0x0a
    4dc6:	20 e0       	ldi	r18, 0x00	; 0
    4dc8:	30 e0       	ldi	r19, 0x00	; 0
    4dca:	40 e8       	ldi	r20, 0x80	; 128
    4dcc:	5f e3       	ldi	r21, 0x3F	; 63
    4dce:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4dd2:	88 23       	and	r24, r24
    4dd4:	2c f4       	brge	.+10     	; 0x4de0 <SM_U8LoginSys+0x15d6>
		__ticks = 1;
    4dd6:	81 e0       	ldi	r24, 0x01	; 1
    4dd8:	90 e0       	ldi	r25, 0x00	; 0
    4dda:	9e 83       	std	Y+6, r25	; 0x06
    4ddc:	8d 83       	std	Y+5, r24	; 0x05
    4dde:	3f c0       	rjmp	.+126    	; 0x4e5e <SM_U8LoginSys+0x1654>
	else if (__tmp > 65535)
    4de0:	6f 81       	ldd	r22, Y+7	; 0x07
    4de2:	78 85       	ldd	r23, Y+8	; 0x08
    4de4:	89 85       	ldd	r24, Y+9	; 0x09
    4de6:	9a 85       	ldd	r25, Y+10	; 0x0a
    4de8:	20 e0       	ldi	r18, 0x00	; 0
    4dea:	3f ef       	ldi	r19, 0xFF	; 255
    4dec:	4f e7       	ldi	r20, 0x7F	; 127
    4dee:	57 e4       	ldi	r21, 0x47	; 71
    4df0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4df4:	18 16       	cp	r1, r24
    4df6:	4c f5       	brge	.+82     	; 0x4e4a <SM_U8LoginSys+0x1640>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4df8:	6b 85       	ldd	r22, Y+11	; 0x0b
    4dfa:	7c 85       	ldd	r23, Y+12	; 0x0c
    4dfc:	8d 85       	ldd	r24, Y+13	; 0x0d
    4dfe:	9e 85       	ldd	r25, Y+14	; 0x0e
    4e00:	20 e0       	ldi	r18, 0x00	; 0
    4e02:	30 e0       	ldi	r19, 0x00	; 0
    4e04:	40 e2       	ldi	r20, 0x20	; 32
    4e06:	51 e4       	ldi	r21, 0x41	; 65
    4e08:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4e0c:	dc 01       	movw	r26, r24
    4e0e:	cb 01       	movw	r24, r22
    4e10:	bc 01       	movw	r22, r24
    4e12:	cd 01       	movw	r24, r26
    4e14:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4e18:	dc 01       	movw	r26, r24
    4e1a:	cb 01       	movw	r24, r22
    4e1c:	9e 83       	std	Y+6, r25	; 0x06
    4e1e:	8d 83       	std	Y+5, r24	; 0x05
    4e20:	0f c0       	rjmp	.+30     	; 0x4e40 <SM_U8LoginSys+0x1636>
    4e22:	88 ec       	ldi	r24, 0xC8	; 200
    4e24:	90 e0       	ldi	r25, 0x00	; 0
    4e26:	9c 83       	std	Y+4, r25	; 0x04
    4e28:	8b 83       	std	Y+3, r24	; 0x03
    4e2a:	8b 81       	ldd	r24, Y+3	; 0x03
    4e2c:	9c 81       	ldd	r25, Y+4	; 0x04
    4e2e:	01 97       	sbiw	r24, 0x01	; 1
    4e30:	f1 f7       	brne	.-4      	; 0x4e2e <SM_U8LoginSys+0x1624>
    4e32:	9c 83       	std	Y+4, r25	; 0x04
    4e34:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4e36:	8d 81       	ldd	r24, Y+5	; 0x05
    4e38:	9e 81       	ldd	r25, Y+6	; 0x06
    4e3a:	01 97       	sbiw	r24, 0x01	; 1
    4e3c:	9e 83       	std	Y+6, r25	; 0x06
    4e3e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4e40:	8d 81       	ldd	r24, Y+5	; 0x05
    4e42:	9e 81       	ldd	r25, Y+6	; 0x06
    4e44:	00 97       	sbiw	r24, 0x00	; 0
    4e46:	69 f7       	brne	.-38     	; 0x4e22 <SM_U8LoginSys+0x1618>
    4e48:	14 c0       	rjmp	.+40     	; 0x4e72 <SM_U8LoginSys+0x1668>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4e4a:	6f 81       	ldd	r22, Y+7	; 0x07
    4e4c:	78 85       	ldd	r23, Y+8	; 0x08
    4e4e:	89 85       	ldd	r24, Y+9	; 0x09
    4e50:	9a 85       	ldd	r25, Y+10	; 0x0a
    4e52:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4e56:	dc 01       	movw	r26, r24
    4e58:	cb 01       	movw	r24, r22
    4e5a:	9e 83       	std	Y+6, r25	; 0x06
    4e5c:	8d 83       	std	Y+5, r24	; 0x05
    4e5e:	8d 81       	ldd	r24, Y+5	; 0x05
    4e60:	9e 81       	ldd	r25, Y+6	; 0x06
    4e62:	9a 83       	std	Y+2, r25	; 0x02
    4e64:	89 83       	std	Y+1, r24	; 0x01
    4e66:	89 81       	ldd	r24, Y+1	; 0x01
    4e68:	9a 81       	ldd	r25, Y+2	; 0x02
    4e6a:	01 97       	sbiw	r24, 0x01	; 1
    4e6c:	f1 f7       	brne	.-4      	; 0x4e6a <SM_U8LoginSys+0x1660>
    4e6e:	9a 83       	std	Y+2, r25	; 0x02
    4e70:	89 83       	std	Y+1, r24	; 0x01
				_delay_ms(700);
				LCD_VoidSendCommand(1);
    4e72:	81 e0       	ldi	r24, 0x01	; 1
    4e74:	0e 94 4d 0f 	call	0x1e9a	; 0x1e9a <LCD_VoidSendCommand>
    4e78:	0c 94 12 1c 	jmp	0x3824	; 0x3824 <SM_U8LoginSys+0x1a>
				goto lable;
				break;
		}
	}
	}
    4e7c:	ca 52       	subi	r28, 0x2A	; 42
    4e7e:	df 4f       	sbci	r29, 0xFF	; 255
    4e80:	88 81       	ld	r24, Y
    4e82:	c6 5d       	subi	r28, 0xD6	; 214
    4e84:	d0 40       	sbci	r29, 0x00	; 0

	  return Local_U8ErrorState;

 }
    4e86:	c8 52       	subi	r28, 0x28	; 40
    4e88:	df 4f       	sbci	r29, 0xFF	; 255
    4e8a:	0f b6       	in	r0, 0x3f	; 63
    4e8c:	f8 94       	cli
    4e8e:	de bf       	out	0x3e, r29	; 62
    4e90:	0f be       	out	0x3f, r0	; 63
    4e92:	cd bf       	out	0x3d, r28	; 61
    4e94:	cf 91       	pop	r28
    4e96:	df 91       	pop	r29
    4e98:	1f 91       	pop	r17
    4e9a:	0f 91       	pop	r16
    4e9c:	08 95       	ret

00004e9e <SM_U16EnterPassword>:


u16 SM_U16EnterPassword(void)
 {
    4e9e:	df 93       	push	r29
    4ea0:	cf 93       	push	r28
    4ea2:	00 d0       	rcall	.+0      	; 0x4ea4 <SM_U16EnterPassword+0x6>
    4ea4:	0f 92       	push	r0
    4ea6:	cd b7       	in	r28, 0x3d	; 61
    4ea8:	de b7       	in	r29, 0x3e	; 62
	static u8 Local_U8EnteredPass =0;
	 u16 Returned_Password=0;
    4eaa:	1b 82       	std	Y+3, r1	; 0x03
    4eac:	1a 82       	std	Y+2, r1	; 0x02
	while(1)
	{

	 KPAD_U8GetPressedKey(&Local_U8EnteredPass);
    4eae:	85 e2       	ldi	r24, 0x25	; 37
    4eb0:	93 e0       	ldi	r25, 0x03	; 3
    4eb2:	0e 94 be 0d 	call	0x1b7c	; 0x1b7c <KPAD_U8GetPressedKey>

		if ((Local_U8EnteredPass >= '0') && (Local_U8EnteredPass <= '9')) {
    4eb6:	80 91 25 03 	lds	r24, 0x0325
    4eba:	80 33       	cpi	r24, 0x30	; 48
    4ebc:	f8 f0       	brcs	.+62     	; 0x4efc <SM_U16EnterPassword+0x5e>
    4ebe:	80 91 25 03 	lds	r24, 0x0325
    4ec2:	8a 33       	cpi	r24, 0x3A	; 58
    4ec4:	d8 f4       	brcc	.+54     	; 0x4efc <SM_U16EnterPassword+0x5e>
			LCD_VoidSendData('*');
    4ec6:	8a e2       	ldi	r24, 0x2A	; 42
    4ec8:	0e 94 c7 13 	call	0x278e	; 0x278e <LCD_VoidSendData>
			u8 pass = Local_U8EnteredPass - '0';
    4ecc:	80 91 25 03 	lds	r24, 0x0325
    4ed0:	80 53       	subi	r24, 0x30	; 48
    4ed2:	89 83       	std	Y+1, r24	; 0x01
			Returned_Password = Returned_Password * 10 + pass;
    4ed4:	8a 81       	ldd	r24, Y+2	; 0x02
    4ed6:	9b 81       	ldd	r25, Y+3	; 0x03
    4ed8:	9c 01       	movw	r18, r24
    4eda:	22 0f       	add	r18, r18
    4edc:	33 1f       	adc	r19, r19
    4ede:	c9 01       	movw	r24, r18
    4ee0:	88 0f       	add	r24, r24
    4ee2:	99 1f       	adc	r25, r25
    4ee4:	88 0f       	add	r24, r24
    4ee6:	99 1f       	adc	r25, r25
    4ee8:	28 0f       	add	r18, r24
    4eea:	39 1f       	adc	r19, r25
    4eec:	89 81       	ldd	r24, Y+1	; 0x01
    4eee:	88 2f       	mov	r24, r24
    4ef0:	90 e0       	ldi	r25, 0x00	; 0
    4ef2:	82 0f       	add	r24, r18
    4ef4:	93 1f       	adc	r25, r19
    4ef6:	9b 83       	std	Y+3, r25	; 0x03
    4ef8:	8a 83       	std	Y+2, r24	; 0x02
    4efa:	d9 cf       	rjmp	.-78     	; 0x4eae <SM_U16EnterPassword+0x10>
		}
		else if (Local_U8EnteredPass == '=')
    4efc:	80 91 25 03 	lds	r24, 0x0325
    4f00:	8d 33       	cpi	r24, 0x3D	; 61
    4f02:	59 f4       	brne	.+22     	; 0x4f1a <SM_U16EnterPassword+0x7c>
		{
			LCD_VoidSendCommand(1);
    4f04:	81 e0       	ldi	r24, 0x01	; 1
    4f06:	0e 94 4d 0f 	call	0x1e9a	; 0x1e9a <LCD_VoidSendCommand>
			LCD_VoidSendCommand(1);
			Returned_Password=0;
		}
	}

	 return Returned_Password;
    4f0a:	8a 81       	ldd	r24, Y+2	; 0x02
    4f0c:	9b 81       	ldd	r25, Y+3	; 0x03
 }
    4f0e:	0f 90       	pop	r0
    4f10:	0f 90       	pop	r0
    4f12:	0f 90       	pop	r0
    4f14:	cf 91       	pop	r28
    4f16:	df 91       	pop	r29
    4f18:	08 95       	ret
		{
			LCD_VoidSendCommand(1);
			break;

		}
		else if (Local_U8EnteredPass == 'c')
    4f1a:	80 91 25 03 	lds	r24, 0x0325
    4f1e:	83 36       	cpi	r24, 0x63	; 99
    4f20:	31 f6       	brne	.-116    	; 0x4eae <SM_U16EnterPassword+0x10>
		{
			LCD_VoidSendCommand(1);
    4f22:	81 e0       	ldi	r24, 0x01	; 1
    4f24:	0e 94 4d 0f 	call	0x1e9a	; 0x1e9a <LCD_VoidSendCommand>
			Returned_Password=0;
    4f28:	1b 82       	std	Y+3, r1	; 0x03
    4f2a:	1a 82       	std	Y+2, r1	; 0x02
    4f2c:	c0 cf       	rjmp	.-128    	; 0x4eae <SM_U16EnterPassword+0x10>

00004f2e <SM_U8RoomSelect>:

	 return Returned_Password;
 }

u8 SM_U8RoomSelect(void)
{
    4f2e:	df 93       	push	r29
    4f30:	cf 93       	push	r28
    4f32:	cd b7       	in	r28, 0x3d	; 61
    4f34:	de b7       	in	r29, 0x3e	; 62
    4f36:	60 97       	sbiw	r28, 0x10	; 16
    4f38:	0f b6       	in	r0, 0x3f	; 63
    4f3a:	f8 94       	cli
    4f3c:	de bf       	out	0x3e, r29	; 62
    4f3e:	0f be       	out	0x3f, r0	; 63
    4f40:	cd bf       	out	0x3d, r28	; 61
	u8 Local_U8ErrorState=ERROR_STATE_NOK;
    4f42:	1f 86       	std	Y+15, r1	; 0x0f

	u8 Pressed=0;
    4f44:	18 8a       	std	Y+16, r1	; 0x10
	KPAD_U8GetPressedKey(&Pressed);
    4f46:	ce 01       	movw	r24, r28
    4f48:	40 96       	adiw	r24, 0x10	; 16
    4f4a:	0e 94 be 0d 	call	0x1b7c	; 0x1b7c <KPAD_U8GetPressedKey>


	LCD_VoidGoToRowCol(1,0);
    4f4e:	81 e0       	ldi	r24, 0x01	; 1
    4f50:	60 e0       	ldi	r22, 0x00	; 0
    4f52:	0e 94 4c 17 	call	0x2e98	; 0x2e98 <LCD_VoidGoToRowCol>

	LCD_u8WriteString("Select Room");
    4f56:	86 e3       	ldi	r24, 0x36	; 54
    4f58:	91 e0       	ldi	r25, 0x01	; 1
    4f5a:	0e 94 04 18 	call	0x3008	; 0x3008 <LCD_u8WriteString>
    4f5e:	80 e0       	ldi	r24, 0x00	; 0
    4f60:	90 e0       	ldi	r25, 0x00	; 0
    4f62:	af e2       	ldi	r26, 0x2F	; 47
    4f64:	b4 e4       	ldi	r27, 0x44	; 68
    4f66:	8b 87       	std	Y+11, r24	; 0x0b
    4f68:	9c 87       	std	Y+12, r25	; 0x0c
    4f6a:	ad 87       	std	Y+13, r26	; 0x0d
    4f6c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4f6e:	6b 85       	ldd	r22, Y+11	; 0x0b
    4f70:	7c 85       	ldd	r23, Y+12	; 0x0c
    4f72:	8d 85       	ldd	r24, Y+13	; 0x0d
    4f74:	9e 85       	ldd	r25, Y+14	; 0x0e
    4f76:	20 e0       	ldi	r18, 0x00	; 0
    4f78:	30 e0       	ldi	r19, 0x00	; 0
    4f7a:	4a ef       	ldi	r20, 0xFA	; 250
    4f7c:	54 e4       	ldi	r21, 0x44	; 68
    4f7e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4f82:	dc 01       	movw	r26, r24
    4f84:	cb 01       	movw	r24, r22
    4f86:	8f 83       	std	Y+7, r24	; 0x07
    4f88:	98 87       	std	Y+8, r25	; 0x08
    4f8a:	a9 87       	std	Y+9, r26	; 0x09
    4f8c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4f8e:	6f 81       	ldd	r22, Y+7	; 0x07
    4f90:	78 85       	ldd	r23, Y+8	; 0x08
    4f92:	89 85       	ldd	r24, Y+9	; 0x09
    4f94:	9a 85       	ldd	r25, Y+10	; 0x0a
    4f96:	20 e0       	ldi	r18, 0x00	; 0
    4f98:	30 e0       	ldi	r19, 0x00	; 0
    4f9a:	40 e8       	ldi	r20, 0x80	; 128
    4f9c:	5f e3       	ldi	r21, 0x3F	; 63
    4f9e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4fa2:	88 23       	and	r24, r24
    4fa4:	2c f4       	brge	.+10     	; 0x4fb0 <SM_U8RoomSelect+0x82>
		__ticks = 1;
    4fa6:	81 e0       	ldi	r24, 0x01	; 1
    4fa8:	90 e0       	ldi	r25, 0x00	; 0
    4faa:	9e 83       	std	Y+6, r25	; 0x06
    4fac:	8d 83       	std	Y+5, r24	; 0x05
    4fae:	3f c0       	rjmp	.+126    	; 0x502e <SM_U8RoomSelect+0x100>
	else if (__tmp > 65535)
    4fb0:	6f 81       	ldd	r22, Y+7	; 0x07
    4fb2:	78 85       	ldd	r23, Y+8	; 0x08
    4fb4:	89 85       	ldd	r24, Y+9	; 0x09
    4fb6:	9a 85       	ldd	r25, Y+10	; 0x0a
    4fb8:	20 e0       	ldi	r18, 0x00	; 0
    4fba:	3f ef       	ldi	r19, 0xFF	; 255
    4fbc:	4f e7       	ldi	r20, 0x7F	; 127
    4fbe:	57 e4       	ldi	r21, 0x47	; 71
    4fc0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4fc4:	18 16       	cp	r1, r24
    4fc6:	4c f5       	brge	.+82     	; 0x501a <SM_U8RoomSelect+0xec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4fc8:	6b 85       	ldd	r22, Y+11	; 0x0b
    4fca:	7c 85       	ldd	r23, Y+12	; 0x0c
    4fcc:	8d 85       	ldd	r24, Y+13	; 0x0d
    4fce:	9e 85       	ldd	r25, Y+14	; 0x0e
    4fd0:	20 e0       	ldi	r18, 0x00	; 0
    4fd2:	30 e0       	ldi	r19, 0x00	; 0
    4fd4:	40 e2       	ldi	r20, 0x20	; 32
    4fd6:	51 e4       	ldi	r21, 0x41	; 65
    4fd8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4fdc:	dc 01       	movw	r26, r24
    4fde:	cb 01       	movw	r24, r22
    4fe0:	bc 01       	movw	r22, r24
    4fe2:	cd 01       	movw	r24, r26
    4fe4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4fe8:	dc 01       	movw	r26, r24
    4fea:	cb 01       	movw	r24, r22
    4fec:	9e 83       	std	Y+6, r25	; 0x06
    4fee:	8d 83       	std	Y+5, r24	; 0x05
    4ff0:	0f c0       	rjmp	.+30     	; 0x5010 <SM_U8RoomSelect+0xe2>
    4ff2:	88 ec       	ldi	r24, 0xC8	; 200
    4ff4:	90 e0       	ldi	r25, 0x00	; 0
    4ff6:	9c 83       	std	Y+4, r25	; 0x04
    4ff8:	8b 83       	std	Y+3, r24	; 0x03
    4ffa:	8b 81       	ldd	r24, Y+3	; 0x03
    4ffc:	9c 81       	ldd	r25, Y+4	; 0x04
    4ffe:	01 97       	sbiw	r24, 0x01	; 1
    5000:	f1 f7       	brne	.-4      	; 0x4ffe <SM_U8RoomSelect+0xd0>
    5002:	9c 83       	std	Y+4, r25	; 0x04
    5004:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5006:	8d 81       	ldd	r24, Y+5	; 0x05
    5008:	9e 81       	ldd	r25, Y+6	; 0x06
    500a:	01 97       	sbiw	r24, 0x01	; 1
    500c:	9e 83       	std	Y+6, r25	; 0x06
    500e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5010:	8d 81       	ldd	r24, Y+5	; 0x05
    5012:	9e 81       	ldd	r25, Y+6	; 0x06
    5014:	00 97       	sbiw	r24, 0x00	; 0
    5016:	69 f7       	brne	.-38     	; 0x4ff2 <SM_U8RoomSelect+0xc4>
    5018:	14 c0       	rjmp	.+40     	; 0x5042 <SM_U8RoomSelect+0x114>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    501a:	6f 81       	ldd	r22, Y+7	; 0x07
    501c:	78 85       	ldd	r23, Y+8	; 0x08
    501e:	89 85       	ldd	r24, Y+9	; 0x09
    5020:	9a 85       	ldd	r25, Y+10	; 0x0a
    5022:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5026:	dc 01       	movw	r26, r24
    5028:	cb 01       	movw	r24, r22
    502a:	9e 83       	std	Y+6, r25	; 0x06
    502c:	8d 83       	std	Y+5, r24	; 0x05
    502e:	8d 81       	ldd	r24, Y+5	; 0x05
    5030:	9e 81       	ldd	r25, Y+6	; 0x06
    5032:	9a 83       	std	Y+2, r25	; 0x02
    5034:	89 83       	std	Y+1, r24	; 0x01
    5036:	89 81       	ldd	r24, Y+1	; 0x01
    5038:	9a 81       	ldd	r25, Y+2	; 0x02
    503a:	01 97       	sbiw	r24, 0x01	; 1
    503c:	f1 f7       	brne	.-4      	; 0x503a <SM_U8RoomSelect+0x10c>
    503e:	9a 83       	std	Y+2, r25	; 0x02
    5040:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(700);
	LCD_VoidSendCommand(1);
    5042:	81 e0       	ldi	r24, 0x01	; 1
    5044:	0e 94 4d 0f 	call	0x1e9a	; 0x1e9a <LCD_VoidSendCommand>

	LCD_u8WriteString("1-Servo 2-DC  3-led");
    5048:	82 e4       	ldi	r24, 0x42	; 66
    504a:	91 e0       	ldi	r25, 0x01	; 1
    504c:	0e 94 04 18 	call	0x3008	; 0x3008 <LCD_u8WriteString>
	LCD_VoidGoToRowCol(1,0);
    5050:	81 e0       	ldi	r24, 0x01	; 1
    5052:	60 e0       	ldi	r22, 0x00	; 0
    5054:	0e 94 4c 17 	call	0x2e98	; 0x2e98 <LCD_VoidGoToRowCol>
	LCD_u8WriteString("4-Calc  5-TL  6-SS");
    5058:	86 e5       	ldi	r24, 0x56	; 86
    505a:	91 e0       	ldi	r25, 0x01	; 1
    505c:	0e 94 04 18 	call	0x3008	; 0x3008 <LCD_u8WriteString>
	if((Pressed <='1') && (Pressed <='6'))
    5060:	88 89       	ldd	r24, Y+16	; 0x10
    5062:	82 33       	cpi	r24, 0x32	; 50
    5064:	58 f4       	brcc	.+22     	; 0x507c <SM_U8RoomSelect+0x14e>
    5066:	88 89       	ldd	r24, Y+16	; 0x10
    5068:	87 33       	cpi	r24, 0x37	; 55
    506a:	40 f4       	brcc	.+16     	; 0x507c <SM_U8RoomSelect+0x14e>
	{
		switch(Pressed)
    506c:	88 89       	ldd	r24, Y+16	; 0x10
    506e:	88 2f       	mov	r24, r24
    5070:	90 e0       	ldi	r25, 0x00	; 0
    5072:	81 33       	cpi	r24, 0x31	; 49
    5074:	91 05       	cpc	r25, r1
    5076:	11 f4       	brne	.+4      	; 0x507c <SM_U8RoomSelect+0x14e>
		{
			case '1':SM_VoidServo_APP(); break;
    5078:	0e 94 9a 19 	call	0x3334	; 0x3334 <SM_VoidServo_APP>
		}
	}



	return Local_U8ErrorState;
    507c:	8f 85       	ldd	r24, Y+15	; 0x0f
}
    507e:	60 96       	adiw	r28, 0x10	; 16
    5080:	0f b6       	in	r0, 0x3f	; 63
    5082:	f8 94       	cli
    5084:	de bf       	out	0x3e, r29	; 62
    5086:	0f be       	out	0x3f, r0	; 63
    5088:	cd bf       	out	0x3d, r28	; 61
    508a:	cf 91       	pop	r28
    508c:	df 91       	pop	r29
    508e:	08 95       	ret

00005090 <SM_VoidCalc>:

void SM_VoidCalc(void)
{
    5090:	ef 92       	push	r14
    5092:	ff 92       	push	r15
    5094:	0f 93       	push	r16
    5096:	1f 93       	push	r17
    5098:	df 93       	push	r29
    509a:	cf 93       	push	r28
    509c:	cd b7       	in	r28, 0x3d	; 61
    509e:	de b7       	in	r29, 0x3e	; 62
    50a0:	63 97       	sbiw	r28, 0x13	; 19
    50a2:	0f b6       	in	r0, 0x3f	; 63
    50a4:	f8 94       	cli
    50a6:	de bf       	out	0x3e, r29	; 62
    50a8:	0f be       	out	0x3f, r0	; 63
    50aa:	cd bf       	out	0x3d, r28	; 61
	KPAD_Void_INIT();
    50ac:	0e 94 16 0f 	call	0x1e2c	; 0x1e2c <KPAD_Void_INIT>
	u8 ch;


	LCD_VoidLCDInit();
    50b0:	0e 94 a8 12 	call	0x2550	; 0x2550 <LCD_VoidLCDInit>
	//LCD_u8WriteString("Hello");
	f32 operand1=0.00, operand2=0.00,result=0.00;
    50b4:	80 e0       	ldi	r24, 0x00	; 0
    50b6:	90 e0       	ldi	r25, 0x00	; 0
    50b8:	a0 e0       	ldi	r26, 0x00	; 0
    50ba:	b0 e0       	ldi	r27, 0x00	; 0
    50bc:	8d 87       	std	Y+13, r24	; 0x0d
    50be:	9e 87       	std	Y+14, r25	; 0x0e
    50c0:	af 87       	std	Y+15, r26	; 0x0f
    50c2:	b8 8b       	std	Y+16, r27	; 0x10
    50c4:	80 e0       	ldi	r24, 0x00	; 0
    50c6:	90 e0       	ldi	r25, 0x00	; 0
    50c8:	a0 e0       	ldi	r26, 0x00	; 0
    50ca:	b0 e0       	ldi	r27, 0x00	; 0
    50cc:	89 87       	std	Y+9, r24	; 0x09
    50ce:	9a 87       	std	Y+10, r25	; 0x0a
    50d0:	ab 87       	std	Y+11, r26	; 0x0b
    50d2:	bc 87       	std	Y+12, r27	; 0x0c
    50d4:	80 e0       	ldi	r24, 0x00	; 0
    50d6:	90 e0       	ldi	r25, 0x00	; 0
    50d8:	a0 e0       	ldi	r26, 0x00	; 0
    50da:	b0 e0       	ldi	r27, 0x00	; 0
    50dc:	8d 83       	std	Y+5, r24	; 0x05
    50de:	9e 83       	std	Y+6, r25	; 0x06
    50e0:	af 83       	std	Y+7, r26	; 0x07
    50e2:	b8 87       	std	Y+8, r27	; 0x08
	u8 state=0, negative1=0,negative2=0,op;
    50e4:	1c 82       	std	Y+4, r1	; 0x04
    50e6:	1b 82       	std	Y+3, r1	; 0x03
    50e8:	1a 82       	std	Y+2, r1	; 0x02

	while(1){
	do { KPAD_U8GetPressedKey(&ch); } while(ch==0xff);
    50ea:	ce 01       	movw	r24, r28
    50ec:	41 96       	adiw	r24, 0x11	; 17
    50ee:	0e 94 be 0d 	call	0x1b7c	; 0x1b7c <KPAD_U8GetPressedKey>
    50f2:	89 89       	ldd	r24, Y+17	; 0x11
    50f4:	8f 3f       	cpi	r24, 0xFF	; 255
    50f6:	c9 f3       	breq	.-14     	; 0x50ea <SM_VoidCalc+0x5a>
	switch(ch)
    50f8:	89 89       	ldd	r24, Y+17	; 0x11
    50fa:	28 2f       	mov	r18, r24
    50fc:	30 e0       	ldi	r19, 0x00	; 0
    50fe:	3b 8b       	std	Y+19, r19	; 0x13
    5100:	2a 8b       	std	Y+18, r18	; 0x12
    5102:	8a 89       	ldd	r24, Y+18	; 0x12
    5104:	9b 89       	ldd	r25, Y+19	; 0x13
    5106:	86 33       	cpi	r24, 0x36	; 54
    5108:	91 05       	cpc	r25, r1
    510a:	09 f4       	brne	.+2      	; 0x510e <SM_VoidCalc+0x7e>
    510c:	68 c3       	rjmp	.+1744   	; 0x57de <SM_VoidCalc+0x74e>
    510e:	2a 89       	ldd	r18, Y+18	; 0x12
    5110:	3b 89       	ldd	r19, Y+19	; 0x13
    5112:	27 33       	cpi	r18, 0x37	; 55
    5114:	31 05       	cpc	r19, r1
    5116:	0c f0       	brlt	.+2      	; 0x511a <SM_VoidCalc+0x8a>
    5118:	4f c0       	rjmp	.+158    	; 0x51b8 <SM_VoidCalc+0x128>
    511a:	8a 89       	ldd	r24, Y+18	; 0x12
    511c:	9b 89       	ldd	r25, Y+19	; 0x13
    511e:	81 33       	cpi	r24, 0x31	; 49
    5120:	91 05       	cpc	r25, r1
    5122:	09 f4       	brne	.+2      	; 0x5126 <SM_VoidCalc+0x96>
    5124:	0e c1       	rjmp	.+540    	; 0x5342 <SM_VoidCalc+0x2b2>
    5126:	2a 89       	ldd	r18, Y+18	; 0x12
    5128:	3b 89       	ldd	r19, Y+19	; 0x13
    512a:	22 33       	cpi	r18, 0x32	; 50
    512c:	31 05       	cpc	r19, r1
    512e:	5c f5       	brge	.+86     	; 0x5186 <SM_VoidCalc+0xf6>
    5130:	8a 89       	ldd	r24, Y+18	; 0x12
    5132:	9b 89       	ldd	r25, Y+19	; 0x13
    5134:	8d 32       	cpi	r24, 0x2D	; 45
    5136:	91 05       	cpc	r25, r1
    5138:	09 f4       	brne	.+2      	; 0x513c <SM_VoidCalc+0xac>
    513a:	68 c5       	rjmp	.+2768   	; 0x5c0c <SM_VoidCalc+0xb7c>
    513c:	2a 89       	ldd	r18, Y+18	; 0x12
    513e:	3b 89       	ldd	r19, Y+19	; 0x13
    5140:	2e 32       	cpi	r18, 0x2E	; 46
    5142:	31 05       	cpc	r19, r1
    5144:	9c f4       	brge	.+38     	; 0x516c <SM_VoidCalc+0xdc>
    5146:	8a 89       	ldd	r24, Y+18	; 0x12
    5148:	9b 89       	ldd	r25, Y+19	; 0x13
    514a:	8a 32       	cpi	r24, 0x2A	; 42
    514c:	91 05       	cpc	r25, r1
    514e:	09 f4       	brne	.+2      	; 0x5152 <SM_VoidCalc+0xc2>
    5150:	3d c5       	rjmp	.+2682   	; 0x5bcc <SM_VoidCalc+0xb3c>
    5152:	2a 89       	ldd	r18, Y+18	; 0x12
    5154:	3b 89       	ldd	r19, Y+19	; 0x13
    5156:	2b 32       	cpi	r18, 0x2B	; 43
    5158:	31 05       	cpc	r19, r1
    515a:	09 f4       	brne	.+2      	; 0x515e <SM_VoidCalc+0xce>
    515c:	72 c5       	rjmp	.+2788   	; 0x5c42 <SM_VoidCalc+0xbb2>
    515e:	8a 89       	ldd	r24, Y+18	; 0x12
    5160:	9b 89       	ldd	r25, Y+19	; 0x13
    5162:	85 32       	cpi	r24, 0x25	; 37
    5164:	91 05       	cpc	r25, r1
    5166:	09 f4       	brne	.+2      	; 0x516a <SM_VoidCalc+0xda>
    5168:	64 c5       	rjmp	.+2760   	; 0x5c32 <SM_VoidCalc+0xba2>
    516a:	eb c6       	rjmp	.+3542   	; 0x5f42 <SM_VoidCalc+0xeb2>
    516c:	2a 89       	ldd	r18, Y+18	; 0x12
    516e:	3b 89       	ldd	r19, Y+19	; 0x13
    5170:	2f 32       	cpi	r18, 0x2F	; 47
    5172:	31 05       	cpc	r19, r1
    5174:	09 f4       	brne	.+2      	; 0x5178 <SM_VoidCalc+0xe8>
    5176:	32 c5       	rjmp	.+2660   	; 0x5bdc <SM_VoidCalc+0xb4c>
    5178:	8a 89       	ldd	r24, Y+18	; 0x12
    517a:	9b 89       	ldd	r25, Y+19	; 0x13
    517c:	80 33       	cpi	r24, 0x30	; 48
    517e:	91 05       	cpc	r25, r1
    5180:	0c f0       	brlt	.+2      	; 0x5184 <SM_VoidCalc+0xf4>
    5182:	69 c0       	rjmp	.+210    	; 0x5256 <SM_VoidCalc+0x1c6>
    5184:	80 c5       	rjmp	.+2816   	; 0x5c86 <SM_VoidCalc+0xbf6>
    5186:	2a 89       	ldd	r18, Y+18	; 0x12
    5188:	3b 89       	ldd	r19, Y+19	; 0x13
    518a:	23 33       	cpi	r18, 0x33	; 51
    518c:	31 05       	cpc	r19, r1
    518e:	09 f4       	brne	.+2      	; 0x5192 <SM_VoidCalc+0x102>
    5190:	c4 c1       	rjmp	.+904    	; 0x551a <SM_VoidCalc+0x48a>
    5192:	8a 89       	ldd	r24, Y+18	; 0x12
    5194:	9b 89       	ldd	r25, Y+19	; 0x13
    5196:	83 33       	cpi	r24, 0x33	; 51
    5198:	91 05       	cpc	r25, r1
    519a:	0c f4       	brge	.+2      	; 0x519e <SM_VoidCalc+0x10e>
    519c:	48 c1       	rjmp	.+656    	; 0x542e <SM_VoidCalc+0x39e>
    519e:	2a 89       	ldd	r18, Y+18	; 0x12
    51a0:	3b 89       	ldd	r19, Y+19	; 0x13
    51a2:	24 33       	cpi	r18, 0x34	; 52
    51a4:	31 05       	cpc	r19, r1
    51a6:	09 f4       	brne	.+2      	; 0x51aa <SM_VoidCalc+0x11a>
    51a8:	2e c2       	rjmp	.+1116   	; 0x5606 <SM_VoidCalc+0x576>
    51aa:	8a 89       	ldd	r24, Y+18	; 0x12
    51ac:	9b 89       	ldd	r25, Y+19	; 0x13
    51ae:	85 33       	cpi	r24, 0x35	; 53
    51b0:	91 05       	cpc	r25, r1
    51b2:	09 f4       	brne	.+2      	; 0x51b6 <SM_VoidCalc+0x126>
    51b4:	9e c2       	rjmp	.+1340   	; 0x56f2 <SM_VoidCalc+0x662>
    51b6:	c5 c6       	rjmp	.+3466   	; 0x5f42 <SM_VoidCalc+0xeb2>
    51b8:	2a 89       	ldd	r18, Y+18	; 0x12
    51ba:	3b 89       	ldd	r19, Y+19	; 0x13
    51bc:	2d 34       	cpi	r18, 0x4D	; 77
    51be:	31 05       	cpc	r19, r1
    51c0:	09 f4       	brne	.+2      	; 0x51c4 <SM_VoidCalc+0x134>
    51c2:	2c c5       	rjmp	.+2648   	; 0x5c1c <SM_VoidCalc+0xb8c>
    51c4:	8a 89       	ldd	r24, Y+18	; 0x12
    51c6:	9b 89       	ldd	r25, Y+19	; 0x13
    51c8:	8e 34       	cpi	r24, 0x4E	; 78
    51ca:	91 05       	cpc	r25, r1
    51cc:	2c f5       	brge	.+74     	; 0x5218 <SM_VoidCalc+0x188>
    51ce:	2a 89       	ldd	r18, Y+18	; 0x12
    51d0:	3b 89       	ldd	r19, Y+19	; 0x13
    51d2:	29 33       	cpi	r18, 0x39	; 57
    51d4:	31 05       	cpc	r19, r1
    51d6:	09 f4       	brne	.+2      	; 0x51da <SM_VoidCalc+0x14a>
    51d8:	64 c4       	rjmp	.+2248   	; 0x5aa2 <SM_VoidCalc+0xa12>
    51da:	8a 89       	ldd	r24, Y+18	; 0x12
    51dc:	9b 89       	ldd	r25, Y+19	; 0x13
    51de:	8a 33       	cpi	r24, 0x3A	; 58
    51e0:	91 05       	cpc	r25, r1
    51e2:	6c f4       	brge	.+26     	; 0x51fe <SM_VoidCalc+0x16e>
    51e4:	2a 89       	ldd	r18, Y+18	; 0x12
    51e6:	3b 89       	ldd	r19, Y+19	; 0x13
    51e8:	27 33       	cpi	r18, 0x37	; 55
    51ea:	31 05       	cpc	r19, r1
    51ec:	09 f4       	brne	.+2      	; 0x51f0 <SM_VoidCalc+0x160>
    51ee:	6d c3       	rjmp	.+1754   	; 0x58ca <SM_VoidCalc+0x83a>
    51f0:	8a 89       	ldd	r24, Y+18	; 0x12
    51f2:	9b 89       	ldd	r25, Y+19	; 0x13
    51f4:	88 33       	cpi	r24, 0x38	; 56
    51f6:	91 05       	cpc	r25, r1
    51f8:	09 f4       	brne	.+2      	; 0x51fc <SM_VoidCalc+0x16c>
    51fa:	dd c3       	rjmp	.+1978   	; 0x59b6 <SM_VoidCalc+0x926>
    51fc:	a2 c6       	rjmp	.+3396   	; 0x5f42 <SM_VoidCalc+0xeb2>
    51fe:	2a 89       	ldd	r18, Y+18	; 0x12
    5200:	3b 89       	ldd	r19, Y+19	; 0x13
    5202:	2d 33       	cpi	r18, 0x3D	; 61
    5204:	31 05       	cpc	r19, r1
    5206:	09 f4       	brne	.+2      	; 0x520a <SM_VoidCalc+0x17a>
    5208:	4d c5       	rjmp	.+2714   	; 0x5ca4 <SM_VoidCalc+0xc14>
    520a:	8a 89       	ldd	r24, Y+18	; 0x12
    520c:	9b 89       	ldd	r25, Y+19	; 0x13
    520e:	89 34       	cpi	r24, 0x49	; 73
    5210:	91 05       	cpc	r25, r1
    5212:	09 f4       	brne	.+2      	; 0x5216 <SM_VoidCalc+0x186>
    5214:	eb c4       	rjmp	.+2518   	; 0x5bec <SM_VoidCalc+0xb5c>
    5216:	95 c6       	rjmp	.+3370   	; 0x5f42 <SM_VoidCalc+0xeb2>
    5218:	2a 89       	ldd	r18, Y+18	; 0x12
    521a:	3b 89       	ldd	r19, Y+19	; 0x13
    521c:	20 35       	cpi	r18, 0x50	; 80
    521e:	31 05       	cpc	r19, r1
    5220:	09 f4       	brne	.+2      	; 0x5224 <SM_VoidCalc+0x194>
    5222:	36 c5       	rjmp	.+2668   	; 0x5c90 <SM_VoidCalc+0xc00>
    5224:	8a 89       	ldd	r24, Y+18	; 0x12
    5226:	9b 89       	ldd	r25, Y+19	; 0x13
    5228:	81 35       	cpi	r24, 0x51	; 81
    522a:	91 05       	cpc	r25, r1
    522c:	3c f4       	brge	.+14     	; 0x523c <SM_VoidCalc+0x1ac>
    522e:	2a 89       	ldd	r18, Y+18	; 0x12
    5230:	3b 89       	ldd	r19, Y+19	; 0x13
    5232:	2e 34       	cpi	r18, 0x4E	; 78
    5234:	31 05       	cpc	r19, r1
    5236:	09 f4       	brne	.+2      	; 0x523a <SM_VoidCalc+0x1aa>
    5238:	0c c5       	rjmp	.+2584   	; 0x5c52 <SM_VoidCalc+0xbc2>
    523a:	83 c6       	rjmp	.+3334   	; 0x5f42 <SM_VoidCalc+0xeb2>
    523c:	8a 89       	ldd	r24, Y+18	; 0x12
    523e:	9b 89       	ldd	r25, Y+19	; 0x13
    5240:	83 35       	cpi	r24, 0x53	; 83
    5242:	91 05       	cpc	r25, r1
    5244:	09 f4       	brne	.+2      	; 0x5248 <SM_VoidCalc+0x1b8>
    5246:	0f c5       	rjmp	.+2590   	; 0x5c66 <SM_VoidCalc+0xbd6>
    5248:	2a 89       	ldd	r18, Y+18	; 0x12
    524a:	3b 89       	ldd	r19, Y+19	; 0x13
    524c:	23 36       	cpi	r18, 0x63	; 99
    524e:	31 05       	cpc	r19, r1
    5250:	09 f4       	brne	.+2      	; 0x5254 <SM_VoidCalc+0x1c4>
    5252:	9d c4       	rjmp	.+2362   	; 0x5b8e <SM_VoidCalc+0xafe>
    5254:	76 c6       	rjmp	.+3308   	; 0x5f42 <SM_VoidCalc+0xeb2>
	{
	case '0': LCD_VoidSendData(ch); if(state==0|| op==5 || op==8 || op==9|| op==10) {operand1 = ((operand1 * 10) + ch)-48;} else if(state==1){operand2 = ((operand2 * 10) + ch)-48; } break;
    5256:	89 89       	ldd	r24, Y+17	; 0x11
    5258:	0e 94 c7 13 	call	0x278e	; 0x278e <LCD_VoidSendData>
    525c:	8c 81       	ldd	r24, Y+4	; 0x04
    525e:	88 23       	and	r24, r24
    5260:	61 f0       	breq	.+24     	; 0x527a <SM_VoidCalc+0x1ea>
    5262:	89 81       	ldd	r24, Y+1	; 0x01
    5264:	85 30       	cpi	r24, 0x05	; 5
    5266:	49 f0       	breq	.+18     	; 0x527a <SM_VoidCalc+0x1ea>
    5268:	89 81       	ldd	r24, Y+1	; 0x01
    526a:	88 30       	cpi	r24, 0x08	; 8
    526c:	31 f0       	breq	.+12     	; 0x527a <SM_VoidCalc+0x1ea>
    526e:	89 81       	ldd	r24, Y+1	; 0x01
    5270:	89 30       	cpi	r24, 0x09	; 9
    5272:	19 f0       	breq	.+6      	; 0x527a <SM_VoidCalc+0x1ea>
    5274:	89 81       	ldd	r24, Y+1	; 0x01
    5276:	8a 30       	cpi	r24, 0x0A	; 10
    5278:	81 f5       	brne	.+96     	; 0x52da <SM_VoidCalc+0x24a>
    527a:	6d 85       	ldd	r22, Y+13	; 0x0d
    527c:	7e 85       	ldd	r23, Y+14	; 0x0e
    527e:	8f 85       	ldd	r24, Y+15	; 0x0f
    5280:	98 89       	ldd	r25, Y+16	; 0x10
    5282:	20 e0       	ldi	r18, 0x00	; 0
    5284:	30 e0       	ldi	r19, 0x00	; 0
    5286:	40 e2       	ldi	r20, 0x20	; 32
    5288:	51 e4       	ldi	r21, 0x41	; 65
    528a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    528e:	dc 01       	movw	r26, r24
    5290:	cb 01       	movw	r24, r22
    5292:	7c 01       	movw	r14, r24
    5294:	8d 01       	movw	r16, r26
    5296:	89 89       	ldd	r24, Y+17	; 0x11
    5298:	88 2f       	mov	r24, r24
    529a:	90 e0       	ldi	r25, 0x00	; 0
    529c:	aa 27       	eor	r26, r26
    529e:	97 fd       	sbrc	r25, 7
    52a0:	a0 95       	com	r26
    52a2:	ba 2f       	mov	r27, r26
    52a4:	bc 01       	movw	r22, r24
    52a6:	cd 01       	movw	r24, r26
    52a8:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    52ac:	9b 01       	movw	r18, r22
    52ae:	ac 01       	movw	r20, r24
    52b0:	c8 01       	movw	r24, r16
    52b2:	b7 01       	movw	r22, r14
    52b4:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    52b8:	dc 01       	movw	r26, r24
    52ba:	cb 01       	movw	r24, r22
    52bc:	bc 01       	movw	r22, r24
    52be:	cd 01       	movw	r24, r26
    52c0:	20 e0       	ldi	r18, 0x00	; 0
    52c2:	30 e0       	ldi	r19, 0x00	; 0
    52c4:	40 e4       	ldi	r20, 0x40	; 64
    52c6:	52 e4       	ldi	r21, 0x42	; 66
    52c8:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    52cc:	dc 01       	movw	r26, r24
    52ce:	cb 01       	movw	r24, r22
    52d0:	8d 87       	std	Y+13, r24	; 0x0d
    52d2:	9e 87       	std	Y+14, r25	; 0x0e
    52d4:	af 87       	std	Y+15, r26	; 0x0f
    52d6:	b8 8b       	std	Y+16, r27	; 0x10
    52d8:	08 cf       	rjmp	.-496    	; 0x50ea <SM_VoidCalc+0x5a>
    52da:	8c 81       	ldd	r24, Y+4	; 0x04
    52dc:	81 30       	cpi	r24, 0x01	; 1
    52de:	09 f0       	breq	.+2      	; 0x52e2 <SM_VoidCalc+0x252>
    52e0:	04 cf       	rjmp	.-504    	; 0x50ea <SM_VoidCalc+0x5a>
    52e2:	69 85       	ldd	r22, Y+9	; 0x09
    52e4:	7a 85       	ldd	r23, Y+10	; 0x0a
    52e6:	8b 85       	ldd	r24, Y+11	; 0x0b
    52e8:	9c 85       	ldd	r25, Y+12	; 0x0c
    52ea:	20 e0       	ldi	r18, 0x00	; 0
    52ec:	30 e0       	ldi	r19, 0x00	; 0
    52ee:	40 e2       	ldi	r20, 0x20	; 32
    52f0:	51 e4       	ldi	r21, 0x41	; 65
    52f2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    52f6:	dc 01       	movw	r26, r24
    52f8:	cb 01       	movw	r24, r22
    52fa:	7c 01       	movw	r14, r24
    52fc:	8d 01       	movw	r16, r26
    52fe:	89 89       	ldd	r24, Y+17	; 0x11
    5300:	88 2f       	mov	r24, r24
    5302:	90 e0       	ldi	r25, 0x00	; 0
    5304:	aa 27       	eor	r26, r26
    5306:	97 fd       	sbrc	r25, 7
    5308:	a0 95       	com	r26
    530a:	ba 2f       	mov	r27, r26
    530c:	bc 01       	movw	r22, r24
    530e:	cd 01       	movw	r24, r26
    5310:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    5314:	9b 01       	movw	r18, r22
    5316:	ac 01       	movw	r20, r24
    5318:	c8 01       	movw	r24, r16
    531a:	b7 01       	movw	r22, r14
    531c:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    5320:	dc 01       	movw	r26, r24
    5322:	cb 01       	movw	r24, r22
    5324:	bc 01       	movw	r22, r24
    5326:	cd 01       	movw	r24, r26
    5328:	20 e0       	ldi	r18, 0x00	; 0
    532a:	30 e0       	ldi	r19, 0x00	; 0
    532c:	40 e4       	ldi	r20, 0x40	; 64
    532e:	52 e4       	ldi	r21, 0x42	; 66
    5330:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    5334:	dc 01       	movw	r26, r24
    5336:	cb 01       	movw	r24, r22
    5338:	89 87       	std	Y+9, r24	; 0x09
    533a:	9a 87       	std	Y+10, r25	; 0x0a
    533c:	ab 87       	std	Y+11, r26	; 0x0b
    533e:	bc 87       	std	Y+12, r27	; 0x0c
    5340:	d4 ce       	rjmp	.-600    	; 0x50ea <SM_VoidCalc+0x5a>
	case '1': LCD_VoidSendData(ch); if(state==0|| op==5 || op==8 || op==9|| op==10) {operand1 = ((operand1 * 10) + ch)-48;} else if(state==1){operand2 = ((operand2 * 10) + ch)-48; } break;
    5342:	89 89       	ldd	r24, Y+17	; 0x11
    5344:	0e 94 c7 13 	call	0x278e	; 0x278e <LCD_VoidSendData>
    5348:	8c 81       	ldd	r24, Y+4	; 0x04
    534a:	88 23       	and	r24, r24
    534c:	61 f0       	breq	.+24     	; 0x5366 <SM_VoidCalc+0x2d6>
    534e:	89 81       	ldd	r24, Y+1	; 0x01
    5350:	85 30       	cpi	r24, 0x05	; 5
    5352:	49 f0       	breq	.+18     	; 0x5366 <SM_VoidCalc+0x2d6>
    5354:	89 81       	ldd	r24, Y+1	; 0x01
    5356:	88 30       	cpi	r24, 0x08	; 8
    5358:	31 f0       	breq	.+12     	; 0x5366 <SM_VoidCalc+0x2d6>
    535a:	89 81       	ldd	r24, Y+1	; 0x01
    535c:	89 30       	cpi	r24, 0x09	; 9
    535e:	19 f0       	breq	.+6      	; 0x5366 <SM_VoidCalc+0x2d6>
    5360:	89 81       	ldd	r24, Y+1	; 0x01
    5362:	8a 30       	cpi	r24, 0x0A	; 10
    5364:	81 f5       	brne	.+96     	; 0x53c6 <SM_VoidCalc+0x336>
    5366:	6d 85       	ldd	r22, Y+13	; 0x0d
    5368:	7e 85       	ldd	r23, Y+14	; 0x0e
    536a:	8f 85       	ldd	r24, Y+15	; 0x0f
    536c:	98 89       	ldd	r25, Y+16	; 0x10
    536e:	20 e0       	ldi	r18, 0x00	; 0
    5370:	30 e0       	ldi	r19, 0x00	; 0
    5372:	40 e2       	ldi	r20, 0x20	; 32
    5374:	51 e4       	ldi	r21, 0x41	; 65
    5376:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    537a:	dc 01       	movw	r26, r24
    537c:	cb 01       	movw	r24, r22
    537e:	7c 01       	movw	r14, r24
    5380:	8d 01       	movw	r16, r26
    5382:	89 89       	ldd	r24, Y+17	; 0x11
    5384:	88 2f       	mov	r24, r24
    5386:	90 e0       	ldi	r25, 0x00	; 0
    5388:	aa 27       	eor	r26, r26
    538a:	97 fd       	sbrc	r25, 7
    538c:	a0 95       	com	r26
    538e:	ba 2f       	mov	r27, r26
    5390:	bc 01       	movw	r22, r24
    5392:	cd 01       	movw	r24, r26
    5394:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    5398:	9b 01       	movw	r18, r22
    539a:	ac 01       	movw	r20, r24
    539c:	c8 01       	movw	r24, r16
    539e:	b7 01       	movw	r22, r14
    53a0:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    53a4:	dc 01       	movw	r26, r24
    53a6:	cb 01       	movw	r24, r22
    53a8:	bc 01       	movw	r22, r24
    53aa:	cd 01       	movw	r24, r26
    53ac:	20 e0       	ldi	r18, 0x00	; 0
    53ae:	30 e0       	ldi	r19, 0x00	; 0
    53b0:	40 e4       	ldi	r20, 0x40	; 64
    53b2:	52 e4       	ldi	r21, 0x42	; 66
    53b4:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    53b8:	dc 01       	movw	r26, r24
    53ba:	cb 01       	movw	r24, r22
    53bc:	8d 87       	std	Y+13, r24	; 0x0d
    53be:	9e 87       	std	Y+14, r25	; 0x0e
    53c0:	af 87       	std	Y+15, r26	; 0x0f
    53c2:	b8 8b       	std	Y+16, r27	; 0x10
    53c4:	92 ce       	rjmp	.-732    	; 0x50ea <SM_VoidCalc+0x5a>
    53c6:	8c 81       	ldd	r24, Y+4	; 0x04
    53c8:	81 30       	cpi	r24, 0x01	; 1
    53ca:	09 f0       	breq	.+2      	; 0x53ce <SM_VoidCalc+0x33e>
    53cc:	8e ce       	rjmp	.-740    	; 0x50ea <SM_VoidCalc+0x5a>
    53ce:	69 85       	ldd	r22, Y+9	; 0x09
    53d0:	7a 85       	ldd	r23, Y+10	; 0x0a
    53d2:	8b 85       	ldd	r24, Y+11	; 0x0b
    53d4:	9c 85       	ldd	r25, Y+12	; 0x0c
    53d6:	20 e0       	ldi	r18, 0x00	; 0
    53d8:	30 e0       	ldi	r19, 0x00	; 0
    53da:	40 e2       	ldi	r20, 0x20	; 32
    53dc:	51 e4       	ldi	r21, 0x41	; 65
    53de:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    53e2:	dc 01       	movw	r26, r24
    53e4:	cb 01       	movw	r24, r22
    53e6:	7c 01       	movw	r14, r24
    53e8:	8d 01       	movw	r16, r26
    53ea:	89 89       	ldd	r24, Y+17	; 0x11
    53ec:	88 2f       	mov	r24, r24
    53ee:	90 e0       	ldi	r25, 0x00	; 0
    53f0:	aa 27       	eor	r26, r26
    53f2:	97 fd       	sbrc	r25, 7
    53f4:	a0 95       	com	r26
    53f6:	ba 2f       	mov	r27, r26
    53f8:	bc 01       	movw	r22, r24
    53fa:	cd 01       	movw	r24, r26
    53fc:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    5400:	9b 01       	movw	r18, r22
    5402:	ac 01       	movw	r20, r24
    5404:	c8 01       	movw	r24, r16
    5406:	b7 01       	movw	r22, r14
    5408:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    540c:	dc 01       	movw	r26, r24
    540e:	cb 01       	movw	r24, r22
    5410:	bc 01       	movw	r22, r24
    5412:	cd 01       	movw	r24, r26
    5414:	20 e0       	ldi	r18, 0x00	; 0
    5416:	30 e0       	ldi	r19, 0x00	; 0
    5418:	40 e4       	ldi	r20, 0x40	; 64
    541a:	52 e4       	ldi	r21, 0x42	; 66
    541c:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    5420:	dc 01       	movw	r26, r24
    5422:	cb 01       	movw	r24, r22
    5424:	89 87       	std	Y+9, r24	; 0x09
    5426:	9a 87       	std	Y+10, r25	; 0x0a
    5428:	ab 87       	std	Y+11, r26	; 0x0b
    542a:	bc 87       	std	Y+12, r27	; 0x0c
    542c:	5e ce       	rjmp	.-836    	; 0x50ea <SM_VoidCalc+0x5a>
	case '2': LCD_VoidSendData(ch); if(state==0|| op==5 || op==8 || op==9|| op==10) {operand1 = ((operand1 * 10) + ch)-48;} else if(state==1){operand2 = ((operand2 * 10) + ch)-48; } break;
    542e:	89 89       	ldd	r24, Y+17	; 0x11
    5430:	0e 94 c7 13 	call	0x278e	; 0x278e <LCD_VoidSendData>
    5434:	8c 81       	ldd	r24, Y+4	; 0x04
    5436:	88 23       	and	r24, r24
    5438:	61 f0       	breq	.+24     	; 0x5452 <SM_VoidCalc+0x3c2>
    543a:	89 81       	ldd	r24, Y+1	; 0x01
    543c:	85 30       	cpi	r24, 0x05	; 5
    543e:	49 f0       	breq	.+18     	; 0x5452 <SM_VoidCalc+0x3c2>
    5440:	89 81       	ldd	r24, Y+1	; 0x01
    5442:	88 30       	cpi	r24, 0x08	; 8
    5444:	31 f0       	breq	.+12     	; 0x5452 <SM_VoidCalc+0x3c2>
    5446:	89 81       	ldd	r24, Y+1	; 0x01
    5448:	89 30       	cpi	r24, 0x09	; 9
    544a:	19 f0       	breq	.+6      	; 0x5452 <SM_VoidCalc+0x3c2>
    544c:	89 81       	ldd	r24, Y+1	; 0x01
    544e:	8a 30       	cpi	r24, 0x0A	; 10
    5450:	81 f5       	brne	.+96     	; 0x54b2 <SM_VoidCalc+0x422>
    5452:	6d 85       	ldd	r22, Y+13	; 0x0d
    5454:	7e 85       	ldd	r23, Y+14	; 0x0e
    5456:	8f 85       	ldd	r24, Y+15	; 0x0f
    5458:	98 89       	ldd	r25, Y+16	; 0x10
    545a:	20 e0       	ldi	r18, 0x00	; 0
    545c:	30 e0       	ldi	r19, 0x00	; 0
    545e:	40 e2       	ldi	r20, 0x20	; 32
    5460:	51 e4       	ldi	r21, 0x41	; 65
    5462:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5466:	dc 01       	movw	r26, r24
    5468:	cb 01       	movw	r24, r22
    546a:	7c 01       	movw	r14, r24
    546c:	8d 01       	movw	r16, r26
    546e:	89 89       	ldd	r24, Y+17	; 0x11
    5470:	88 2f       	mov	r24, r24
    5472:	90 e0       	ldi	r25, 0x00	; 0
    5474:	aa 27       	eor	r26, r26
    5476:	97 fd       	sbrc	r25, 7
    5478:	a0 95       	com	r26
    547a:	ba 2f       	mov	r27, r26
    547c:	bc 01       	movw	r22, r24
    547e:	cd 01       	movw	r24, r26
    5480:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    5484:	9b 01       	movw	r18, r22
    5486:	ac 01       	movw	r20, r24
    5488:	c8 01       	movw	r24, r16
    548a:	b7 01       	movw	r22, r14
    548c:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    5490:	dc 01       	movw	r26, r24
    5492:	cb 01       	movw	r24, r22
    5494:	bc 01       	movw	r22, r24
    5496:	cd 01       	movw	r24, r26
    5498:	20 e0       	ldi	r18, 0x00	; 0
    549a:	30 e0       	ldi	r19, 0x00	; 0
    549c:	40 e4       	ldi	r20, 0x40	; 64
    549e:	52 e4       	ldi	r21, 0x42	; 66
    54a0:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    54a4:	dc 01       	movw	r26, r24
    54a6:	cb 01       	movw	r24, r22
    54a8:	8d 87       	std	Y+13, r24	; 0x0d
    54aa:	9e 87       	std	Y+14, r25	; 0x0e
    54ac:	af 87       	std	Y+15, r26	; 0x0f
    54ae:	b8 8b       	std	Y+16, r27	; 0x10
    54b0:	1c ce       	rjmp	.-968    	; 0x50ea <SM_VoidCalc+0x5a>
    54b2:	8c 81       	ldd	r24, Y+4	; 0x04
    54b4:	81 30       	cpi	r24, 0x01	; 1
    54b6:	09 f0       	breq	.+2      	; 0x54ba <SM_VoidCalc+0x42a>
    54b8:	18 ce       	rjmp	.-976    	; 0x50ea <SM_VoidCalc+0x5a>
    54ba:	69 85       	ldd	r22, Y+9	; 0x09
    54bc:	7a 85       	ldd	r23, Y+10	; 0x0a
    54be:	8b 85       	ldd	r24, Y+11	; 0x0b
    54c0:	9c 85       	ldd	r25, Y+12	; 0x0c
    54c2:	20 e0       	ldi	r18, 0x00	; 0
    54c4:	30 e0       	ldi	r19, 0x00	; 0
    54c6:	40 e2       	ldi	r20, 0x20	; 32
    54c8:	51 e4       	ldi	r21, 0x41	; 65
    54ca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    54ce:	dc 01       	movw	r26, r24
    54d0:	cb 01       	movw	r24, r22
    54d2:	7c 01       	movw	r14, r24
    54d4:	8d 01       	movw	r16, r26
    54d6:	89 89       	ldd	r24, Y+17	; 0x11
    54d8:	88 2f       	mov	r24, r24
    54da:	90 e0       	ldi	r25, 0x00	; 0
    54dc:	aa 27       	eor	r26, r26
    54de:	97 fd       	sbrc	r25, 7
    54e0:	a0 95       	com	r26
    54e2:	ba 2f       	mov	r27, r26
    54e4:	bc 01       	movw	r22, r24
    54e6:	cd 01       	movw	r24, r26
    54e8:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    54ec:	9b 01       	movw	r18, r22
    54ee:	ac 01       	movw	r20, r24
    54f0:	c8 01       	movw	r24, r16
    54f2:	b7 01       	movw	r22, r14
    54f4:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    54f8:	dc 01       	movw	r26, r24
    54fa:	cb 01       	movw	r24, r22
    54fc:	bc 01       	movw	r22, r24
    54fe:	cd 01       	movw	r24, r26
    5500:	20 e0       	ldi	r18, 0x00	; 0
    5502:	30 e0       	ldi	r19, 0x00	; 0
    5504:	40 e4       	ldi	r20, 0x40	; 64
    5506:	52 e4       	ldi	r21, 0x42	; 66
    5508:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    550c:	dc 01       	movw	r26, r24
    550e:	cb 01       	movw	r24, r22
    5510:	89 87       	std	Y+9, r24	; 0x09
    5512:	9a 87       	std	Y+10, r25	; 0x0a
    5514:	ab 87       	std	Y+11, r26	; 0x0b
    5516:	bc 87       	std	Y+12, r27	; 0x0c
    5518:	e8 cd       	rjmp	.-1072   	; 0x50ea <SM_VoidCalc+0x5a>
	case '3': LCD_VoidSendData(ch); if(state==0|| op==5 || op==8 || op==9|| op==10) {operand1 = ((operand1 * 10) + ch)-48;} else if(state==1){operand2 = ((operand2 * 10) + ch)-48; } break;
    551a:	89 89       	ldd	r24, Y+17	; 0x11
    551c:	0e 94 c7 13 	call	0x278e	; 0x278e <LCD_VoidSendData>
    5520:	8c 81       	ldd	r24, Y+4	; 0x04
    5522:	88 23       	and	r24, r24
    5524:	61 f0       	breq	.+24     	; 0x553e <SM_VoidCalc+0x4ae>
    5526:	89 81       	ldd	r24, Y+1	; 0x01
    5528:	85 30       	cpi	r24, 0x05	; 5
    552a:	49 f0       	breq	.+18     	; 0x553e <SM_VoidCalc+0x4ae>
    552c:	89 81       	ldd	r24, Y+1	; 0x01
    552e:	88 30       	cpi	r24, 0x08	; 8
    5530:	31 f0       	breq	.+12     	; 0x553e <SM_VoidCalc+0x4ae>
    5532:	89 81       	ldd	r24, Y+1	; 0x01
    5534:	89 30       	cpi	r24, 0x09	; 9
    5536:	19 f0       	breq	.+6      	; 0x553e <SM_VoidCalc+0x4ae>
    5538:	89 81       	ldd	r24, Y+1	; 0x01
    553a:	8a 30       	cpi	r24, 0x0A	; 10
    553c:	81 f5       	brne	.+96     	; 0x559e <SM_VoidCalc+0x50e>
    553e:	6d 85       	ldd	r22, Y+13	; 0x0d
    5540:	7e 85       	ldd	r23, Y+14	; 0x0e
    5542:	8f 85       	ldd	r24, Y+15	; 0x0f
    5544:	98 89       	ldd	r25, Y+16	; 0x10
    5546:	20 e0       	ldi	r18, 0x00	; 0
    5548:	30 e0       	ldi	r19, 0x00	; 0
    554a:	40 e2       	ldi	r20, 0x20	; 32
    554c:	51 e4       	ldi	r21, 0x41	; 65
    554e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5552:	dc 01       	movw	r26, r24
    5554:	cb 01       	movw	r24, r22
    5556:	7c 01       	movw	r14, r24
    5558:	8d 01       	movw	r16, r26
    555a:	89 89       	ldd	r24, Y+17	; 0x11
    555c:	88 2f       	mov	r24, r24
    555e:	90 e0       	ldi	r25, 0x00	; 0
    5560:	aa 27       	eor	r26, r26
    5562:	97 fd       	sbrc	r25, 7
    5564:	a0 95       	com	r26
    5566:	ba 2f       	mov	r27, r26
    5568:	bc 01       	movw	r22, r24
    556a:	cd 01       	movw	r24, r26
    556c:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    5570:	9b 01       	movw	r18, r22
    5572:	ac 01       	movw	r20, r24
    5574:	c8 01       	movw	r24, r16
    5576:	b7 01       	movw	r22, r14
    5578:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    557c:	dc 01       	movw	r26, r24
    557e:	cb 01       	movw	r24, r22
    5580:	bc 01       	movw	r22, r24
    5582:	cd 01       	movw	r24, r26
    5584:	20 e0       	ldi	r18, 0x00	; 0
    5586:	30 e0       	ldi	r19, 0x00	; 0
    5588:	40 e4       	ldi	r20, 0x40	; 64
    558a:	52 e4       	ldi	r21, 0x42	; 66
    558c:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    5590:	dc 01       	movw	r26, r24
    5592:	cb 01       	movw	r24, r22
    5594:	8d 87       	std	Y+13, r24	; 0x0d
    5596:	9e 87       	std	Y+14, r25	; 0x0e
    5598:	af 87       	std	Y+15, r26	; 0x0f
    559a:	b8 8b       	std	Y+16, r27	; 0x10
    559c:	a6 cd       	rjmp	.-1204   	; 0x50ea <SM_VoidCalc+0x5a>
    559e:	8c 81       	ldd	r24, Y+4	; 0x04
    55a0:	81 30       	cpi	r24, 0x01	; 1
    55a2:	09 f0       	breq	.+2      	; 0x55a6 <SM_VoidCalc+0x516>
    55a4:	a2 cd       	rjmp	.-1212   	; 0x50ea <SM_VoidCalc+0x5a>
    55a6:	69 85       	ldd	r22, Y+9	; 0x09
    55a8:	7a 85       	ldd	r23, Y+10	; 0x0a
    55aa:	8b 85       	ldd	r24, Y+11	; 0x0b
    55ac:	9c 85       	ldd	r25, Y+12	; 0x0c
    55ae:	20 e0       	ldi	r18, 0x00	; 0
    55b0:	30 e0       	ldi	r19, 0x00	; 0
    55b2:	40 e2       	ldi	r20, 0x20	; 32
    55b4:	51 e4       	ldi	r21, 0x41	; 65
    55b6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    55ba:	dc 01       	movw	r26, r24
    55bc:	cb 01       	movw	r24, r22
    55be:	7c 01       	movw	r14, r24
    55c0:	8d 01       	movw	r16, r26
    55c2:	89 89       	ldd	r24, Y+17	; 0x11
    55c4:	88 2f       	mov	r24, r24
    55c6:	90 e0       	ldi	r25, 0x00	; 0
    55c8:	aa 27       	eor	r26, r26
    55ca:	97 fd       	sbrc	r25, 7
    55cc:	a0 95       	com	r26
    55ce:	ba 2f       	mov	r27, r26
    55d0:	bc 01       	movw	r22, r24
    55d2:	cd 01       	movw	r24, r26
    55d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    55d8:	9b 01       	movw	r18, r22
    55da:	ac 01       	movw	r20, r24
    55dc:	c8 01       	movw	r24, r16
    55de:	b7 01       	movw	r22, r14
    55e0:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    55e4:	dc 01       	movw	r26, r24
    55e6:	cb 01       	movw	r24, r22
    55e8:	bc 01       	movw	r22, r24
    55ea:	cd 01       	movw	r24, r26
    55ec:	20 e0       	ldi	r18, 0x00	; 0
    55ee:	30 e0       	ldi	r19, 0x00	; 0
    55f0:	40 e4       	ldi	r20, 0x40	; 64
    55f2:	52 e4       	ldi	r21, 0x42	; 66
    55f4:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    55f8:	dc 01       	movw	r26, r24
    55fa:	cb 01       	movw	r24, r22
    55fc:	89 87       	std	Y+9, r24	; 0x09
    55fe:	9a 87       	std	Y+10, r25	; 0x0a
    5600:	ab 87       	std	Y+11, r26	; 0x0b
    5602:	bc 87       	std	Y+12, r27	; 0x0c
    5604:	72 cd       	rjmp	.-1308   	; 0x50ea <SM_VoidCalc+0x5a>
	case '4': LCD_VoidSendData(ch); if(state==0|| op==5 || op==8 || op==9|| op==10) {operand1 = ((operand1 * 10) + ch)-48;} else if(state==1){operand2 = ((operand2 * 10) + ch)-48; } break;
    5606:	89 89       	ldd	r24, Y+17	; 0x11
    5608:	0e 94 c7 13 	call	0x278e	; 0x278e <LCD_VoidSendData>
    560c:	8c 81       	ldd	r24, Y+4	; 0x04
    560e:	88 23       	and	r24, r24
    5610:	61 f0       	breq	.+24     	; 0x562a <SM_VoidCalc+0x59a>
    5612:	89 81       	ldd	r24, Y+1	; 0x01
    5614:	85 30       	cpi	r24, 0x05	; 5
    5616:	49 f0       	breq	.+18     	; 0x562a <SM_VoidCalc+0x59a>
    5618:	89 81       	ldd	r24, Y+1	; 0x01
    561a:	88 30       	cpi	r24, 0x08	; 8
    561c:	31 f0       	breq	.+12     	; 0x562a <SM_VoidCalc+0x59a>
    561e:	89 81       	ldd	r24, Y+1	; 0x01
    5620:	89 30       	cpi	r24, 0x09	; 9
    5622:	19 f0       	breq	.+6      	; 0x562a <SM_VoidCalc+0x59a>
    5624:	89 81       	ldd	r24, Y+1	; 0x01
    5626:	8a 30       	cpi	r24, 0x0A	; 10
    5628:	81 f5       	brne	.+96     	; 0x568a <SM_VoidCalc+0x5fa>
    562a:	6d 85       	ldd	r22, Y+13	; 0x0d
    562c:	7e 85       	ldd	r23, Y+14	; 0x0e
    562e:	8f 85       	ldd	r24, Y+15	; 0x0f
    5630:	98 89       	ldd	r25, Y+16	; 0x10
    5632:	20 e0       	ldi	r18, 0x00	; 0
    5634:	30 e0       	ldi	r19, 0x00	; 0
    5636:	40 e2       	ldi	r20, 0x20	; 32
    5638:	51 e4       	ldi	r21, 0x41	; 65
    563a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    563e:	dc 01       	movw	r26, r24
    5640:	cb 01       	movw	r24, r22
    5642:	7c 01       	movw	r14, r24
    5644:	8d 01       	movw	r16, r26
    5646:	89 89       	ldd	r24, Y+17	; 0x11
    5648:	88 2f       	mov	r24, r24
    564a:	90 e0       	ldi	r25, 0x00	; 0
    564c:	aa 27       	eor	r26, r26
    564e:	97 fd       	sbrc	r25, 7
    5650:	a0 95       	com	r26
    5652:	ba 2f       	mov	r27, r26
    5654:	bc 01       	movw	r22, r24
    5656:	cd 01       	movw	r24, r26
    5658:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    565c:	9b 01       	movw	r18, r22
    565e:	ac 01       	movw	r20, r24
    5660:	c8 01       	movw	r24, r16
    5662:	b7 01       	movw	r22, r14
    5664:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    5668:	dc 01       	movw	r26, r24
    566a:	cb 01       	movw	r24, r22
    566c:	bc 01       	movw	r22, r24
    566e:	cd 01       	movw	r24, r26
    5670:	20 e0       	ldi	r18, 0x00	; 0
    5672:	30 e0       	ldi	r19, 0x00	; 0
    5674:	40 e4       	ldi	r20, 0x40	; 64
    5676:	52 e4       	ldi	r21, 0x42	; 66
    5678:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    567c:	dc 01       	movw	r26, r24
    567e:	cb 01       	movw	r24, r22
    5680:	8d 87       	std	Y+13, r24	; 0x0d
    5682:	9e 87       	std	Y+14, r25	; 0x0e
    5684:	af 87       	std	Y+15, r26	; 0x0f
    5686:	b8 8b       	std	Y+16, r27	; 0x10
    5688:	30 cd       	rjmp	.-1440   	; 0x50ea <SM_VoidCalc+0x5a>
    568a:	8c 81       	ldd	r24, Y+4	; 0x04
    568c:	81 30       	cpi	r24, 0x01	; 1
    568e:	09 f0       	breq	.+2      	; 0x5692 <SM_VoidCalc+0x602>
    5690:	2c cd       	rjmp	.-1448   	; 0x50ea <SM_VoidCalc+0x5a>
    5692:	69 85       	ldd	r22, Y+9	; 0x09
    5694:	7a 85       	ldd	r23, Y+10	; 0x0a
    5696:	8b 85       	ldd	r24, Y+11	; 0x0b
    5698:	9c 85       	ldd	r25, Y+12	; 0x0c
    569a:	20 e0       	ldi	r18, 0x00	; 0
    569c:	30 e0       	ldi	r19, 0x00	; 0
    569e:	40 e2       	ldi	r20, 0x20	; 32
    56a0:	51 e4       	ldi	r21, 0x41	; 65
    56a2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    56a6:	dc 01       	movw	r26, r24
    56a8:	cb 01       	movw	r24, r22
    56aa:	7c 01       	movw	r14, r24
    56ac:	8d 01       	movw	r16, r26
    56ae:	89 89       	ldd	r24, Y+17	; 0x11
    56b0:	88 2f       	mov	r24, r24
    56b2:	90 e0       	ldi	r25, 0x00	; 0
    56b4:	aa 27       	eor	r26, r26
    56b6:	97 fd       	sbrc	r25, 7
    56b8:	a0 95       	com	r26
    56ba:	ba 2f       	mov	r27, r26
    56bc:	bc 01       	movw	r22, r24
    56be:	cd 01       	movw	r24, r26
    56c0:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    56c4:	9b 01       	movw	r18, r22
    56c6:	ac 01       	movw	r20, r24
    56c8:	c8 01       	movw	r24, r16
    56ca:	b7 01       	movw	r22, r14
    56cc:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    56d0:	dc 01       	movw	r26, r24
    56d2:	cb 01       	movw	r24, r22
    56d4:	bc 01       	movw	r22, r24
    56d6:	cd 01       	movw	r24, r26
    56d8:	20 e0       	ldi	r18, 0x00	; 0
    56da:	30 e0       	ldi	r19, 0x00	; 0
    56dc:	40 e4       	ldi	r20, 0x40	; 64
    56de:	52 e4       	ldi	r21, 0x42	; 66
    56e0:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    56e4:	dc 01       	movw	r26, r24
    56e6:	cb 01       	movw	r24, r22
    56e8:	89 87       	std	Y+9, r24	; 0x09
    56ea:	9a 87       	std	Y+10, r25	; 0x0a
    56ec:	ab 87       	std	Y+11, r26	; 0x0b
    56ee:	bc 87       	std	Y+12, r27	; 0x0c
    56f0:	fc cc       	rjmp	.-1544   	; 0x50ea <SM_VoidCalc+0x5a>
	case '5': LCD_VoidSendData(ch); if(state==0|| op==5 || op==8 || op==9|| op==10) {operand1 = ((operand1 * 10) + ch)-48;} else if(state==1){operand2 = ((operand2 * 10) + ch)-48; } break;
    56f2:	89 89       	ldd	r24, Y+17	; 0x11
    56f4:	0e 94 c7 13 	call	0x278e	; 0x278e <LCD_VoidSendData>
    56f8:	8c 81       	ldd	r24, Y+4	; 0x04
    56fa:	88 23       	and	r24, r24
    56fc:	61 f0       	breq	.+24     	; 0x5716 <SM_VoidCalc+0x686>
    56fe:	89 81       	ldd	r24, Y+1	; 0x01
    5700:	85 30       	cpi	r24, 0x05	; 5
    5702:	49 f0       	breq	.+18     	; 0x5716 <SM_VoidCalc+0x686>
    5704:	89 81       	ldd	r24, Y+1	; 0x01
    5706:	88 30       	cpi	r24, 0x08	; 8
    5708:	31 f0       	breq	.+12     	; 0x5716 <SM_VoidCalc+0x686>
    570a:	89 81       	ldd	r24, Y+1	; 0x01
    570c:	89 30       	cpi	r24, 0x09	; 9
    570e:	19 f0       	breq	.+6      	; 0x5716 <SM_VoidCalc+0x686>
    5710:	89 81       	ldd	r24, Y+1	; 0x01
    5712:	8a 30       	cpi	r24, 0x0A	; 10
    5714:	81 f5       	brne	.+96     	; 0x5776 <SM_VoidCalc+0x6e6>
    5716:	6d 85       	ldd	r22, Y+13	; 0x0d
    5718:	7e 85       	ldd	r23, Y+14	; 0x0e
    571a:	8f 85       	ldd	r24, Y+15	; 0x0f
    571c:	98 89       	ldd	r25, Y+16	; 0x10
    571e:	20 e0       	ldi	r18, 0x00	; 0
    5720:	30 e0       	ldi	r19, 0x00	; 0
    5722:	40 e2       	ldi	r20, 0x20	; 32
    5724:	51 e4       	ldi	r21, 0x41	; 65
    5726:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    572a:	dc 01       	movw	r26, r24
    572c:	cb 01       	movw	r24, r22
    572e:	7c 01       	movw	r14, r24
    5730:	8d 01       	movw	r16, r26
    5732:	89 89       	ldd	r24, Y+17	; 0x11
    5734:	88 2f       	mov	r24, r24
    5736:	90 e0       	ldi	r25, 0x00	; 0
    5738:	aa 27       	eor	r26, r26
    573a:	97 fd       	sbrc	r25, 7
    573c:	a0 95       	com	r26
    573e:	ba 2f       	mov	r27, r26
    5740:	bc 01       	movw	r22, r24
    5742:	cd 01       	movw	r24, r26
    5744:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    5748:	9b 01       	movw	r18, r22
    574a:	ac 01       	movw	r20, r24
    574c:	c8 01       	movw	r24, r16
    574e:	b7 01       	movw	r22, r14
    5750:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    5754:	dc 01       	movw	r26, r24
    5756:	cb 01       	movw	r24, r22
    5758:	bc 01       	movw	r22, r24
    575a:	cd 01       	movw	r24, r26
    575c:	20 e0       	ldi	r18, 0x00	; 0
    575e:	30 e0       	ldi	r19, 0x00	; 0
    5760:	40 e4       	ldi	r20, 0x40	; 64
    5762:	52 e4       	ldi	r21, 0x42	; 66
    5764:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    5768:	dc 01       	movw	r26, r24
    576a:	cb 01       	movw	r24, r22
    576c:	8d 87       	std	Y+13, r24	; 0x0d
    576e:	9e 87       	std	Y+14, r25	; 0x0e
    5770:	af 87       	std	Y+15, r26	; 0x0f
    5772:	b8 8b       	std	Y+16, r27	; 0x10
    5774:	ba cc       	rjmp	.-1676   	; 0x50ea <SM_VoidCalc+0x5a>
    5776:	8c 81       	ldd	r24, Y+4	; 0x04
    5778:	81 30       	cpi	r24, 0x01	; 1
    577a:	09 f0       	breq	.+2      	; 0x577e <SM_VoidCalc+0x6ee>
    577c:	b6 cc       	rjmp	.-1684   	; 0x50ea <SM_VoidCalc+0x5a>
    577e:	69 85       	ldd	r22, Y+9	; 0x09
    5780:	7a 85       	ldd	r23, Y+10	; 0x0a
    5782:	8b 85       	ldd	r24, Y+11	; 0x0b
    5784:	9c 85       	ldd	r25, Y+12	; 0x0c
    5786:	20 e0       	ldi	r18, 0x00	; 0
    5788:	30 e0       	ldi	r19, 0x00	; 0
    578a:	40 e2       	ldi	r20, 0x20	; 32
    578c:	51 e4       	ldi	r21, 0x41	; 65
    578e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5792:	dc 01       	movw	r26, r24
    5794:	cb 01       	movw	r24, r22
    5796:	7c 01       	movw	r14, r24
    5798:	8d 01       	movw	r16, r26
    579a:	89 89       	ldd	r24, Y+17	; 0x11
    579c:	88 2f       	mov	r24, r24
    579e:	90 e0       	ldi	r25, 0x00	; 0
    57a0:	aa 27       	eor	r26, r26
    57a2:	97 fd       	sbrc	r25, 7
    57a4:	a0 95       	com	r26
    57a6:	ba 2f       	mov	r27, r26
    57a8:	bc 01       	movw	r22, r24
    57aa:	cd 01       	movw	r24, r26
    57ac:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    57b0:	9b 01       	movw	r18, r22
    57b2:	ac 01       	movw	r20, r24
    57b4:	c8 01       	movw	r24, r16
    57b6:	b7 01       	movw	r22, r14
    57b8:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    57bc:	dc 01       	movw	r26, r24
    57be:	cb 01       	movw	r24, r22
    57c0:	bc 01       	movw	r22, r24
    57c2:	cd 01       	movw	r24, r26
    57c4:	20 e0       	ldi	r18, 0x00	; 0
    57c6:	30 e0       	ldi	r19, 0x00	; 0
    57c8:	40 e4       	ldi	r20, 0x40	; 64
    57ca:	52 e4       	ldi	r21, 0x42	; 66
    57cc:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    57d0:	dc 01       	movw	r26, r24
    57d2:	cb 01       	movw	r24, r22
    57d4:	89 87       	std	Y+9, r24	; 0x09
    57d6:	9a 87       	std	Y+10, r25	; 0x0a
    57d8:	ab 87       	std	Y+11, r26	; 0x0b
    57da:	bc 87       	std	Y+12, r27	; 0x0c
    57dc:	86 cc       	rjmp	.-1780   	; 0x50ea <SM_VoidCalc+0x5a>
	case '6': LCD_VoidSendData(ch); if(state==0|| op==5 || op==8 || op==9|| op==10) {operand1 = ((operand1 * 10) + ch)-48;} else if(state==1){operand2 = ((operand2 * 10) + ch)-48; } break;
    57de:	89 89       	ldd	r24, Y+17	; 0x11
    57e0:	0e 94 c7 13 	call	0x278e	; 0x278e <LCD_VoidSendData>
    57e4:	8c 81       	ldd	r24, Y+4	; 0x04
    57e6:	88 23       	and	r24, r24
    57e8:	61 f0       	breq	.+24     	; 0x5802 <SM_VoidCalc+0x772>
    57ea:	89 81       	ldd	r24, Y+1	; 0x01
    57ec:	85 30       	cpi	r24, 0x05	; 5
    57ee:	49 f0       	breq	.+18     	; 0x5802 <SM_VoidCalc+0x772>
    57f0:	89 81       	ldd	r24, Y+1	; 0x01
    57f2:	88 30       	cpi	r24, 0x08	; 8
    57f4:	31 f0       	breq	.+12     	; 0x5802 <SM_VoidCalc+0x772>
    57f6:	89 81       	ldd	r24, Y+1	; 0x01
    57f8:	89 30       	cpi	r24, 0x09	; 9
    57fa:	19 f0       	breq	.+6      	; 0x5802 <SM_VoidCalc+0x772>
    57fc:	89 81       	ldd	r24, Y+1	; 0x01
    57fe:	8a 30       	cpi	r24, 0x0A	; 10
    5800:	81 f5       	brne	.+96     	; 0x5862 <SM_VoidCalc+0x7d2>
    5802:	6d 85       	ldd	r22, Y+13	; 0x0d
    5804:	7e 85       	ldd	r23, Y+14	; 0x0e
    5806:	8f 85       	ldd	r24, Y+15	; 0x0f
    5808:	98 89       	ldd	r25, Y+16	; 0x10
    580a:	20 e0       	ldi	r18, 0x00	; 0
    580c:	30 e0       	ldi	r19, 0x00	; 0
    580e:	40 e2       	ldi	r20, 0x20	; 32
    5810:	51 e4       	ldi	r21, 0x41	; 65
    5812:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5816:	dc 01       	movw	r26, r24
    5818:	cb 01       	movw	r24, r22
    581a:	7c 01       	movw	r14, r24
    581c:	8d 01       	movw	r16, r26
    581e:	89 89       	ldd	r24, Y+17	; 0x11
    5820:	88 2f       	mov	r24, r24
    5822:	90 e0       	ldi	r25, 0x00	; 0
    5824:	aa 27       	eor	r26, r26
    5826:	97 fd       	sbrc	r25, 7
    5828:	a0 95       	com	r26
    582a:	ba 2f       	mov	r27, r26
    582c:	bc 01       	movw	r22, r24
    582e:	cd 01       	movw	r24, r26
    5830:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    5834:	9b 01       	movw	r18, r22
    5836:	ac 01       	movw	r20, r24
    5838:	c8 01       	movw	r24, r16
    583a:	b7 01       	movw	r22, r14
    583c:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    5840:	dc 01       	movw	r26, r24
    5842:	cb 01       	movw	r24, r22
    5844:	bc 01       	movw	r22, r24
    5846:	cd 01       	movw	r24, r26
    5848:	20 e0       	ldi	r18, 0x00	; 0
    584a:	30 e0       	ldi	r19, 0x00	; 0
    584c:	40 e4       	ldi	r20, 0x40	; 64
    584e:	52 e4       	ldi	r21, 0x42	; 66
    5850:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    5854:	dc 01       	movw	r26, r24
    5856:	cb 01       	movw	r24, r22
    5858:	8d 87       	std	Y+13, r24	; 0x0d
    585a:	9e 87       	std	Y+14, r25	; 0x0e
    585c:	af 87       	std	Y+15, r26	; 0x0f
    585e:	b8 8b       	std	Y+16, r27	; 0x10
    5860:	44 cc       	rjmp	.-1912   	; 0x50ea <SM_VoidCalc+0x5a>
    5862:	8c 81       	ldd	r24, Y+4	; 0x04
    5864:	81 30       	cpi	r24, 0x01	; 1
    5866:	09 f0       	breq	.+2      	; 0x586a <SM_VoidCalc+0x7da>
    5868:	40 cc       	rjmp	.-1920   	; 0x50ea <SM_VoidCalc+0x5a>
    586a:	69 85       	ldd	r22, Y+9	; 0x09
    586c:	7a 85       	ldd	r23, Y+10	; 0x0a
    586e:	8b 85       	ldd	r24, Y+11	; 0x0b
    5870:	9c 85       	ldd	r25, Y+12	; 0x0c
    5872:	20 e0       	ldi	r18, 0x00	; 0
    5874:	30 e0       	ldi	r19, 0x00	; 0
    5876:	40 e2       	ldi	r20, 0x20	; 32
    5878:	51 e4       	ldi	r21, 0x41	; 65
    587a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    587e:	dc 01       	movw	r26, r24
    5880:	cb 01       	movw	r24, r22
    5882:	7c 01       	movw	r14, r24
    5884:	8d 01       	movw	r16, r26
    5886:	89 89       	ldd	r24, Y+17	; 0x11
    5888:	88 2f       	mov	r24, r24
    588a:	90 e0       	ldi	r25, 0x00	; 0
    588c:	aa 27       	eor	r26, r26
    588e:	97 fd       	sbrc	r25, 7
    5890:	a0 95       	com	r26
    5892:	ba 2f       	mov	r27, r26
    5894:	bc 01       	movw	r22, r24
    5896:	cd 01       	movw	r24, r26
    5898:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    589c:	9b 01       	movw	r18, r22
    589e:	ac 01       	movw	r20, r24
    58a0:	c8 01       	movw	r24, r16
    58a2:	b7 01       	movw	r22, r14
    58a4:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    58a8:	dc 01       	movw	r26, r24
    58aa:	cb 01       	movw	r24, r22
    58ac:	bc 01       	movw	r22, r24
    58ae:	cd 01       	movw	r24, r26
    58b0:	20 e0       	ldi	r18, 0x00	; 0
    58b2:	30 e0       	ldi	r19, 0x00	; 0
    58b4:	40 e4       	ldi	r20, 0x40	; 64
    58b6:	52 e4       	ldi	r21, 0x42	; 66
    58b8:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    58bc:	dc 01       	movw	r26, r24
    58be:	cb 01       	movw	r24, r22
    58c0:	89 87       	std	Y+9, r24	; 0x09
    58c2:	9a 87       	std	Y+10, r25	; 0x0a
    58c4:	ab 87       	std	Y+11, r26	; 0x0b
    58c6:	bc 87       	std	Y+12, r27	; 0x0c
    58c8:	10 cc       	rjmp	.-2016   	; 0x50ea <SM_VoidCalc+0x5a>
	case '7': LCD_VoidSendData(ch); if(state==0|| op==5 || op==8 || op==9|| op==10) {operand1 = ((operand1 * 10) + ch)-48;} else if(state==1){operand2 = ((operand2 * 10) + ch)-48; } break;
    58ca:	89 89       	ldd	r24, Y+17	; 0x11
    58cc:	0e 94 c7 13 	call	0x278e	; 0x278e <LCD_VoidSendData>
    58d0:	8c 81       	ldd	r24, Y+4	; 0x04
    58d2:	88 23       	and	r24, r24
    58d4:	61 f0       	breq	.+24     	; 0x58ee <SM_VoidCalc+0x85e>
    58d6:	89 81       	ldd	r24, Y+1	; 0x01
    58d8:	85 30       	cpi	r24, 0x05	; 5
    58da:	49 f0       	breq	.+18     	; 0x58ee <SM_VoidCalc+0x85e>
    58dc:	89 81       	ldd	r24, Y+1	; 0x01
    58de:	88 30       	cpi	r24, 0x08	; 8
    58e0:	31 f0       	breq	.+12     	; 0x58ee <SM_VoidCalc+0x85e>
    58e2:	89 81       	ldd	r24, Y+1	; 0x01
    58e4:	89 30       	cpi	r24, 0x09	; 9
    58e6:	19 f0       	breq	.+6      	; 0x58ee <SM_VoidCalc+0x85e>
    58e8:	89 81       	ldd	r24, Y+1	; 0x01
    58ea:	8a 30       	cpi	r24, 0x0A	; 10
    58ec:	81 f5       	brne	.+96     	; 0x594e <SM_VoidCalc+0x8be>
    58ee:	6d 85       	ldd	r22, Y+13	; 0x0d
    58f0:	7e 85       	ldd	r23, Y+14	; 0x0e
    58f2:	8f 85       	ldd	r24, Y+15	; 0x0f
    58f4:	98 89       	ldd	r25, Y+16	; 0x10
    58f6:	20 e0       	ldi	r18, 0x00	; 0
    58f8:	30 e0       	ldi	r19, 0x00	; 0
    58fa:	40 e2       	ldi	r20, 0x20	; 32
    58fc:	51 e4       	ldi	r21, 0x41	; 65
    58fe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5902:	dc 01       	movw	r26, r24
    5904:	cb 01       	movw	r24, r22
    5906:	7c 01       	movw	r14, r24
    5908:	8d 01       	movw	r16, r26
    590a:	89 89       	ldd	r24, Y+17	; 0x11
    590c:	88 2f       	mov	r24, r24
    590e:	90 e0       	ldi	r25, 0x00	; 0
    5910:	aa 27       	eor	r26, r26
    5912:	97 fd       	sbrc	r25, 7
    5914:	a0 95       	com	r26
    5916:	ba 2f       	mov	r27, r26
    5918:	bc 01       	movw	r22, r24
    591a:	cd 01       	movw	r24, r26
    591c:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    5920:	9b 01       	movw	r18, r22
    5922:	ac 01       	movw	r20, r24
    5924:	c8 01       	movw	r24, r16
    5926:	b7 01       	movw	r22, r14
    5928:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    592c:	dc 01       	movw	r26, r24
    592e:	cb 01       	movw	r24, r22
    5930:	bc 01       	movw	r22, r24
    5932:	cd 01       	movw	r24, r26
    5934:	20 e0       	ldi	r18, 0x00	; 0
    5936:	30 e0       	ldi	r19, 0x00	; 0
    5938:	40 e4       	ldi	r20, 0x40	; 64
    593a:	52 e4       	ldi	r21, 0x42	; 66
    593c:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    5940:	dc 01       	movw	r26, r24
    5942:	cb 01       	movw	r24, r22
    5944:	8d 87       	std	Y+13, r24	; 0x0d
    5946:	9e 87       	std	Y+14, r25	; 0x0e
    5948:	af 87       	std	Y+15, r26	; 0x0f
    594a:	b8 8b       	std	Y+16, r27	; 0x10
    594c:	ce cb       	rjmp	.-2148   	; 0x50ea <SM_VoidCalc+0x5a>
    594e:	8c 81       	ldd	r24, Y+4	; 0x04
    5950:	81 30       	cpi	r24, 0x01	; 1
    5952:	09 f0       	breq	.+2      	; 0x5956 <SM_VoidCalc+0x8c6>
    5954:	ca cb       	rjmp	.-2156   	; 0x50ea <SM_VoidCalc+0x5a>
    5956:	69 85       	ldd	r22, Y+9	; 0x09
    5958:	7a 85       	ldd	r23, Y+10	; 0x0a
    595a:	8b 85       	ldd	r24, Y+11	; 0x0b
    595c:	9c 85       	ldd	r25, Y+12	; 0x0c
    595e:	20 e0       	ldi	r18, 0x00	; 0
    5960:	30 e0       	ldi	r19, 0x00	; 0
    5962:	40 e2       	ldi	r20, 0x20	; 32
    5964:	51 e4       	ldi	r21, 0x41	; 65
    5966:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    596a:	dc 01       	movw	r26, r24
    596c:	cb 01       	movw	r24, r22
    596e:	7c 01       	movw	r14, r24
    5970:	8d 01       	movw	r16, r26
    5972:	89 89       	ldd	r24, Y+17	; 0x11
    5974:	88 2f       	mov	r24, r24
    5976:	90 e0       	ldi	r25, 0x00	; 0
    5978:	aa 27       	eor	r26, r26
    597a:	97 fd       	sbrc	r25, 7
    597c:	a0 95       	com	r26
    597e:	ba 2f       	mov	r27, r26
    5980:	bc 01       	movw	r22, r24
    5982:	cd 01       	movw	r24, r26
    5984:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    5988:	9b 01       	movw	r18, r22
    598a:	ac 01       	movw	r20, r24
    598c:	c8 01       	movw	r24, r16
    598e:	b7 01       	movw	r22, r14
    5990:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    5994:	dc 01       	movw	r26, r24
    5996:	cb 01       	movw	r24, r22
    5998:	bc 01       	movw	r22, r24
    599a:	cd 01       	movw	r24, r26
    599c:	20 e0       	ldi	r18, 0x00	; 0
    599e:	30 e0       	ldi	r19, 0x00	; 0
    59a0:	40 e4       	ldi	r20, 0x40	; 64
    59a2:	52 e4       	ldi	r21, 0x42	; 66
    59a4:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    59a8:	dc 01       	movw	r26, r24
    59aa:	cb 01       	movw	r24, r22
    59ac:	89 87       	std	Y+9, r24	; 0x09
    59ae:	9a 87       	std	Y+10, r25	; 0x0a
    59b0:	ab 87       	std	Y+11, r26	; 0x0b
    59b2:	bc 87       	std	Y+12, r27	; 0x0c
    59b4:	9a cb       	rjmp	.-2252   	; 0x50ea <SM_VoidCalc+0x5a>
	case '8': LCD_VoidSendData(ch); if(state==0|| op==5 || op==8 || op==9|| op==10) {operand1 = ((operand1 * 10) + ch)-48;} else if(state==1){operand2 = ((operand2 * 10) + ch)-48; } break;
    59b6:	89 89       	ldd	r24, Y+17	; 0x11
    59b8:	0e 94 c7 13 	call	0x278e	; 0x278e <LCD_VoidSendData>
    59bc:	8c 81       	ldd	r24, Y+4	; 0x04
    59be:	88 23       	and	r24, r24
    59c0:	61 f0       	breq	.+24     	; 0x59da <SM_VoidCalc+0x94a>
    59c2:	89 81       	ldd	r24, Y+1	; 0x01
    59c4:	85 30       	cpi	r24, 0x05	; 5
    59c6:	49 f0       	breq	.+18     	; 0x59da <SM_VoidCalc+0x94a>
    59c8:	89 81       	ldd	r24, Y+1	; 0x01
    59ca:	88 30       	cpi	r24, 0x08	; 8
    59cc:	31 f0       	breq	.+12     	; 0x59da <SM_VoidCalc+0x94a>
    59ce:	89 81       	ldd	r24, Y+1	; 0x01
    59d0:	89 30       	cpi	r24, 0x09	; 9
    59d2:	19 f0       	breq	.+6      	; 0x59da <SM_VoidCalc+0x94a>
    59d4:	89 81       	ldd	r24, Y+1	; 0x01
    59d6:	8a 30       	cpi	r24, 0x0A	; 10
    59d8:	81 f5       	brne	.+96     	; 0x5a3a <SM_VoidCalc+0x9aa>
    59da:	6d 85       	ldd	r22, Y+13	; 0x0d
    59dc:	7e 85       	ldd	r23, Y+14	; 0x0e
    59de:	8f 85       	ldd	r24, Y+15	; 0x0f
    59e0:	98 89       	ldd	r25, Y+16	; 0x10
    59e2:	20 e0       	ldi	r18, 0x00	; 0
    59e4:	30 e0       	ldi	r19, 0x00	; 0
    59e6:	40 e2       	ldi	r20, 0x20	; 32
    59e8:	51 e4       	ldi	r21, 0x41	; 65
    59ea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    59ee:	dc 01       	movw	r26, r24
    59f0:	cb 01       	movw	r24, r22
    59f2:	7c 01       	movw	r14, r24
    59f4:	8d 01       	movw	r16, r26
    59f6:	89 89       	ldd	r24, Y+17	; 0x11
    59f8:	88 2f       	mov	r24, r24
    59fa:	90 e0       	ldi	r25, 0x00	; 0
    59fc:	aa 27       	eor	r26, r26
    59fe:	97 fd       	sbrc	r25, 7
    5a00:	a0 95       	com	r26
    5a02:	ba 2f       	mov	r27, r26
    5a04:	bc 01       	movw	r22, r24
    5a06:	cd 01       	movw	r24, r26
    5a08:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    5a0c:	9b 01       	movw	r18, r22
    5a0e:	ac 01       	movw	r20, r24
    5a10:	c8 01       	movw	r24, r16
    5a12:	b7 01       	movw	r22, r14
    5a14:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    5a18:	dc 01       	movw	r26, r24
    5a1a:	cb 01       	movw	r24, r22
    5a1c:	bc 01       	movw	r22, r24
    5a1e:	cd 01       	movw	r24, r26
    5a20:	20 e0       	ldi	r18, 0x00	; 0
    5a22:	30 e0       	ldi	r19, 0x00	; 0
    5a24:	40 e4       	ldi	r20, 0x40	; 64
    5a26:	52 e4       	ldi	r21, 0x42	; 66
    5a28:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    5a2c:	dc 01       	movw	r26, r24
    5a2e:	cb 01       	movw	r24, r22
    5a30:	8d 87       	std	Y+13, r24	; 0x0d
    5a32:	9e 87       	std	Y+14, r25	; 0x0e
    5a34:	af 87       	std	Y+15, r26	; 0x0f
    5a36:	b8 8b       	std	Y+16, r27	; 0x10
    5a38:	58 cb       	rjmp	.-2384   	; 0x50ea <SM_VoidCalc+0x5a>
    5a3a:	8c 81       	ldd	r24, Y+4	; 0x04
    5a3c:	81 30       	cpi	r24, 0x01	; 1
    5a3e:	09 f0       	breq	.+2      	; 0x5a42 <SM_VoidCalc+0x9b2>
    5a40:	54 cb       	rjmp	.-2392   	; 0x50ea <SM_VoidCalc+0x5a>
    5a42:	69 85       	ldd	r22, Y+9	; 0x09
    5a44:	7a 85       	ldd	r23, Y+10	; 0x0a
    5a46:	8b 85       	ldd	r24, Y+11	; 0x0b
    5a48:	9c 85       	ldd	r25, Y+12	; 0x0c
    5a4a:	20 e0       	ldi	r18, 0x00	; 0
    5a4c:	30 e0       	ldi	r19, 0x00	; 0
    5a4e:	40 e2       	ldi	r20, 0x20	; 32
    5a50:	51 e4       	ldi	r21, 0x41	; 65
    5a52:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5a56:	dc 01       	movw	r26, r24
    5a58:	cb 01       	movw	r24, r22
    5a5a:	7c 01       	movw	r14, r24
    5a5c:	8d 01       	movw	r16, r26
    5a5e:	89 89       	ldd	r24, Y+17	; 0x11
    5a60:	88 2f       	mov	r24, r24
    5a62:	90 e0       	ldi	r25, 0x00	; 0
    5a64:	aa 27       	eor	r26, r26
    5a66:	97 fd       	sbrc	r25, 7
    5a68:	a0 95       	com	r26
    5a6a:	ba 2f       	mov	r27, r26
    5a6c:	bc 01       	movw	r22, r24
    5a6e:	cd 01       	movw	r24, r26
    5a70:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    5a74:	9b 01       	movw	r18, r22
    5a76:	ac 01       	movw	r20, r24
    5a78:	c8 01       	movw	r24, r16
    5a7a:	b7 01       	movw	r22, r14
    5a7c:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    5a80:	dc 01       	movw	r26, r24
    5a82:	cb 01       	movw	r24, r22
    5a84:	bc 01       	movw	r22, r24
    5a86:	cd 01       	movw	r24, r26
    5a88:	20 e0       	ldi	r18, 0x00	; 0
    5a8a:	30 e0       	ldi	r19, 0x00	; 0
    5a8c:	40 e4       	ldi	r20, 0x40	; 64
    5a8e:	52 e4       	ldi	r21, 0x42	; 66
    5a90:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    5a94:	dc 01       	movw	r26, r24
    5a96:	cb 01       	movw	r24, r22
    5a98:	89 87       	std	Y+9, r24	; 0x09
    5a9a:	9a 87       	std	Y+10, r25	; 0x0a
    5a9c:	ab 87       	std	Y+11, r26	; 0x0b
    5a9e:	bc 87       	std	Y+12, r27	; 0x0c
    5aa0:	24 cb       	rjmp	.-2488   	; 0x50ea <SM_VoidCalc+0x5a>
	case '9': LCD_VoidSendData(ch); if(state==0|| op==5 || op==8 || op==9|| op==10) {operand1 = ((operand1 * 10) + ch)-48;} else if(state==1){operand2 = ((operand2 * 10) + ch)-48; } break;
    5aa2:	89 89       	ldd	r24, Y+17	; 0x11
    5aa4:	0e 94 c7 13 	call	0x278e	; 0x278e <LCD_VoidSendData>
    5aa8:	8c 81       	ldd	r24, Y+4	; 0x04
    5aaa:	88 23       	and	r24, r24
    5aac:	61 f0       	breq	.+24     	; 0x5ac6 <SM_VoidCalc+0xa36>
    5aae:	89 81       	ldd	r24, Y+1	; 0x01
    5ab0:	85 30       	cpi	r24, 0x05	; 5
    5ab2:	49 f0       	breq	.+18     	; 0x5ac6 <SM_VoidCalc+0xa36>
    5ab4:	89 81       	ldd	r24, Y+1	; 0x01
    5ab6:	88 30       	cpi	r24, 0x08	; 8
    5ab8:	31 f0       	breq	.+12     	; 0x5ac6 <SM_VoidCalc+0xa36>
    5aba:	89 81       	ldd	r24, Y+1	; 0x01
    5abc:	89 30       	cpi	r24, 0x09	; 9
    5abe:	19 f0       	breq	.+6      	; 0x5ac6 <SM_VoidCalc+0xa36>
    5ac0:	89 81       	ldd	r24, Y+1	; 0x01
    5ac2:	8a 30       	cpi	r24, 0x0A	; 10
    5ac4:	81 f5       	brne	.+96     	; 0x5b26 <SM_VoidCalc+0xa96>
    5ac6:	6d 85       	ldd	r22, Y+13	; 0x0d
    5ac8:	7e 85       	ldd	r23, Y+14	; 0x0e
    5aca:	8f 85       	ldd	r24, Y+15	; 0x0f
    5acc:	98 89       	ldd	r25, Y+16	; 0x10
    5ace:	20 e0       	ldi	r18, 0x00	; 0
    5ad0:	30 e0       	ldi	r19, 0x00	; 0
    5ad2:	40 e2       	ldi	r20, 0x20	; 32
    5ad4:	51 e4       	ldi	r21, 0x41	; 65
    5ad6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5ada:	dc 01       	movw	r26, r24
    5adc:	cb 01       	movw	r24, r22
    5ade:	7c 01       	movw	r14, r24
    5ae0:	8d 01       	movw	r16, r26
    5ae2:	89 89       	ldd	r24, Y+17	; 0x11
    5ae4:	88 2f       	mov	r24, r24
    5ae6:	90 e0       	ldi	r25, 0x00	; 0
    5ae8:	aa 27       	eor	r26, r26
    5aea:	97 fd       	sbrc	r25, 7
    5aec:	a0 95       	com	r26
    5aee:	ba 2f       	mov	r27, r26
    5af0:	bc 01       	movw	r22, r24
    5af2:	cd 01       	movw	r24, r26
    5af4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    5af8:	9b 01       	movw	r18, r22
    5afa:	ac 01       	movw	r20, r24
    5afc:	c8 01       	movw	r24, r16
    5afe:	b7 01       	movw	r22, r14
    5b00:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    5b04:	dc 01       	movw	r26, r24
    5b06:	cb 01       	movw	r24, r22
    5b08:	bc 01       	movw	r22, r24
    5b0a:	cd 01       	movw	r24, r26
    5b0c:	20 e0       	ldi	r18, 0x00	; 0
    5b0e:	30 e0       	ldi	r19, 0x00	; 0
    5b10:	40 e4       	ldi	r20, 0x40	; 64
    5b12:	52 e4       	ldi	r21, 0x42	; 66
    5b14:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    5b18:	dc 01       	movw	r26, r24
    5b1a:	cb 01       	movw	r24, r22
    5b1c:	8d 87       	std	Y+13, r24	; 0x0d
    5b1e:	9e 87       	std	Y+14, r25	; 0x0e
    5b20:	af 87       	std	Y+15, r26	; 0x0f
    5b22:	b8 8b       	std	Y+16, r27	; 0x10
    5b24:	e2 ca       	rjmp	.-2620   	; 0x50ea <SM_VoidCalc+0x5a>
    5b26:	8c 81       	ldd	r24, Y+4	; 0x04
    5b28:	81 30       	cpi	r24, 0x01	; 1
    5b2a:	09 f0       	breq	.+2      	; 0x5b2e <SM_VoidCalc+0xa9e>
    5b2c:	de ca       	rjmp	.-2628   	; 0x50ea <SM_VoidCalc+0x5a>
    5b2e:	69 85       	ldd	r22, Y+9	; 0x09
    5b30:	7a 85       	ldd	r23, Y+10	; 0x0a
    5b32:	8b 85       	ldd	r24, Y+11	; 0x0b
    5b34:	9c 85       	ldd	r25, Y+12	; 0x0c
    5b36:	20 e0       	ldi	r18, 0x00	; 0
    5b38:	30 e0       	ldi	r19, 0x00	; 0
    5b3a:	40 e2       	ldi	r20, 0x20	; 32
    5b3c:	51 e4       	ldi	r21, 0x41	; 65
    5b3e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5b42:	dc 01       	movw	r26, r24
    5b44:	cb 01       	movw	r24, r22
    5b46:	7c 01       	movw	r14, r24
    5b48:	8d 01       	movw	r16, r26
    5b4a:	89 89       	ldd	r24, Y+17	; 0x11
    5b4c:	88 2f       	mov	r24, r24
    5b4e:	90 e0       	ldi	r25, 0x00	; 0
    5b50:	aa 27       	eor	r26, r26
    5b52:	97 fd       	sbrc	r25, 7
    5b54:	a0 95       	com	r26
    5b56:	ba 2f       	mov	r27, r26
    5b58:	bc 01       	movw	r22, r24
    5b5a:	cd 01       	movw	r24, r26
    5b5c:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    5b60:	9b 01       	movw	r18, r22
    5b62:	ac 01       	movw	r20, r24
    5b64:	c8 01       	movw	r24, r16
    5b66:	b7 01       	movw	r22, r14
    5b68:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    5b6c:	dc 01       	movw	r26, r24
    5b6e:	cb 01       	movw	r24, r22
    5b70:	bc 01       	movw	r22, r24
    5b72:	cd 01       	movw	r24, r26
    5b74:	20 e0       	ldi	r18, 0x00	; 0
    5b76:	30 e0       	ldi	r19, 0x00	; 0
    5b78:	40 e4       	ldi	r20, 0x40	; 64
    5b7a:	52 e4       	ldi	r21, 0x42	; 66
    5b7c:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    5b80:	dc 01       	movw	r26, r24
    5b82:	cb 01       	movw	r24, r22
    5b84:	89 87       	std	Y+9, r24	; 0x09
    5b86:	9a 87       	std	Y+10, r25	; 0x0a
    5b88:	ab 87       	std	Y+11, r26	; 0x0b
    5b8a:	bc 87       	std	Y+12, r27	; 0x0c
    5b8c:	ae ca       	rjmp	.-2724   	; 0x50ea <SM_VoidCalc+0x5a>
	case 'c': LCD_VoidSendCommand(1); operand1=0; operand2=0;result=0;state=0;negative1=0;negative2=0;break;
    5b8e:	81 e0       	ldi	r24, 0x01	; 1
    5b90:	0e 94 4d 0f 	call	0x1e9a	; 0x1e9a <LCD_VoidSendCommand>
    5b94:	80 e0       	ldi	r24, 0x00	; 0
    5b96:	90 e0       	ldi	r25, 0x00	; 0
    5b98:	a0 e0       	ldi	r26, 0x00	; 0
    5b9a:	b0 e0       	ldi	r27, 0x00	; 0
    5b9c:	8d 87       	std	Y+13, r24	; 0x0d
    5b9e:	9e 87       	std	Y+14, r25	; 0x0e
    5ba0:	af 87       	std	Y+15, r26	; 0x0f
    5ba2:	b8 8b       	std	Y+16, r27	; 0x10
    5ba4:	80 e0       	ldi	r24, 0x00	; 0
    5ba6:	90 e0       	ldi	r25, 0x00	; 0
    5ba8:	a0 e0       	ldi	r26, 0x00	; 0
    5baa:	b0 e0       	ldi	r27, 0x00	; 0
    5bac:	89 87       	std	Y+9, r24	; 0x09
    5bae:	9a 87       	std	Y+10, r25	; 0x0a
    5bb0:	ab 87       	std	Y+11, r26	; 0x0b
    5bb2:	bc 87       	std	Y+12, r27	; 0x0c
    5bb4:	80 e0       	ldi	r24, 0x00	; 0
    5bb6:	90 e0       	ldi	r25, 0x00	; 0
    5bb8:	a0 e0       	ldi	r26, 0x00	; 0
    5bba:	b0 e0       	ldi	r27, 0x00	; 0
    5bbc:	8d 83       	std	Y+5, r24	; 0x05
    5bbe:	9e 83       	std	Y+6, r25	; 0x06
    5bc0:	af 83       	std	Y+7, r26	; 0x07
    5bc2:	b8 87       	std	Y+8, r27	; 0x08
    5bc4:	1c 82       	std	Y+4, r1	; 0x04
    5bc6:	1b 82       	std	Y+3, r1	; 0x03
    5bc8:	1a 82       	std	Y+2, r1	; 0x02
    5bca:	8f ca       	rjmp	.-2786   	; 0x50ea <SM_VoidCalc+0x5a>
    case '*':op=1; LCD_VoidSendData(ch); state=1;break;
    5bcc:	81 e0       	ldi	r24, 0x01	; 1
    5bce:	89 83       	std	Y+1, r24	; 0x01
    5bd0:	89 89       	ldd	r24, Y+17	; 0x11
    5bd2:	0e 94 c7 13 	call	0x278e	; 0x278e <LCD_VoidSendData>
    5bd6:	81 e0       	ldi	r24, 0x01	; 1
    5bd8:	8c 83       	std	Y+4, r24	; 0x04
    5bda:	87 ca       	rjmp	.-2802   	; 0x50ea <SM_VoidCalc+0x5a>
    case '/':op=2; LCD_VoidSendData(ch); state=1;break;
    5bdc:	82 e0       	ldi	r24, 0x02	; 2
    5bde:	89 83       	std	Y+1, r24	; 0x01
    5be0:	89 89       	ldd	r24, Y+17	; 0x11
    5be2:	0e 94 c7 13 	call	0x278e	; 0x278e <LCD_VoidSendData>
    5be6:	81 e0       	ldi	r24, 0x01	; 1
    5be8:	8c 83       	std	Y+4, r24	; 0x04
    5bea:	7f ca       	rjmp	.-2818   	; 0x50ea <SM_VoidCalc+0x5a>
    case 'I':LCD_VoidSendData('-'); if (state==0){negative1=1;} else if(state==1){negative2=2;}break;
    5bec:	8d e2       	ldi	r24, 0x2D	; 45
    5bee:	0e 94 c7 13 	call	0x278e	; 0x278e <LCD_VoidSendData>
    5bf2:	8c 81       	ldd	r24, Y+4	; 0x04
    5bf4:	88 23       	and	r24, r24
    5bf6:	19 f4       	brne	.+6      	; 0x5bfe <SM_VoidCalc+0xb6e>
    5bf8:	81 e0       	ldi	r24, 0x01	; 1
    5bfa:	8b 83       	std	Y+3, r24	; 0x03
    5bfc:	76 ca       	rjmp	.-2836   	; 0x50ea <SM_VoidCalc+0x5a>
    5bfe:	8c 81       	ldd	r24, Y+4	; 0x04
    5c00:	81 30       	cpi	r24, 0x01	; 1
    5c02:	09 f0       	breq	.+2      	; 0x5c06 <SM_VoidCalc+0xb76>
    5c04:	72 ca       	rjmp	.-2844   	; 0x50ea <SM_VoidCalc+0x5a>
    5c06:	82 e0       	ldi	r24, 0x02	; 2
    5c08:	8a 83       	std	Y+2, r24	; 0x02
    5c0a:	6f ca       	rjmp	.-2850   	; 0x50ea <SM_VoidCalc+0x5a>
    case '-':op=4; LCD_VoidSendData(ch); state=1;break;
    5c0c:	84 e0       	ldi	r24, 0x04	; 4
    5c0e:	89 83       	std	Y+1, r24	; 0x01
    5c10:	89 89       	ldd	r24, Y+17	; 0x11
    5c12:	0e 94 c7 13 	call	0x278e	; 0x278e <LCD_VoidSendData>
    5c16:	81 e0       	ldi	r24, 0x01	; 1
    5c18:	8c 83       	std	Y+4, r24	; 0x04
    5c1a:	67 ca       	rjmp	.-2866   	; 0x50ea <SM_VoidCalc+0x5a>
    case 'M':op=5; LCD_VoidSendData('M');LCD_VoidSendData('C');state=1;break;
    5c1c:	85 e0       	ldi	r24, 0x05	; 5
    5c1e:	89 83       	std	Y+1, r24	; 0x01
    5c20:	8d e4       	ldi	r24, 0x4D	; 77
    5c22:	0e 94 c7 13 	call	0x278e	; 0x278e <LCD_VoidSendData>
    5c26:	83 e4       	ldi	r24, 0x43	; 67
    5c28:	0e 94 c7 13 	call	0x278e	; 0x278e <LCD_VoidSendData>
    5c2c:	81 e0       	ldi	r24, 0x01	; 1
    5c2e:	8c 83       	std	Y+4, r24	; 0x04
    5c30:	5c ca       	rjmp	.-2888   	; 0x50ea <SM_VoidCalc+0x5a>
    case '%':op=6; LCD_VoidSendData(ch); state=1;break;
    5c32:	86 e0       	ldi	r24, 0x06	; 6
    5c34:	89 83       	std	Y+1, r24	; 0x01
    5c36:	89 89       	ldd	r24, Y+17	; 0x11
    5c38:	0e 94 c7 13 	call	0x278e	; 0x278e <LCD_VoidSendData>
    5c3c:	81 e0       	ldi	r24, 0x01	; 1
    5c3e:	8c 83       	std	Y+4, r24	; 0x04
    5c40:	54 ca       	rjmp	.-2904   	; 0x50ea <SM_VoidCalc+0x5a>
    case '+':op=7; LCD_VoidSendData(ch); state=1;break;
    5c42:	87 e0       	ldi	r24, 0x07	; 7
    5c44:	89 83       	std	Y+1, r24	; 0x01
    5c46:	89 89       	ldd	r24, Y+17	; 0x11
    5c48:	0e 94 c7 13 	call	0x278e	; 0x278e <LCD_VoidSendData>
    5c4c:	81 e0       	ldi	r24, 0x01	; 1
    5c4e:	8c 83       	std	Y+4, r24	; 0x04
    5c50:	4c ca       	rjmp	.-2920   	; 0x50ea <SM_VoidCalc+0x5a>
    case 'N':op=8; LCD_VoidSendData('M');LCD_VoidSendData('-');state=0;break;
    5c52:	88 e0       	ldi	r24, 0x08	; 8
    5c54:	89 83       	std	Y+1, r24	; 0x01
    5c56:	8d e4       	ldi	r24, 0x4D	; 77
    5c58:	0e 94 c7 13 	call	0x278e	; 0x278e <LCD_VoidSendData>
    5c5c:	8d e2       	ldi	r24, 0x2D	; 45
    5c5e:	0e 94 c7 13 	call	0x278e	; 0x278e <LCD_VoidSendData>
    5c62:	1c 82       	std	Y+4, r1	; 0x04
    5c64:	42 ca       	rjmp	.-2940   	; 0x50ea <SM_VoidCalc+0x5a>
    case 'S':op=9; LCD_VoidSendData('S');LCD_VoidSendData('Q');LCD_VoidSendData('R');LCD_VoidSendData('T');state=0;break;
    5c66:	89 e0       	ldi	r24, 0x09	; 9
    5c68:	89 83       	std	Y+1, r24	; 0x01
    5c6a:	83 e5       	ldi	r24, 0x53	; 83
    5c6c:	0e 94 c7 13 	call	0x278e	; 0x278e <LCD_VoidSendData>
    5c70:	81 e5       	ldi	r24, 0x51	; 81
    5c72:	0e 94 c7 13 	call	0x278e	; 0x278e <LCD_VoidSendData>
    5c76:	82 e5       	ldi	r24, 0x52	; 82
    5c78:	0e 94 c7 13 	call	0x278e	; 0x278e <LCD_VoidSendData>
    5c7c:	84 e5       	ldi	r24, 0x54	; 84
    5c7e:	0e 94 c7 13 	call	0x278e	; 0x278e <LCD_VoidSendData>
    5c82:	1c 82       	std	Y+4, r1	; 0x04
    5c84:	32 ca       	rjmp	.-2972   	; 0x50ea <SM_VoidCalc+0x5a>
    case '.':LCD_VoidSendData(ch); state=0;break; //.fraction
    5c86:	89 89       	ldd	r24, Y+17	; 0x11
    5c88:	0e 94 c7 13 	call	0x278e	; 0x278e <LCD_VoidSendData>
    5c8c:	1c 82       	std	Y+4, r1	; 0x04
    5c8e:	2d ca       	rjmp	.-2982   	; 0x50ea <SM_VoidCalc+0x5a>
    case 'P':op=10;LCD_VoidSendData('M');LCD_VoidSendData('+'); state=0;break;
    5c90:	8a e0       	ldi	r24, 0x0A	; 10
    5c92:	89 83       	std	Y+1, r24	; 0x01
    5c94:	8d e4       	ldi	r24, 0x4D	; 77
    5c96:	0e 94 c7 13 	call	0x278e	; 0x278e <LCD_VoidSendData>
    5c9a:	8b e2       	ldi	r24, 0x2B	; 43
    5c9c:	0e 94 c7 13 	call	0x278e	; 0x278e <LCD_VoidSendData>
    5ca0:	1c 82       	std	Y+4, r1	; 0x04
    5ca2:	23 ca       	rjmp	.-3002   	; 0x50ea <SM_VoidCalc+0x5a>
    case '=': LCD_VoidSendData(ch); if (negative1==1){operand1=-operand1;} if (negative2==2){operand2=-operand2;}
    5ca4:	89 89       	ldd	r24, Y+17	; 0x11
    5ca6:	0e 94 c7 13 	call	0x278e	; 0x278e <LCD_VoidSendData>
    5caa:	8b 81       	ldd	r24, Y+3	; 0x03
    5cac:	81 30       	cpi	r24, 0x01	; 1
    5cae:	49 f4       	brne	.+18     	; 0x5cc2 <SM_VoidCalc+0xc32>
    5cb0:	8d 85       	ldd	r24, Y+13	; 0x0d
    5cb2:	9e 85       	ldd	r25, Y+14	; 0x0e
    5cb4:	af 85       	ldd	r26, Y+15	; 0x0f
    5cb6:	b8 89       	ldd	r27, Y+16	; 0x10
    5cb8:	b0 58       	subi	r27, 0x80	; 128
    5cba:	8d 87       	std	Y+13, r24	; 0x0d
    5cbc:	9e 87       	std	Y+14, r25	; 0x0e
    5cbe:	af 87       	std	Y+15, r26	; 0x0f
    5cc0:	b8 8b       	std	Y+16, r27	; 0x10
    5cc2:	8a 81       	ldd	r24, Y+2	; 0x02
    5cc4:	82 30       	cpi	r24, 0x02	; 2
    5cc6:	49 f4       	brne	.+18     	; 0x5cda <SM_VoidCalc+0xc4a>
    5cc8:	89 85       	ldd	r24, Y+9	; 0x09
    5cca:	9a 85       	ldd	r25, Y+10	; 0x0a
    5ccc:	ab 85       	ldd	r26, Y+11	; 0x0b
    5cce:	bc 85       	ldd	r27, Y+12	; 0x0c
    5cd0:	b0 58       	subi	r27, 0x80	; 128
    5cd2:	89 87       	std	Y+9, r24	; 0x09
    5cd4:	9a 87       	std	Y+10, r25	; 0x0a
    5cd6:	ab 87       	std	Y+11, r26	; 0x0b
    5cd8:	bc 87       	std	Y+12, r27	; 0x0c
    if(op==1){result = (operand1) * (operand2); LCD_VoidSendNumber(result);}
    5cda:	89 81       	ldd	r24, Y+1	; 0x01
    5cdc:	81 30       	cpi	r24, 0x01	; 1
    5cde:	e9 f4       	brne	.+58     	; 0x5d1a <SM_VoidCalc+0xc8a>
    5ce0:	6d 85       	ldd	r22, Y+13	; 0x0d
    5ce2:	7e 85       	ldd	r23, Y+14	; 0x0e
    5ce4:	8f 85       	ldd	r24, Y+15	; 0x0f
    5ce6:	98 89       	ldd	r25, Y+16	; 0x10
    5ce8:	29 85       	ldd	r18, Y+9	; 0x09
    5cea:	3a 85       	ldd	r19, Y+10	; 0x0a
    5cec:	4b 85       	ldd	r20, Y+11	; 0x0b
    5cee:	5c 85       	ldd	r21, Y+12	; 0x0c
    5cf0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5cf4:	dc 01       	movw	r26, r24
    5cf6:	cb 01       	movw	r24, r22
    5cf8:	8d 83       	std	Y+5, r24	; 0x05
    5cfa:	9e 83       	std	Y+6, r25	; 0x06
    5cfc:	af 83       	std	Y+7, r26	; 0x07
    5cfe:	b8 87       	std	Y+8, r27	; 0x08
    5d00:	6d 81       	ldd	r22, Y+5	; 0x05
    5d02:	7e 81       	ldd	r23, Y+6	; 0x06
    5d04:	8f 81       	ldd	r24, Y+7	; 0x07
    5d06:	98 85       	ldd	r25, Y+8	; 0x08
    5d08:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
    5d0c:	dc 01       	movw	r26, r24
    5d0e:	cb 01       	movw	r24, r22
    5d10:	bc 01       	movw	r22, r24
    5d12:	cd 01       	movw	r24, r26
    5d14:	0e 94 73 17 	call	0x2ee6	; 0x2ee6 <LCD_VoidSendNumber>
    5d18:	e8 c9       	rjmp	.-3120   	; 0x50ea <SM_VoidCalc+0x5a>
    else if(op==2){result = (operand1) / (operand2); LCD_VoidSendNumber(result);}
    5d1a:	89 81       	ldd	r24, Y+1	; 0x01
    5d1c:	82 30       	cpi	r24, 0x02	; 2
    5d1e:	e9 f4       	brne	.+58     	; 0x5d5a <SM_VoidCalc+0xcca>
    5d20:	6d 85       	ldd	r22, Y+13	; 0x0d
    5d22:	7e 85       	ldd	r23, Y+14	; 0x0e
    5d24:	8f 85       	ldd	r24, Y+15	; 0x0f
    5d26:	98 89       	ldd	r25, Y+16	; 0x10
    5d28:	29 85       	ldd	r18, Y+9	; 0x09
    5d2a:	3a 85       	ldd	r19, Y+10	; 0x0a
    5d2c:	4b 85       	ldd	r20, Y+11	; 0x0b
    5d2e:	5c 85       	ldd	r21, Y+12	; 0x0c
    5d30:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    5d34:	dc 01       	movw	r26, r24
    5d36:	cb 01       	movw	r24, r22
    5d38:	8d 83       	std	Y+5, r24	; 0x05
    5d3a:	9e 83       	std	Y+6, r25	; 0x06
    5d3c:	af 83       	std	Y+7, r26	; 0x07
    5d3e:	b8 87       	std	Y+8, r27	; 0x08
    5d40:	6d 81       	ldd	r22, Y+5	; 0x05
    5d42:	7e 81       	ldd	r23, Y+6	; 0x06
    5d44:	8f 81       	ldd	r24, Y+7	; 0x07
    5d46:	98 85       	ldd	r25, Y+8	; 0x08
    5d48:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
    5d4c:	dc 01       	movw	r26, r24
    5d4e:	cb 01       	movw	r24, r22
    5d50:	bc 01       	movw	r22, r24
    5d52:	cd 01       	movw	r24, r26
    5d54:	0e 94 73 17 	call	0x2ee6	; 0x2ee6 <LCD_VoidSendNumber>
    5d58:	c8 c9       	rjmp	.-3184   	; 0x50ea <SM_VoidCalc+0x5a>
    else if(op==4 ){result = (operand1) - (operand2); LCD_VoidSendNumber(result);}
    5d5a:	89 81       	ldd	r24, Y+1	; 0x01
    5d5c:	84 30       	cpi	r24, 0x04	; 4
    5d5e:	e9 f4       	brne	.+58     	; 0x5d9a <SM_VoidCalc+0xd0a>
    5d60:	6d 85       	ldd	r22, Y+13	; 0x0d
    5d62:	7e 85       	ldd	r23, Y+14	; 0x0e
    5d64:	8f 85       	ldd	r24, Y+15	; 0x0f
    5d66:	98 89       	ldd	r25, Y+16	; 0x10
    5d68:	29 85       	ldd	r18, Y+9	; 0x09
    5d6a:	3a 85       	ldd	r19, Y+10	; 0x0a
    5d6c:	4b 85       	ldd	r20, Y+11	; 0x0b
    5d6e:	5c 85       	ldd	r21, Y+12	; 0x0c
    5d70:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    5d74:	dc 01       	movw	r26, r24
    5d76:	cb 01       	movw	r24, r22
    5d78:	8d 83       	std	Y+5, r24	; 0x05
    5d7a:	9e 83       	std	Y+6, r25	; 0x06
    5d7c:	af 83       	std	Y+7, r26	; 0x07
    5d7e:	b8 87       	std	Y+8, r27	; 0x08
    5d80:	6d 81       	ldd	r22, Y+5	; 0x05
    5d82:	7e 81       	ldd	r23, Y+6	; 0x06
    5d84:	8f 81       	ldd	r24, Y+7	; 0x07
    5d86:	98 85       	ldd	r25, Y+8	; 0x08
    5d88:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
    5d8c:	dc 01       	movw	r26, r24
    5d8e:	cb 01       	movw	r24, r22
    5d90:	bc 01       	movw	r22, r24
    5d92:	cd 01       	movw	r24, r26
    5d94:	0e 94 73 17 	call	0x2ee6	; 0x2ee6 <LCD_VoidSendNumber>
    5d98:	a8 c9       	rjmp	.-3248   	; 0x50ea <SM_VoidCalc+0x5a>
    else if(op==5){LCD_VoidSendNumber(result);}
    5d9a:	89 81       	ldd	r24, Y+1	; 0x01
    5d9c:	85 30       	cpi	r24, 0x05	; 5
    5d9e:	69 f4       	brne	.+26     	; 0x5dba <SM_VoidCalc+0xd2a>
    5da0:	6d 81       	ldd	r22, Y+5	; 0x05
    5da2:	7e 81       	ldd	r23, Y+6	; 0x06
    5da4:	8f 81       	ldd	r24, Y+7	; 0x07
    5da6:	98 85       	ldd	r25, Y+8	; 0x08
    5da8:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
    5dac:	dc 01       	movw	r26, r24
    5dae:	cb 01       	movw	r24, r22
    5db0:	bc 01       	movw	r22, r24
    5db2:	cd 01       	movw	r24, r26
    5db4:	0e 94 73 17 	call	0x2ee6	; 0x2ee6 <LCD_VoidSendNumber>
    5db8:	98 c9       	rjmp	.-3280   	; 0x50ea <SM_VoidCalc+0x5a>
    else if(op==6){result = (operand1) - ((operand2) * (f32)((int)((operand1) / (operand2)))); LCD_VoidSendNumber(result);}
    5dba:	89 81       	ldd	r24, Y+1	; 0x01
    5dbc:	86 30       	cpi	r24, 0x06	; 6
    5dbe:	09 f0       	breq	.+2      	; 0x5dc2 <SM_VoidCalc+0xd32>
    5dc0:	41 c0       	rjmp	.+130    	; 0x5e44 <SM_VoidCalc+0xdb4>
    5dc2:	6d 85       	ldd	r22, Y+13	; 0x0d
    5dc4:	7e 85       	ldd	r23, Y+14	; 0x0e
    5dc6:	8f 85       	ldd	r24, Y+15	; 0x0f
    5dc8:	98 89       	ldd	r25, Y+16	; 0x10
    5dca:	29 85       	ldd	r18, Y+9	; 0x09
    5dcc:	3a 85       	ldd	r19, Y+10	; 0x0a
    5dce:	4b 85       	ldd	r20, Y+11	; 0x0b
    5dd0:	5c 85       	ldd	r21, Y+12	; 0x0c
    5dd2:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    5dd6:	dc 01       	movw	r26, r24
    5dd8:	cb 01       	movw	r24, r22
    5dda:	bc 01       	movw	r22, r24
    5ddc:	cd 01       	movw	r24, r26
    5dde:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
    5de2:	dc 01       	movw	r26, r24
    5de4:	cb 01       	movw	r24, r22
    5de6:	aa 27       	eor	r26, r26
    5de8:	97 fd       	sbrc	r25, 7
    5dea:	a0 95       	com	r26
    5dec:	ba 2f       	mov	r27, r26
    5dee:	bc 01       	movw	r22, r24
    5df0:	cd 01       	movw	r24, r26
    5df2:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    5df6:	dc 01       	movw	r26, r24
    5df8:	cb 01       	movw	r24, r22
    5dfa:	bc 01       	movw	r22, r24
    5dfc:	cd 01       	movw	r24, r26
    5dfe:	29 85       	ldd	r18, Y+9	; 0x09
    5e00:	3a 85       	ldd	r19, Y+10	; 0x0a
    5e02:	4b 85       	ldd	r20, Y+11	; 0x0b
    5e04:	5c 85       	ldd	r21, Y+12	; 0x0c
    5e06:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5e0a:	dc 01       	movw	r26, r24
    5e0c:	cb 01       	movw	r24, r22
    5e0e:	9c 01       	movw	r18, r24
    5e10:	ad 01       	movw	r20, r26
    5e12:	6d 85       	ldd	r22, Y+13	; 0x0d
    5e14:	7e 85       	ldd	r23, Y+14	; 0x0e
    5e16:	8f 85       	ldd	r24, Y+15	; 0x0f
    5e18:	98 89       	ldd	r25, Y+16	; 0x10
    5e1a:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    5e1e:	dc 01       	movw	r26, r24
    5e20:	cb 01       	movw	r24, r22
    5e22:	8d 83       	std	Y+5, r24	; 0x05
    5e24:	9e 83       	std	Y+6, r25	; 0x06
    5e26:	af 83       	std	Y+7, r26	; 0x07
    5e28:	b8 87       	std	Y+8, r27	; 0x08
    5e2a:	6d 81       	ldd	r22, Y+5	; 0x05
    5e2c:	7e 81       	ldd	r23, Y+6	; 0x06
    5e2e:	8f 81       	ldd	r24, Y+7	; 0x07
    5e30:	98 85       	ldd	r25, Y+8	; 0x08
    5e32:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
    5e36:	dc 01       	movw	r26, r24
    5e38:	cb 01       	movw	r24, r22
    5e3a:	bc 01       	movw	r22, r24
    5e3c:	cd 01       	movw	r24, r26
    5e3e:	0e 94 73 17 	call	0x2ee6	; 0x2ee6 <LCD_VoidSendNumber>
    5e42:	53 c9       	rjmp	.-3418   	; 0x50ea <SM_VoidCalc+0x5a>
    else if(op==7){result = (operand1) + (operand2); LCD_VoidSendNumber(result);}
    5e44:	89 81       	ldd	r24, Y+1	; 0x01
    5e46:	87 30       	cpi	r24, 0x07	; 7
    5e48:	e9 f4       	brne	.+58     	; 0x5e84 <SM_VoidCalc+0xdf4>
    5e4a:	6d 85       	ldd	r22, Y+13	; 0x0d
    5e4c:	7e 85       	ldd	r23, Y+14	; 0x0e
    5e4e:	8f 85       	ldd	r24, Y+15	; 0x0f
    5e50:	98 89       	ldd	r25, Y+16	; 0x10
    5e52:	29 85       	ldd	r18, Y+9	; 0x09
    5e54:	3a 85       	ldd	r19, Y+10	; 0x0a
    5e56:	4b 85       	ldd	r20, Y+11	; 0x0b
    5e58:	5c 85       	ldd	r21, Y+12	; 0x0c
    5e5a:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    5e5e:	dc 01       	movw	r26, r24
    5e60:	cb 01       	movw	r24, r22
    5e62:	8d 83       	std	Y+5, r24	; 0x05
    5e64:	9e 83       	std	Y+6, r25	; 0x06
    5e66:	af 83       	std	Y+7, r26	; 0x07
    5e68:	b8 87       	std	Y+8, r27	; 0x08
    5e6a:	6d 81       	ldd	r22, Y+5	; 0x05
    5e6c:	7e 81       	ldd	r23, Y+6	; 0x06
    5e6e:	8f 81       	ldd	r24, Y+7	; 0x07
    5e70:	98 85       	ldd	r25, Y+8	; 0x08
    5e72:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
    5e76:	dc 01       	movw	r26, r24
    5e78:	cb 01       	movw	r24, r22
    5e7a:	bc 01       	movw	r22, r24
    5e7c:	cd 01       	movw	r24, r26
    5e7e:	0e 94 73 17 	call	0x2ee6	; 0x2ee6 <LCD_VoidSendNumber>
    5e82:	33 c9       	rjmp	.-3482   	; 0x50ea <SM_VoidCalc+0x5a>
    else if(op==8){result = result-((operand1)); LCD_VoidSendNumber(result);}
    5e84:	89 81       	ldd	r24, Y+1	; 0x01
    5e86:	88 30       	cpi	r24, 0x08	; 8
    5e88:	e9 f4       	brne	.+58     	; 0x5ec4 <SM_VoidCalc+0xe34>
    5e8a:	6d 81       	ldd	r22, Y+5	; 0x05
    5e8c:	7e 81       	ldd	r23, Y+6	; 0x06
    5e8e:	8f 81       	ldd	r24, Y+7	; 0x07
    5e90:	98 85       	ldd	r25, Y+8	; 0x08
    5e92:	2d 85       	ldd	r18, Y+13	; 0x0d
    5e94:	3e 85       	ldd	r19, Y+14	; 0x0e
    5e96:	4f 85       	ldd	r20, Y+15	; 0x0f
    5e98:	58 89       	ldd	r21, Y+16	; 0x10
    5e9a:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    5e9e:	dc 01       	movw	r26, r24
    5ea0:	cb 01       	movw	r24, r22
    5ea2:	8d 83       	std	Y+5, r24	; 0x05
    5ea4:	9e 83       	std	Y+6, r25	; 0x06
    5ea6:	af 83       	std	Y+7, r26	; 0x07
    5ea8:	b8 87       	std	Y+8, r27	; 0x08
    5eaa:	6d 81       	ldd	r22, Y+5	; 0x05
    5eac:	7e 81       	ldd	r23, Y+6	; 0x06
    5eae:	8f 81       	ldd	r24, Y+7	; 0x07
    5eb0:	98 85       	ldd	r25, Y+8	; 0x08
    5eb2:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
    5eb6:	dc 01       	movw	r26, r24
    5eb8:	cb 01       	movw	r24, r22
    5eba:	bc 01       	movw	r22, r24
    5ebc:	cd 01       	movw	r24, r26
    5ebe:	0e 94 73 17 	call	0x2ee6	; 0x2ee6 <LCD_VoidSendNumber>
    5ec2:	13 c9       	rjmp	.-3546   	; 0x50ea <SM_VoidCalc+0x5a>
    else if(op==9){result = sqrt((operand1)) ;LCD_VoidSendNumber(result);}//fraction
    5ec4:	89 81       	ldd	r24, Y+1	; 0x01
    5ec6:	89 30       	cpi	r24, 0x09	; 9
    5ec8:	d9 f4       	brne	.+54     	; 0x5f00 <SM_VoidCalc+0xe70>
    5eca:	8d 85       	ldd	r24, Y+13	; 0x0d
    5ecc:	9e 85       	ldd	r25, Y+14	; 0x0e
    5ece:	af 85       	ldd	r26, Y+15	; 0x0f
    5ed0:	b8 89       	ldd	r27, Y+16	; 0x10
    5ed2:	bc 01       	movw	r22, r24
    5ed4:	cd 01       	movw	r24, r26
    5ed6:	0e 94 69 3d 	call	0x7ad2	; 0x7ad2 <sqrt>
    5eda:	dc 01       	movw	r26, r24
    5edc:	cb 01       	movw	r24, r22
    5ede:	8d 83       	std	Y+5, r24	; 0x05
    5ee0:	9e 83       	std	Y+6, r25	; 0x06
    5ee2:	af 83       	std	Y+7, r26	; 0x07
    5ee4:	b8 87       	std	Y+8, r27	; 0x08
    5ee6:	6d 81       	ldd	r22, Y+5	; 0x05
    5ee8:	7e 81       	ldd	r23, Y+6	; 0x06
    5eea:	8f 81       	ldd	r24, Y+7	; 0x07
    5eec:	98 85       	ldd	r25, Y+8	; 0x08
    5eee:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
    5ef2:	dc 01       	movw	r26, r24
    5ef4:	cb 01       	movw	r24, r22
    5ef6:	bc 01       	movw	r22, r24
    5ef8:	cd 01       	movw	r24, r26
    5efa:	0e 94 73 17 	call	0x2ee6	; 0x2ee6 <LCD_VoidSendNumber>
    5efe:	f5 c8       	rjmp	.-3606   	; 0x50ea <SM_VoidCalc+0x5a>
    else if(op==10){result = result+(operand1) ; LCD_VoidSendNumber(result);}
    5f00:	89 81       	ldd	r24, Y+1	; 0x01
    5f02:	8a 30       	cpi	r24, 0x0A	; 10
    5f04:	09 f0       	breq	.+2      	; 0x5f08 <SM_VoidCalc+0xe78>
    5f06:	f1 c8       	rjmp	.-3614   	; 0x50ea <SM_VoidCalc+0x5a>
    5f08:	6d 81       	ldd	r22, Y+5	; 0x05
    5f0a:	7e 81       	ldd	r23, Y+6	; 0x06
    5f0c:	8f 81       	ldd	r24, Y+7	; 0x07
    5f0e:	98 85       	ldd	r25, Y+8	; 0x08
    5f10:	2d 85       	ldd	r18, Y+13	; 0x0d
    5f12:	3e 85       	ldd	r19, Y+14	; 0x0e
    5f14:	4f 85       	ldd	r20, Y+15	; 0x0f
    5f16:	58 89       	ldd	r21, Y+16	; 0x10
    5f18:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    5f1c:	dc 01       	movw	r26, r24
    5f1e:	cb 01       	movw	r24, r22
    5f20:	8d 83       	std	Y+5, r24	; 0x05
    5f22:	9e 83       	std	Y+6, r25	; 0x06
    5f24:	af 83       	std	Y+7, r26	; 0x07
    5f26:	b8 87       	std	Y+8, r27	; 0x08
    5f28:	6d 81       	ldd	r22, Y+5	; 0x05
    5f2a:	7e 81       	ldd	r23, Y+6	; 0x06
    5f2c:	8f 81       	ldd	r24, Y+7	; 0x07
    5f2e:	98 85       	ldd	r25, Y+8	; 0x08
    5f30:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
    5f34:	dc 01       	movw	r26, r24
    5f36:	cb 01       	movw	r24, r22
    5f38:	bc 01       	movw	r22, r24
    5f3a:	cd 01       	movw	r24, r26
    5f3c:	0e 94 73 17 	call	0x2ee6	; 0x2ee6 <LCD_VoidSendNumber>
    5f40:	d4 c8       	rjmp	.-3672   	; 0x50ea <SM_VoidCalc+0x5a>
    break;
	default: LCD_u8WriteString("WRONG CHOICE"); break;
    5f42:	8d e6       	ldi	r24, 0x6D	; 109
    5f44:	90 e0       	ldi	r25, 0x00	; 0
    5f46:	0e 94 04 18 	call	0x3008	; 0x3008 <LCD_u8WriteString>
    5f4a:	cf c8       	rjmp	.-3682   	; 0x50ea <SM_VoidCalc+0x5a>

00005f4c <SevSeg_VidDisplayNumber>:
}

u8 Num_arr[10] = {ZERO, ONE, TWO, THREE, FOUR, FIVE, SIX, SEVEN, EIGHT, NINE};

void SevSeg_VidDisplayNumber(u8 Copy_U8PortNumber, u8 Copy_U8Number)
{
    5f4c:	df 93       	push	r29
    5f4e:	cf 93       	push	r28
    5f50:	00 d0       	rcall	.+0      	; 0x5f52 <SevSeg_VidDisplayNumber+0x6>
    5f52:	cd b7       	in	r28, 0x3d	; 61
    5f54:	de b7       	in	r29, 0x3e	; 62
    5f56:	89 83       	std	Y+1, r24	; 0x01
    5f58:	6a 83       	std	Y+2, r22	; 0x02
    if (Copy_U8PortNumber >= 0 && Copy_U8PortNumber < 4) {
    5f5a:	89 81       	ldd	r24, Y+1	; 0x01
    5f5c:	84 30       	cpi	r24, 0x04	; 4
    5f5e:	70 f4       	brcc	.+28     	; 0x5f7c <SevSeg_VidDisplayNumber+0x30>
        if (Copy_U8Number >= 0 && Copy_U8Number < 10) {
    5f60:	8a 81       	ldd	r24, Y+2	; 0x02
    5f62:	8a 30       	cpi	r24, 0x0A	; 10
    5f64:	58 f4       	brcc	.+22     	; 0x5f7c <SevSeg_VidDisplayNumber+0x30>
#if SEVENSEG_TYPE == COM_CATHODE
            DIO_U8SetPortValue(Copy_U8PortNumber, Num_arr[Copy_U8Number]);
    5f66:	8a 81       	ldd	r24, Y+2	; 0x02
    5f68:	88 2f       	mov	r24, r24
    5f6a:	90 e0       	ldi	r25, 0x00	; 0
    5f6c:	fc 01       	movw	r30, r24
    5f6e:	ea 50       	subi	r30, 0x0A	; 10
    5f70:	fd 4f       	sbci	r31, 0xFD	; 253
    5f72:	90 81       	ld	r25, Z
    5f74:	89 81       	ldd	r24, Y+1	; 0x01
    5f76:	69 2f       	mov	r22, r25
    5f78:	0e 94 91 0b 	call	0x1722	; 0x1722 <DIO_U8SetPortValue>
#else
#error "Wrong input of the 7-Segment type"
#endif
        }
    }
}
    5f7c:	0f 90       	pop	r0
    5f7e:	0f 90       	pop	r0
    5f80:	cf 91       	pop	r28
    5f82:	df 91       	pop	r29
    5f84:	08 95       	ret

00005f86 <SevSeg_VidInit>:
void SevSeg_VidInit(void)
{
    5f86:	df 93       	push	r29
    5f88:	cf 93       	push	r28
    5f8a:	cd b7       	in	r28, 0x3d	; 61
    5f8c:	de b7       	in	r29, 0x3e	; 62
    DIO_U8SetPortDirection(DISPLAY_SEGMENT_PORT, DIO_PORT_OUT);
    5f8e:	81 e0       	ldi	r24, 0x01	; 1
    5f90:	6f ef       	ldi	r22, 0xFF	; 255
    5f92:	0e 94 d0 0a 	call	0x15a0	; 0x15a0 <DIO_U8SetPortDirection>
    DIO_U8SetPinDirection(CONTROL_SEGMENT_PORT, CONTROL_DISPLAY_PIN2, DIO_PIN_OUT);
    5f96:	82 e0       	ldi	r24, 0x02	; 2
    5f98:	63 e0       	ldi	r22, 0x03	; 3
    5f9a:	41 e0       	ldi	r20, 0x01	; 1
    5f9c:	0e 94 75 07 	call	0xeea	; 0xeea <DIO_U8SetPinDirection>
    DIO_U8SetPinDirection(CONTROL_SEGMENT_PORT, CONTROL_DISPLAY_PIN1, DIO_PIN_OUT);
    5fa0:	82 e0       	ldi	r24, 0x02	; 2
    5fa2:	62 e0       	ldi	r22, 0x02	; 2
    5fa4:	41 e0       	ldi	r20, 0x01	; 1
    5fa6:	0e 94 75 07 	call	0xeea	; 0xeea <DIO_U8SetPinDirection>
    DIO_U8SetPinDirection(CONTROL_SEGMENT_PORT, CONTROL_RED_PIN, DIO_PIN_OUT);
    5faa:	82 e0       	ldi	r24, 0x02	; 2
    5fac:	64 e0       	ldi	r22, 0x04	; 4
    5fae:	41 e0       	ldi	r20, 0x01	; 1
    5fb0:	0e 94 75 07 	call	0xeea	; 0xeea <DIO_U8SetPinDirection>
    DIO_U8SetPinDirection(CONTROL_SEGMENT_PORT, CONTROL_YELLOW_PIN, DIO_PIN_OUT);
    5fb4:	82 e0       	ldi	r24, 0x02	; 2
    5fb6:	65 e0       	ldi	r22, 0x05	; 5
    5fb8:	41 e0       	ldi	r20, 0x01	; 1
    5fba:	0e 94 75 07 	call	0xeea	; 0xeea <DIO_U8SetPinDirection>
    DIO_U8SetPinDirection(CONTROL_SEGMENT_PORT, CONTROL_GREEN_PIN, DIO_PIN_OUT);
    5fbe:	82 e0       	ldi	r24, 0x02	; 2
    5fc0:	66 e0       	ldi	r22, 0x06	; 6
    5fc2:	41 e0       	ldi	r20, 0x01	; 1
    5fc4:	0e 94 75 07 	call	0xeea	; 0xeea <DIO_U8SetPinDirection>

    DIO_U8SetPinDirection(CONTROL_SEGMENT_PORT, CONTROL_BUZZER_PIN, DIO_PIN_OUT);
    5fc8:	82 e0       	ldi	r24, 0x02	; 2
    5fca:	67 e0       	ldi	r22, 0x07	; 7
    5fcc:	41 e0       	ldi	r20, 0x01	; 1
    5fce:	0e 94 75 07 	call	0xeea	; 0xeea <DIO_U8SetPinDirection>
    DIO_U8SetPinValue(CONTROL_SEGMENT_PORT, CONTROL_BUZZER_PIN, DIO_LOW);
    5fd2:	82 e0       	ldi	r24, 0x02	; 2
    5fd4:	67 e0       	ldi	r22, 0x07	; 7
    5fd6:	40 e0       	ldi	r20, 0x00	; 0
    5fd8:	0e 94 8e 08 	call	0x111c	; 0x111c <DIO_U8SetPinValue>
}
    5fdc:	cf 91       	pop	r28
    5fde:	df 91       	pop	r29
    5fe0:	08 95       	ret

00005fe2 <SevSeg_VidDisplayNumMulti>:
void SevSeg_VidDisplayNumMulti(u8 Copy_U8Port, u8 Copy_U8Number)
{
    5fe2:	df 93       	push	r29
    5fe4:	cf 93       	push	r28
    5fe6:	cd b7       	in	r28, 0x3d	; 61
    5fe8:	de b7       	in	r29, 0x3e	; 62
    5fea:	a0 97       	sbiw	r28, 0x20	; 32
    5fec:	0f b6       	in	r0, 0x3f	; 63
    5fee:	f8 94       	cli
    5ff0:	de bf       	out	0x3e, r29	; 62
    5ff2:	0f be       	out	0x3f, r0	; 63
    5ff4:	cd bf       	out	0x3d, r28	; 61
    5ff6:	8f 8f       	std	Y+31, r24	; 0x1f
    5ff8:	68 a3       	std	Y+32, r22	; 0x20
    /* Port1 for digit 1 and Port2 for digit 2 */
    u8 Local_U8Quot = Copy_U8Number / 10;
    5ffa:	88 a1       	ldd	r24, Y+32	; 0x20
    5ffc:	9a e0       	ldi	r25, 0x0A	; 10
    5ffe:	69 2f       	mov	r22, r25
    6000:	0e 94 e5 3c 	call	0x79ca	; 0x79ca <__udivmodqi4>
    6004:	8e 8f       	std	Y+30, r24	; 0x1e
    u8 Local_U8rem = Copy_U8Number % 10;
    6006:	88 a1       	ldd	r24, Y+32	; 0x20
    6008:	9a e0       	ldi	r25, 0x0A	; 10
    600a:	69 2f       	mov	r22, r25
    600c:	0e 94 e5 3c 	call	0x79ca	; 0x79ca <__udivmodqi4>
    6010:	89 2f       	mov	r24, r25
    6012:	8d 8f       	std	Y+29, r24	; 0x1d

    // Activate Digit 1
    DIO_U8SetPinValue(CONTROL_SEGMENT_PORT, CONTROL_DISPLAY_PIN1, DIO_LOW);
    6014:	82 e0       	ldi	r24, 0x02	; 2
    6016:	62 e0       	ldi	r22, 0x02	; 2
    6018:	40 e0       	ldi	r20, 0x00	; 0
    601a:	0e 94 8e 08 	call	0x111c	; 0x111c <DIO_U8SetPinValue>
    DIO_U8SetPinValue(CONTROL_SEGMENT_PORT, CONTROL_DISPLAY_PIN2, DIO_HIGH);
    601e:	82 e0       	ldi	r24, 0x02	; 2
    6020:	63 e0       	ldi	r22, 0x03	; 3
    6022:	41 e0       	ldi	r20, 0x01	; 1
    6024:	0e 94 8e 08 	call	0x111c	; 0x111c <DIO_U8SetPinValue>
    SevSeg_VidDisplayNumber(Copy_U8Port, Local_U8rem);
    6028:	8f 8d       	ldd	r24, Y+31	; 0x1f
    602a:	6d 8d       	ldd	r22, Y+29	; 0x1d
    602c:	0e 94 a6 2f 	call	0x5f4c	; 0x5f4c <SevSeg_VidDisplayNumber>
    6030:	80 e0       	ldi	r24, 0x00	; 0
    6032:	90 e0       	ldi	r25, 0x00	; 0
    6034:	a0 ea       	ldi	r26, 0xA0	; 160
    6036:	b0 e4       	ldi	r27, 0x40	; 64
    6038:	89 8f       	std	Y+25, r24	; 0x19
    603a:	9a 8f       	std	Y+26, r25	; 0x1a
    603c:	ab 8f       	std	Y+27, r26	; 0x1b
    603e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    6040:	69 8d       	ldd	r22, Y+25	; 0x19
    6042:	7a 8d       	ldd	r23, Y+26	; 0x1a
    6044:	8b 8d       	ldd	r24, Y+27	; 0x1b
    6046:	9c 8d       	ldd	r25, Y+28	; 0x1c
    6048:	20 e0       	ldi	r18, 0x00	; 0
    604a:	30 e0       	ldi	r19, 0x00	; 0
    604c:	4a ef       	ldi	r20, 0xFA	; 250
    604e:	54 e4       	ldi	r21, 0x44	; 68
    6050:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6054:	dc 01       	movw	r26, r24
    6056:	cb 01       	movw	r24, r22
    6058:	8d 8b       	std	Y+21, r24	; 0x15
    605a:	9e 8b       	std	Y+22, r25	; 0x16
    605c:	af 8b       	std	Y+23, r26	; 0x17
    605e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    6060:	6d 89       	ldd	r22, Y+21	; 0x15
    6062:	7e 89       	ldd	r23, Y+22	; 0x16
    6064:	8f 89       	ldd	r24, Y+23	; 0x17
    6066:	98 8d       	ldd	r25, Y+24	; 0x18
    6068:	20 e0       	ldi	r18, 0x00	; 0
    606a:	30 e0       	ldi	r19, 0x00	; 0
    606c:	40 e8       	ldi	r20, 0x80	; 128
    606e:	5f e3       	ldi	r21, 0x3F	; 63
    6070:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    6074:	88 23       	and	r24, r24
    6076:	2c f4       	brge	.+10     	; 0x6082 <SevSeg_VidDisplayNumMulti+0xa0>
		__ticks = 1;
    6078:	81 e0       	ldi	r24, 0x01	; 1
    607a:	90 e0       	ldi	r25, 0x00	; 0
    607c:	9c 8b       	std	Y+20, r25	; 0x14
    607e:	8b 8b       	std	Y+19, r24	; 0x13
    6080:	3f c0       	rjmp	.+126    	; 0x6100 <SevSeg_VidDisplayNumMulti+0x11e>
	else if (__tmp > 65535)
    6082:	6d 89       	ldd	r22, Y+21	; 0x15
    6084:	7e 89       	ldd	r23, Y+22	; 0x16
    6086:	8f 89       	ldd	r24, Y+23	; 0x17
    6088:	98 8d       	ldd	r25, Y+24	; 0x18
    608a:	20 e0       	ldi	r18, 0x00	; 0
    608c:	3f ef       	ldi	r19, 0xFF	; 255
    608e:	4f e7       	ldi	r20, 0x7F	; 127
    6090:	57 e4       	ldi	r21, 0x47	; 71
    6092:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    6096:	18 16       	cp	r1, r24
    6098:	4c f5       	brge	.+82     	; 0x60ec <SevSeg_VidDisplayNumMulti+0x10a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    609a:	69 8d       	ldd	r22, Y+25	; 0x19
    609c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    609e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    60a0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    60a2:	20 e0       	ldi	r18, 0x00	; 0
    60a4:	30 e0       	ldi	r19, 0x00	; 0
    60a6:	40 e2       	ldi	r20, 0x20	; 32
    60a8:	51 e4       	ldi	r21, 0x41	; 65
    60aa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    60ae:	dc 01       	movw	r26, r24
    60b0:	cb 01       	movw	r24, r22
    60b2:	bc 01       	movw	r22, r24
    60b4:	cd 01       	movw	r24, r26
    60b6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    60ba:	dc 01       	movw	r26, r24
    60bc:	cb 01       	movw	r24, r22
    60be:	9c 8b       	std	Y+20, r25	; 0x14
    60c0:	8b 8b       	std	Y+19, r24	; 0x13
    60c2:	0f c0       	rjmp	.+30     	; 0x60e2 <SevSeg_VidDisplayNumMulti+0x100>
    60c4:	88 ec       	ldi	r24, 0xC8	; 200
    60c6:	90 e0       	ldi	r25, 0x00	; 0
    60c8:	9a 8b       	std	Y+18, r25	; 0x12
    60ca:	89 8b       	std	Y+17, r24	; 0x11
    60cc:	89 89       	ldd	r24, Y+17	; 0x11
    60ce:	9a 89       	ldd	r25, Y+18	; 0x12
    60d0:	01 97       	sbiw	r24, 0x01	; 1
    60d2:	f1 f7       	brne	.-4      	; 0x60d0 <SevSeg_VidDisplayNumMulti+0xee>
    60d4:	9a 8b       	std	Y+18, r25	; 0x12
    60d6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    60d8:	8b 89       	ldd	r24, Y+19	; 0x13
    60da:	9c 89       	ldd	r25, Y+20	; 0x14
    60dc:	01 97       	sbiw	r24, 0x01	; 1
    60de:	9c 8b       	std	Y+20, r25	; 0x14
    60e0:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    60e2:	8b 89       	ldd	r24, Y+19	; 0x13
    60e4:	9c 89       	ldd	r25, Y+20	; 0x14
    60e6:	00 97       	sbiw	r24, 0x00	; 0
    60e8:	69 f7       	brne	.-38     	; 0x60c4 <SevSeg_VidDisplayNumMulti+0xe2>
    60ea:	14 c0       	rjmp	.+40     	; 0x6114 <SevSeg_VidDisplayNumMulti+0x132>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    60ec:	6d 89       	ldd	r22, Y+21	; 0x15
    60ee:	7e 89       	ldd	r23, Y+22	; 0x16
    60f0:	8f 89       	ldd	r24, Y+23	; 0x17
    60f2:	98 8d       	ldd	r25, Y+24	; 0x18
    60f4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    60f8:	dc 01       	movw	r26, r24
    60fa:	cb 01       	movw	r24, r22
    60fc:	9c 8b       	std	Y+20, r25	; 0x14
    60fe:	8b 8b       	std	Y+19, r24	; 0x13
    6100:	8b 89       	ldd	r24, Y+19	; 0x13
    6102:	9c 89       	ldd	r25, Y+20	; 0x14
    6104:	98 8b       	std	Y+16, r25	; 0x10
    6106:	8f 87       	std	Y+15, r24	; 0x0f
    6108:	8f 85       	ldd	r24, Y+15	; 0x0f
    610a:	98 89       	ldd	r25, Y+16	; 0x10
    610c:	01 97       	sbiw	r24, 0x01	; 1
    610e:	f1 f7       	brne	.-4      	; 0x610c <SevSeg_VidDisplayNumMulti+0x12a>
    6110:	98 8b       	std	Y+16, r25	; 0x10
    6112:	8f 87       	std	Y+15, r24	; 0x0f
    _delay_ms(5);
    // Activate Digit 2
    DIO_U8SetPinValue(CONTROL_SEGMENT_PORT, CONTROL_DISPLAY_PIN1, DIO_HIGH);
    6114:	82 e0       	ldi	r24, 0x02	; 2
    6116:	62 e0       	ldi	r22, 0x02	; 2
    6118:	41 e0       	ldi	r20, 0x01	; 1
    611a:	0e 94 8e 08 	call	0x111c	; 0x111c <DIO_U8SetPinValue>
    DIO_U8SetPinValue(CONTROL_SEGMENT_PORT, CONTROL_DISPLAY_PIN2, DIO_LOW);
    611e:	82 e0       	ldi	r24, 0x02	; 2
    6120:	63 e0       	ldi	r22, 0x03	; 3
    6122:	40 e0       	ldi	r20, 0x00	; 0
    6124:	0e 94 8e 08 	call	0x111c	; 0x111c <DIO_U8SetPinValue>
    SevSeg_VidDisplayNumber(Copy_U8Port, Local_U8Quot);
    6128:	8f 8d       	ldd	r24, Y+31	; 0x1f
    612a:	6e 8d       	ldd	r22, Y+30	; 0x1e
    612c:	0e 94 a6 2f 	call	0x5f4c	; 0x5f4c <SevSeg_VidDisplayNumber>
    6130:	80 e0       	ldi	r24, 0x00	; 0
    6132:	90 e0       	ldi	r25, 0x00	; 0
    6134:	a0 ea       	ldi	r26, 0xA0	; 160
    6136:	b0 e4       	ldi	r27, 0x40	; 64
    6138:	8b 87       	std	Y+11, r24	; 0x0b
    613a:	9c 87       	std	Y+12, r25	; 0x0c
    613c:	ad 87       	std	Y+13, r26	; 0x0d
    613e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    6140:	6b 85       	ldd	r22, Y+11	; 0x0b
    6142:	7c 85       	ldd	r23, Y+12	; 0x0c
    6144:	8d 85       	ldd	r24, Y+13	; 0x0d
    6146:	9e 85       	ldd	r25, Y+14	; 0x0e
    6148:	20 e0       	ldi	r18, 0x00	; 0
    614a:	30 e0       	ldi	r19, 0x00	; 0
    614c:	4a ef       	ldi	r20, 0xFA	; 250
    614e:	54 e4       	ldi	r21, 0x44	; 68
    6150:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6154:	dc 01       	movw	r26, r24
    6156:	cb 01       	movw	r24, r22
    6158:	8f 83       	std	Y+7, r24	; 0x07
    615a:	98 87       	std	Y+8, r25	; 0x08
    615c:	a9 87       	std	Y+9, r26	; 0x09
    615e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    6160:	6f 81       	ldd	r22, Y+7	; 0x07
    6162:	78 85       	ldd	r23, Y+8	; 0x08
    6164:	89 85       	ldd	r24, Y+9	; 0x09
    6166:	9a 85       	ldd	r25, Y+10	; 0x0a
    6168:	20 e0       	ldi	r18, 0x00	; 0
    616a:	30 e0       	ldi	r19, 0x00	; 0
    616c:	40 e8       	ldi	r20, 0x80	; 128
    616e:	5f e3       	ldi	r21, 0x3F	; 63
    6170:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    6174:	88 23       	and	r24, r24
    6176:	2c f4       	brge	.+10     	; 0x6182 <SevSeg_VidDisplayNumMulti+0x1a0>
		__ticks = 1;
    6178:	81 e0       	ldi	r24, 0x01	; 1
    617a:	90 e0       	ldi	r25, 0x00	; 0
    617c:	9e 83       	std	Y+6, r25	; 0x06
    617e:	8d 83       	std	Y+5, r24	; 0x05
    6180:	3f c0       	rjmp	.+126    	; 0x6200 <SevSeg_VidDisplayNumMulti+0x21e>
	else if (__tmp > 65535)
    6182:	6f 81       	ldd	r22, Y+7	; 0x07
    6184:	78 85       	ldd	r23, Y+8	; 0x08
    6186:	89 85       	ldd	r24, Y+9	; 0x09
    6188:	9a 85       	ldd	r25, Y+10	; 0x0a
    618a:	20 e0       	ldi	r18, 0x00	; 0
    618c:	3f ef       	ldi	r19, 0xFF	; 255
    618e:	4f e7       	ldi	r20, 0x7F	; 127
    6190:	57 e4       	ldi	r21, 0x47	; 71
    6192:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    6196:	18 16       	cp	r1, r24
    6198:	4c f5       	brge	.+82     	; 0x61ec <SevSeg_VidDisplayNumMulti+0x20a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    619a:	6b 85       	ldd	r22, Y+11	; 0x0b
    619c:	7c 85       	ldd	r23, Y+12	; 0x0c
    619e:	8d 85       	ldd	r24, Y+13	; 0x0d
    61a0:	9e 85       	ldd	r25, Y+14	; 0x0e
    61a2:	20 e0       	ldi	r18, 0x00	; 0
    61a4:	30 e0       	ldi	r19, 0x00	; 0
    61a6:	40 e2       	ldi	r20, 0x20	; 32
    61a8:	51 e4       	ldi	r21, 0x41	; 65
    61aa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    61ae:	dc 01       	movw	r26, r24
    61b0:	cb 01       	movw	r24, r22
    61b2:	bc 01       	movw	r22, r24
    61b4:	cd 01       	movw	r24, r26
    61b6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    61ba:	dc 01       	movw	r26, r24
    61bc:	cb 01       	movw	r24, r22
    61be:	9e 83       	std	Y+6, r25	; 0x06
    61c0:	8d 83       	std	Y+5, r24	; 0x05
    61c2:	0f c0       	rjmp	.+30     	; 0x61e2 <SevSeg_VidDisplayNumMulti+0x200>
    61c4:	88 ec       	ldi	r24, 0xC8	; 200
    61c6:	90 e0       	ldi	r25, 0x00	; 0
    61c8:	9c 83       	std	Y+4, r25	; 0x04
    61ca:	8b 83       	std	Y+3, r24	; 0x03
    61cc:	8b 81       	ldd	r24, Y+3	; 0x03
    61ce:	9c 81       	ldd	r25, Y+4	; 0x04
    61d0:	01 97       	sbiw	r24, 0x01	; 1
    61d2:	f1 f7       	brne	.-4      	; 0x61d0 <SevSeg_VidDisplayNumMulti+0x1ee>
    61d4:	9c 83       	std	Y+4, r25	; 0x04
    61d6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    61d8:	8d 81       	ldd	r24, Y+5	; 0x05
    61da:	9e 81       	ldd	r25, Y+6	; 0x06
    61dc:	01 97       	sbiw	r24, 0x01	; 1
    61de:	9e 83       	std	Y+6, r25	; 0x06
    61e0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    61e2:	8d 81       	ldd	r24, Y+5	; 0x05
    61e4:	9e 81       	ldd	r25, Y+6	; 0x06
    61e6:	00 97       	sbiw	r24, 0x00	; 0
    61e8:	69 f7       	brne	.-38     	; 0x61c4 <SevSeg_VidDisplayNumMulti+0x1e2>
    61ea:	14 c0       	rjmp	.+40     	; 0x6214 <SevSeg_VidDisplayNumMulti+0x232>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    61ec:	6f 81       	ldd	r22, Y+7	; 0x07
    61ee:	78 85       	ldd	r23, Y+8	; 0x08
    61f0:	89 85       	ldd	r24, Y+9	; 0x09
    61f2:	9a 85       	ldd	r25, Y+10	; 0x0a
    61f4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    61f8:	dc 01       	movw	r26, r24
    61fa:	cb 01       	movw	r24, r22
    61fc:	9e 83       	std	Y+6, r25	; 0x06
    61fe:	8d 83       	std	Y+5, r24	; 0x05
    6200:	8d 81       	ldd	r24, Y+5	; 0x05
    6202:	9e 81       	ldd	r25, Y+6	; 0x06
    6204:	9a 83       	std	Y+2, r25	; 0x02
    6206:	89 83       	std	Y+1, r24	; 0x01
    6208:	89 81       	ldd	r24, Y+1	; 0x01
    620a:	9a 81       	ldd	r25, Y+2	; 0x02
    620c:	01 97       	sbiw	r24, 0x01	; 1
    620e:	f1 f7       	brne	.-4      	; 0x620c <SevSeg_VidDisplayNumMulti+0x22a>
    6210:	9a 83       	std	Y+2, r25	; 0x02
    6212:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(5);
    /* Each Frame takes 2 x 2ms = 4ms to fully Display */
}
    6214:	a0 96       	adiw	r28, 0x20	; 32
    6216:	0f b6       	in	r0, 0x3f	; 63
    6218:	f8 94       	cli
    621a:	de bf       	out	0x3e, r29	; 62
    621c:	0f be       	out	0x3f, r0	; 63
    621e:	cd bf       	out	0x3d, r28	; 61
    6220:	cf 91       	pop	r28
    6222:	df 91       	pop	r29
    6224:	08 95       	ret

00006226 <BuzzForDuration>:

void BuzzForDuration(u16 duration_ms)
{
    6226:	df 93       	push	r29
    6228:	cf 93       	push	r28
    622a:	cd b7       	in	r28, 0x3d	; 61
    622c:	de b7       	in	r29, 0x3e	; 62
    622e:	60 97       	sbiw	r28, 0x10	; 16
    6230:	0f b6       	in	r0, 0x3f	; 63
    6232:	f8 94       	cli
    6234:	de bf       	out	0x3e, r29	; 62
    6236:	0f be       	out	0x3f, r0	; 63
    6238:	cd bf       	out	0x3d, r28	; 61
    623a:	98 8b       	std	Y+16, r25	; 0x10
    623c:	8f 87       	std	Y+15, r24	; 0x0f
    DIO_U8SetPinValue(CONTROL_SEGMENT_PORT, CONTROL_BUZZER_PIN, DIO_HIGH);
    623e:	82 e0       	ldi	r24, 0x02	; 2
    6240:	67 e0       	ldi	r22, 0x07	; 7
    6242:	41 e0       	ldi	r20, 0x01	; 1
    6244:	0e 94 8e 08 	call	0x111c	; 0x111c <DIO_U8SetPinValue>
    _delay_ms(duration_ms);
    6248:	8f 85       	ldd	r24, Y+15	; 0x0f
    624a:	98 89       	ldd	r25, Y+16	; 0x10
    624c:	cc 01       	movw	r24, r24
    624e:	a0 e0       	ldi	r26, 0x00	; 0
    6250:	b0 e0       	ldi	r27, 0x00	; 0
    6252:	bc 01       	movw	r22, r24
    6254:	cd 01       	movw	r24, r26
    6256:	0e 94 07 05 	call	0xa0e	; 0xa0e <__floatunsisf>
    625a:	dc 01       	movw	r26, r24
    625c:	cb 01       	movw	r24, r22
    625e:	8b 87       	std	Y+11, r24	; 0x0b
    6260:	9c 87       	std	Y+12, r25	; 0x0c
    6262:	ad 87       	std	Y+13, r26	; 0x0d
    6264:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    6266:	6b 85       	ldd	r22, Y+11	; 0x0b
    6268:	7c 85       	ldd	r23, Y+12	; 0x0c
    626a:	8d 85       	ldd	r24, Y+13	; 0x0d
    626c:	9e 85       	ldd	r25, Y+14	; 0x0e
    626e:	20 e0       	ldi	r18, 0x00	; 0
    6270:	30 e0       	ldi	r19, 0x00	; 0
    6272:	4a ef       	ldi	r20, 0xFA	; 250
    6274:	54 e4       	ldi	r21, 0x44	; 68
    6276:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    627a:	dc 01       	movw	r26, r24
    627c:	cb 01       	movw	r24, r22
    627e:	8f 83       	std	Y+7, r24	; 0x07
    6280:	98 87       	std	Y+8, r25	; 0x08
    6282:	a9 87       	std	Y+9, r26	; 0x09
    6284:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    6286:	6f 81       	ldd	r22, Y+7	; 0x07
    6288:	78 85       	ldd	r23, Y+8	; 0x08
    628a:	89 85       	ldd	r24, Y+9	; 0x09
    628c:	9a 85       	ldd	r25, Y+10	; 0x0a
    628e:	20 e0       	ldi	r18, 0x00	; 0
    6290:	30 e0       	ldi	r19, 0x00	; 0
    6292:	40 e8       	ldi	r20, 0x80	; 128
    6294:	5f e3       	ldi	r21, 0x3F	; 63
    6296:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    629a:	88 23       	and	r24, r24
    629c:	2c f4       	brge	.+10     	; 0x62a8 <BuzzForDuration+0x82>
		__ticks = 1;
    629e:	81 e0       	ldi	r24, 0x01	; 1
    62a0:	90 e0       	ldi	r25, 0x00	; 0
    62a2:	9e 83       	std	Y+6, r25	; 0x06
    62a4:	8d 83       	std	Y+5, r24	; 0x05
    62a6:	3f c0       	rjmp	.+126    	; 0x6326 <BuzzForDuration+0x100>
	else if (__tmp > 65535)
    62a8:	6f 81       	ldd	r22, Y+7	; 0x07
    62aa:	78 85       	ldd	r23, Y+8	; 0x08
    62ac:	89 85       	ldd	r24, Y+9	; 0x09
    62ae:	9a 85       	ldd	r25, Y+10	; 0x0a
    62b0:	20 e0       	ldi	r18, 0x00	; 0
    62b2:	3f ef       	ldi	r19, 0xFF	; 255
    62b4:	4f e7       	ldi	r20, 0x7F	; 127
    62b6:	57 e4       	ldi	r21, 0x47	; 71
    62b8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    62bc:	18 16       	cp	r1, r24
    62be:	4c f5       	brge	.+82     	; 0x6312 <BuzzForDuration+0xec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    62c0:	6b 85       	ldd	r22, Y+11	; 0x0b
    62c2:	7c 85       	ldd	r23, Y+12	; 0x0c
    62c4:	8d 85       	ldd	r24, Y+13	; 0x0d
    62c6:	9e 85       	ldd	r25, Y+14	; 0x0e
    62c8:	20 e0       	ldi	r18, 0x00	; 0
    62ca:	30 e0       	ldi	r19, 0x00	; 0
    62cc:	40 e2       	ldi	r20, 0x20	; 32
    62ce:	51 e4       	ldi	r21, 0x41	; 65
    62d0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    62d4:	dc 01       	movw	r26, r24
    62d6:	cb 01       	movw	r24, r22
    62d8:	bc 01       	movw	r22, r24
    62da:	cd 01       	movw	r24, r26
    62dc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    62e0:	dc 01       	movw	r26, r24
    62e2:	cb 01       	movw	r24, r22
    62e4:	9e 83       	std	Y+6, r25	; 0x06
    62e6:	8d 83       	std	Y+5, r24	; 0x05
    62e8:	0f c0       	rjmp	.+30     	; 0x6308 <BuzzForDuration+0xe2>
    62ea:	88 ec       	ldi	r24, 0xC8	; 200
    62ec:	90 e0       	ldi	r25, 0x00	; 0
    62ee:	9c 83       	std	Y+4, r25	; 0x04
    62f0:	8b 83       	std	Y+3, r24	; 0x03
    62f2:	8b 81       	ldd	r24, Y+3	; 0x03
    62f4:	9c 81       	ldd	r25, Y+4	; 0x04
    62f6:	01 97       	sbiw	r24, 0x01	; 1
    62f8:	f1 f7       	brne	.-4      	; 0x62f6 <BuzzForDuration+0xd0>
    62fa:	9c 83       	std	Y+4, r25	; 0x04
    62fc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    62fe:	8d 81       	ldd	r24, Y+5	; 0x05
    6300:	9e 81       	ldd	r25, Y+6	; 0x06
    6302:	01 97       	sbiw	r24, 0x01	; 1
    6304:	9e 83       	std	Y+6, r25	; 0x06
    6306:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6308:	8d 81       	ldd	r24, Y+5	; 0x05
    630a:	9e 81       	ldd	r25, Y+6	; 0x06
    630c:	00 97       	sbiw	r24, 0x00	; 0
    630e:	69 f7       	brne	.-38     	; 0x62ea <BuzzForDuration+0xc4>
    6310:	14 c0       	rjmp	.+40     	; 0x633a <BuzzForDuration+0x114>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6312:	6f 81       	ldd	r22, Y+7	; 0x07
    6314:	78 85       	ldd	r23, Y+8	; 0x08
    6316:	89 85       	ldd	r24, Y+9	; 0x09
    6318:	9a 85       	ldd	r25, Y+10	; 0x0a
    631a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    631e:	dc 01       	movw	r26, r24
    6320:	cb 01       	movw	r24, r22
    6322:	9e 83       	std	Y+6, r25	; 0x06
    6324:	8d 83       	std	Y+5, r24	; 0x05
    6326:	8d 81       	ldd	r24, Y+5	; 0x05
    6328:	9e 81       	ldd	r25, Y+6	; 0x06
    632a:	9a 83       	std	Y+2, r25	; 0x02
    632c:	89 83       	std	Y+1, r24	; 0x01
    632e:	89 81       	ldd	r24, Y+1	; 0x01
    6330:	9a 81       	ldd	r25, Y+2	; 0x02
    6332:	01 97       	sbiw	r24, 0x01	; 1
    6334:	f1 f7       	brne	.-4      	; 0x6332 <BuzzForDuration+0x10c>
    6336:	9a 83       	std	Y+2, r25	; 0x02
    6338:	89 83       	std	Y+1, r24	; 0x01
    DIO_U8SetPinValue(CONTROL_SEGMENT_PORT, CONTROL_BUZZER_PIN, DIO_LOW);
    633a:	82 e0       	ldi	r24, 0x02	; 2
    633c:	67 e0       	ldi	r22, 0x07	; 7
    633e:	40 e0       	ldi	r20, 0x00	; 0
    6340:	0e 94 8e 08 	call	0x111c	; 0x111c <DIO_U8SetPinValue>
}
    6344:	60 96       	adiw	r28, 0x10	; 16
    6346:	0f b6       	in	r0, 0x3f	; 63
    6348:	f8 94       	cli
    634a:	de bf       	out	0x3e, r29	; 62
    634c:	0f be       	out	0x3f, r0	; 63
    634e:	cd bf       	out	0x3d, r28	; 61
    6350:	cf 91       	pop	r28
    6352:	df 91       	pop	r29
    6354:	08 95       	ret

00006356 <SevSeg_VidDispTrafficLights>:

static u8 led = 0;

void SevSeg_VidDispTrafficLights(u8 Copy_U8SevSeg_PORT, u8 Copy_U8Number)
{
    6356:	df 93       	push	r29
    6358:	cf 93       	push	r28
    635a:	00 d0       	rcall	.+0      	; 0x635c <SevSeg_VidDispTrafficLights+0x6>
    635c:	00 d0       	rcall	.+0      	; 0x635e <SevSeg_VidDispTrafficLights+0x8>
    635e:	00 d0       	rcall	.+0      	; 0x6360 <SevSeg_VidDispTrafficLights+0xa>
    6360:	cd b7       	in	r28, 0x3d	; 61
    6362:	de b7       	in	r29, 0x3e	; 62
    6364:	8d 83       	std	Y+5, r24	; 0x05
    6366:	6e 83       	std	Y+6, r22	; 0x06
    u16 Local_U16LoopDelay = 0;
    6368:	1c 82       	std	Y+4, r1	; 0x04
    636a:	1b 82       	std	Y+3, r1	; 0x03
    u8 prev_led = 0;
    636c:	1a 82       	std	Y+2, r1	; 0x02

    for (u8 i = Copy_U8Number; i > 0; i--) {
    636e:	8e 81       	ldd	r24, Y+6	; 0x06
    6370:	89 83       	std	Y+1, r24	; 0x01
    6372:	5a c0       	rjmp	.+180    	; 0x6428 <SevSeg_VidDispTrafficLights+0xd2>
        led = i;
    6374:	89 81       	ldd	r24, Y+1	; 0x01
    6376:	80 93 26 03 	sts	0x0326, r24

        DIO_U8SetPinValue(CONTROL_SEGMENT_PORT, CONTROL_RED_PIN, DIO_LOW);
    637a:	82 e0       	ldi	r24, 0x02	; 2
    637c:	64 e0       	ldi	r22, 0x04	; 4
    637e:	40 e0       	ldi	r20, 0x00	; 0
    6380:	0e 94 8e 08 	call	0x111c	; 0x111c <DIO_U8SetPinValue>
        DIO_U8SetPinValue(CONTROL_SEGMENT_PORT, CONTROL_YELLOW_PIN, DIO_LOW);
    6384:	82 e0       	ldi	r24, 0x02	; 2
    6386:	65 e0       	ldi	r22, 0x05	; 5
    6388:	40 e0       	ldi	r20, 0x00	; 0
    638a:	0e 94 8e 08 	call	0x111c	; 0x111c <DIO_U8SetPinValue>
        DIO_U8SetPinValue(CONTROL_SEGMENT_PORT, CONTROL_GREEN_PIN, DIO_LOW);
    638e:	82 e0       	ldi	r24, 0x02	; 2
    6390:	66 e0       	ldi	r22, 0x06	; 6
    6392:	40 e0       	ldi	r20, 0x00	; 0
    6394:	0e 94 8e 08 	call	0x111c	; 0x111c <DIO_U8SetPinValue>

        if (led >= 67) {
    6398:	80 91 26 03 	lds	r24, 0x0326
    639c:	83 34       	cpi	r24, 0x43	; 67
    639e:	30 f0       	brcs	.+12     	; 0x63ac <SevSeg_VidDispTrafficLights+0x56>
            DIO_U8SetPinValue(CONTROL_SEGMENT_PORT, CONTROL_RED_PIN, DIO_HIGH);
    63a0:	82 e0       	ldi	r24, 0x02	; 2
    63a2:	64 e0       	ldi	r22, 0x04	; 4
    63a4:	41 e0       	ldi	r20, 0x01	; 1
    63a6:	0e 94 8e 08 	call	0x111c	; 0x111c <DIO_U8SetPinValue>
    63aa:	1d c0       	rjmp	.+58     	; 0x63e6 <SevSeg_VidDispTrafficLights+0x90>
        } else if (led >= 34) {
    63ac:	80 91 26 03 	lds	r24, 0x0326
    63b0:	82 32       	cpi	r24, 0x22	; 34
    63b2:	68 f0       	brcs	.+26     	; 0x63ce <SevSeg_VidDispTrafficLights+0x78>
            DIO_U8SetPinValue(CONTROL_SEGMENT_PORT, CONTROL_YELLOW_PIN, DIO_HIGH);
    63b4:	82 e0       	ldi	r24, 0x02	; 2
    63b6:	65 e0       	ldi	r22, 0x05	; 5
    63b8:	41 e0       	ldi	r20, 0x01	; 1
    63ba:	0e 94 8e 08 	call	0x111c	; 0x111c <DIO_U8SetPinValue>
            // Buzz when transitioning from red to yellow
            if (prev_led >= 67) {
    63be:	8a 81       	ldd	r24, Y+2	; 0x02
    63c0:	83 34       	cpi	r24, 0x43	; 67
    63c2:	88 f0       	brcs	.+34     	; 0x63e6 <SevSeg_VidDispTrafficLights+0x90>
                BuzzForDuration(200);
    63c4:	88 ec       	ldi	r24, 0xC8	; 200
    63c6:	90 e0       	ldi	r25, 0x00	; 0
    63c8:	0e 94 13 31 	call	0x6226	; 0x6226 <BuzzForDuration>
    63cc:	0c c0       	rjmp	.+24     	; 0x63e6 <SevSeg_VidDispTrafficLights+0x90>
            }
        } else {
            DIO_U8SetPinValue(CONTROL_SEGMENT_PORT, CONTROL_GREEN_PIN, DIO_HIGH);
    63ce:	82 e0       	ldi	r24, 0x02	; 2
    63d0:	66 e0       	ldi	r22, 0x06	; 6
    63d2:	41 e0       	ldi	r20, 0x01	; 1
    63d4:	0e 94 8e 08 	call	0x111c	; 0x111c <DIO_U8SetPinValue>
            // Buzz when transitioning from yellow to green
            if (prev_led >= 34) {
    63d8:	8a 81       	ldd	r24, Y+2	; 0x02
    63da:	82 32       	cpi	r24, 0x22	; 34
    63dc:	20 f0       	brcs	.+8      	; 0x63e6 <SevSeg_VidDispTrafficLights+0x90>
                BuzzForDuration(200);
    63de:	88 ec       	ldi	r24, 0xC8	; 200
    63e0:	90 e0       	ldi	r25, 0x00	; 0
    63e2:	0e 94 13 31 	call	0x6226	; 0x6226 <BuzzForDuration>
            }
        }

        DIO_U8SetPinValue(CONTROL_SEGMENT_PORT, CONTROL_DISPLAY_PIN1, DIO_HIGH);
    63e6:	82 e0       	ldi	r24, 0x02	; 2
    63e8:	62 e0       	ldi	r22, 0x02	; 2
    63ea:	41 e0       	ldi	r20, 0x01	; 1
    63ec:	0e 94 8e 08 	call	0x111c	; 0x111c <DIO_U8SetPinValue>
        DIO_U8SetPinValue(CONTROL_SEGMENT_PORT, CONTROL_DISPLAY_PIN2, DIO_LOW);
    63f0:	82 e0       	ldi	r24, 0x02	; 2
    63f2:	63 e0       	ldi	r22, 0x03	; 3
    63f4:	40 e0       	ldi	r20, 0x00	; 0
    63f6:	0e 94 8e 08 	call	0x111c	; 0x111c <DIO_U8SetPinValue>
    63fa:	09 c0       	rjmp	.+18     	; 0x640e <SevSeg_VidDispTrafficLights+0xb8>

        while (Local_U16LoopDelay < 20) {
            SevSeg_VidDisplayNumMulti(Copy_U8SevSeg_PORT, i);
    63fc:	8d 81       	ldd	r24, Y+5	; 0x05
    63fe:	69 81       	ldd	r22, Y+1	; 0x01
    6400:	0e 94 f1 2f 	call	0x5fe2	; 0x5fe2 <SevSeg_VidDisplayNumMulti>
            Local_U16LoopDelay++;
    6404:	8b 81       	ldd	r24, Y+3	; 0x03
    6406:	9c 81       	ldd	r25, Y+4	; 0x04
    6408:	01 96       	adiw	r24, 0x01	; 1
    640a:	9c 83       	std	Y+4, r25	; 0x04
    640c:	8b 83       	std	Y+3, r24	; 0x03
        }

        DIO_U8SetPinValue(CONTROL_SEGMENT_PORT, CONTROL_DISPLAY_PIN1, DIO_HIGH);
        DIO_U8SetPinValue(CONTROL_SEGMENT_PORT, CONTROL_DISPLAY_PIN2, DIO_LOW);

        while (Local_U16LoopDelay < 20) {
    640e:	8b 81       	ldd	r24, Y+3	; 0x03
    6410:	9c 81       	ldd	r25, Y+4	; 0x04
    6412:	84 31       	cpi	r24, 0x14	; 20
    6414:	91 05       	cpc	r25, r1
    6416:	90 f3       	brcs	.-28     	; 0x63fc <SevSeg_VidDispTrafficLights+0xa6>
            SevSeg_VidDisplayNumMulti(Copy_U8SevSeg_PORT, i);
            Local_U16LoopDelay++;
        }
        Local_U16LoopDelay = 0;
    6418:	1c 82       	std	Y+4, r1	; 0x04
    641a:	1b 82       	std	Y+3, r1	; 0x03
        prev_led = led;
    641c:	80 91 26 03 	lds	r24, 0x0326
    6420:	8a 83       	std	Y+2, r24	; 0x02
void SevSeg_VidDispTrafficLights(u8 Copy_U8SevSeg_PORT, u8 Copy_U8Number)
{
    u16 Local_U16LoopDelay = 0;
    u8 prev_led = 0;

    for (u8 i = Copy_U8Number; i > 0; i--) {
    6422:	89 81       	ldd	r24, Y+1	; 0x01
    6424:	81 50       	subi	r24, 0x01	; 1
    6426:	89 83       	std	Y+1, r24	; 0x01
    6428:	89 81       	ldd	r24, Y+1	; 0x01
    642a:	88 23       	and	r24, r24
    642c:	09 f0       	breq	.+2      	; 0x6430 <SevSeg_VidDispTrafficLights+0xda>
    642e:	a2 cf       	rjmp	.-188    	; 0x6374 <SevSeg_VidDispTrafficLights+0x1e>
            Local_U16LoopDelay++;
        }
        Local_U16LoopDelay = 0;
        prev_led = led;
    }
}
    6430:	26 96       	adiw	r28, 0x06	; 6
    6432:	0f b6       	in	r0, 0x3f	; 63
    6434:	f8 94       	cli
    6436:	de bf       	out	0x3e, r29	; 62
    6438:	0f be       	out	0x3f, r0	; 63
    643a:	cd bf       	out	0x3d, r28	; 61
    643c:	cf 91       	pop	r28
    643e:	df 91       	pop	r29
    6440:	08 95       	ret

00006442 <TIMER_VidOvfInit>:
#include "DIO_Interface.h"
#include <avr/io.h>
#include "Timer.h"

void TIMER_VidOvfInit(void)
{
    6442:	df 93       	push	r29
    6444:	cf 93       	push	r28
    6446:	cd b7       	in	r28, 0x3d	; 61
    6448:	de b7       	in	r29, 0x3e	; 62
	//1- Set the Wave Generation mode as normal
	CLR_BIT(TCCR0, WGM00);
    644a:	a3 e5       	ldi	r26, 0x53	; 83
    644c:	b0 e0       	ldi	r27, 0x00	; 0
    644e:	e3 e5       	ldi	r30, 0x53	; 83
    6450:	f0 e0       	ldi	r31, 0x00	; 0
    6452:	80 81       	ld	r24, Z
    6454:	8f 7b       	andi	r24, 0xBF	; 191
    6456:	8c 93       	st	X, r24
	CLR_BIT(TCCR0, WGM01);
    6458:	a3 e5       	ldi	r26, 0x53	; 83
    645a:	b0 e0       	ldi	r27, 0x00	; 0
    645c:	e3 e5       	ldi	r30, 0x53	; 83
    645e:	f0 e0       	ldi	r31, 0x00	; 0
    6460:	80 81       	ld	r24, Z
    6462:	87 7f       	andi	r24, 0xF7	; 247
    6464:	8c 93       	st	X, r24

	//3- Enable Overflow Interrupt
	SET_BIT(TIMSK, 0);
    6466:	a9 e5       	ldi	r26, 0x59	; 89
    6468:	b0 e0       	ldi	r27, 0x00	; 0
    646a:	e9 e5       	ldi	r30, 0x59	; 89
    646c:	f0 e0       	ldi	r31, 0x00	; 0
    646e:	80 81       	ld	r24, Z
    6470:	81 60       	ori	r24, 0x01	; 1
    6472:	8c 93       	st	X, r24


	//2- Set the prescaler 8Mhz / 8 = 1Mhz --> Timer Freq
	CLR_BIT(TCCR0, CS00);
    6474:	a3 e5       	ldi	r26, 0x53	; 83
    6476:	b0 e0       	ldi	r27, 0x00	; 0
    6478:	e3 e5       	ldi	r30, 0x53	; 83
    647a:	f0 e0       	ldi	r31, 0x00	; 0
    647c:	80 81       	ld	r24, Z
    647e:	8e 7f       	andi	r24, 0xFE	; 254
    6480:	8c 93       	st	X, r24
	SET_BIT(TCCR0, CS01);
    6482:	a3 e5       	ldi	r26, 0x53	; 83
    6484:	b0 e0       	ldi	r27, 0x00	; 0
    6486:	e3 e5       	ldi	r30, 0x53	; 83
    6488:	f0 e0       	ldi	r31, 0x00	; 0
    648a:	80 81       	ld	r24, Z
    648c:	82 60       	ori	r24, 0x02	; 2
    648e:	8c 93       	st	X, r24
	CLR_BIT(TCCR0, CS02);
    6490:	a3 e5       	ldi	r26, 0x53	; 83
    6492:	b0 e0       	ldi	r27, 0x00	; 0
    6494:	e3 e5       	ldi	r30, 0x53	; 83
    6496:	f0 e0       	ldi	r31, 0x00	; 0
    6498:	80 81       	ld	r24, Z
    649a:	8b 7f       	andi	r24, 0xFB	; 251
    649c:	8c 93       	st	X, r24


}
    649e:	cf 91       	pop	r28
    64a0:	df 91       	pop	r29
    64a2:	08 95       	ret

000064a4 <TIMER_VidCTCInit>:

void TIMER_VidCTCInit(void)
{
    64a4:	df 93       	push	r29
    64a6:	cf 93       	push	r28
    64a8:	cd b7       	in	r28, 0x3d	; 61
    64aa:	de b7       	in	r29, 0x3e	; 62
	//1- Set the Wave Generation mode as normal
	CLR_BIT(TCCR0, WGM00);
    64ac:	a3 e5       	ldi	r26, 0x53	; 83
    64ae:	b0 e0       	ldi	r27, 0x00	; 0
    64b0:	e3 e5       	ldi	r30, 0x53	; 83
    64b2:	f0 e0       	ldi	r31, 0x00	; 0
    64b4:	80 81       	ld	r24, Z
    64b6:	8f 7b       	andi	r24, 0xBF	; 191
    64b8:	8c 93       	st	X, r24
	SET_BIT(TCCR0, WGM01);
    64ba:	a3 e5       	ldi	r26, 0x53	; 83
    64bc:	b0 e0       	ldi	r27, 0x00	; 0
    64be:	e3 e5       	ldi	r30, 0x53	; 83
    64c0:	f0 e0       	ldi	r31, 0x00	; 0
    64c2:	80 81       	ld	r24, Z
    64c4:	88 60       	ori	r24, 0x08	; 8
    64c6:	8c 93       	st	X, r24

	//3- Enable CTC Interrupt
	SET_BIT(TIMSK, 1);
    64c8:	a9 e5       	ldi	r26, 0x59	; 89
    64ca:	b0 e0       	ldi	r27, 0x00	; 0
    64cc:	e9 e5       	ldi	r30, 0x59	; 89
    64ce:	f0 e0       	ldi	r31, 0x00	; 0
    64d0:	80 81       	ld	r24, Z
    64d2:	82 60       	ori	r24, 0x02	; 2
    64d4:	8c 93       	st	X, r24

	//2- Set the prescaler 8Mhz / 8 = 1Mhz --> Timer Freq
	SET_BIT(TCCR0, CS00);
    64d6:	a3 e5       	ldi	r26, 0x53	; 83
    64d8:	b0 e0       	ldi	r27, 0x00	; 0
    64da:	e3 e5       	ldi	r30, 0x53	; 83
    64dc:	f0 e0       	ldi	r31, 0x00	; 0
    64de:	80 81       	ld	r24, Z
    64e0:	81 60       	ori	r24, 0x01	; 1
    64e2:	8c 93       	st	X, r24
	SET_BIT(TCCR0, CS01);
    64e4:	a3 e5       	ldi	r26, 0x53	; 83
    64e6:	b0 e0       	ldi	r27, 0x00	; 0
    64e8:	e3 e5       	ldi	r30, 0x53	; 83
    64ea:	f0 e0       	ldi	r31, 0x00	; 0
    64ec:	80 81       	ld	r24, Z
    64ee:	82 60       	ori	r24, 0x02	; 2
    64f0:	8c 93       	st	X, r24
	CLR_BIT(TCCR0, CS02);
    64f2:	a3 e5       	ldi	r26, 0x53	; 83
    64f4:	b0 e0       	ldi	r27, 0x00	; 0
    64f6:	e3 e5       	ldi	r30, 0x53	; 83
    64f8:	f0 e0       	ldi	r31, 0x00	; 0
    64fa:	80 81       	ld	r24, Z
    64fc:	8b 7f       	andi	r24, 0xFB	; 251
    64fe:	8c 93       	st	X, r24

}
    6500:	cf 91       	pop	r28
    6502:	df 91       	pop	r29
    6504:	08 95       	ret

00006506 <TIMER_VoidSetPreloadValue>:
void TIMER_VoidSetPreloadValue(u16 Copy_U16PreloadValue)
{
    6506:	df 93       	push	r29
    6508:	cf 93       	push	r28
    650a:	00 d0       	rcall	.+0      	; 0x650c <TIMER_VoidSetPreloadValue+0x6>
    650c:	cd b7       	in	r28, 0x3d	; 61
    650e:	de b7       	in	r29, 0x3e	; 62
    6510:	9a 83       	std	Y+2, r25	; 0x02
    6512:	89 83       	std	Y+1, r24	; 0x01
	#if TIMER0_MODE  == TIMER_OVERFLOW_MODE
	//4- Set the Preload Value
	TCNT0 =Copy_U16PreloadValue;
	#elif TIMER0_MODE  == TIMER_CTC_MODE
	// Set the OCR Value
	OCR0=Copy_U16PreloadValue;
    6514:	ec e5       	ldi	r30, 0x5C	; 92
    6516:	f0 e0       	ldi	r31, 0x00	; 0
    6518:	89 81       	ldd	r24, Y+1	; 0x01
    651a:	80 83       	st	Z, r24
	#endif

}
    651c:	0f 90       	pop	r0
    651e:	0f 90       	pop	r0
    6520:	cf 91       	pop	r28
    6522:	df 91       	pop	r29
    6524:	08 95       	ret

00006526 <TIMER_VoidPWMInit>:
void TIMER_VoidPWMInit(void)
{
    6526:	df 93       	push	r29
    6528:	cf 93       	push	r28
    652a:	cd b7       	in	r28, 0x3d	; 61
    652c:	de b7       	in	r29, 0x3e	; 62
	//1- Set the Wave Generation mode as PWM
		SET_BIT(TCCR0, WGM00);
    652e:	a3 e5       	ldi	r26, 0x53	; 83
    6530:	b0 e0       	ldi	r27, 0x00	; 0
    6532:	e3 e5       	ldi	r30, 0x53	; 83
    6534:	f0 e0       	ldi	r31, 0x00	; 0
    6536:	80 81       	ld	r24, Z
    6538:	80 64       	ori	r24, 0x40	; 64
    653a:	8c 93       	st	X, r24
		SET_BIT(TCCR0, WGM01);
    653c:	a3 e5       	ldi	r26, 0x53	; 83
    653e:	b0 e0       	ldi	r27, 0x00	; 0
    6540:	e3 e5       	ldi	r30, 0x53	; 83
    6542:	f0 e0       	ldi	r31, 0x00	; 0
    6544:	80 81       	ld	r24, Z
    6546:	88 60       	ori	r24, 0x08	; 8
    6548:	8c 93       	st	X, r24

	#if FAST_PWM_MODE == INVERTED_PWM
		CLR_BIT( TCCR0,COM00);
    654a:	a3 e5       	ldi	r26, 0x53	; 83
    654c:	b0 e0       	ldi	r27, 0x00	; 0
    654e:	e3 e5       	ldi	r30, 0x53	; 83
    6550:	f0 e0       	ldi	r31, 0x00	; 0
    6552:	80 81       	ld	r24, Z
    6554:	8f 7e       	andi	r24, 0xEF	; 239
    6556:	8c 93       	st	X, r24
		SET_BIT( TCCR0,COM01);
    6558:	a3 e5       	ldi	r26, 0x53	; 83
    655a:	b0 e0       	ldi	r27, 0x00	; 0
    655c:	e3 e5       	ldi	r30, 0x53	; 83
    655e:	f0 e0       	ldi	r31, 0x00	; 0
    6560:	80 81       	ld	r24, Z
    6562:	80 62       	ori	r24, 0x20	; 32
    6564:	8c 93       	st	X, r24
	#elif FAST_PWM_MODE ==NONINVERTED_PWM
		SET_BIT( TCCR0,COM00);
		SET_BIT( TCCR0,COM01);
	#endif
	//2- Set the prescaler 8Mhz / 8 = 1Mhz --> Timer Freq
		CLR_BIT(TCCR0, CS00);
    6566:	a3 e5       	ldi	r26, 0x53	; 83
    6568:	b0 e0       	ldi	r27, 0x00	; 0
    656a:	e3 e5       	ldi	r30, 0x53	; 83
    656c:	f0 e0       	ldi	r31, 0x00	; 0
    656e:	80 81       	ld	r24, Z
    6570:	8e 7f       	andi	r24, 0xFE	; 254
    6572:	8c 93       	st	X, r24
		SET_BIT(TCCR0, CS01);
    6574:	a3 e5       	ldi	r26, 0x53	; 83
    6576:	b0 e0       	ldi	r27, 0x00	; 0
    6578:	e3 e5       	ldi	r30, 0x53	; 83
    657a:	f0 e0       	ldi	r31, 0x00	; 0
    657c:	80 81       	ld	r24, Z
    657e:	82 60       	ori	r24, 0x02	; 2
    6580:	8c 93       	st	X, r24
		CLR_BIT(TCCR0, CS02);
    6582:	a3 e5       	ldi	r26, 0x53	; 83
    6584:	b0 e0       	ldi	r27, 0x00	; 0
    6586:	e3 e5       	ldi	r30, 0x53	; 83
    6588:	f0 e0       	ldi	r31, 0x00	; 0
    658a:	80 81       	ld	r24, Z
    658c:	8b 7f       	andi	r24, 0xFB	; 251
    658e:	8c 93       	st	X, r24

}
    6590:	cf 91       	pop	r28
    6592:	df 91       	pop	r29
    6594:	08 95       	ret

00006596 <TIMER_VoidTimer1Init>:
void TIMER_VoidTimer1Init(void)
{
    6596:	df 93       	push	r29
    6598:	cf 93       	push	r28
    659a:	cd b7       	in	r28, 0x3d	; 61
    659c:	de b7       	in	r29, 0x3e	; 62
	/* Fast PWM Timer1 */
	CLR_BIT(TCCR1A,WGM10);
    659e:	af e4       	ldi	r26, 0x4F	; 79
    65a0:	b0 e0       	ldi	r27, 0x00	; 0
    65a2:	ef e4       	ldi	r30, 0x4F	; 79
    65a4:	f0 e0       	ldi	r31, 0x00	; 0
    65a6:	80 81       	ld	r24, Z
    65a8:	8e 7f       	andi	r24, 0xFE	; 254
    65aa:	8c 93       	st	X, r24
	SET_BIT(TCCR1A,WGM11);
    65ac:	af e4       	ldi	r26, 0x4F	; 79
    65ae:	b0 e0       	ldi	r27, 0x00	; 0
    65b0:	ef e4       	ldi	r30, 0x4F	; 79
    65b2:	f0 e0       	ldi	r31, 0x00	; 0
    65b4:	80 81       	ld	r24, Z
    65b6:	82 60       	ori	r24, 0x02	; 2
    65b8:	8c 93       	st	X, r24
	SET_BIT(TCCR1B,WGM12);
    65ba:	ae e4       	ldi	r26, 0x4E	; 78
    65bc:	b0 e0       	ldi	r27, 0x00	; 0
    65be:	ee e4       	ldi	r30, 0x4E	; 78
    65c0:	f0 e0       	ldi	r31, 0x00	; 0
    65c2:	80 81       	ld	r24, Z
    65c4:	88 60       	ori	r24, 0x08	; 8
    65c6:	8c 93       	st	X, r24
	SET_BIT(TCCR1B,WGM13);
    65c8:	ae e4       	ldi	r26, 0x4E	; 78
    65ca:	b0 e0       	ldi	r27, 0x00	; 0
    65cc:	ee e4       	ldi	r30, 0x4E	; 78
    65ce:	f0 e0       	ldi	r31, 0x00	; 0
    65d0:	80 81       	ld	r24, Z
    65d2:	80 61       	ori	r24, 0x10	; 16
    65d4:	8c 93       	st	X, r24

	/* NonInverted Timer1 Mode */
	CLR_BIT(TCCR1A,COM1A0);
    65d6:	af e4       	ldi	r26, 0x4F	; 79
    65d8:	b0 e0       	ldi	r27, 0x00	; 0
    65da:	ef e4       	ldi	r30, 0x4F	; 79
    65dc:	f0 e0       	ldi	r31, 0x00	; 0
    65de:	80 81       	ld	r24, Z
    65e0:	8f 7b       	andi	r24, 0xBF	; 191
    65e2:	8c 93       	st	X, r24
	SET_BIT(TCCR1A,COM1A1);
    65e4:	af e4       	ldi	r26, 0x4F	; 79
    65e6:	b0 e0       	ldi	r27, 0x00	; 0
    65e8:	ef e4       	ldi	r30, 0x4F	; 79
    65ea:	f0 e0       	ldi	r31, 0x00	; 0
    65ec:	80 81       	ld	r24, Z
    65ee:	80 68       	ori	r24, 0x80	; 128
    65f0:	8c 93       	st	X, r24

	//2- Set the prescaller 8Mhz / 8 = 1Mhz --> Timer Freq
	CLR_BIT(TCCR1B, CS10);
    65f2:	ae e4       	ldi	r26, 0x4E	; 78
    65f4:	b0 e0       	ldi	r27, 0x00	; 0
    65f6:	ee e4       	ldi	r30, 0x4E	; 78
    65f8:	f0 e0       	ldi	r31, 0x00	; 0
    65fa:	80 81       	ld	r24, Z
    65fc:	8e 7f       	andi	r24, 0xFE	; 254
    65fe:	8c 93       	st	X, r24
	SET_BIT(TCCR1B, CS11);
    6600:	ae e4       	ldi	r26, 0x4E	; 78
    6602:	b0 e0       	ldi	r27, 0x00	; 0
    6604:	ee e4       	ldi	r30, 0x4E	; 78
    6606:	f0 e0       	ldi	r31, 0x00	; 0
    6608:	80 81       	ld	r24, Z
    660a:	82 60       	ori	r24, 0x02	; 2
    660c:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B, CS12);
    660e:	ae e4       	ldi	r26, 0x4E	; 78
    6610:	b0 e0       	ldi	r27, 0x00	; 0
    6612:	ee e4       	ldi	r30, 0x4E	; 78
    6614:	f0 e0       	ldi	r31, 0x00	; 0
    6616:	80 81       	ld	r24, Z
    6618:	8b 7f       	andi	r24, 0xFB	; 251
    661a:	8c 93       	st	X, r24

}
    661c:	cf 91       	pop	r28
    661e:	df 91       	pop	r29
    6620:	08 95       	ret

00006622 <TIMER_VidCTCTimer1Preload>:
void TIMER_VidCTCTimer1Preload(s16 Copy_U16PreloadValue)
{
    6622:	df 93       	push	r29
    6624:	cf 93       	push	r28
    6626:	00 d0       	rcall	.+0      	; 0x6628 <TIMER_VidCTCTimer1Preload+0x6>
    6628:	cd b7       	in	r28, 0x3d	; 61
    662a:	de b7       	in	r29, 0x3e	; 62
    662c:	9a 83       	std	Y+2, r25	; 0x02
    662e:	89 83       	std	Y+1, r24	; 0x01
	OCR1A=Copy_U16PreloadValue;
    6630:	ea e4       	ldi	r30, 0x4A	; 74
    6632:	f0 e0       	ldi	r31, 0x00	; 0
    6634:	89 81       	ldd	r24, Y+1	; 0x01
    6636:	9a 81       	ldd	r25, Y+2	; 0x02
    6638:	91 83       	std	Z+1, r25	; 0x01
    663a:	80 83       	st	Z, r24
}
    663c:	0f 90       	pop	r0
    663e:	0f 90       	pop	r0
    6640:	cf 91       	pop	r28
    6642:	df 91       	pop	r29
    6644:	08 95       	ret

00006646 <TIMER_VidSetTimer1Preload>:
void TIMER_VidSetTimer1Preload(u16 Copy_U16PreloadValue)
{
    6646:	df 93       	push	r29
    6648:	cf 93       	push	r28
    664a:	00 d0       	rcall	.+0      	; 0x664c <TIMER_VidSetTimer1Preload+0x6>
    664c:	cd b7       	in	r28, 0x3d	; 61
    664e:	de b7       	in	r29, 0x3e	; 62
    6650:	9a 83       	std	Y+2, r25	; 0x02
    6652:	89 83       	std	Y+1, r24	; 0x01
	ICR1=Copy_U16PreloadValue;
    6654:	e6 e4       	ldi	r30, 0x46	; 70
    6656:	f0 e0       	ldi	r31, 0x00	; 0
    6658:	89 81       	ldd	r24, Y+1	; 0x01
    665a:	9a 81       	ldd	r25, Y+2	; 0x02
    665c:	91 83       	std	Z+1, r25	; 0x01
    665e:	80 83       	st	Z, r24
}
    6660:	0f 90       	pop	r0
    6662:	0f 90       	pop	r0
    6664:	cf 91       	pop	r28
    6666:	df 91       	pop	r29
    6668:	08 95       	ret

0000666a <__vector_10>:
//		DIO_VidTogglePinValue(PORTA_U8_INDEX, PIN0_U8_INDEX);
//	}
//}

void __vector_10(void)
{
    666a:	1f 92       	push	r1
    666c:	0f 92       	push	r0
    666e:	0f b6       	in	r0, 0x3f	; 63
    6670:	0f 92       	push	r0
    6672:	11 24       	eor	r1, r1
    6674:	2f 93       	push	r18
    6676:	3f 93       	push	r19
    6678:	4f 93       	push	r20
    667a:	5f 93       	push	r21
    667c:	6f 93       	push	r22
    667e:	7f 93       	push	r23
    6680:	8f 93       	push	r24
    6682:	9f 93       	push	r25
    6684:	af 93       	push	r26
    6686:	bf 93       	push	r27
    6688:	ef 93       	push	r30
    668a:	ff 93       	push	r31
    668c:	df 93       	push	r29
    668e:	cf 93       	push	r28
    6690:	cd b7       	in	r28, 0x3d	; 61
    6692:	de b7       	in	r29, 0x3e	; 62

	static u16 counter = 0;
	counter++;
    6694:	80 91 27 03 	lds	r24, 0x0327
    6698:	90 91 28 03 	lds	r25, 0x0328
    669c:	01 96       	adiw	r24, 0x01	; 1
    669e:	90 93 28 03 	sts	0x0328, r25
    66a2:	80 93 27 03 	sts	0x0327, r24
	if(counter == 5)
    66a6:	80 91 27 03 	lds	r24, 0x0327
    66aa:	90 91 28 03 	lds	r25, 0x0328
    66ae:	85 30       	cpi	r24, 0x05	; 5
    66b0:	91 05       	cpc	r25, r1
    66b2:	31 f4       	brne	.+12     	; 0x66c0 <__vector_10+0x56>
	{
		//Do Action every 1s
		DIO_U8SetPinValue(DIO_PORTA,DIO_PIN0,1);
    66b4:	80 e0       	ldi	r24, 0x00	; 0
    66b6:	60 e0       	ldi	r22, 0x00	; 0
    66b8:	41 e0       	ldi	r20, 0x01	; 1
    66ba:	0e 94 8e 08 	call	0x111c	; 0x111c <DIO_U8SetPinValue>
    66be:	10 c0       	rjmp	.+32     	; 0x66e0 <__vector_10+0x76>
	}
	else if(counter == 20)
    66c0:	80 91 27 03 	lds	r24, 0x0327
    66c4:	90 91 28 03 	lds	r25, 0x0328
    66c8:	84 31       	cpi	r24, 0x14	; 20
    66ca:	91 05       	cpc	r25, r1
    66cc:	49 f4       	brne	.+18     	; 0x66e0 <__vector_10+0x76>
	{
		counter = 0;
    66ce:	10 92 28 03 	sts	0x0328, r1
    66d2:	10 92 27 03 	sts	0x0327, r1
		DIO_U8SetPinValue(DIO_PORTA, DIO_PIN0,0);
    66d6:	80 e0       	ldi	r24, 0x00	; 0
    66d8:	60 e0       	ldi	r22, 0x00	; 0
    66da:	40 e0       	ldi	r20, 0x00	; 0
    66dc:	0e 94 8e 08 	call	0x111c	; 0x111c <DIO_U8SetPinValue>

	}
}
    66e0:	cf 91       	pop	r28
    66e2:	df 91       	pop	r29
    66e4:	ff 91       	pop	r31
    66e6:	ef 91       	pop	r30
    66e8:	bf 91       	pop	r27
    66ea:	af 91       	pop	r26
    66ec:	9f 91       	pop	r25
    66ee:	8f 91       	pop	r24
    66f0:	7f 91       	pop	r23
    66f2:	6f 91       	pop	r22
    66f4:	5f 91       	pop	r21
    66f6:	4f 91       	pop	r20
    66f8:	3f 91       	pop	r19
    66fa:	2f 91       	pop	r18
    66fc:	0f 90       	pop	r0
    66fe:	0f be       	out	0x3f, r0	; 63
    6700:	0f 90       	pop	r0
    6702:	1f 90       	pop	r1
    6704:	18 95       	reti

00006706 <__vector_11>:


void __vector_11(void)
{
    6706:	1f 92       	push	r1
    6708:	0f 92       	push	r0
    670a:	0f b6       	in	r0, 0x3f	; 63
    670c:	0f 92       	push	r0
    670e:	11 24       	eor	r1, r1
    6710:	2f 93       	push	r18
    6712:	3f 93       	push	r19
    6714:	4f 93       	push	r20
    6716:	5f 93       	push	r21
    6718:	6f 93       	push	r22
    671a:	7f 93       	push	r23
    671c:	8f 93       	push	r24
    671e:	9f 93       	push	r25
    6720:	af 93       	push	r26
    6722:	bf 93       	push	r27
    6724:	ef 93       	push	r30
    6726:	ff 93       	push	r31
    6728:	df 93       	push	r29
    672a:	cf 93       	push	r28
    672c:	cd b7       	in	r28, 0x3d	; 61
    672e:	de b7       	in	r29, 0x3e	; 62
	//3906.25
	static u16 counter = 0;
	counter++;
    6730:	80 91 29 03 	lds	r24, 0x0329
    6734:	90 91 2a 03 	lds	r25, 0x032A
    6738:	01 96       	adiw	r24, 0x01	; 1
    673a:	90 93 2a 03 	sts	0x032A, r25
    673e:	80 93 29 03 	sts	0x0329, r24
	if(counter == 3907)
    6742:	80 91 29 03 	lds	r24, 0x0329
    6746:	90 91 2a 03 	lds	r25, 0x032A
    674a:	2f e0       	ldi	r18, 0x0F	; 15
    674c:	83 34       	cpi	r24, 0x43	; 67
    674e:	92 07       	cpc	r25, r18
    6750:	61 f4       	brne	.+24     	; 0x676a <__vector_11+0x64>
	{
		counter = 0;
    6752:	10 92 2a 03 	sts	0x032A, r1
    6756:	10 92 29 03 	sts	0x0329, r1
		TCNT0 = 192;
    675a:	e2 e5       	ldi	r30, 0x52	; 82
    675c:	f0 e0       	ldi	r31, 0x00	; 0
    675e:	80 ec       	ldi	r24, 0xC0	; 192
    6760:	80 83       	st	Z, r24
		//Do Action every 1s
		DIO_U8TogglePin(DIO_PORTA,DIO_PIN0);
    6762:	80 e0       	ldi	r24, 0x00	; 0
    6764:	60 e0       	ldi	r22, 0x00	; 0
    6766:	0e 94 41 0a 	call	0x1482	; 0x1482 <DIO_U8TogglePin>
	}
}
    676a:	cf 91       	pop	r28
    676c:	df 91       	pop	r29
    676e:	ff 91       	pop	r31
    6770:	ef 91       	pop	r30
    6772:	bf 91       	pop	r27
    6774:	af 91       	pop	r26
    6776:	9f 91       	pop	r25
    6778:	8f 91       	pop	r24
    677a:	7f 91       	pop	r23
    677c:	6f 91       	pop	r22
    677e:	5f 91       	pop	r21
    6780:	4f 91       	pop	r20
    6782:	3f 91       	pop	r19
    6784:	2f 91       	pop	r18
    6786:	0f 90       	pop	r0
    6788:	0f be       	out	0x3f, r0	; 63
    678a:	0f 90       	pop	r0
    678c:	1f 90       	pop	r1
    678e:	18 95       	reti

00006790 <UART_VidInit>:
#include "USART_Private.h"
#include "USART_Config.h"
#include <util/delay.h>

void UART_VidInit(void)
{
    6790:	df 93       	push	r29
    6792:	cf 93       	push	r28
    6794:	cd b7       	in	r28, 0x3d	; 61
    6796:	de b7       	in	r29, 0x3e	; 62
	//Access UCSRA Once time for simple configurations
	UART_UCSRC_REG = (1<<UCSRC_URSEL_BIT) | (1<<UCSRC_UCSZ0_BIT) | (1<<UCSRC_UCSZ1_BIT);
    6798:	e0 e4       	ldi	r30, 0x40	; 64
    679a:	f0 e0       	ldi	r31, 0x00	; 0
    679c:	86 e8       	ldi	r24, 0x86	; 134
    679e:	80 83       	st	Z, r24
	UART_UBRRL_REG = 51; 	//9600 Baud rate with 8Mhz Osc.freq to the MCU
    67a0:	e9 e2       	ldi	r30, 0x29	; 41
    67a2:	f0 e0       	ldi	r31, 0x00	; 0
    67a4:	83 e3       	ldi	r24, 0x33	; 51
    67a6:	80 83       	st	Z, r24
	SET_BIT(UART_UCSRB_REG, UCSRB_RXEN_BIT);
    67a8:	aa e2       	ldi	r26, 0x2A	; 42
    67aa:	b0 e0       	ldi	r27, 0x00	; 0
    67ac:	ea e2       	ldi	r30, 0x2A	; 42
    67ae:	f0 e0       	ldi	r31, 0x00	; 0
    67b0:	80 81       	ld	r24, Z
    67b2:	80 61       	ori	r24, 0x10	; 16
    67b4:	8c 93       	st	X, r24
	SET_BIT(UART_UCSRB_REG, UCSRB_TXEN_BIT);
    67b6:	aa e2       	ldi	r26, 0x2A	; 42
    67b8:	b0 e0       	ldi	r27, 0x00	; 0
    67ba:	ea e2       	ldi	r30, 0x2A	; 42
    67bc:	f0 e0       	ldi	r31, 0x00	; 0
    67be:	80 81       	ld	r24, Z
    67c0:	88 60       	ori	r24, 0x08	; 8
    67c2:	8c 93       	st	X, r24
}
    67c4:	cf 91       	pop	r28
    67c6:	df 91       	pop	r29
    67c8:	08 95       	ret

000067ca <UART_VidTransmitData>:

void UART_VidTransmitData(u8 Copy_U8Data)
{
    67ca:	df 93       	push	r29
    67cc:	cf 93       	push	r28
    67ce:	0f 92       	push	r0
    67d0:	cd b7       	in	r28, 0x3d	; 61
    67d2:	de b7       	in	r29, 0x3e	; 62
    67d4:	89 83       	std	Y+1, r24	; 0x01
	//Waiting for the transmit buffer (UDR) is ready to receive new data
	while((GET_BIT(UART_UCSRA_REG, UCSRA_UDRE_BIT)) != 1);
    67d6:	eb e2       	ldi	r30, 0x2B	; 43
    67d8:	f0 e0       	ldi	r31, 0x00	; 0
    67da:	80 81       	ld	r24, Z
    67dc:	82 95       	swap	r24
    67de:	86 95       	lsr	r24
    67e0:	87 70       	andi	r24, 0x07	; 7
    67e2:	88 2f       	mov	r24, r24
    67e4:	90 e0       	ldi	r25, 0x00	; 0
    67e6:	81 70       	andi	r24, 0x01	; 1
    67e8:	90 70       	andi	r25, 0x00	; 0
    67ea:	00 97       	sbiw	r24, 0x00	; 0
    67ec:	a1 f3       	breq	.-24     	; 0x67d6 <UART_VidTransmitData+0xc>

	if((GET_BIT(UART_UCSRA_REG, UCSRA_UDRE_BIT)) == 1)
    67ee:	eb e2       	ldi	r30, 0x2B	; 43
    67f0:	f0 e0       	ldi	r31, 0x00	; 0
    67f2:	80 81       	ld	r24, Z
    67f4:	82 95       	swap	r24
    67f6:	86 95       	lsr	r24
    67f8:	87 70       	andi	r24, 0x07	; 7
    67fa:	88 2f       	mov	r24, r24
    67fc:	90 e0       	ldi	r25, 0x00	; 0
    67fe:	81 70       	andi	r24, 0x01	; 1
    6800:	90 70       	andi	r25, 0x00	; 0
    6802:	88 23       	and	r24, r24
    6804:	29 f0       	breq	.+10     	; 0x6810 <UART_VidTransmitData+0x46>
	{
		//Send Data to UDR register
		UART_UDR_REG = Copy_U8Data;
    6806:	ec e2       	ldi	r30, 0x2C	; 44
    6808:	f0 e0       	ldi	r31, 0x00	; 0
    680a:	89 81       	ldd	r24, Y+1	; 0x01
    680c:	80 83       	st	Z, r24
    680e:	04 c0       	rjmp	.+8      	; 0x6818 <UART_VidTransmitData+0x4e>
	}
	else
	{
		UART_UDR_REG = 0xff;
    6810:	ec e2       	ldi	r30, 0x2C	; 44
    6812:	f0 e0       	ldi	r31, 0x00	; 0
    6814:	8f ef       	ldi	r24, 0xFF	; 255
    6816:	80 83       	st	Z, r24
	}
}
    6818:	0f 90       	pop	r0
    681a:	cf 91       	pop	r28
    681c:	df 91       	pop	r29
    681e:	08 95       	ret

00006820 <UART_VidReceiveData>:

u8 UART_VidReceiveData(void)
{
    6820:	df 93       	push	r29
    6822:	cf 93       	push	r28
    6824:	0f 92       	push	r0
    6826:	cd b7       	in	r28, 0x3d	; 61
    6828:	de b7       	in	r29, 0x3e	; 62
	u8 Local_U8Data;
	//Waiting for the receive buffer (UDR) is ready to transmit new data
	while((GET_BIT(UART_UCSRA_REG, UCSRA_RXC_BIT)) != 1);
    682a:	eb e2       	ldi	r30, 0x2B	; 43
    682c:	f0 e0       	ldi	r31, 0x00	; 0
    682e:	80 81       	ld	r24, Z
    6830:	88 1f       	adc	r24, r24
    6832:	88 27       	eor	r24, r24
    6834:	88 1f       	adc	r24, r24
    6836:	81 30       	cpi	r24, 0x01	; 1
    6838:	c1 f7       	brne	.-16     	; 0x682a <UART_VidReceiveData+0xa>

	if((GET_BIT(UART_UCSRA_REG, UCSRA_RXC_BIT)) == 1)
    683a:	eb e2       	ldi	r30, 0x2B	; 43
    683c:	f0 e0       	ldi	r31, 0x00	; 0
    683e:	80 81       	ld	r24, Z
    6840:	88 1f       	adc	r24, r24
    6842:	88 27       	eor	r24, r24
    6844:	88 1f       	adc	r24, r24
    6846:	81 30       	cpi	r24, 0x01	; 1
    6848:	29 f4       	brne	.+10     	; 0x6854 <UART_VidReceiveData+0x34>
	{
		Local_U8Data = UART_UDR_REG;
    684a:	ec e2       	ldi	r30, 0x2C	; 44
    684c:	f0 e0       	ldi	r31, 0x00	; 0
    684e:	80 81       	ld	r24, Z
    6850:	89 83       	std	Y+1, r24	; 0x01
    6852:	02 c0       	rjmp	.+4      	; 0x6858 <UART_VidReceiveData+0x38>
	}
	else
	{
		Local_U8Data = 0xff;
    6854:	8f ef       	ldi	r24, 0xFF	; 255
    6856:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_U8Data;
    6858:	89 81       	ldd	r24, Y+1	; 0x01
}
    685a:	0f 90       	pop	r0
    685c:	cf 91       	pop	r28
    685e:	df 91       	pop	r29
    6860:	08 95       	ret

00006862 <UART_VidTransmitString>:

void UART_VidTransmitString(u8 *Copy_U8String)
{
    6862:	df 93       	push	r29
    6864:	cf 93       	push	r28
    6866:	00 d0       	rcall	.+0      	; 0x6868 <UART_VidTransmitString+0x6>
    6868:	cd b7       	in	r28, 0x3d	; 61
    686a:	de b7       	in	r29, 0x3e	; 62
    686c:	9a 83       	std	Y+2, r25	; 0x02
    686e:	89 83       	std	Y+1, r24	; 0x01
    6870:	0b c0       	rjmp	.+22     	; 0x6888 <UART_VidTransmitString+0x26>
	while(*Copy_U8String > NULL_STR)
	{
		UART_VidTransmitData(*Copy_U8String++);
    6872:	e9 81       	ldd	r30, Y+1	; 0x01
    6874:	fa 81       	ldd	r31, Y+2	; 0x02
    6876:	20 81       	ld	r18, Z
    6878:	89 81       	ldd	r24, Y+1	; 0x01
    687a:	9a 81       	ldd	r25, Y+2	; 0x02
    687c:	01 96       	adiw	r24, 0x01	; 1
    687e:	9a 83       	std	Y+2, r25	; 0x02
    6880:	89 83       	std	Y+1, r24	; 0x01
    6882:	82 2f       	mov	r24, r18
    6884:	0e 94 e5 33 	call	0x67ca	; 0x67ca <UART_VidTransmitData>
	return Local_U8Data;
}

void UART_VidTransmitString(u8 *Copy_U8String)
{
	while(*Copy_U8String > NULL_STR)
    6888:	e9 81       	ldd	r30, Y+1	; 0x01
    688a:	fa 81       	ldd	r31, Y+2	; 0x02
    688c:	80 81       	ld	r24, Z
    688e:	88 23       	and	r24, r24
    6890:	81 f7       	brne	.-32     	; 0x6872 <UART_VidTransmitString+0x10>
	{
		UART_VidTransmitData(*Copy_U8String++);
	}
}
    6892:	0f 90       	pop	r0
    6894:	0f 90       	pop	r0
    6896:	cf 91       	pop	r28
    6898:	df 91       	pop	r29
    689a:	08 95       	ret

0000689c <UART_VidTransmitSNumber>:

void UART_VidTransmitSNumber(s32 Copy_S32Number)
{
    689c:	0f 93       	push	r16
    689e:	1f 93       	push	r17
    68a0:	df 93       	push	r29
    68a2:	cf 93       	push	r28
    68a4:	cd b7       	in	r28, 0x3d	; 61
    68a6:	de b7       	in	r29, 0x3e	; 62
    68a8:	60 97       	sbiw	r28, 0x10	; 16
    68aa:	0f b6       	in	r0, 0x3f	; 63
    68ac:	f8 94       	cli
    68ae:	de bf       	out	0x3e, r29	; 62
    68b0:	0f be       	out	0x3f, r0	; 63
    68b2:	cd bf       	out	0x3d, r28	; 61
    68b4:	6d 87       	std	Y+13, r22	; 0x0d
    68b6:	7e 87       	std	Y+14, r23	; 0x0e
    68b8:	8f 87       	std	Y+15, r24	; 0x0f
    68ba:	98 8b       	std	Y+16, r25	; 0x10
	u8 counter = 0;
    68bc:	1a 82       	std	Y+2, r1	; 0x02
	u8 number[10];
	//Negative Number
	if(Copy_S32Number < 0)
    68be:	8d 85       	ldd	r24, Y+13	; 0x0d
    68c0:	9e 85       	ldd	r25, Y+14	; 0x0e
    68c2:	af 85       	ldd	r26, Y+15	; 0x0f
    68c4:	b8 89       	ldd	r27, Y+16	; 0x10
    68c6:	bb 23       	and	r27, r27
    68c8:	9c f4       	brge	.+38     	; 0x68f0 <UART_VidTransmitSNumber+0x54>
	{
		UART_VidTransmitData('-');
    68ca:	8d e2       	ldi	r24, 0x2D	; 45
    68cc:	0e 94 e5 33 	call	0x67ca	; 0x67ca <UART_VidTransmitData>
		Copy_S32Number *= -1;	//make it positive again
    68d0:	8d 85       	ldd	r24, Y+13	; 0x0d
    68d2:	9e 85       	ldd	r25, Y+14	; 0x0e
    68d4:	af 85       	ldd	r26, Y+15	; 0x0f
    68d6:	b8 89       	ldd	r27, Y+16	; 0x10
    68d8:	b0 95       	com	r27
    68da:	a0 95       	com	r26
    68dc:	90 95       	com	r25
    68de:	81 95       	neg	r24
    68e0:	9f 4f       	sbci	r25, 0xFF	; 255
    68e2:	af 4f       	sbci	r26, 0xFF	; 255
    68e4:	bf 4f       	sbci	r27, 0xFF	; 255
    68e6:	8d 87       	std	Y+13, r24	; 0x0d
    68e8:	9e 87       	std	Y+14, r25	; 0x0e
    68ea:	af 87       	std	Y+15, r26	; 0x0f
    68ec:	b8 8b       	std	Y+16, r27	; 0x10
    68ee:	3a c0       	rjmp	.+116    	; 0x6964 <UART_VidTransmitSNumber+0xc8>
	}
	//Zero
	else if(Copy_S32Number == 0)
    68f0:	8d 85       	ldd	r24, Y+13	; 0x0d
    68f2:	9e 85       	ldd	r25, Y+14	; 0x0e
    68f4:	af 85       	ldd	r26, Y+15	; 0x0f
    68f6:	b8 89       	ldd	r27, Y+16	; 0x10
    68f8:	00 97       	sbiw	r24, 0x00	; 0
    68fa:	a1 05       	cpc	r26, r1
    68fc:	b1 05       	cpc	r27, r1
    68fe:	91 f5       	brne	.+100    	; 0x6964 <UART_VidTransmitSNumber+0xc8>
	{
		UART_VidTransmitData('0');
    6900:	80 e3       	ldi	r24, 0x30	; 48
    6902:	0e 94 e5 33 	call	0x67ca	; 0x67ca <UART_VidTransmitData>
    6906:	2e c0       	rjmp	.+92     	; 0x6964 <UART_VidTransmitSNumber+0xc8>
	}
	//Save Positive or Negative Number
	while(Copy_S32Number > 0)
	{
		number[counter++] = (Copy_S32Number%10) + '0';
    6908:	8a 81       	ldd	r24, Y+2	; 0x02
    690a:	08 2f       	mov	r16, r24
    690c:	10 e0       	ldi	r17, 0x00	; 0
    690e:	8d 85       	ldd	r24, Y+13	; 0x0d
    6910:	9e 85       	ldd	r25, Y+14	; 0x0e
    6912:	af 85       	ldd	r26, Y+15	; 0x0f
    6914:	b8 89       	ldd	r27, Y+16	; 0x10
    6916:	2a e0       	ldi	r18, 0x0A	; 10
    6918:	30 e0       	ldi	r19, 0x00	; 0
    691a:	40 e0       	ldi	r20, 0x00	; 0
    691c:	50 e0       	ldi	r21, 0x00	; 0
    691e:	bc 01       	movw	r22, r24
    6920:	cd 01       	movw	r24, r26
    6922:	0e 94 13 3d 	call	0x7a26	; 0x7a26 <__divmodsi4>
    6926:	dc 01       	movw	r26, r24
    6928:	cb 01       	movw	r24, r22
    692a:	28 2f       	mov	r18, r24
    692c:	20 5d       	subi	r18, 0xD0	; 208
    692e:	ce 01       	movw	r24, r28
    6930:	03 96       	adiw	r24, 0x03	; 3
    6932:	fc 01       	movw	r30, r24
    6934:	e0 0f       	add	r30, r16
    6936:	f1 1f       	adc	r31, r17
    6938:	20 83       	st	Z, r18
    693a:	8a 81       	ldd	r24, Y+2	; 0x02
    693c:	8f 5f       	subi	r24, 0xFF	; 255
    693e:	8a 83       	std	Y+2, r24	; 0x02
		Copy_S32Number /= 10;
    6940:	8d 85       	ldd	r24, Y+13	; 0x0d
    6942:	9e 85       	ldd	r25, Y+14	; 0x0e
    6944:	af 85       	ldd	r26, Y+15	; 0x0f
    6946:	b8 89       	ldd	r27, Y+16	; 0x10
    6948:	2a e0       	ldi	r18, 0x0A	; 10
    694a:	30 e0       	ldi	r19, 0x00	; 0
    694c:	40 e0       	ldi	r20, 0x00	; 0
    694e:	50 e0       	ldi	r21, 0x00	; 0
    6950:	bc 01       	movw	r22, r24
    6952:	cd 01       	movw	r24, r26
    6954:	0e 94 13 3d 	call	0x7a26	; 0x7a26 <__divmodsi4>
    6958:	da 01       	movw	r26, r20
    695a:	c9 01       	movw	r24, r18
    695c:	8d 87       	std	Y+13, r24	; 0x0d
    695e:	9e 87       	std	Y+14, r25	; 0x0e
    6960:	af 87       	std	Y+15, r26	; 0x0f
    6962:	b8 8b       	std	Y+16, r27	; 0x10
	else if(Copy_S32Number == 0)
	{
		UART_VidTransmitData('0');
	}
	//Save Positive or Negative Number
	while(Copy_S32Number > 0)
    6964:	8d 85       	ldd	r24, Y+13	; 0x0d
    6966:	9e 85       	ldd	r25, Y+14	; 0x0e
    6968:	af 85       	ldd	r26, Y+15	; 0x0f
    696a:	b8 89       	ldd	r27, Y+16	; 0x10
    696c:	18 16       	cp	r1, r24
    696e:	19 06       	cpc	r1, r25
    6970:	1a 06       	cpc	r1, r26
    6972:	1b 06       	cpc	r1, r27
    6974:	4c f2       	brlt	.-110    	; 0x6908 <UART_VidTransmitSNumber+0x6c>
	{
		number[counter++] = (Copy_S32Number%10) + '0';
		Copy_S32Number /= 10;
	}
	//Display Numbers by transmit array elements reversely
	for(u8 i = counter; i > 0; i--)
    6976:	8a 81       	ldd	r24, Y+2	; 0x02
    6978:	89 83       	std	Y+1, r24	; 0x01
    697a:	11 c0       	rjmp	.+34     	; 0x699e <UART_VidTransmitSNumber+0x102>
	{
		UART_VidTransmitData(number[i-1]);
    697c:	89 81       	ldd	r24, Y+1	; 0x01
    697e:	88 2f       	mov	r24, r24
    6980:	90 e0       	ldi	r25, 0x00	; 0
    6982:	9c 01       	movw	r18, r24
    6984:	21 50       	subi	r18, 0x01	; 1
    6986:	30 40       	sbci	r19, 0x00	; 0
    6988:	ce 01       	movw	r24, r28
    698a:	03 96       	adiw	r24, 0x03	; 3
    698c:	fc 01       	movw	r30, r24
    698e:	e2 0f       	add	r30, r18
    6990:	f3 1f       	adc	r31, r19
    6992:	80 81       	ld	r24, Z
    6994:	0e 94 e5 33 	call	0x67ca	; 0x67ca <UART_VidTransmitData>
	{
		number[counter++] = (Copy_S32Number%10) + '0';
		Copy_S32Number /= 10;
	}
	//Display Numbers by transmit array elements reversely
	for(u8 i = counter; i > 0; i--)
    6998:	89 81       	ldd	r24, Y+1	; 0x01
    699a:	81 50       	subi	r24, 0x01	; 1
    699c:	89 83       	std	Y+1, r24	; 0x01
    699e:	89 81       	ldd	r24, Y+1	; 0x01
    69a0:	88 23       	and	r24, r24
    69a2:	61 f7       	brne	.-40     	; 0x697c <UART_VidTransmitSNumber+0xe0>
	{
		UART_VidTransmitData(number[i-1]);
	}
}
    69a4:	60 96       	adiw	r28, 0x10	; 16
    69a6:	0f b6       	in	r0, 0x3f	; 63
    69a8:	f8 94       	cli
    69aa:	de bf       	out	0x3e, r29	; 62
    69ac:	0f be       	out	0x3f, r0	; 63
    69ae:	cd bf       	out	0x3d, r28	; 61
    69b0:	cf 91       	pop	r28
    69b2:	df 91       	pop	r29
    69b4:	1f 91       	pop	r17
    69b6:	0f 91       	pop	r16
    69b8:	08 95       	ret

000069ba <UART_VidTerminalPrintChar>:

void UART_VidTerminalPrintChar(u8 Copy_U8Character)
{
    69ba:	df 93       	push	r29
    69bc:	cf 93       	push	r28
    69be:	cd b7       	in	r28, 0x3d	; 61
    69c0:	de b7       	in	r29, 0x3e	; 62
    69c2:	2f 97       	sbiw	r28, 0x0f	; 15
    69c4:	0f b6       	in	r0, 0x3f	; 63
    69c6:	f8 94       	cli
    69c8:	de bf       	out	0x3e, r29	; 62
    69ca:	0f be       	out	0x3f, r0	; 63
    69cc:	cd bf       	out	0x3d, r28	; 61
    69ce:	8f 87       	std	Y+15, r24	; 0x0f
	UART_VidTransmitString("Enter Char : ");
    69d0:	89 e6       	ldi	r24, 0x69	; 105
    69d2:	91 e0       	ldi	r25, 0x01	; 1
    69d4:	0e 94 31 34 	call	0x6862	; 0x6862 <UART_VidTransmitString>
	Copy_U8Character = UART_VidReceiveData();
    69d8:	0e 94 10 34 	call	0x6820	; 0x6820 <UART_VidReceiveData>
    69dc:	8f 87       	std	Y+15, r24	; 0x0f
	if(Copy_U8Character != 0xff)
    69de:	8f 85       	ldd	r24, Y+15	; 0x0f
    69e0:	8f 3f       	cpi	r24, 0xFF	; 255
    69e2:	99 f0       	breq	.+38     	; 0x6a0a <UART_VidTerminalPrintChar+0x50>
	{
		UART_VidTransmitData(Copy_U8Character);
    69e4:	8f 85       	ldd	r24, Y+15	; 0x0f
    69e6:	0e 94 e5 33 	call	0x67ca	; 0x67ca <UART_VidTransmitData>
		UART_VidTransmitData('\r');	//Make a new line in the Virtual Terminal
    69ea:	8d e0       	ldi	r24, 0x0D	; 13
    69ec:	0e 94 e5 33 	call	0x67ca	; 0x67ca <UART_VidTransmitData>
		UART_VidTransmitString("Printed Char : ");
    69f0:	87 e7       	ldi	r24, 0x77	; 119
    69f2:	91 e0       	ldi	r25, 0x01	; 1
    69f4:	0e 94 31 34 	call	0x6862	; 0x6862 <UART_VidTransmitString>
		UART_VidTransmitData(Copy_U8Character);
    69f8:	8f 85       	ldd	r24, Y+15	; 0x0f
    69fa:	0e 94 e5 33 	call	0x67ca	; 0x67ca <UART_VidTransmitData>
		UART_VidTransmitData('\r');	//Make a new line in the Virtual Terminal
    69fe:	8d e0       	ldi	r24, 0x0D	; 13
    6a00:	0e 94 e5 33 	call	0x67ca	; 0x67ca <UART_VidTransmitData>
		UART_VidTransmitData('\r');	//Make a new line in the Virtual Terminal
    6a04:	8d e0       	ldi	r24, 0x0D	; 13
    6a06:	0e 94 e5 33 	call	0x67ca	; 0x67ca <UART_VidTransmitData>
    6a0a:	80 e0       	ldi	r24, 0x00	; 0
    6a0c:	90 e0       	ldi	r25, 0x00	; 0
    6a0e:	a0 e2       	ldi	r26, 0x20	; 32
    6a10:	b1 e4       	ldi	r27, 0x41	; 65
    6a12:	8b 87       	std	Y+11, r24	; 0x0b
    6a14:	9c 87       	std	Y+12, r25	; 0x0c
    6a16:	ad 87       	std	Y+13, r26	; 0x0d
    6a18:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    6a1a:	6b 85       	ldd	r22, Y+11	; 0x0b
    6a1c:	7c 85       	ldd	r23, Y+12	; 0x0c
    6a1e:	8d 85       	ldd	r24, Y+13	; 0x0d
    6a20:	9e 85       	ldd	r25, Y+14	; 0x0e
    6a22:	20 e0       	ldi	r18, 0x00	; 0
    6a24:	30 e0       	ldi	r19, 0x00	; 0
    6a26:	4a ef       	ldi	r20, 0xFA	; 250
    6a28:	54 e4       	ldi	r21, 0x44	; 68
    6a2a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6a2e:	dc 01       	movw	r26, r24
    6a30:	cb 01       	movw	r24, r22
    6a32:	8f 83       	std	Y+7, r24	; 0x07
    6a34:	98 87       	std	Y+8, r25	; 0x08
    6a36:	a9 87       	std	Y+9, r26	; 0x09
    6a38:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    6a3a:	6f 81       	ldd	r22, Y+7	; 0x07
    6a3c:	78 85       	ldd	r23, Y+8	; 0x08
    6a3e:	89 85       	ldd	r24, Y+9	; 0x09
    6a40:	9a 85       	ldd	r25, Y+10	; 0x0a
    6a42:	20 e0       	ldi	r18, 0x00	; 0
    6a44:	30 e0       	ldi	r19, 0x00	; 0
    6a46:	40 e8       	ldi	r20, 0x80	; 128
    6a48:	5f e3       	ldi	r21, 0x3F	; 63
    6a4a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    6a4e:	88 23       	and	r24, r24
    6a50:	2c f4       	brge	.+10     	; 0x6a5c <UART_VidTerminalPrintChar+0xa2>
		__ticks = 1;
    6a52:	81 e0       	ldi	r24, 0x01	; 1
    6a54:	90 e0       	ldi	r25, 0x00	; 0
    6a56:	9e 83       	std	Y+6, r25	; 0x06
    6a58:	8d 83       	std	Y+5, r24	; 0x05
    6a5a:	3f c0       	rjmp	.+126    	; 0x6ada <UART_VidTerminalPrintChar+0x120>
	else if (__tmp > 65535)
    6a5c:	6f 81       	ldd	r22, Y+7	; 0x07
    6a5e:	78 85       	ldd	r23, Y+8	; 0x08
    6a60:	89 85       	ldd	r24, Y+9	; 0x09
    6a62:	9a 85       	ldd	r25, Y+10	; 0x0a
    6a64:	20 e0       	ldi	r18, 0x00	; 0
    6a66:	3f ef       	ldi	r19, 0xFF	; 255
    6a68:	4f e7       	ldi	r20, 0x7F	; 127
    6a6a:	57 e4       	ldi	r21, 0x47	; 71
    6a6c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    6a70:	18 16       	cp	r1, r24
    6a72:	4c f5       	brge	.+82     	; 0x6ac6 <UART_VidTerminalPrintChar+0x10c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6a74:	6b 85       	ldd	r22, Y+11	; 0x0b
    6a76:	7c 85       	ldd	r23, Y+12	; 0x0c
    6a78:	8d 85       	ldd	r24, Y+13	; 0x0d
    6a7a:	9e 85       	ldd	r25, Y+14	; 0x0e
    6a7c:	20 e0       	ldi	r18, 0x00	; 0
    6a7e:	30 e0       	ldi	r19, 0x00	; 0
    6a80:	40 e2       	ldi	r20, 0x20	; 32
    6a82:	51 e4       	ldi	r21, 0x41	; 65
    6a84:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6a88:	dc 01       	movw	r26, r24
    6a8a:	cb 01       	movw	r24, r22
    6a8c:	bc 01       	movw	r22, r24
    6a8e:	cd 01       	movw	r24, r26
    6a90:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6a94:	dc 01       	movw	r26, r24
    6a96:	cb 01       	movw	r24, r22
    6a98:	9e 83       	std	Y+6, r25	; 0x06
    6a9a:	8d 83       	std	Y+5, r24	; 0x05
    6a9c:	0f c0       	rjmp	.+30     	; 0x6abc <UART_VidTerminalPrintChar+0x102>
    6a9e:	88 ec       	ldi	r24, 0xC8	; 200
    6aa0:	90 e0       	ldi	r25, 0x00	; 0
    6aa2:	9c 83       	std	Y+4, r25	; 0x04
    6aa4:	8b 83       	std	Y+3, r24	; 0x03
    6aa6:	8b 81       	ldd	r24, Y+3	; 0x03
    6aa8:	9c 81       	ldd	r25, Y+4	; 0x04
    6aaa:	01 97       	sbiw	r24, 0x01	; 1
    6aac:	f1 f7       	brne	.-4      	; 0x6aaa <UART_VidTerminalPrintChar+0xf0>
    6aae:	9c 83       	std	Y+4, r25	; 0x04
    6ab0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6ab2:	8d 81       	ldd	r24, Y+5	; 0x05
    6ab4:	9e 81       	ldd	r25, Y+6	; 0x06
    6ab6:	01 97       	sbiw	r24, 0x01	; 1
    6ab8:	9e 83       	std	Y+6, r25	; 0x06
    6aba:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6abc:	8d 81       	ldd	r24, Y+5	; 0x05
    6abe:	9e 81       	ldd	r25, Y+6	; 0x06
    6ac0:	00 97       	sbiw	r24, 0x00	; 0
    6ac2:	69 f7       	brne	.-38     	; 0x6a9e <UART_VidTerminalPrintChar+0xe4>
    6ac4:	14 c0       	rjmp	.+40     	; 0x6aee <UART_VidTerminalPrintChar+0x134>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6ac6:	6f 81       	ldd	r22, Y+7	; 0x07
    6ac8:	78 85       	ldd	r23, Y+8	; 0x08
    6aca:	89 85       	ldd	r24, Y+9	; 0x09
    6acc:	9a 85       	ldd	r25, Y+10	; 0x0a
    6ace:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6ad2:	dc 01       	movw	r26, r24
    6ad4:	cb 01       	movw	r24, r22
    6ad6:	9e 83       	std	Y+6, r25	; 0x06
    6ad8:	8d 83       	std	Y+5, r24	; 0x05
    6ada:	8d 81       	ldd	r24, Y+5	; 0x05
    6adc:	9e 81       	ldd	r25, Y+6	; 0x06
    6ade:	9a 83       	std	Y+2, r25	; 0x02
    6ae0:	89 83       	std	Y+1, r24	; 0x01
    6ae2:	89 81       	ldd	r24, Y+1	; 0x01
    6ae4:	9a 81       	ldd	r25, Y+2	; 0x02
    6ae6:	01 97       	sbiw	r24, 0x01	; 1
    6ae8:	f1 f7       	brne	.-4      	; 0x6ae6 <UART_VidTerminalPrintChar+0x12c>
    6aea:	9a 83       	std	Y+2, r25	; 0x02
    6aec:	89 83       	std	Y+1, r24	; 0x01
	}
	_delay_ms(10);	//Delay for reading stability
}
    6aee:	2f 96       	adiw	r28, 0x0f	; 15
    6af0:	0f b6       	in	r0, 0x3f	; 63
    6af2:	f8 94       	cli
    6af4:	de bf       	out	0x3e, r29	; 62
    6af6:	0f be       	out	0x3f, r0	; 63
    6af8:	cd bf       	out	0x3d, r28	; 61
    6afa:	cf 91       	pop	r28
    6afc:	df 91       	pop	r29
    6afe:	08 95       	ret

00006b00 <UART_VoidSendNumber>:

void UART_VoidSendNumber(s32 Copy_s32Number)
{
    6b00:	0f 93       	push	r16
    6b02:	1f 93       	push	r17
    6b04:	df 93       	push	r29
    6b06:	cf 93       	push	r28
    6b08:	cd b7       	in	r28, 0x3d	; 61
    6b0a:	de b7       	in	r29, 0x3e	; 62
    6b0c:	60 97       	sbiw	r28, 0x10	; 16
    6b0e:	0f b6       	in	r0, 0x3f	; 63
    6b10:	f8 94       	cli
    6b12:	de bf       	out	0x3e, r29	; 62
    6b14:	0f be       	out	0x3f, r0	; 63
    6b16:	cd bf       	out	0x3d, r28	; 61
    6b18:	6d 87       	std	Y+13, r22	; 0x0d
    6b1a:	7e 87       	std	Y+14, r23	; 0x0e
    6b1c:	8f 87       	std	Y+15, r24	; 0x0f
    6b1e:	98 8b       	std	Y+16, r25	; 0x10
	   u8 Local_u8Array[11]; // Increased array size to accommodate negative sign
	    s8 Local_counter = 0;
    6b20:	19 82       	std	Y+1, r1	; 0x01

	    if (Copy_s32Number < 0)
    6b22:	8d 85       	ldd	r24, Y+13	; 0x0d
    6b24:	9e 85       	ldd	r25, Y+14	; 0x0e
    6b26:	af 85       	ldd	r26, Y+15	; 0x0f
    6b28:	b8 89       	ldd	r27, Y+16	; 0x10
    6b2a:	bb 23       	and	r27, r27
    6b2c:	9c f4       	brge	.+38     	; 0x6b54 <UART_VoidSendNumber+0x54>
	    {
	    	UART_VidTransmitData('-'); // Display negative sign
    6b2e:	8d e2       	ldi	r24, 0x2D	; 45
    6b30:	0e 94 e5 33 	call	0x67ca	; 0x67ca <UART_VidTransmitData>
	    	Copy_s32Number = -Copy_s32Number; // Convert negative number to positive for processing
    6b34:	8d 85       	ldd	r24, Y+13	; 0x0d
    6b36:	9e 85       	ldd	r25, Y+14	; 0x0e
    6b38:	af 85       	ldd	r26, Y+15	; 0x0f
    6b3a:	b8 89       	ldd	r27, Y+16	; 0x10
    6b3c:	b0 95       	com	r27
    6b3e:	a0 95       	com	r26
    6b40:	90 95       	com	r25
    6b42:	81 95       	neg	r24
    6b44:	9f 4f       	sbci	r25, 0xFF	; 255
    6b46:	af 4f       	sbci	r26, 0xFF	; 255
    6b48:	bf 4f       	sbci	r27, 0xFF	; 255
    6b4a:	8d 87       	std	Y+13, r24	; 0x0d
    6b4c:	9e 87       	std	Y+14, r25	; 0x0e
    6b4e:	af 87       	std	Y+15, r26	; 0x0f
    6b50:	b8 8b       	std	Y+16, r27	; 0x10
    6b52:	3c c0       	rjmp	.+120    	; 0x6bcc <UART_VoidSendNumber+0xcc>
	    }
	    else if (Copy_s32Number == 0)
    6b54:	8d 85       	ldd	r24, Y+13	; 0x0d
    6b56:	9e 85       	ldd	r25, Y+14	; 0x0e
    6b58:	af 85       	ldd	r26, Y+15	; 0x0f
    6b5a:	b8 89       	ldd	r27, Y+16	; 0x10
    6b5c:	00 97       	sbiw	r24, 0x00	; 0
    6b5e:	a1 05       	cpc	r26, r1
    6b60:	b1 05       	cpc	r27, r1
    6b62:	a1 f5       	brne	.+104    	; 0x6bcc <UART_VoidSendNumber+0xcc>
	    {
	    	UART_VidTransmitData('0');
    6b64:	80 e3       	ldi	r24, 0x30	; 48
    6b66:	0e 94 e5 33 	call	0x67ca	; 0x67ca <UART_VidTransmitData>
    6b6a:	30 c0       	rjmp	.+96     	; 0x6bcc <UART_VoidSendNumber+0xcc>
	    }

	    while (Copy_s32Number > 0)
	    {
	        Local_u8Array[Local_counter++] = (Copy_s32Number % 10) + 48;
    6b6c:	89 81       	ldd	r24, Y+1	; 0x01
    6b6e:	08 2f       	mov	r16, r24
    6b70:	11 27       	eor	r17, r17
    6b72:	07 fd       	sbrc	r16, 7
    6b74:	10 95       	com	r17
    6b76:	8d 85       	ldd	r24, Y+13	; 0x0d
    6b78:	9e 85       	ldd	r25, Y+14	; 0x0e
    6b7a:	af 85       	ldd	r26, Y+15	; 0x0f
    6b7c:	b8 89       	ldd	r27, Y+16	; 0x10
    6b7e:	2a e0       	ldi	r18, 0x0A	; 10
    6b80:	30 e0       	ldi	r19, 0x00	; 0
    6b82:	40 e0       	ldi	r20, 0x00	; 0
    6b84:	50 e0       	ldi	r21, 0x00	; 0
    6b86:	bc 01       	movw	r22, r24
    6b88:	cd 01       	movw	r24, r26
    6b8a:	0e 94 13 3d 	call	0x7a26	; 0x7a26 <__divmodsi4>
    6b8e:	dc 01       	movw	r26, r24
    6b90:	cb 01       	movw	r24, r22
    6b92:	28 2f       	mov	r18, r24
    6b94:	20 5d       	subi	r18, 0xD0	; 208
    6b96:	ce 01       	movw	r24, r28
    6b98:	02 96       	adiw	r24, 0x02	; 2
    6b9a:	fc 01       	movw	r30, r24
    6b9c:	e0 0f       	add	r30, r16
    6b9e:	f1 1f       	adc	r31, r17
    6ba0:	20 83       	st	Z, r18
    6ba2:	89 81       	ldd	r24, Y+1	; 0x01
    6ba4:	8f 5f       	subi	r24, 0xFF	; 255
    6ba6:	89 83       	std	Y+1, r24	; 0x01
	        Copy_s32Number /= 10;
    6ba8:	8d 85       	ldd	r24, Y+13	; 0x0d
    6baa:	9e 85       	ldd	r25, Y+14	; 0x0e
    6bac:	af 85       	ldd	r26, Y+15	; 0x0f
    6bae:	b8 89       	ldd	r27, Y+16	; 0x10
    6bb0:	2a e0       	ldi	r18, 0x0A	; 10
    6bb2:	30 e0       	ldi	r19, 0x00	; 0
    6bb4:	40 e0       	ldi	r20, 0x00	; 0
    6bb6:	50 e0       	ldi	r21, 0x00	; 0
    6bb8:	bc 01       	movw	r22, r24
    6bba:	cd 01       	movw	r24, r26
    6bbc:	0e 94 13 3d 	call	0x7a26	; 0x7a26 <__divmodsi4>
    6bc0:	da 01       	movw	r26, r20
    6bc2:	c9 01       	movw	r24, r18
    6bc4:	8d 87       	std	Y+13, r24	; 0x0d
    6bc6:	9e 87       	std	Y+14, r25	; 0x0e
    6bc8:	af 87       	std	Y+15, r26	; 0x0f
    6bca:	b8 8b       	std	Y+16, r27	; 0x10
	    else if (Copy_s32Number == 0)
	    {
	    	UART_VidTransmitData('0');
	    }

	    while (Copy_s32Number > 0)
    6bcc:	8d 85       	ldd	r24, Y+13	; 0x0d
    6bce:	9e 85       	ldd	r25, Y+14	; 0x0e
    6bd0:	af 85       	ldd	r26, Y+15	; 0x0f
    6bd2:	b8 89       	ldd	r27, Y+16	; 0x10
    6bd4:	18 16       	cp	r1, r24
    6bd6:	19 06       	cpc	r1, r25
    6bd8:	1a 06       	cpc	r1, r26
    6bda:	1b 06       	cpc	r1, r27
    6bdc:	3c f2       	brlt	.-114    	; 0x6b6c <UART_VoidSendNumber+0x6c>
	    {
	        Local_u8Array[Local_counter++] = (Copy_s32Number % 10) + 48;
	        Copy_s32Number /= 10;
	    }

	    Local_counter--;
    6bde:	89 81       	ldd	r24, Y+1	; 0x01
    6be0:	81 50       	subi	r24, 0x01	; 1
    6be2:	89 83       	std	Y+1, r24	; 0x01
    6be4:	10 c0       	rjmp	.+32     	; 0x6c06 <UART_VoidSendNumber+0x106>

	    // Loop for sending the reverse of the array
	    while (Local_counter >= 0)
	    {
	    	UART_VidTransmitData(Local_u8Array[Local_counter]);
    6be6:	89 81       	ldd	r24, Y+1	; 0x01
    6be8:	28 2f       	mov	r18, r24
    6bea:	33 27       	eor	r19, r19
    6bec:	27 fd       	sbrc	r18, 7
    6bee:	30 95       	com	r19
    6bf0:	ce 01       	movw	r24, r28
    6bf2:	02 96       	adiw	r24, 0x02	; 2
    6bf4:	fc 01       	movw	r30, r24
    6bf6:	e2 0f       	add	r30, r18
    6bf8:	f3 1f       	adc	r31, r19
    6bfa:	80 81       	ld	r24, Z
    6bfc:	0e 94 e5 33 	call	0x67ca	; 0x67ca <UART_VidTransmitData>
	        Local_counter--;
    6c00:	89 81       	ldd	r24, Y+1	; 0x01
    6c02:	81 50       	subi	r24, 0x01	; 1
    6c04:	89 83       	std	Y+1, r24	; 0x01
	    }

	    Local_counter--;

	    // Loop for sending the reverse of the array
	    while (Local_counter >= 0)
    6c06:	89 81       	ldd	r24, Y+1	; 0x01
    6c08:	88 23       	and	r24, r24
    6c0a:	6c f7       	brge	.-38     	; 0x6be6 <UART_VoidSendNumber+0xe6>
	    {
	    	UART_VidTransmitData(Local_u8Array[Local_counter]);
	        Local_counter--;
	    }
}
    6c0c:	60 96       	adiw	r28, 0x10	; 16
    6c0e:	0f b6       	in	r0, 0x3f	; 63
    6c10:	f8 94       	cli
    6c12:	de bf       	out	0x3e, r29	; 62
    6c14:	0f be       	out	0x3f, r0	; 63
    6c16:	cd bf       	out	0x3d, r28	; 61
    6c18:	cf 91       	pop	r28
    6c1a:	df 91       	pop	r29
    6c1c:	1f 91       	pop	r17
    6c1e:	0f 91       	pop	r16
    6c20:	08 95       	ret

00006c22 <main>:
#include "stepper_motor.h"
#include "USART_Interface.h"
#include "Smart_Home_Config.h"

int main()
{
    6c22:	df 93       	push	r29
    6c24:	cf 93       	push	r28
    6c26:	00 d0       	rcall	.+0      	; 0x6c28 <main+0x6>
    6c28:	0f 92       	push	r0
    6c2a:	cd b7       	in	r28, 0x3d	; 61
    6c2c:	de b7       	in	r29, 0x3e	; 62

	u8 Local_u8Data;
	s16 returned_num = 0;
    6c2e:	1a 82       	std	Y+2, r1	; 0x02
    6c30:	19 82       	std	Y+1, r1	; 0x01
	LCD_VoidLCDInit();
    6c32:	0e 94 a8 12 	call	0x2550	; 0x2550 <LCD_VoidLCDInit>
	DIO_U8SetPinDirection(DIO_PORTD, DIO_PIN6, DIO_PIN_OUT);
    6c36:	83 e0       	ldi	r24, 0x03	; 3
    6c38:	66 e0       	ldi	r22, 0x06	; 6
    6c3a:	41 e0       	ldi	r20, 0x01	; 1
    6c3c:	0e 94 75 07 	call	0xeea	; 0xeea <DIO_U8SetPinDirection>
	DIO_U8SetPinDirection(DIO_PORTD, DIO_PIN7, DIO_PIN_OUT);
    6c40:	83 e0       	ldi	r24, 0x03	; 3
    6c42:	67 e0       	ldi	r22, 0x07	; 7
    6c44:	41 e0       	ldi	r20, 0x01	; 1
    6c46:	0e 94 75 07 	call	0xeea	; 0xeea <DIO_U8SetPinDirection>
	DIO_U8SetPortDirection(DIO_PORTC, 0xFF);
    6c4a:	82 e0       	ldi	r24, 0x02	; 2
    6c4c:	6f ef       	ldi	r22, 0xFF	; 255
    6c4e:	0e 94 d0 0a 	call	0x15a0	; 0x15a0 <DIO_U8SetPortDirection>
	DIO_U8SetPortDirection(DIO_PORTA, 0xFF);
    6c52:	80 e0       	ldi	r24, 0x00	; 0
    6c54:	6f ef       	ldi	r22, 0xFF	; 255
    6c56:	0e 94 d0 0a 	call	0x15a0	; 0x15a0 <DIO_U8SetPortDirection>
	LCD_VoidGoToRowCol(0, 0);
    6c5a:	80 e0       	ldi	r24, 0x00	; 0
    6c5c:	60 e0       	ldi	r22, 0x00	; 0
    6c5e:	0e 94 4c 17 	call	0x2e98	; 0x2e98 <LCD_VoidGoToRowCol>
	LCD_u8WriteString("Welcome Slave");
    6c62:	87 e8       	ldi	r24, 0x87	; 135
    6c64:	91 e0       	ldi	r25, 0x01	; 1
    6c66:	0e 94 04 18 	call	0x3008	; 0x3008 <LCD_u8WriteString>
	SevSeg_VidInit();
    6c6a:	0e 94 c3 2f 	call	0x5f86	; 0x5f86 <SevSeg_VidInit>
	UART_VidInit();
    6c6e:	0e 94 c8 33 	call	0x6790	; 0x6790 <UART_VidInit>
	HSTEP_VidInit();
    6c72:	0e 94 f6 36 	call	0x6dec	; 0x6dec <HSTEP_VidInit>
	I2C_VidSlaveInit(5);
    6c76:	85 e0       	ldi	r24, 0x05	; 5
    6c78:	0e 94 cb 0c 	call	0x1996	; 0x1996 <I2C_VidSlaveInit>

	while(1)
	{
		Local_u8Data = I2C_VidSlaveRecieveData();
    6c7c:	0e 94 99 0d 	call	0x1b32	; 0x1b32 <I2C_VidSlaveRecieveData>
    6c80:	8b 83       	std	Y+3, r24	; 0x03
		if(Local_u8Data=='2')
    6c82:	8b 81       	ldd	r24, Y+3	; 0x03
    6c84:	82 33       	cpi	r24, 0x32	; 50
    6c86:	c9 f4       	brne	.+50     	; 0x6cba <main+0x98>
    6c88:	14 c0       	rjmp	.+40     	; 0x6cb2 <main+0x90>
		{
			while(Local_u8Data == '2')
			{
				LCD_VoidSendCommand(1);
    6c8a:	81 e0       	ldi	r24, 0x01	; 1
    6c8c:	0e 94 4d 0f 	call	0x1e9a	; 0x1e9a <LCD_VoidSendCommand>
				LCD_u8WriteString("DC is on CW");
    6c90:	85 e9       	ldi	r24, 0x95	; 149
    6c92:	91 e0       	ldi	r25, 0x01	; 1
    6c94:	0e 94 04 18 	call	0x3008	; 0x3008 <LCD_u8WriteString>
				DIO_U8SetPinValue(DIO_PORTD, DIO_PIN6, DIO_LOW);
    6c98:	83 e0       	ldi	r24, 0x03	; 3
    6c9a:	66 e0       	ldi	r22, 0x06	; 6
    6c9c:	40 e0       	ldi	r20, 0x00	; 0
    6c9e:	0e 94 8e 08 	call	0x111c	; 0x111c <DIO_U8SetPinValue>
				DIO_U8SetPinValue(DIO_PORTD, DIO_PIN7, DIO_HIGH);
    6ca2:	83 e0       	ldi	r24, 0x03	; 3
    6ca4:	67 e0       	ldi	r22, 0x07	; 7
    6ca6:	41 e0       	ldi	r20, 0x01	; 1
    6ca8:	0e 94 8e 08 	call	0x111c	; 0x111c <DIO_U8SetPinValue>
				Local_u8Data = I2C_VidSlaveRecieveData();
    6cac:	0e 94 99 0d 	call	0x1b32	; 0x1b32 <I2C_VidSlaveRecieveData>
    6cb0:	8b 83       	std	Y+3, r24	; 0x03
	while(1)
	{
		Local_u8Data = I2C_VidSlaveRecieveData();
		if(Local_u8Data=='2')
		{
			while(Local_u8Data == '2')
    6cb2:	8b 81       	ldd	r24, Y+3	; 0x03
    6cb4:	82 33       	cpi	r24, 0x32	; 50
    6cb6:	49 f3       	breq	.-46     	; 0x6c8a <main+0x68>
    6cb8:	e1 cf       	rjmp	.-62     	; 0x6c7c <main+0x5a>
				DIO_U8SetPinValue(DIO_PORTD, DIO_PIN6, DIO_LOW);
				DIO_U8SetPinValue(DIO_PORTD, DIO_PIN7, DIO_HIGH);
				Local_u8Data = I2C_VidSlaveRecieveData();
			}
		}
		else if(Local_u8Data == '1')
    6cba:	8b 81       	ldd	r24, Y+3	; 0x03
    6cbc:	81 33       	cpi	r24, 0x31	; 49
    6cbe:	c9 f4       	brne	.+50     	; 0x6cf2 <main+0xd0>
    6cc0:	14 c0       	rjmp	.+40     	; 0x6cea <main+0xc8>
		{
			while(Local_u8Data == '1')
			{
				LCD_VoidSendCommand(1);
    6cc2:	81 e0       	ldi	r24, 0x01	; 1
    6cc4:	0e 94 4d 0f 	call	0x1e9a	; 0x1e9a <LCD_VoidSendCommand>
				LCD_u8WriteString("DC is on ACW");
    6cc8:	81 ea       	ldi	r24, 0xA1	; 161
    6cca:	91 e0       	ldi	r25, 0x01	; 1
    6ccc:	0e 94 04 18 	call	0x3008	; 0x3008 <LCD_u8WriteString>
				DIO_U8SetPinValue(DIO_PORTD, DIO_PIN6, DIO_HIGH);
    6cd0:	83 e0       	ldi	r24, 0x03	; 3
    6cd2:	66 e0       	ldi	r22, 0x06	; 6
    6cd4:	41 e0       	ldi	r20, 0x01	; 1
    6cd6:	0e 94 8e 08 	call	0x111c	; 0x111c <DIO_U8SetPinValue>
				DIO_U8SetPinValue(DIO_PORTD, DIO_PIN7, DIO_LOW);
    6cda:	83 e0       	ldi	r24, 0x03	; 3
    6cdc:	67 e0       	ldi	r22, 0x07	; 7
    6cde:	40 e0       	ldi	r20, 0x00	; 0
    6ce0:	0e 94 8e 08 	call	0x111c	; 0x111c <DIO_U8SetPinValue>
				Local_u8Data = I2C_VidSlaveRecieveData();
    6ce4:	0e 94 99 0d 	call	0x1b32	; 0x1b32 <I2C_VidSlaveRecieveData>
    6ce8:	8b 83       	std	Y+3, r24	; 0x03
				Local_u8Data = I2C_VidSlaveRecieveData();
			}
		}
		else if(Local_u8Data == '1')
		{
			while(Local_u8Data == '1')
    6cea:	8b 81       	ldd	r24, Y+3	; 0x03
    6cec:	81 33       	cpi	r24, 0x31	; 49
    6cee:	49 f3       	breq	.-46     	; 0x6cc2 <main+0xa0>
    6cf0:	c5 cf       	rjmp	.-118    	; 0x6c7c <main+0x5a>
				DIO_U8SetPinValue(DIO_PORTD, DIO_PIN6, DIO_HIGH);
				DIO_U8SetPinValue(DIO_PORTD, DIO_PIN7, DIO_LOW);
				Local_u8Data = I2C_VidSlaveRecieveData();
			}
		}
		else if(Local_u8Data == '3')
    6cf2:	8b 81       	ldd	r24, Y+3	; 0x03
    6cf4:	83 33       	cpi	r24, 0x33	; 51
    6cf6:	c9 f4       	brne	.+50     	; 0x6d2a <main+0x108>
    6cf8:	14 c0       	rjmp	.+40     	; 0x6d22 <main+0x100>
		{
			while(Local_u8Data == '3')
			{
				LCD_VoidSendCommand(1);
    6cfa:	81 e0       	ldi	r24, 0x01	; 1
    6cfc:	0e 94 4d 0f 	call	0x1e9a	; 0x1e9a <LCD_VoidSendCommand>
				LCD_u8WriteString("DC is Off");
    6d00:	8e ea       	ldi	r24, 0xAE	; 174
    6d02:	91 e0       	ldi	r25, 0x01	; 1
    6d04:	0e 94 04 18 	call	0x3008	; 0x3008 <LCD_u8WriteString>
				DIO_U8SetPinValue(DIO_PORTD, DIO_PIN6, DIO_LOW);
    6d08:	83 e0       	ldi	r24, 0x03	; 3
    6d0a:	66 e0       	ldi	r22, 0x06	; 6
    6d0c:	40 e0       	ldi	r20, 0x00	; 0
    6d0e:	0e 94 8e 08 	call	0x111c	; 0x111c <DIO_U8SetPinValue>
				DIO_U8SetPinValue(DIO_PORTD, DIO_PIN7, DIO_LOW);
    6d12:	83 e0       	ldi	r24, 0x03	; 3
    6d14:	67 e0       	ldi	r22, 0x07	; 7
    6d16:	40 e0       	ldi	r20, 0x00	; 0
    6d18:	0e 94 8e 08 	call	0x111c	; 0x111c <DIO_U8SetPinValue>
				Local_u8Data = I2C_VidSlaveRecieveData();
    6d1c:	0e 94 99 0d 	call	0x1b32	; 0x1b32 <I2C_VidSlaveRecieveData>
    6d20:	8b 83       	std	Y+3, r24	; 0x03
				Local_u8Data = I2C_VidSlaveRecieveData();
			}
		}
		else if(Local_u8Data == '3')
		{
			while(Local_u8Data == '3')
    6d22:	8b 81       	ldd	r24, Y+3	; 0x03
    6d24:	83 33       	cpi	r24, 0x33	; 51
    6d26:	49 f3       	breq	.-46     	; 0x6cfa <main+0xd8>
    6d28:	a9 cf       	rjmp	.-174    	; 0x6c7c <main+0x5a>
				DIO_U8SetPinValue(DIO_PORTD, DIO_PIN6, DIO_LOW);
				DIO_U8SetPinValue(DIO_PORTD, DIO_PIN7, DIO_LOW);
				Local_u8Data = I2C_VidSlaveRecieveData();
			}
		}
		else if(Local_u8Data == '0')
    6d2a:	8b 81       	ldd	r24, Y+3	; 0x03
    6d2c:	80 33       	cpi	r24, 0x30	; 48
    6d2e:	99 f4       	brne	.+38     	; 0x6d56 <main+0x134>
    6d30:	0e c0       	rjmp	.+28     	; 0x6d4e <main+0x12c>
		{
			while(Local_u8Data == '0')
			{
				LCD_VoidSendCommand(1);
    6d32:	81 e0       	ldi	r24, 0x01	; 1
    6d34:	0e 94 4d 0f 	call	0x1e9a	; 0x1e9a <LCD_VoidSendCommand>
				LCD_u8WriteString("Seven Seg is On");
    6d38:	88 eb       	ldi	r24, 0xB8	; 184
    6d3a:	91 e0       	ldi	r25, 0x01	; 1
    6d3c:	0e 94 04 18 	call	0x3008	; 0x3008 <LCD_u8WriteString>
				SevSeg_VidDispTrafficLights(DISPLAY_SEGMENT_PORT, 99);
    6d40:	81 e0       	ldi	r24, 0x01	; 1
    6d42:	63 e6       	ldi	r22, 0x63	; 99
    6d44:	0e 94 ab 31 	call	0x6356	; 0x6356 <SevSeg_VidDispTrafficLights>
				Local_u8Data = I2C_VidSlaveRecieveData();
    6d48:	0e 94 99 0d 	call	0x1b32	; 0x1b32 <I2C_VidSlaveRecieveData>
    6d4c:	8b 83       	std	Y+3, r24	; 0x03
				Local_u8Data = I2C_VidSlaveRecieveData();
			}
		}
		else if(Local_u8Data == '0')
		{
			while(Local_u8Data == '0')
    6d4e:	8b 81       	ldd	r24, Y+3	; 0x03
    6d50:	80 33       	cpi	r24, 0x30	; 48
    6d52:	79 f3       	breq	.-34     	; 0x6d32 <main+0x110>
    6d54:	93 cf       	rjmp	.-218    	; 0x6c7c <main+0x5a>
				LCD_u8WriteString("Seven Seg is On");
				SevSeg_VidDispTrafficLights(DISPLAY_SEGMENT_PORT, 99);
				Local_u8Data = I2C_VidSlaveRecieveData();
			}
		}
		else if(Local_u8Data == '4')
    6d56:	8b 81       	ldd	r24, Y+3	; 0x03
    6d58:	84 33       	cpi	r24, 0x34	; 52
    6d5a:	11 f5       	brne	.+68     	; 0x6da0 <main+0x17e>
		{
			returned_num = UART_VidReceiveData();
    6d5c:	0e 94 10 34 	call	0x6820	; 0x6820 <UART_VidReceiveData>
    6d60:	88 2f       	mov	r24, r24
    6d62:	90 e0       	ldi	r25, 0x00	; 0
    6d64:	9a 83       	std	Y+2, r25	; 0x02
    6d66:	89 83       	std	Y+1, r24	; 0x01
    6d68:	17 c0       	rjmp	.+46     	; 0x6d98 <main+0x176>
			while(Local_u8Data == '4')
			{
				LCD_VoidSendCommand(1);
    6d6a:	81 e0       	ldi	r24, 0x01	; 1
    6d6c:	0e 94 4d 0f 	call	0x1e9a	; 0x1e9a <LCD_VoidSendCommand>
				LCD_VoidGoToRowCol(0, 0);
    6d70:	80 e0       	ldi	r24, 0x00	; 0
    6d72:	60 e0       	ldi	r22, 0x00	; 0
    6d74:	0e 94 4c 17 	call	0x2e98	; 0x2e98 <LCD_VoidGoToRowCol>
				LCD_u8WriteString("Stepper is On CW:");
    6d78:	88 ec       	ldi	r24, 0xC8	; 200
    6d7a:	91 e0       	ldi	r25, 0x01	; 1
    6d7c:	0e 94 04 18 	call	0x3008	; 0x3008 <LCD_u8WriteString>
				LCD_VoidGoToRowCol(1, 0);
    6d80:	81 e0       	ldi	r24, 0x01	; 1
    6d82:	60 e0       	ldi	r22, 0x00	; 0
    6d84:	0e 94 4c 17 	call	0x2e98	; 0x2e98 <LCD_VoidGoToRowCol>
		        HSTEP_U8SetAngDir(returned_num, 0);
    6d88:	89 81       	ldd	r24, Y+1	; 0x01
    6d8a:	9a 81       	ldd	r25, Y+2	; 0x02
    6d8c:	60 e0       	ldi	r22, 0x00	; 0
    6d8e:	0e 94 11 37 	call	0x6e22	; 0x6e22 <HSTEP_U8SetAngDir>
		        Local_u8Data = I2C_VidSlaveRecieveData();
    6d92:	0e 94 99 0d 	call	0x1b32	; 0x1b32 <I2C_VidSlaveRecieveData>
    6d96:	8b 83       	std	Y+3, r24	; 0x03
			}
		}
		else if(Local_u8Data == '4')
		{
			returned_num = UART_VidReceiveData();
			while(Local_u8Data == '4')
    6d98:	8b 81       	ldd	r24, Y+3	; 0x03
    6d9a:	84 33       	cpi	r24, 0x34	; 52
    6d9c:	31 f3       	breq	.-52     	; 0x6d6a <main+0x148>
    6d9e:	6e cf       	rjmp	.-292    	; 0x6c7c <main+0x5a>
				LCD_VoidGoToRowCol(1, 0);
		        HSTEP_U8SetAngDir(returned_num, 0);
		        Local_u8Data = I2C_VidSlaveRecieveData();
			}
		}
		else if(Local_u8Data == '5')
    6da0:	8b 81       	ldd	r24, Y+3	; 0x03
    6da2:	85 33       	cpi	r24, 0x35	; 53
    6da4:	09 f0       	breq	.+2      	; 0x6da8 <main+0x186>
    6da6:	6a cf       	rjmp	.-300    	; 0x6c7c <main+0x5a>
		{
			returned_num = UART_VidReceiveData();
    6da8:	0e 94 10 34 	call	0x6820	; 0x6820 <UART_VidReceiveData>
    6dac:	88 2f       	mov	r24, r24
    6dae:	90 e0       	ldi	r25, 0x00	; 0
    6db0:	9a 83       	std	Y+2, r25	; 0x02
    6db2:	89 83       	std	Y+1, r24	; 0x01
    6db4:	17 c0       	rjmp	.+46     	; 0x6de4 <main+0x1c2>
			while(Local_u8Data == '5')
			{
				LCD_VoidSendCommand(1);
    6db6:	81 e0       	ldi	r24, 0x01	; 1
    6db8:	0e 94 4d 0f 	call	0x1e9a	; 0x1e9a <LCD_VoidSendCommand>
				LCD_VoidGoToRowCol(0, 0);
    6dbc:	80 e0       	ldi	r24, 0x00	; 0
    6dbe:	60 e0       	ldi	r22, 0x00	; 0
    6dc0:	0e 94 4c 17 	call	0x2e98	; 0x2e98 <LCD_VoidGoToRowCol>
				LCD_u8WriteString("Stepper is On ACW:");
    6dc4:	8a ed       	ldi	r24, 0xDA	; 218
    6dc6:	91 e0       	ldi	r25, 0x01	; 1
    6dc8:	0e 94 04 18 	call	0x3008	; 0x3008 <LCD_u8WriteString>
				LCD_VoidGoToRowCol(1, 0);
    6dcc:	81 e0       	ldi	r24, 0x01	; 1
    6dce:	60 e0       	ldi	r22, 0x00	; 0
    6dd0:	0e 94 4c 17 	call	0x2e98	; 0x2e98 <LCD_VoidGoToRowCol>
		        HSTEP_U8SetAngDir(returned_num, 0);
    6dd4:	89 81       	ldd	r24, Y+1	; 0x01
    6dd6:	9a 81       	ldd	r25, Y+2	; 0x02
    6dd8:	60 e0       	ldi	r22, 0x00	; 0
    6dda:	0e 94 11 37 	call	0x6e22	; 0x6e22 <HSTEP_U8SetAngDir>
		        Local_u8Data = I2C_VidSlaveRecieveData();
    6dde:	0e 94 99 0d 	call	0x1b32	; 0x1b32 <I2C_VidSlaveRecieveData>
    6de2:	8b 83       	std	Y+3, r24	; 0x03
			}
		}
		else if(Local_u8Data == '5')
		{
			returned_num = UART_VidReceiveData();
			while(Local_u8Data == '5')
    6de4:	8b 81       	ldd	r24, Y+3	; 0x03
    6de6:	85 33       	cpi	r24, 0x35	; 53
    6de8:	31 f3       	breq	.-52     	; 0x6db6 <main+0x194>
    6dea:	48 cf       	rjmp	.-368    	; 0x6c7c <main+0x5a>

00006dec <HSTEP_VidInit>:
#include "DIO_interface.h"
#include "stepper_motor.h"
#include <util/delay.h>

void HSTEP_VidInit(void)
{
    6dec:	df 93       	push	r29
    6dee:	cf 93       	push	r28
    6df0:	cd b7       	in	r28, 0x3d	; 61
    6df2:	de b7       	in	r29, 0x3e	; 62
	DIO_U8SetPinDirection(STEP_PORT, STEP_PIN0, DIO_PIN_OUT);
    6df4:	80 e0       	ldi	r24, 0x00	; 0
    6df6:	60 e0       	ldi	r22, 0x00	; 0
    6df8:	41 e0       	ldi	r20, 0x01	; 1
    6dfa:	0e 94 75 07 	call	0xeea	; 0xeea <DIO_U8SetPinDirection>
	DIO_U8SetPinDirection(STEP_PORT, STEP_PIN1, DIO_PIN_OUT);
    6dfe:	80 e0       	ldi	r24, 0x00	; 0
    6e00:	61 e0       	ldi	r22, 0x01	; 1
    6e02:	41 e0       	ldi	r20, 0x01	; 1
    6e04:	0e 94 75 07 	call	0xeea	; 0xeea <DIO_U8SetPinDirection>
	DIO_U8SetPinDirection(STEP_PORT, STEP_PIN2, DIO_PIN_OUT);
    6e08:	80 e0       	ldi	r24, 0x00	; 0
    6e0a:	62 e0       	ldi	r22, 0x02	; 2
    6e0c:	41 e0       	ldi	r20, 0x01	; 1
    6e0e:	0e 94 75 07 	call	0xeea	; 0xeea <DIO_U8SetPinDirection>
	DIO_U8SetPinDirection(STEP_PORT, STEP_PIN3, DIO_PIN_OUT);
    6e12:	80 e0       	ldi	r24, 0x00	; 0
    6e14:	63 e0       	ldi	r22, 0x03	; 3
    6e16:	41 e0       	ldi	r20, 0x01	; 1
    6e18:	0e 94 75 07 	call	0xeea	; 0xeea <DIO_U8SetPinDirection>
}
    6e1c:	cf 91       	pop	r28
    6e1e:	df 91       	pop	r29
    6e20:	08 95       	ret

00006e22 <HSTEP_U8SetAngDir>:

u8 HSTEP_U8SetAngDir(u16 Copy_U16Angle, u8 Copy_U8Direction)
{
    6e22:	0f 93       	push	r16
    6e24:	1f 93       	push	r17
    6e26:	df 93       	push	r29
    6e28:	cf 93       	push	r28
    6e2a:	cd b7       	in	r28, 0x3d	; 61
    6e2c:	de b7       	in	r29, 0x3e	; 62
    6e2e:	cc 57       	subi	r28, 0x7C	; 124
    6e30:	d0 40       	sbci	r29, 0x00	; 0
    6e32:	0f b6       	in	r0, 0x3f	; 63
    6e34:	f8 94       	cli
    6e36:	de bf       	out	0x3e, r29	; 62
    6e38:	0f be       	out	0x3f, r0	; 63
    6e3a:	cd bf       	out	0x3d, r28	; 61
    6e3c:	fe 01       	movw	r30, r28
    6e3e:	e8 58       	subi	r30, 0x88	; 136
    6e40:	ff 4f       	sbci	r31, 0xFF	; 255
    6e42:	91 83       	std	Z+1, r25	; 0x01
    6e44:	80 83       	st	Z, r24
    6e46:	fe 01       	movw	r30, r28
    6e48:	e6 58       	subi	r30, 0x86	; 134
    6e4a:	ff 4f       	sbci	r31, 0xFF	; 255
    6e4c:	60 83       	st	Z, r22
	u8 Local_U8ErrorState =  ERROR_STATE_OK;
    6e4e:	fe 01       	movw	r30, r28
    6e50:	e9 58       	subi	r30, 0x89	; 137
    6e52:	ff 4f       	sbci	r31, 0xFF	; 255
    6e54:	81 e0       	ldi	r24, 0x01	; 1
    6e56:	80 83       	st	Z, r24
	u16 Local_U16Steps, Local_U16Iterations, Local_U16Counter;
	/* I/P Validation */
	if(Copy_U8Direction > STEP_DIR_ACW || Copy_U16Angle > 360)
    6e58:	fe 01       	movw	r30, r28
    6e5a:	e6 58       	subi	r30, 0x86	; 134
    6e5c:	ff 4f       	sbci	r31, 0xFF	; 255
    6e5e:	80 81       	ld	r24, Z
    6e60:	82 30       	cpi	r24, 0x02	; 2
    6e62:	48 f4       	brcc	.+18     	; 0x6e76 <HSTEP_U8SetAngDir+0x54>
    6e64:	fe 01       	movw	r30, r28
    6e66:	e8 58       	subi	r30, 0x88	; 136
    6e68:	ff 4f       	sbci	r31, 0xFF	; 255
    6e6a:	80 81       	ld	r24, Z
    6e6c:	91 81       	ldd	r25, Z+1	; 0x01
    6e6e:	21 e0       	ldi	r18, 0x01	; 1
    6e70:	89 36       	cpi	r24, 0x69	; 105
    6e72:	92 07       	cpc	r25, r18
    6e74:	28 f0       	brcs	.+10     	; 0x6e80 <HSTEP_U8SetAngDir+0x5e>
	{
		Local_U8ErrorState = ERROR_STATE_NOK;
    6e76:	fe 01       	movw	r30, r28
    6e78:	e9 58       	subi	r30, 0x89	; 137
    6e7a:	ff 4f       	sbci	r31, 0xFF	; 255
    6e7c:	10 82       	st	Z, r1
    6e7e:	95 c5       	rjmp	.+2858   	; 0x79aa <HSTEP_U8SetAngDir+0xb88>
	}
	else
	{
		//Calculations for Number of Loop Iterations according to the angle
		Local_U16Steps = (Copy_U16Angle * 2048UL)/360;
    6e80:	fe 01       	movw	r30, r28
    6e82:	e8 58       	subi	r30, 0x88	; 136
    6e84:	ff 4f       	sbci	r31, 0xFF	; 255
    6e86:	80 81       	ld	r24, Z
    6e88:	91 81       	ldd	r25, Z+1	; 0x01
    6e8a:	cc 01       	movw	r24, r24
    6e8c:	a0 e0       	ldi	r26, 0x00	; 0
    6e8e:	b0 e0       	ldi	r27, 0x00	; 0
    6e90:	07 2e       	mov	r0, r23
    6e92:	7b e0       	ldi	r23, 0x0B	; 11
    6e94:	88 0f       	add	r24, r24
    6e96:	99 1f       	adc	r25, r25
    6e98:	aa 1f       	adc	r26, r26
    6e9a:	bb 1f       	adc	r27, r27
    6e9c:	7a 95       	dec	r23
    6e9e:	d1 f7       	brne	.-12     	; 0x6e94 <HSTEP_U8SetAngDir+0x72>
    6ea0:	70 2d       	mov	r23, r0
    6ea2:	28 e6       	ldi	r18, 0x68	; 104
    6ea4:	31 e0       	ldi	r19, 0x01	; 1
    6ea6:	40 e0       	ldi	r20, 0x00	; 0
    6ea8:	50 e0       	ldi	r21, 0x00	; 0
    6eaa:	bc 01       	movw	r22, r24
    6eac:	cd 01       	movw	r24, r26
    6eae:	0e 94 f1 3c 	call	0x79e2	; 0x79e2 <__udivmodsi4>
    6eb2:	da 01       	movw	r26, r20
    6eb4:	c9 01       	movw	r24, r18
    6eb6:	fe 01       	movw	r30, r28
    6eb8:	eb 58       	subi	r30, 0x8B	; 139
    6eba:	ff 4f       	sbci	r31, 0xFF	; 255
    6ebc:	91 83       	std	Z+1, r25	; 0x01
    6ebe:	80 83       	st	Z, r24
		Local_U16Iterations = Local_U16Steps / 4;
    6ec0:	de 01       	movw	r26, r28
    6ec2:	ad 58       	subi	r26, 0x8D	; 141
    6ec4:	bf 4f       	sbci	r27, 0xFF	; 255
    6ec6:	fe 01       	movw	r30, r28
    6ec8:	eb 58       	subi	r30, 0x8B	; 139
    6eca:	ff 4f       	sbci	r31, 0xFF	; 255
    6ecc:	80 81       	ld	r24, Z
    6ece:	91 81       	ldd	r25, Z+1	; 0x01
    6ed0:	96 95       	lsr	r25
    6ed2:	87 95       	ror	r24
    6ed4:	96 95       	lsr	r25
    6ed6:	87 95       	ror	r24
    6ed8:	11 96       	adiw	r26, 0x01	; 1
    6eda:	9c 93       	st	X, r25
    6edc:	8e 93       	st	-X, r24
		switch(Copy_U8Direction)
    6ede:	fe 01       	movw	r30, r28
    6ee0:	e6 58       	subi	r30, 0x86	; 134
    6ee2:	ff 4f       	sbci	r31, 0xFF	; 255
    6ee4:	80 81       	ld	r24, Z
    6ee6:	e8 2f       	mov	r30, r24
    6ee8:	f0 e0       	ldi	r31, 0x00	; 0
    6eea:	ed 96       	adiw	r28, 0x3d	; 61
    6eec:	ff af       	std	Y+63, r31	; 0x3f
    6eee:	ee af       	std	Y+62, r30	; 0x3e
    6ef0:	ed 97       	sbiw	r28, 0x3d	; 61
    6ef2:	ed 96       	adiw	r28, 0x3d	; 61
    6ef4:	2e ad       	ldd	r18, Y+62	; 0x3e
    6ef6:	3f ad       	ldd	r19, Y+63	; 0x3f
    6ef8:	ed 97       	sbiw	r28, 0x3d	; 61
    6efa:	21 15       	cp	r18, r1
    6efc:	31 05       	cpc	r19, r1
    6efe:	49 f0       	breq	.+18     	; 0x6f12 <HSTEP_U8SetAngDir+0xf0>
    6f00:	ed 96       	adiw	r28, 0x3d	; 61
    6f02:	8e ad       	ldd	r24, Y+62	; 0x3e
    6f04:	9f ad       	ldd	r25, Y+63	; 0x3f
    6f06:	ed 97       	sbiw	r28, 0x3d	; 61
    6f08:	81 30       	cpi	r24, 0x01	; 1
    6f0a:	91 05       	cpc	r25, r1
    6f0c:	09 f4       	brne	.+2      	; 0x6f10 <HSTEP_U8SetAngDir+0xee>
    6f0e:	10 c3       	rjmp	.+1568   	; 0x7530 <HSTEP_U8SetAngDir+0x70e>
    6f10:	47 c5       	rjmp	.+2702   	; 0x79a0 <HSTEP_U8SetAngDir+0xb7e>
		{
			case  STEP_DIR_CW: 	//Rotate Clock Wise
								for(Local_U16Counter = 0; Local_U16Counter < Local_U16Iterations; Local_U16Counter++)
    6f12:	fe 01       	movw	r30, r28
    6f14:	ef 58       	subi	r30, 0x8F	; 143
    6f16:	ff 4f       	sbci	r31, 0xFF	; 255
    6f18:	11 82       	std	Z+1, r1	; 0x01
    6f1a:	10 82       	st	Z, r1
    6f1c:	f9 c2       	rjmp	.+1522   	; 0x7510 <HSTEP_U8SetAngDir+0x6ee>
								{
									//Full_step_1
									DIO_U8SetPinValue(STEP_PORT, STEP_PIN0, DIO_HIGH);
    6f1e:	80 e0       	ldi	r24, 0x00	; 0
    6f20:	60 e0       	ldi	r22, 0x00	; 0
    6f22:	41 e0       	ldi	r20, 0x01	; 1
    6f24:	0e 94 8e 08 	call	0x111c	; 0x111c <DIO_U8SetPinValue>
									DIO_U8SetPinValue(STEP_PORT, STEP_PIN1, DIO_HIGH);
    6f28:	80 e0       	ldi	r24, 0x00	; 0
    6f2a:	61 e0       	ldi	r22, 0x01	; 1
    6f2c:	41 e0       	ldi	r20, 0x01	; 1
    6f2e:	0e 94 8e 08 	call	0x111c	; 0x111c <DIO_U8SetPinValue>
									DIO_U8SetPinValue(STEP_PORT, STEP_PIN2, DIO_HIGH);
    6f32:	80 e0       	ldi	r24, 0x00	; 0
    6f34:	62 e0       	ldi	r22, 0x02	; 2
    6f36:	41 e0       	ldi	r20, 0x01	; 1
    6f38:	0e 94 8e 08 	call	0x111c	; 0x111c <DIO_U8SetPinValue>
									DIO_U8SetPinValue(STEP_PORT, STEP_PIN3, DIO_LOW);
    6f3c:	80 e0       	ldi	r24, 0x00	; 0
    6f3e:	63 e0       	ldi	r22, 0x03	; 3
    6f40:	40 e0       	ldi	r20, 0x00	; 0
    6f42:	0e 94 8e 08 	call	0x111c	; 0x111c <DIO_U8SetPinValue>
    6f46:	fe 01       	movw	r30, r28
    6f48:	e3 59       	subi	r30, 0x93	; 147
    6f4a:	ff 4f       	sbci	r31, 0xFF	; 255
    6f4c:	80 e0       	ldi	r24, 0x00	; 0
    6f4e:	90 e0       	ldi	r25, 0x00	; 0
    6f50:	a0 e2       	ldi	r26, 0x20	; 32
    6f52:	b1 e4       	ldi	r27, 0x41	; 65
    6f54:	80 83       	st	Z, r24
    6f56:	91 83       	std	Z+1, r25	; 0x01
    6f58:	a2 83       	std	Z+2, r26	; 0x02
    6f5a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    6f5c:	8e 01       	movw	r16, r28
    6f5e:	07 59       	subi	r16, 0x97	; 151
    6f60:	1f 4f       	sbci	r17, 0xFF	; 255
    6f62:	fe 01       	movw	r30, r28
    6f64:	e3 59       	subi	r30, 0x93	; 147
    6f66:	ff 4f       	sbci	r31, 0xFF	; 255
    6f68:	60 81       	ld	r22, Z
    6f6a:	71 81       	ldd	r23, Z+1	; 0x01
    6f6c:	82 81       	ldd	r24, Z+2	; 0x02
    6f6e:	93 81       	ldd	r25, Z+3	; 0x03
    6f70:	20 e0       	ldi	r18, 0x00	; 0
    6f72:	30 e0       	ldi	r19, 0x00	; 0
    6f74:	4a ef       	ldi	r20, 0xFA	; 250
    6f76:	54 e4       	ldi	r21, 0x44	; 68
    6f78:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6f7c:	dc 01       	movw	r26, r24
    6f7e:	cb 01       	movw	r24, r22
    6f80:	f8 01       	movw	r30, r16
    6f82:	80 83       	st	Z, r24
    6f84:	91 83       	std	Z+1, r25	; 0x01
    6f86:	a2 83       	std	Z+2, r26	; 0x02
    6f88:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    6f8a:	fe 01       	movw	r30, r28
    6f8c:	e7 59       	subi	r30, 0x97	; 151
    6f8e:	ff 4f       	sbci	r31, 0xFF	; 255
    6f90:	60 81       	ld	r22, Z
    6f92:	71 81       	ldd	r23, Z+1	; 0x01
    6f94:	82 81       	ldd	r24, Z+2	; 0x02
    6f96:	93 81       	ldd	r25, Z+3	; 0x03
    6f98:	20 e0       	ldi	r18, 0x00	; 0
    6f9a:	30 e0       	ldi	r19, 0x00	; 0
    6f9c:	40 e8       	ldi	r20, 0x80	; 128
    6f9e:	5f e3       	ldi	r21, 0x3F	; 63
    6fa0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    6fa4:	88 23       	and	r24, r24
    6fa6:	44 f4       	brge	.+16     	; 0x6fb8 <HSTEP_U8SetAngDir+0x196>
		__ticks = 1;
    6fa8:	fe 01       	movw	r30, r28
    6faa:	e9 59       	subi	r30, 0x99	; 153
    6fac:	ff 4f       	sbci	r31, 0xFF	; 255
    6fae:	81 e0       	ldi	r24, 0x01	; 1
    6fb0:	90 e0       	ldi	r25, 0x00	; 0
    6fb2:	91 83       	std	Z+1, r25	; 0x01
    6fb4:	80 83       	st	Z, r24
    6fb6:	64 c0       	rjmp	.+200    	; 0x7080 <HSTEP_U8SetAngDir+0x25e>
	else if (__tmp > 65535)
    6fb8:	fe 01       	movw	r30, r28
    6fba:	e7 59       	subi	r30, 0x97	; 151
    6fbc:	ff 4f       	sbci	r31, 0xFF	; 255
    6fbe:	60 81       	ld	r22, Z
    6fc0:	71 81       	ldd	r23, Z+1	; 0x01
    6fc2:	82 81       	ldd	r24, Z+2	; 0x02
    6fc4:	93 81       	ldd	r25, Z+3	; 0x03
    6fc6:	20 e0       	ldi	r18, 0x00	; 0
    6fc8:	3f ef       	ldi	r19, 0xFF	; 255
    6fca:	4f e7       	ldi	r20, 0x7F	; 127
    6fcc:	57 e4       	ldi	r21, 0x47	; 71
    6fce:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    6fd2:	18 16       	cp	r1, r24
    6fd4:	0c f0       	brlt	.+2      	; 0x6fd8 <HSTEP_U8SetAngDir+0x1b6>
    6fd6:	43 c0       	rjmp	.+134    	; 0x705e <HSTEP_U8SetAngDir+0x23c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6fd8:	fe 01       	movw	r30, r28
    6fda:	e3 59       	subi	r30, 0x93	; 147
    6fdc:	ff 4f       	sbci	r31, 0xFF	; 255
    6fde:	60 81       	ld	r22, Z
    6fe0:	71 81       	ldd	r23, Z+1	; 0x01
    6fe2:	82 81       	ldd	r24, Z+2	; 0x02
    6fe4:	93 81       	ldd	r25, Z+3	; 0x03
    6fe6:	20 e0       	ldi	r18, 0x00	; 0
    6fe8:	30 e0       	ldi	r19, 0x00	; 0
    6fea:	40 e2       	ldi	r20, 0x20	; 32
    6fec:	51 e4       	ldi	r21, 0x41	; 65
    6fee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6ff2:	dc 01       	movw	r26, r24
    6ff4:	cb 01       	movw	r24, r22
    6ff6:	8e 01       	movw	r16, r28
    6ff8:	09 59       	subi	r16, 0x99	; 153
    6ffa:	1f 4f       	sbci	r17, 0xFF	; 255
    6ffc:	bc 01       	movw	r22, r24
    6ffe:	cd 01       	movw	r24, r26
    7000:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    7004:	dc 01       	movw	r26, r24
    7006:	cb 01       	movw	r24, r22
    7008:	f8 01       	movw	r30, r16
    700a:	91 83       	std	Z+1, r25	; 0x01
    700c:	80 83       	st	Z, r24
    700e:	1f c0       	rjmp	.+62     	; 0x704e <HSTEP_U8SetAngDir+0x22c>
    7010:	fe 01       	movw	r30, r28
    7012:	eb 59       	subi	r30, 0x9B	; 155
    7014:	ff 4f       	sbci	r31, 0xFF	; 255
    7016:	88 ec       	ldi	r24, 0xC8	; 200
    7018:	90 e0       	ldi	r25, 0x00	; 0
    701a:	91 83       	std	Z+1, r25	; 0x01
    701c:	80 83       	st	Z, r24
    701e:	fe 01       	movw	r30, r28
    7020:	eb 59       	subi	r30, 0x9B	; 155
    7022:	ff 4f       	sbci	r31, 0xFF	; 255
    7024:	80 81       	ld	r24, Z
    7026:	91 81       	ldd	r25, Z+1	; 0x01
    7028:	01 97       	sbiw	r24, 0x01	; 1
    702a:	f1 f7       	brne	.-4      	; 0x7028 <HSTEP_U8SetAngDir+0x206>
    702c:	fe 01       	movw	r30, r28
    702e:	eb 59       	subi	r30, 0x9B	; 155
    7030:	ff 4f       	sbci	r31, 0xFF	; 255
    7032:	91 83       	std	Z+1, r25	; 0x01
    7034:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    7036:	de 01       	movw	r26, r28
    7038:	a9 59       	subi	r26, 0x99	; 153
    703a:	bf 4f       	sbci	r27, 0xFF	; 255
    703c:	fe 01       	movw	r30, r28
    703e:	e9 59       	subi	r30, 0x99	; 153
    7040:	ff 4f       	sbci	r31, 0xFF	; 255
    7042:	80 81       	ld	r24, Z
    7044:	91 81       	ldd	r25, Z+1	; 0x01
    7046:	01 97       	sbiw	r24, 0x01	; 1
    7048:	11 96       	adiw	r26, 0x01	; 1
    704a:	9c 93       	st	X, r25
    704c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    704e:	fe 01       	movw	r30, r28
    7050:	e9 59       	subi	r30, 0x99	; 153
    7052:	ff 4f       	sbci	r31, 0xFF	; 255
    7054:	80 81       	ld	r24, Z
    7056:	91 81       	ldd	r25, Z+1	; 0x01
    7058:	00 97       	sbiw	r24, 0x00	; 0
    705a:	d1 f6       	brne	.-76     	; 0x7010 <HSTEP_U8SetAngDir+0x1ee>
    705c:	27 c0       	rjmp	.+78     	; 0x70ac <HSTEP_U8SetAngDir+0x28a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    705e:	8e 01       	movw	r16, r28
    7060:	09 59       	subi	r16, 0x99	; 153
    7062:	1f 4f       	sbci	r17, 0xFF	; 255
    7064:	fe 01       	movw	r30, r28
    7066:	e7 59       	subi	r30, 0x97	; 151
    7068:	ff 4f       	sbci	r31, 0xFF	; 255
    706a:	60 81       	ld	r22, Z
    706c:	71 81       	ldd	r23, Z+1	; 0x01
    706e:	82 81       	ldd	r24, Z+2	; 0x02
    7070:	93 81       	ldd	r25, Z+3	; 0x03
    7072:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    7076:	dc 01       	movw	r26, r24
    7078:	cb 01       	movw	r24, r22
    707a:	f8 01       	movw	r30, r16
    707c:	91 83       	std	Z+1, r25	; 0x01
    707e:	80 83       	st	Z, r24
    7080:	de 01       	movw	r26, r28
    7082:	ad 59       	subi	r26, 0x9D	; 157
    7084:	bf 4f       	sbci	r27, 0xFF	; 255
    7086:	fe 01       	movw	r30, r28
    7088:	e9 59       	subi	r30, 0x99	; 153
    708a:	ff 4f       	sbci	r31, 0xFF	; 255
    708c:	80 81       	ld	r24, Z
    708e:	91 81       	ldd	r25, Z+1	; 0x01
    7090:	8d 93       	st	X+, r24
    7092:	9c 93       	st	X, r25
    7094:	fe 01       	movw	r30, r28
    7096:	ed 59       	subi	r30, 0x9D	; 157
    7098:	ff 4f       	sbci	r31, 0xFF	; 255
    709a:	80 81       	ld	r24, Z
    709c:	91 81       	ldd	r25, Z+1	; 0x01
    709e:	01 97       	sbiw	r24, 0x01	; 1
    70a0:	f1 f7       	brne	.-4      	; 0x709e <HSTEP_U8SetAngDir+0x27c>
    70a2:	fe 01       	movw	r30, r28
    70a4:	ed 59       	subi	r30, 0x9D	; 157
    70a6:	ff 4f       	sbci	r31, 0xFF	; 255
    70a8:	91 83       	std	Z+1, r25	; 0x01
    70aa:	80 83       	st	Z, r24
									_delay_ms(10);
									//Full_step_2
									DIO_U8SetPinValue(STEP_PORT, STEP_PIN0, DIO_HIGH);
    70ac:	80 e0       	ldi	r24, 0x00	; 0
    70ae:	60 e0       	ldi	r22, 0x00	; 0
    70b0:	41 e0       	ldi	r20, 0x01	; 1
    70b2:	0e 94 8e 08 	call	0x111c	; 0x111c <DIO_U8SetPinValue>
									DIO_U8SetPinValue(STEP_PORT, STEP_PIN1, DIO_HIGH);
    70b6:	80 e0       	ldi	r24, 0x00	; 0
    70b8:	61 e0       	ldi	r22, 0x01	; 1
    70ba:	41 e0       	ldi	r20, 0x01	; 1
    70bc:	0e 94 8e 08 	call	0x111c	; 0x111c <DIO_U8SetPinValue>
									DIO_U8SetPinValue(STEP_PORT, STEP_PIN2, DIO_LOW);
    70c0:	80 e0       	ldi	r24, 0x00	; 0
    70c2:	62 e0       	ldi	r22, 0x02	; 2
    70c4:	40 e0       	ldi	r20, 0x00	; 0
    70c6:	0e 94 8e 08 	call	0x111c	; 0x111c <DIO_U8SetPinValue>
									DIO_U8SetPinValue(STEP_PORT, STEP_PIN3, DIO_HIGH);
    70ca:	80 e0       	ldi	r24, 0x00	; 0
    70cc:	63 e0       	ldi	r22, 0x03	; 3
    70ce:	41 e0       	ldi	r20, 0x01	; 1
    70d0:	0e 94 8e 08 	call	0x111c	; 0x111c <DIO_U8SetPinValue>
    70d4:	fe 01       	movw	r30, r28
    70d6:	e1 5a       	subi	r30, 0xA1	; 161
    70d8:	ff 4f       	sbci	r31, 0xFF	; 255
    70da:	80 e0       	ldi	r24, 0x00	; 0
    70dc:	90 e0       	ldi	r25, 0x00	; 0
    70de:	a0 e2       	ldi	r26, 0x20	; 32
    70e0:	b1 e4       	ldi	r27, 0x41	; 65
    70e2:	80 83       	st	Z, r24
    70e4:	91 83       	std	Z+1, r25	; 0x01
    70e6:	a2 83       	std	Z+2, r26	; 0x02
    70e8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    70ea:	8e 01       	movw	r16, r28
    70ec:	05 5a       	subi	r16, 0xA5	; 165
    70ee:	1f 4f       	sbci	r17, 0xFF	; 255
    70f0:	fe 01       	movw	r30, r28
    70f2:	e1 5a       	subi	r30, 0xA1	; 161
    70f4:	ff 4f       	sbci	r31, 0xFF	; 255
    70f6:	60 81       	ld	r22, Z
    70f8:	71 81       	ldd	r23, Z+1	; 0x01
    70fa:	82 81       	ldd	r24, Z+2	; 0x02
    70fc:	93 81       	ldd	r25, Z+3	; 0x03
    70fe:	20 e0       	ldi	r18, 0x00	; 0
    7100:	30 e0       	ldi	r19, 0x00	; 0
    7102:	4a ef       	ldi	r20, 0xFA	; 250
    7104:	54 e4       	ldi	r21, 0x44	; 68
    7106:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    710a:	dc 01       	movw	r26, r24
    710c:	cb 01       	movw	r24, r22
    710e:	f8 01       	movw	r30, r16
    7110:	80 83       	st	Z, r24
    7112:	91 83       	std	Z+1, r25	; 0x01
    7114:	a2 83       	std	Z+2, r26	; 0x02
    7116:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    7118:	fe 01       	movw	r30, r28
    711a:	e5 5a       	subi	r30, 0xA5	; 165
    711c:	ff 4f       	sbci	r31, 0xFF	; 255
    711e:	60 81       	ld	r22, Z
    7120:	71 81       	ldd	r23, Z+1	; 0x01
    7122:	82 81       	ldd	r24, Z+2	; 0x02
    7124:	93 81       	ldd	r25, Z+3	; 0x03
    7126:	20 e0       	ldi	r18, 0x00	; 0
    7128:	30 e0       	ldi	r19, 0x00	; 0
    712a:	40 e8       	ldi	r20, 0x80	; 128
    712c:	5f e3       	ldi	r21, 0x3F	; 63
    712e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    7132:	88 23       	and	r24, r24
    7134:	44 f4       	brge	.+16     	; 0x7146 <HSTEP_U8SetAngDir+0x324>
		__ticks = 1;
    7136:	fe 01       	movw	r30, r28
    7138:	e7 5a       	subi	r30, 0xA7	; 167
    713a:	ff 4f       	sbci	r31, 0xFF	; 255
    713c:	81 e0       	ldi	r24, 0x01	; 1
    713e:	90 e0       	ldi	r25, 0x00	; 0
    7140:	91 83       	std	Z+1, r25	; 0x01
    7142:	80 83       	st	Z, r24
    7144:	64 c0       	rjmp	.+200    	; 0x720e <HSTEP_U8SetAngDir+0x3ec>
	else if (__tmp > 65535)
    7146:	fe 01       	movw	r30, r28
    7148:	e5 5a       	subi	r30, 0xA5	; 165
    714a:	ff 4f       	sbci	r31, 0xFF	; 255
    714c:	60 81       	ld	r22, Z
    714e:	71 81       	ldd	r23, Z+1	; 0x01
    7150:	82 81       	ldd	r24, Z+2	; 0x02
    7152:	93 81       	ldd	r25, Z+3	; 0x03
    7154:	20 e0       	ldi	r18, 0x00	; 0
    7156:	3f ef       	ldi	r19, 0xFF	; 255
    7158:	4f e7       	ldi	r20, 0x7F	; 127
    715a:	57 e4       	ldi	r21, 0x47	; 71
    715c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    7160:	18 16       	cp	r1, r24
    7162:	0c f0       	brlt	.+2      	; 0x7166 <HSTEP_U8SetAngDir+0x344>
    7164:	43 c0       	rjmp	.+134    	; 0x71ec <HSTEP_U8SetAngDir+0x3ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    7166:	fe 01       	movw	r30, r28
    7168:	e1 5a       	subi	r30, 0xA1	; 161
    716a:	ff 4f       	sbci	r31, 0xFF	; 255
    716c:	60 81       	ld	r22, Z
    716e:	71 81       	ldd	r23, Z+1	; 0x01
    7170:	82 81       	ldd	r24, Z+2	; 0x02
    7172:	93 81       	ldd	r25, Z+3	; 0x03
    7174:	20 e0       	ldi	r18, 0x00	; 0
    7176:	30 e0       	ldi	r19, 0x00	; 0
    7178:	40 e2       	ldi	r20, 0x20	; 32
    717a:	51 e4       	ldi	r21, 0x41	; 65
    717c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    7180:	dc 01       	movw	r26, r24
    7182:	cb 01       	movw	r24, r22
    7184:	8e 01       	movw	r16, r28
    7186:	07 5a       	subi	r16, 0xA7	; 167
    7188:	1f 4f       	sbci	r17, 0xFF	; 255
    718a:	bc 01       	movw	r22, r24
    718c:	cd 01       	movw	r24, r26
    718e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    7192:	dc 01       	movw	r26, r24
    7194:	cb 01       	movw	r24, r22
    7196:	f8 01       	movw	r30, r16
    7198:	91 83       	std	Z+1, r25	; 0x01
    719a:	80 83       	st	Z, r24
    719c:	1f c0       	rjmp	.+62     	; 0x71dc <HSTEP_U8SetAngDir+0x3ba>
    719e:	fe 01       	movw	r30, r28
    71a0:	e9 5a       	subi	r30, 0xA9	; 169
    71a2:	ff 4f       	sbci	r31, 0xFF	; 255
    71a4:	88 ec       	ldi	r24, 0xC8	; 200
    71a6:	90 e0       	ldi	r25, 0x00	; 0
    71a8:	91 83       	std	Z+1, r25	; 0x01
    71aa:	80 83       	st	Z, r24
    71ac:	fe 01       	movw	r30, r28
    71ae:	e9 5a       	subi	r30, 0xA9	; 169
    71b0:	ff 4f       	sbci	r31, 0xFF	; 255
    71b2:	80 81       	ld	r24, Z
    71b4:	91 81       	ldd	r25, Z+1	; 0x01
    71b6:	01 97       	sbiw	r24, 0x01	; 1
    71b8:	f1 f7       	brne	.-4      	; 0x71b6 <HSTEP_U8SetAngDir+0x394>
    71ba:	fe 01       	movw	r30, r28
    71bc:	e9 5a       	subi	r30, 0xA9	; 169
    71be:	ff 4f       	sbci	r31, 0xFF	; 255
    71c0:	91 83       	std	Z+1, r25	; 0x01
    71c2:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    71c4:	de 01       	movw	r26, r28
    71c6:	a7 5a       	subi	r26, 0xA7	; 167
    71c8:	bf 4f       	sbci	r27, 0xFF	; 255
    71ca:	fe 01       	movw	r30, r28
    71cc:	e7 5a       	subi	r30, 0xA7	; 167
    71ce:	ff 4f       	sbci	r31, 0xFF	; 255
    71d0:	80 81       	ld	r24, Z
    71d2:	91 81       	ldd	r25, Z+1	; 0x01
    71d4:	01 97       	sbiw	r24, 0x01	; 1
    71d6:	11 96       	adiw	r26, 0x01	; 1
    71d8:	9c 93       	st	X, r25
    71da:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    71dc:	fe 01       	movw	r30, r28
    71de:	e7 5a       	subi	r30, 0xA7	; 167
    71e0:	ff 4f       	sbci	r31, 0xFF	; 255
    71e2:	80 81       	ld	r24, Z
    71e4:	91 81       	ldd	r25, Z+1	; 0x01
    71e6:	00 97       	sbiw	r24, 0x00	; 0
    71e8:	d1 f6       	brne	.-76     	; 0x719e <HSTEP_U8SetAngDir+0x37c>
    71ea:	27 c0       	rjmp	.+78     	; 0x723a <HSTEP_U8SetAngDir+0x418>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    71ec:	8e 01       	movw	r16, r28
    71ee:	07 5a       	subi	r16, 0xA7	; 167
    71f0:	1f 4f       	sbci	r17, 0xFF	; 255
    71f2:	fe 01       	movw	r30, r28
    71f4:	e5 5a       	subi	r30, 0xA5	; 165
    71f6:	ff 4f       	sbci	r31, 0xFF	; 255
    71f8:	60 81       	ld	r22, Z
    71fa:	71 81       	ldd	r23, Z+1	; 0x01
    71fc:	82 81       	ldd	r24, Z+2	; 0x02
    71fe:	93 81       	ldd	r25, Z+3	; 0x03
    7200:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    7204:	dc 01       	movw	r26, r24
    7206:	cb 01       	movw	r24, r22
    7208:	f8 01       	movw	r30, r16
    720a:	91 83       	std	Z+1, r25	; 0x01
    720c:	80 83       	st	Z, r24
    720e:	de 01       	movw	r26, r28
    7210:	ab 5a       	subi	r26, 0xAB	; 171
    7212:	bf 4f       	sbci	r27, 0xFF	; 255
    7214:	fe 01       	movw	r30, r28
    7216:	e7 5a       	subi	r30, 0xA7	; 167
    7218:	ff 4f       	sbci	r31, 0xFF	; 255
    721a:	80 81       	ld	r24, Z
    721c:	91 81       	ldd	r25, Z+1	; 0x01
    721e:	8d 93       	st	X+, r24
    7220:	9c 93       	st	X, r25
    7222:	fe 01       	movw	r30, r28
    7224:	eb 5a       	subi	r30, 0xAB	; 171
    7226:	ff 4f       	sbci	r31, 0xFF	; 255
    7228:	80 81       	ld	r24, Z
    722a:	91 81       	ldd	r25, Z+1	; 0x01
    722c:	01 97       	sbiw	r24, 0x01	; 1
    722e:	f1 f7       	brne	.-4      	; 0x722c <HSTEP_U8SetAngDir+0x40a>
    7230:	fe 01       	movw	r30, r28
    7232:	eb 5a       	subi	r30, 0xAB	; 171
    7234:	ff 4f       	sbci	r31, 0xFF	; 255
    7236:	91 83       	std	Z+1, r25	; 0x01
    7238:	80 83       	st	Z, r24
									_delay_ms(10);
									//Full_step_3
									DIO_U8SetPinValue(STEP_PORT, STEP_PIN0, DIO_HIGH);
    723a:	80 e0       	ldi	r24, 0x00	; 0
    723c:	60 e0       	ldi	r22, 0x00	; 0
    723e:	41 e0       	ldi	r20, 0x01	; 1
    7240:	0e 94 8e 08 	call	0x111c	; 0x111c <DIO_U8SetPinValue>
									DIO_U8SetPinValue(STEP_PORT, STEP_PIN1, DIO_LOW);
    7244:	80 e0       	ldi	r24, 0x00	; 0
    7246:	61 e0       	ldi	r22, 0x01	; 1
    7248:	40 e0       	ldi	r20, 0x00	; 0
    724a:	0e 94 8e 08 	call	0x111c	; 0x111c <DIO_U8SetPinValue>
									DIO_U8SetPinValue(STEP_PORT, STEP_PIN2, DIO_HIGH);
    724e:	80 e0       	ldi	r24, 0x00	; 0
    7250:	62 e0       	ldi	r22, 0x02	; 2
    7252:	41 e0       	ldi	r20, 0x01	; 1
    7254:	0e 94 8e 08 	call	0x111c	; 0x111c <DIO_U8SetPinValue>
									DIO_U8SetPinValue(STEP_PORT, STEP_PIN3, DIO_HIGH);
    7258:	80 e0       	ldi	r24, 0x00	; 0
    725a:	63 e0       	ldi	r22, 0x03	; 3
    725c:	41 e0       	ldi	r20, 0x01	; 1
    725e:	0e 94 8e 08 	call	0x111c	; 0x111c <DIO_U8SetPinValue>
    7262:	fe 01       	movw	r30, r28
    7264:	ef 5a       	subi	r30, 0xAF	; 175
    7266:	ff 4f       	sbci	r31, 0xFF	; 255
    7268:	80 e0       	ldi	r24, 0x00	; 0
    726a:	90 e0       	ldi	r25, 0x00	; 0
    726c:	a0 e2       	ldi	r26, 0x20	; 32
    726e:	b1 e4       	ldi	r27, 0x41	; 65
    7270:	80 83       	st	Z, r24
    7272:	91 83       	std	Z+1, r25	; 0x01
    7274:	a2 83       	std	Z+2, r26	; 0x02
    7276:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    7278:	8e 01       	movw	r16, r28
    727a:	03 5b       	subi	r16, 0xB3	; 179
    727c:	1f 4f       	sbci	r17, 0xFF	; 255
    727e:	fe 01       	movw	r30, r28
    7280:	ef 5a       	subi	r30, 0xAF	; 175
    7282:	ff 4f       	sbci	r31, 0xFF	; 255
    7284:	60 81       	ld	r22, Z
    7286:	71 81       	ldd	r23, Z+1	; 0x01
    7288:	82 81       	ldd	r24, Z+2	; 0x02
    728a:	93 81       	ldd	r25, Z+3	; 0x03
    728c:	20 e0       	ldi	r18, 0x00	; 0
    728e:	30 e0       	ldi	r19, 0x00	; 0
    7290:	4a ef       	ldi	r20, 0xFA	; 250
    7292:	54 e4       	ldi	r21, 0x44	; 68
    7294:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    7298:	dc 01       	movw	r26, r24
    729a:	cb 01       	movw	r24, r22
    729c:	f8 01       	movw	r30, r16
    729e:	80 83       	st	Z, r24
    72a0:	91 83       	std	Z+1, r25	; 0x01
    72a2:	a2 83       	std	Z+2, r26	; 0x02
    72a4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    72a6:	fe 01       	movw	r30, r28
    72a8:	e3 5b       	subi	r30, 0xB3	; 179
    72aa:	ff 4f       	sbci	r31, 0xFF	; 255
    72ac:	60 81       	ld	r22, Z
    72ae:	71 81       	ldd	r23, Z+1	; 0x01
    72b0:	82 81       	ldd	r24, Z+2	; 0x02
    72b2:	93 81       	ldd	r25, Z+3	; 0x03
    72b4:	20 e0       	ldi	r18, 0x00	; 0
    72b6:	30 e0       	ldi	r19, 0x00	; 0
    72b8:	40 e8       	ldi	r20, 0x80	; 128
    72ba:	5f e3       	ldi	r21, 0x3F	; 63
    72bc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    72c0:	88 23       	and	r24, r24
    72c2:	44 f4       	brge	.+16     	; 0x72d4 <HSTEP_U8SetAngDir+0x4b2>
		__ticks = 1;
    72c4:	fe 01       	movw	r30, r28
    72c6:	e5 5b       	subi	r30, 0xB5	; 181
    72c8:	ff 4f       	sbci	r31, 0xFF	; 255
    72ca:	81 e0       	ldi	r24, 0x01	; 1
    72cc:	90 e0       	ldi	r25, 0x00	; 0
    72ce:	91 83       	std	Z+1, r25	; 0x01
    72d0:	80 83       	st	Z, r24
    72d2:	64 c0       	rjmp	.+200    	; 0x739c <HSTEP_U8SetAngDir+0x57a>
	else if (__tmp > 65535)
    72d4:	fe 01       	movw	r30, r28
    72d6:	e3 5b       	subi	r30, 0xB3	; 179
    72d8:	ff 4f       	sbci	r31, 0xFF	; 255
    72da:	60 81       	ld	r22, Z
    72dc:	71 81       	ldd	r23, Z+1	; 0x01
    72de:	82 81       	ldd	r24, Z+2	; 0x02
    72e0:	93 81       	ldd	r25, Z+3	; 0x03
    72e2:	20 e0       	ldi	r18, 0x00	; 0
    72e4:	3f ef       	ldi	r19, 0xFF	; 255
    72e6:	4f e7       	ldi	r20, 0x7F	; 127
    72e8:	57 e4       	ldi	r21, 0x47	; 71
    72ea:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    72ee:	18 16       	cp	r1, r24
    72f0:	0c f0       	brlt	.+2      	; 0x72f4 <HSTEP_U8SetAngDir+0x4d2>
    72f2:	43 c0       	rjmp	.+134    	; 0x737a <HSTEP_U8SetAngDir+0x558>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    72f4:	fe 01       	movw	r30, r28
    72f6:	ef 5a       	subi	r30, 0xAF	; 175
    72f8:	ff 4f       	sbci	r31, 0xFF	; 255
    72fa:	60 81       	ld	r22, Z
    72fc:	71 81       	ldd	r23, Z+1	; 0x01
    72fe:	82 81       	ldd	r24, Z+2	; 0x02
    7300:	93 81       	ldd	r25, Z+3	; 0x03
    7302:	20 e0       	ldi	r18, 0x00	; 0
    7304:	30 e0       	ldi	r19, 0x00	; 0
    7306:	40 e2       	ldi	r20, 0x20	; 32
    7308:	51 e4       	ldi	r21, 0x41	; 65
    730a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    730e:	dc 01       	movw	r26, r24
    7310:	cb 01       	movw	r24, r22
    7312:	8e 01       	movw	r16, r28
    7314:	05 5b       	subi	r16, 0xB5	; 181
    7316:	1f 4f       	sbci	r17, 0xFF	; 255
    7318:	bc 01       	movw	r22, r24
    731a:	cd 01       	movw	r24, r26
    731c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    7320:	dc 01       	movw	r26, r24
    7322:	cb 01       	movw	r24, r22
    7324:	f8 01       	movw	r30, r16
    7326:	91 83       	std	Z+1, r25	; 0x01
    7328:	80 83       	st	Z, r24
    732a:	1f c0       	rjmp	.+62     	; 0x736a <HSTEP_U8SetAngDir+0x548>
    732c:	fe 01       	movw	r30, r28
    732e:	e7 5b       	subi	r30, 0xB7	; 183
    7330:	ff 4f       	sbci	r31, 0xFF	; 255
    7332:	88 ec       	ldi	r24, 0xC8	; 200
    7334:	90 e0       	ldi	r25, 0x00	; 0
    7336:	91 83       	std	Z+1, r25	; 0x01
    7338:	80 83       	st	Z, r24
    733a:	fe 01       	movw	r30, r28
    733c:	e7 5b       	subi	r30, 0xB7	; 183
    733e:	ff 4f       	sbci	r31, 0xFF	; 255
    7340:	80 81       	ld	r24, Z
    7342:	91 81       	ldd	r25, Z+1	; 0x01
    7344:	01 97       	sbiw	r24, 0x01	; 1
    7346:	f1 f7       	brne	.-4      	; 0x7344 <HSTEP_U8SetAngDir+0x522>
    7348:	fe 01       	movw	r30, r28
    734a:	e7 5b       	subi	r30, 0xB7	; 183
    734c:	ff 4f       	sbci	r31, 0xFF	; 255
    734e:	91 83       	std	Z+1, r25	; 0x01
    7350:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    7352:	de 01       	movw	r26, r28
    7354:	a5 5b       	subi	r26, 0xB5	; 181
    7356:	bf 4f       	sbci	r27, 0xFF	; 255
    7358:	fe 01       	movw	r30, r28
    735a:	e5 5b       	subi	r30, 0xB5	; 181
    735c:	ff 4f       	sbci	r31, 0xFF	; 255
    735e:	80 81       	ld	r24, Z
    7360:	91 81       	ldd	r25, Z+1	; 0x01
    7362:	01 97       	sbiw	r24, 0x01	; 1
    7364:	11 96       	adiw	r26, 0x01	; 1
    7366:	9c 93       	st	X, r25
    7368:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    736a:	fe 01       	movw	r30, r28
    736c:	e5 5b       	subi	r30, 0xB5	; 181
    736e:	ff 4f       	sbci	r31, 0xFF	; 255
    7370:	80 81       	ld	r24, Z
    7372:	91 81       	ldd	r25, Z+1	; 0x01
    7374:	00 97       	sbiw	r24, 0x00	; 0
    7376:	d1 f6       	brne	.-76     	; 0x732c <HSTEP_U8SetAngDir+0x50a>
    7378:	27 c0       	rjmp	.+78     	; 0x73c8 <HSTEP_U8SetAngDir+0x5a6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    737a:	8e 01       	movw	r16, r28
    737c:	05 5b       	subi	r16, 0xB5	; 181
    737e:	1f 4f       	sbci	r17, 0xFF	; 255
    7380:	fe 01       	movw	r30, r28
    7382:	e3 5b       	subi	r30, 0xB3	; 179
    7384:	ff 4f       	sbci	r31, 0xFF	; 255
    7386:	60 81       	ld	r22, Z
    7388:	71 81       	ldd	r23, Z+1	; 0x01
    738a:	82 81       	ldd	r24, Z+2	; 0x02
    738c:	93 81       	ldd	r25, Z+3	; 0x03
    738e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    7392:	dc 01       	movw	r26, r24
    7394:	cb 01       	movw	r24, r22
    7396:	f8 01       	movw	r30, r16
    7398:	91 83       	std	Z+1, r25	; 0x01
    739a:	80 83       	st	Z, r24
    739c:	de 01       	movw	r26, r28
    739e:	a9 5b       	subi	r26, 0xB9	; 185
    73a0:	bf 4f       	sbci	r27, 0xFF	; 255
    73a2:	fe 01       	movw	r30, r28
    73a4:	e5 5b       	subi	r30, 0xB5	; 181
    73a6:	ff 4f       	sbci	r31, 0xFF	; 255
    73a8:	80 81       	ld	r24, Z
    73aa:	91 81       	ldd	r25, Z+1	; 0x01
    73ac:	8d 93       	st	X+, r24
    73ae:	9c 93       	st	X, r25
    73b0:	fe 01       	movw	r30, r28
    73b2:	e9 5b       	subi	r30, 0xB9	; 185
    73b4:	ff 4f       	sbci	r31, 0xFF	; 255
    73b6:	80 81       	ld	r24, Z
    73b8:	91 81       	ldd	r25, Z+1	; 0x01
    73ba:	01 97       	sbiw	r24, 0x01	; 1
    73bc:	f1 f7       	brne	.-4      	; 0x73ba <HSTEP_U8SetAngDir+0x598>
    73be:	fe 01       	movw	r30, r28
    73c0:	e9 5b       	subi	r30, 0xB9	; 185
    73c2:	ff 4f       	sbci	r31, 0xFF	; 255
    73c4:	91 83       	std	Z+1, r25	; 0x01
    73c6:	80 83       	st	Z, r24
									_delay_ms(10);
									//Full_step_4
									DIO_U8SetPinValue(STEP_PORT, STEP_PIN0, DIO_LOW);
    73c8:	80 e0       	ldi	r24, 0x00	; 0
    73ca:	60 e0       	ldi	r22, 0x00	; 0
    73cc:	40 e0       	ldi	r20, 0x00	; 0
    73ce:	0e 94 8e 08 	call	0x111c	; 0x111c <DIO_U8SetPinValue>
									DIO_U8SetPinValue(STEP_PORT, STEP_PIN1, DIO_HIGH);
    73d2:	80 e0       	ldi	r24, 0x00	; 0
    73d4:	61 e0       	ldi	r22, 0x01	; 1
    73d6:	41 e0       	ldi	r20, 0x01	; 1
    73d8:	0e 94 8e 08 	call	0x111c	; 0x111c <DIO_U8SetPinValue>
									DIO_U8SetPinValue(STEP_PORT, STEP_PIN2, DIO_HIGH);
    73dc:	80 e0       	ldi	r24, 0x00	; 0
    73de:	62 e0       	ldi	r22, 0x02	; 2
    73e0:	41 e0       	ldi	r20, 0x01	; 1
    73e2:	0e 94 8e 08 	call	0x111c	; 0x111c <DIO_U8SetPinValue>
									DIO_U8SetPinValue(STEP_PORT, STEP_PIN3, DIO_HIGH);
    73e6:	80 e0       	ldi	r24, 0x00	; 0
    73e8:	63 e0       	ldi	r22, 0x03	; 3
    73ea:	41 e0       	ldi	r20, 0x01	; 1
    73ec:	0e 94 8e 08 	call	0x111c	; 0x111c <DIO_U8SetPinValue>
    73f0:	fe 01       	movw	r30, r28
    73f2:	ed 5b       	subi	r30, 0xBD	; 189
    73f4:	ff 4f       	sbci	r31, 0xFF	; 255
    73f6:	80 e0       	ldi	r24, 0x00	; 0
    73f8:	90 e0       	ldi	r25, 0x00	; 0
    73fa:	a0 e2       	ldi	r26, 0x20	; 32
    73fc:	b1 e4       	ldi	r27, 0x41	; 65
    73fe:	80 83       	st	Z, r24
    7400:	91 83       	std	Z+1, r25	; 0x01
    7402:	a2 83       	std	Z+2, r26	; 0x02
    7404:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    7406:	8e 01       	movw	r16, r28
    7408:	01 5c       	subi	r16, 0xC1	; 193
    740a:	1f 4f       	sbci	r17, 0xFF	; 255
    740c:	fe 01       	movw	r30, r28
    740e:	ed 5b       	subi	r30, 0xBD	; 189
    7410:	ff 4f       	sbci	r31, 0xFF	; 255
    7412:	60 81       	ld	r22, Z
    7414:	71 81       	ldd	r23, Z+1	; 0x01
    7416:	82 81       	ldd	r24, Z+2	; 0x02
    7418:	93 81       	ldd	r25, Z+3	; 0x03
    741a:	20 e0       	ldi	r18, 0x00	; 0
    741c:	30 e0       	ldi	r19, 0x00	; 0
    741e:	4a ef       	ldi	r20, 0xFA	; 250
    7420:	54 e4       	ldi	r21, 0x44	; 68
    7422:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    7426:	dc 01       	movw	r26, r24
    7428:	cb 01       	movw	r24, r22
    742a:	f8 01       	movw	r30, r16
    742c:	80 83       	st	Z, r24
    742e:	91 83       	std	Z+1, r25	; 0x01
    7430:	a2 83       	std	Z+2, r26	; 0x02
    7432:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    7434:	fe 01       	movw	r30, r28
    7436:	ff 96       	adiw	r30, 0x3f	; 63
    7438:	60 81       	ld	r22, Z
    743a:	71 81       	ldd	r23, Z+1	; 0x01
    743c:	82 81       	ldd	r24, Z+2	; 0x02
    743e:	93 81       	ldd	r25, Z+3	; 0x03
    7440:	20 e0       	ldi	r18, 0x00	; 0
    7442:	30 e0       	ldi	r19, 0x00	; 0
    7444:	40 e8       	ldi	r20, 0x80	; 128
    7446:	5f e3       	ldi	r21, 0x3F	; 63
    7448:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    744c:	88 23       	and	r24, r24
    744e:	2c f4       	brge	.+10     	; 0x745a <HSTEP_U8SetAngDir+0x638>
		__ticks = 1;
    7450:	81 e0       	ldi	r24, 0x01	; 1
    7452:	90 e0       	ldi	r25, 0x00	; 0
    7454:	9e af       	std	Y+62, r25	; 0x3e
    7456:	8d af       	std	Y+61, r24	; 0x3d
    7458:	46 c0       	rjmp	.+140    	; 0x74e6 <HSTEP_U8SetAngDir+0x6c4>
	else if (__tmp > 65535)
    745a:	fe 01       	movw	r30, r28
    745c:	ff 96       	adiw	r30, 0x3f	; 63
    745e:	60 81       	ld	r22, Z
    7460:	71 81       	ldd	r23, Z+1	; 0x01
    7462:	82 81       	ldd	r24, Z+2	; 0x02
    7464:	93 81       	ldd	r25, Z+3	; 0x03
    7466:	20 e0       	ldi	r18, 0x00	; 0
    7468:	3f ef       	ldi	r19, 0xFF	; 255
    746a:	4f e7       	ldi	r20, 0x7F	; 127
    746c:	57 e4       	ldi	r21, 0x47	; 71
    746e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    7472:	18 16       	cp	r1, r24
    7474:	64 f5       	brge	.+88     	; 0x74ce <HSTEP_U8SetAngDir+0x6ac>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    7476:	fe 01       	movw	r30, r28
    7478:	ed 5b       	subi	r30, 0xBD	; 189
    747a:	ff 4f       	sbci	r31, 0xFF	; 255
    747c:	60 81       	ld	r22, Z
    747e:	71 81       	ldd	r23, Z+1	; 0x01
    7480:	82 81       	ldd	r24, Z+2	; 0x02
    7482:	93 81       	ldd	r25, Z+3	; 0x03
    7484:	20 e0       	ldi	r18, 0x00	; 0
    7486:	30 e0       	ldi	r19, 0x00	; 0
    7488:	40 e2       	ldi	r20, 0x20	; 32
    748a:	51 e4       	ldi	r21, 0x41	; 65
    748c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    7490:	dc 01       	movw	r26, r24
    7492:	cb 01       	movw	r24, r22
    7494:	bc 01       	movw	r22, r24
    7496:	cd 01       	movw	r24, r26
    7498:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    749c:	dc 01       	movw	r26, r24
    749e:	cb 01       	movw	r24, r22
    74a0:	9e af       	std	Y+62, r25	; 0x3e
    74a2:	8d af       	std	Y+61, r24	; 0x3d
    74a4:	0f c0       	rjmp	.+30     	; 0x74c4 <HSTEP_U8SetAngDir+0x6a2>
    74a6:	88 ec       	ldi	r24, 0xC8	; 200
    74a8:	90 e0       	ldi	r25, 0x00	; 0
    74aa:	9c af       	std	Y+60, r25	; 0x3c
    74ac:	8b af       	std	Y+59, r24	; 0x3b
    74ae:	8b ad       	ldd	r24, Y+59	; 0x3b
    74b0:	9c ad       	ldd	r25, Y+60	; 0x3c
    74b2:	01 97       	sbiw	r24, 0x01	; 1
    74b4:	f1 f7       	brne	.-4      	; 0x74b2 <HSTEP_U8SetAngDir+0x690>
    74b6:	9c af       	std	Y+60, r25	; 0x3c
    74b8:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    74ba:	8d ad       	ldd	r24, Y+61	; 0x3d
    74bc:	9e ad       	ldd	r25, Y+62	; 0x3e
    74be:	01 97       	sbiw	r24, 0x01	; 1
    74c0:	9e af       	std	Y+62, r25	; 0x3e
    74c2:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    74c4:	8d ad       	ldd	r24, Y+61	; 0x3d
    74c6:	9e ad       	ldd	r25, Y+62	; 0x3e
    74c8:	00 97       	sbiw	r24, 0x00	; 0
    74ca:	69 f7       	brne	.-38     	; 0x74a6 <HSTEP_U8SetAngDir+0x684>
    74cc:	16 c0       	rjmp	.+44     	; 0x74fa <HSTEP_U8SetAngDir+0x6d8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    74ce:	fe 01       	movw	r30, r28
    74d0:	ff 96       	adiw	r30, 0x3f	; 63
    74d2:	60 81       	ld	r22, Z
    74d4:	71 81       	ldd	r23, Z+1	; 0x01
    74d6:	82 81       	ldd	r24, Z+2	; 0x02
    74d8:	93 81       	ldd	r25, Z+3	; 0x03
    74da:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    74de:	dc 01       	movw	r26, r24
    74e0:	cb 01       	movw	r24, r22
    74e2:	9e af       	std	Y+62, r25	; 0x3e
    74e4:	8d af       	std	Y+61, r24	; 0x3d
    74e6:	8d ad       	ldd	r24, Y+61	; 0x3d
    74e8:	9e ad       	ldd	r25, Y+62	; 0x3e
    74ea:	9a af       	std	Y+58, r25	; 0x3a
    74ec:	89 af       	std	Y+57, r24	; 0x39
    74ee:	89 ad       	ldd	r24, Y+57	; 0x39
    74f0:	9a ad       	ldd	r25, Y+58	; 0x3a
    74f2:	01 97       	sbiw	r24, 0x01	; 1
    74f4:	f1 f7       	brne	.-4      	; 0x74f2 <HSTEP_U8SetAngDir+0x6d0>
    74f6:	9a af       	std	Y+58, r25	; 0x3a
    74f8:	89 af       	std	Y+57, r24	; 0x39
		Local_U16Steps = (Copy_U16Angle * 2048UL)/360;
		Local_U16Iterations = Local_U16Steps / 4;
		switch(Copy_U8Direction)
		{
			case  STEP_DIR_CW: 	//Rotate Clock Wise
								for(Local_U16Counter = 0; Local_U16Counter < Local_U16Iterations; Local_U16Counter++)
    74fa:	de 01       	movw	r26, r28
    74fc:	af 58       	subi	r26, 0x8F	; 143
    74fe:	bf 4f       	sbci	r27, 0xFF	; 255
    7500:	fe 01       	movw	r30, r28
    7502:	ef 58       	subi	r30, 0x8F	; 143
    7504:	ff 4f       	sbci	r31, 0xFF	; 255
    7506:	80 81       	ld	r24, Z
    7508:	91 81       	ldd	r25, Z+1	; 0x01
    750a:	01 96       	adiw	r24, 0x01	; 1
    750c:	8d 93       	st	X+, r24
    750e:	9c 93       	st	X, r25
    7510:	fe 01       	movw	r30, r28
    7512:	ef 58       	subi	r30, 0x8F	; 143
    7514:	ff 4f       	sbci	r31, 0xFF	; 255
    7516:	de 01       	movw	r26, r28
    7518:	ad 58       	subi	r26, 0x8D	; 141
    751a:	bf 4f       	sbci	r27, 0xFF	; 255
    751c:	20 81       	ld	r18, Z
    751e:	31 81       	ldd	r19, Z+1	; 0x01
    7520:	8d 91       	ld	r24, X+
    7522:	9c 91       	ld	r25, X
    7524:	11 97       	sbiw	r26, 0x01	; 1
    7526:	28 17       	cp	r18, r24
    7528:	39 07       	cpc	r19, r25
    752a:	08 f4       	brcc	.+2      	; 0x752e <HSTEP_U8SetAngDir+0x70c>
    752c:	f8 cc       	rjmp	.-1552   	; 0x6f1e <HSTEP_U8SetAngDir+0xfc>
    752e:	38 c2       	rjmp	.+1136   	; 0x79a0 <HSTEP_U8SetAngDir+0xb7e>
									_delay_ms(10);
								}
								break;

			case STEP_DIR_ACW:	//Rotate Anti-Clock Wise
								for(Local_U16Counter = 0; Local_U16Counter < Local_U16Iterations; Local_U16Counter++)
    7530:	fe 01       	movw	r30, r28
    7532:	ef 58       	subi	r30, 0x8F	; 143
    7534:	ff 4f       	sbci	r31, 0xFF	; 255
    7536:	11 82       	std	Z+1, r1	; 0x01
    7538:	10 82       	st	Z, r1
    753a:	23 c2       	rjmp	.+1094   	; 0x7982 <HSTEP_U8SetAngDir+0xb60>
								{
									//Full_step_1
									DIO_U8SetPinValue(STEP_PORT, STEP_PIN0, DIO_LOW);
    753c:	80 e0       	ldi	r24, 0x00	; 0
    753e:	60 e0       	ldi	r22, 0x00	; 0
    7540:	40 e0       	ldi	r20, 0x00	; 0
    7542:	0e 94 8e 08 	call	0x111c	; 0x111c <DIO_U8SetPinValue>
									DIO_U8SetPinValue(STEP_PORT, STEP_PIN1, DIO_HIGH);
    7546:	80 e0       	ldi	r24, 0x00	; 0
    7548:	61 e0       	ldi	r22, 0x01	; 1
    754a:	41 e0       	ldi	r20, 0x01	; 1
    754c:	0e 94 8e 08 	call	0x111c	; 0x111c <DIO_U8SetPinValue>
									DIO_U8SetPinValue(STEP_PORT, STEP_PIN2, DIO_HIGH);
    7550:	80 e0       	ldi	r24, 0x00	; 0
    7552:	62 e0       	ldi	r22, 0x02	; 2
    7554:	41 e0       	ldi	r20, 0x01	; 1
    7556:	0e 94 8e 08 	call	0x111c	; 0x111c <DIO_U8SetPinValue>
									DIO_U8SetPinValue(STEP_PORT, STEP_PIN3, DIO_HIGH);
    755a:	80 e0       	ldi	r24, 0x00	; 0
    755c:	63 e0       	ldi	r22, 0x03	; 3
    755e:	41 e0       	ldi	r20, 0x01	; 1
    7560:	0e 94 8e 08 	call	0x111c	; 0x111c <DIO_U8SetPinValue>
    7564:	80 e0       	ldi	r24, 0x00	; 0
    7566:	90 e0       	ldi	r25, 0x00	; 0
    7568:	a0 e2       	ldi	r26, 0x20	; 32
    756a:	b1 e4       	ldi	r27, 0x41	; 65
    756c:	8d ab       	std	Y+53, r24	; 0x35
    756e:	9e ab       	std	Y+54, r25	; 0x36
    7570:	af ab       	std	Y+55, r26	; 0x37
    7572:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    7574:	6d a9       	ldd	r22, Y+53	; 0x35
    7576:	7e a9       	ldd	r23, Y+54	; 0x36
    7578:	8f a9       	ldd	r24, Y+55	; 0x37
    757a:	98 ad       	ldd	r25, Y+56	; 0x38
    757c:	20 e0       	ldi	r18, 0x00	; 0
    757e:	30 e0       	ldi	r19, 0x00	; 0
    7580:	4a ef       	ldi	r20, 0xFA	; 250
    7582:	54 e4       	ldi	r21, 0x44	; 68
    7584:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    7588:	dc 01       	movw	r26, r24
    758a:	cb 01       	movw	r24, r22
    758c:	89 ab       	std	Y+49, r24	; 0x31
    758e:	9a ab       	std	Y+50, r25	; 0x32
    7590:	ab ab       	std	Y+51, r26	; 0x33
    7592:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    7594:	69 a9       	ldd	r22, Y+49	; 0x31
    7596:	7a a9       	ldd	r23, Y+50	; 0x32
    7598:	8b a9       	ldd	r24, Y+51	; 0x33
    759a:	9c a9       	ldd	r25, Y+52	; 0x34
    759c:	20 e0       	ldi	r18, 0x00	; 0
    759e:	30 e0       	ldi	r19, 0x00	; 0
    75a0:	40 e8       	ldi	r20, 0x80	; 128
    75a2:	5f e3       	ldi	r21, 0x3F	; 63
    75a4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    75a8:	88 23       	and	r24, r24
    75aa:	2c f4       	brge	.+10     	; 0x75b6 <HSTEP_U8SetAngDir+0x794>
		__ticks = 1;
    75ac:	81 e0       	ldi	r24, 0x01	; 1
    75ae:	90 e0       	ldi	r25, 0x00	; 0
    75b0:	98 ab       	std	Y+48, r25	; 0x30
    75b2:	8f a7       	std	Y+47, r24	; 0x2f
    75b4:	3f c0       	rjmp	.+126    	; 0x7634 <HSTEP_U8SetAngDir+0x812>
	else if (__tmp > 65535)
    75b6:	69 a9       	ldd	r22, Y+49	; 0x31
    75b8:	7a a9       	ldd	r23, Y+50	; 0x32
    75ba:	8b a9       	ldd	r24, Y+51	; 0x33
    75bc:	9c a9       	ldd	r25, Y+52	; 0x34
    75be:	20 e0       	ldi	r18, 0x00	; 0
    75c0:	3f ef       	ldi	r19, 0xFF	; 255
    75c2:	4f e7       	ldi	r20, 0x7F	; 127
    75c4:	57 e4       	ldi	r21, 0x47	; 71
    75c6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    75ca:	18 16       	cp	r1, r24
    75cc:	4c f5       	brge	.+82     	; 0x7620 <HSTEP_U8SetAngDir+0x7fe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    75ce:	6d a9       	ldd	r22, Y+53	; 0x35
    75d0:	7e a9       	ldd	r23, Y+54	; 0x36
    75d2:	8f a9       	ldd	r24, Y+55	; 0x37
    75d4:	98 ad       	ldd	r25, Y+56	; 0x38
    75d6:	20 e0       	ldi	r18, 0x00	; 0
    75d8:	30 e0       	ldi	r19, 0x00	; 0
    75da:	40 e2       	ldi	r20, 0x20	; 32
    75dc:	51 e4       	ldi	r21, 0x41	; 65
    75de:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    75e2:	dc 01       	movw	r26, r24
    75e4:	cb 01       	movw	r24, r22
    75e6:	bc 01       	movw	r22, r24
    75e8:	cd 01       	movw	r24, r26
    75ea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    75ee:	dc 01       	movw	r26, r24
    75f0:	cb 01       	movw	r24, r22
    75f2:	98 ab       	std	Y+48, r25	; 0x30
    75f4:	8f a7       	std	Y+47, r24	; 0x2f
    75f6:	0f c0       	rjmp	.+30     	; 0x7616 <HSTEP_U8SetAngDir+0x7f4>
    75f8:	88 ec       	ldi	r24, 0xC8	; 200
    75fa:	90 e0       	ldi	r25, 0x00	; 0
    75fc:	9e a7       	std	Y+46, r25	; 0x2e
    75fe:	8d a7       	std	Y+45, r24	; 0x2d
    7600:	8d a5       	ldd	r24, Y+45	; 0x2d
    7602:	9e a5       	ldd	r25, Y+46	; 0x2e
    7604:	01 97       	sbiw	r24, 0x01	; 1
    7606:	f1 f7       	brne	.-4      	; 0x7604 <HSTEP_U8SetAngDir+0x7e2>
    7608:	9e a7       	std	Y+46, r25	; 0x2e
    760a:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    760c:	8f a5       	ldd	r24, Y+47	; 0x2f
    760e:	98 a9       	ldd	r25, Y+48	; 0x30
    7610:	01 97       	sbiw	r24, 0x01	; 1
    7612:	98 ab       	std	Y+48, r25	; 0x30
    7614:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    7616:	8f a5       	ldd	r24, Y+47	; 0x2f
    7618:	98 a9       	ldd	r25, Y+48	; 0x30
    761a:	00 97       	sbiw	r24, 0x00	; 0
    761c:	69 f7       	brne	.-38     	; 0x75f8 <HSTEP_U8SetAngDir+0x7d6>
    761e:	14 c0       	rjmp	.+40     	; 0x7648 <HSTEP_U8SetAngDir+0x826>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    7620:	69 a9       	ldd	r22, Y+49	; 0x31
    7622:	7a a9       	ldd	r23, Y+50	; 0x32
    7624:	8b a9       	ldd	r24, Y+51	; 0x33
    7626:	9c a9       	ldd	r25, Y+52	; 0x34
    7628:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    762c:	dc 01       	movw	r26, r24
    762e:	cb 01       	movw	r24, r22
    7630:	98 ab       	std	Y+48, r25	; 0x30
    7632:	8f a7       	std	Y+47, r24	; 0x2f
    7634:	8f a5       	ldd	r24, Y+47	; 0x2f
    7636:	98 a9       	ldd	r25, Y+48	; 0x30
    7638:	9c a7       	std	Y+44, r25	; 0x2c
    763a:	8b a7       	std	Y+43, r24	; 0x2b
    763c:	8b a5       	ldd	r24, Y+43	; 0x2b
    763e:	9c a5       	ldd	r25, Y+44	; 0x2c
    7640:	01 97       	sbiw	r24, 0x01	; 1
    7642:	f1 f7       	brne	.-4      	; 0x7640 <HSTEP_U8SetAngDir+0x81e>
    7644:	9c a7       	std	Y+44, r25	; 0x2c
    7646:	8b a7       	std	Y+43, r24	; 0x2b
									_delay_ms(10);
									//Full_step_2
									DIO_U8SetPinValue(STEP_PORT, STEP_PIN0, DIO_HIGH);
    7648:	80 e0       	ldi	r24, 0x00	; 0
    764a:	60 e0       	ldi	r22, 0x00	; 0
    764c:	41 e0       	ldi	r20, 0x01	; 1
    764e:	0e 94 8e 08 	call	0x111c	; 0x111c <DIO_U8SetPinValue>
									DIO_U8SetPinValue(STEP_PORT, STEP_PIN1, DIO_LOW);
    7652:	80 e0       	ldi	r24, 0x00	; 0
    7654:	61 e0       	ldi	r22, 0x01	; 1
    7656:	40 e0       	ldi	r20, 0x00	; 0
    7658:	0e 94 8e 08 	call	0x111c	; 0x111c <DIO_U8SetPinValue>
									DIO_U8SetPinValue(STEP_PORT, STEP_PIN2, DIO_HIGH);
    765c:	80 e0       	ldi	r24, 0x00	; 0
    765e:	62 e0       	ldi	r22, 0x02	; 2
    7660:	41 e0       	ldi	r20, 0x01	; 1
    7662:	0e 94 8e 08 	call	0x111c	; 0x111c <DIO_U8SetPinValue>
									DIO_U8SetPinValue(STEP_PORT, STEP_PIN3, DIO_HIGH);
    7666:	80 e0       	ldi	r24, 0x00	; 0
    7668:	63 e0       	ldi	r22, 0x03	; 3
    766a:	41 e0       	ldi	r20, 0x01	; 1
    766c:	0e 94 8e 08 	call	0x111c	; 0x111c <DIO_U8SetPinValue>
    7670:	80 e0       	ldi	r24, 0x00	; 0
    7672:	90 e0       	ldi	r25, 0x00	; 0
    7674:	a0 e2       	ldi	r26, 0x20	; 32
    7676:	b1 e4       	ldi	r27, 0x41	; 65
    7678:	8f a3       	std	Y+39, r24	; 0x27
    767a:	98 a7       	std	Y+40, r25	; 0x28
    767c:	a9 a7       	std	Y+41, r26	; 0x29
    767e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    7680:	6f a1       	ldd	r22, Y+39	; 0x27
    7682:	78 a5       	ldd	r23, Y+40	; 0x28
    7684:	89 a5       	ldd	r24, Y+41	; 0x29
    7686:	9a a5       	ldd	r25, Y+42	; 0x2a
    7688:	20 e0       	ldi	r18, 0x00	; 0
    768a:	30 e0       	ldi	r19, 0x00	; 0
    768c:	4a ef       	ldi	r20, 0xFA	; 250
    768e:	54 e4       	ldi	r21, 0x44	; 68
    7690:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    7694:	dc 01       	movw	r26, r24
    7696:	cb 01       	movw	r24, r22
    7698:	8b a3       	std	Y+35, r24	; 0x23
    769a:	9c a3       	std	Y+36, r25	; 0x24
    769c:	ad a3       	std	Y+37, r26	; 0x25
    769e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    76a0:	6b a1       	ldd	r22, Y+35	; 0x23
    76a2:	7c a1       	ldd	r23, Y+36	; 0x24
    76a4:	8d a1       	ldd	r24, Y+37	; 0x25
    76a6:	9e a1       	ldd	r25, Y+38	; 0x26
    76a8:	20 e0       	ldi	r18, 0x00	; 0
    76aa:	30 e0       	ldi	r19, 0x00	; 0
    76ac:	40 e8       	ldi	r20, 0x80	; 128
    76ae:	5f e3       	ldi	r21, 0x3F	; 63
    76b0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    76b4:	88 23       	and	r24, r24
    76b6:	2c f4       	brge	.+10     	; 0x76c2 <HSTEP_U8SetAngDir+0x8a0>
		__ticks = 1;
    76b8:	81 e0       	ldi	r24, 0x01	; 1
    76ba:	90 e0       	ldi	r25, 0x00	; 0
    76bc:	9a a3       	std	Y+34, r25	; 0x22
    76be:	89 a3       	std	Y+33, r24	; 0x21
    76c0:	3f c0       	rjmp	.+126    	; 0x7740 <HSTEP_U8SetAngDir+0x91e>
	else if (__tmp > 65535)
    76c2:	6b a1       	ldd	r22, Y+35	; 0x23
    76c4:	7c a1       	ldd	r23, Y+36	; 0x24
    76c6:	8d a1       	ldd	r24, Y+37	; 0x25
    76c8:	9e a1       	ldd	r25, Y+38	; 0x26
    76ca:	20 e0       	ldi	r18, 0x00	; 0
    76cc:	3f ef       	ldi	r19, 0xFF	; 255
    76ce:	4f e7       	ldi	r20, 0x7F	; 127
    76d0:	57 e4       	ldi	r21, 0x47	; 71
    76d2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    76d6:	18 16       	cp	r1, r24
    76d8:	4c f5       	brge	.+82     	; 0x772c <HSTEP_U8SetAngDir+0x90a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    76da:	6f a1       	ldd	r22, Y+39	; 0x27
    76dc:	78 a5       	ldd	r23, Y+40	; 0x28
    76de:	89 a5       	ldd	r24, Y+41	; 0x29
    76e0:	9a a5       	ldd	r25, Y+42	; 0x2a
    76e2:	20 e0       	ldi	r18, 0x00	; 0
    76e4:	30 e0       	ldi	r19, 0x00	; 0
    76e6:	40 e2       	ldi	r20, 0x20	; 32
    76e8:	51 e4       	ldi	r21, 0x41	; 65
    76ea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    76ee:	dc 01       	movw	r26, r24
    76f0:	cb 01       	movw	r24, r22
    76f2:	bc 01       	movw	r22, r24
    76f4:	cd 01       	movw	r24, r26
    76f6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    76fa:	dc 01       	movw	r26, r24
    76fc:	cb 01       	movw	r24, r22
    76fe:	9a a3       	std	Y+34, r25	; 0x22
    7700:	89 a3       	std	Y+33, r24	; 0x21
    7702:	0f c0       	rjmp	.+30     	; 0x7722 <HSTEP_U8SetAngDir+0x900>
    7704:	88 ec       	ldi	r24, 0xC8	; 200
    7706:	90 e0       	ldi	r25, 0x00	; 0
    7708:	98 a3       	std	Y+32, r25	; 0x20
    770a:	8f 8f       	std	Y+31, r24	; 0x1f
    770c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    770e:	98 a1       	ldd	r25, Y+32	; 0x20
    7710:	01 97       	sbiw	r24, 0x01	; 1
    7712:	f1 f7       	brne	.-4      	; 0x7710 <HSTEP_U8SetAngDir+0x8ee>
    7714:	98 a3       	std	Y+32, r25	; 0x20
    7716:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    7718:	89 a1       	ldd	r24, Y+33	; 0x21
    771a:	9a a1       	ldd	r25, Y+34	; 0x22
    771c:	01 97       	sbiw	r24, 0x01	; 1
    771e:	9a a3       	std	Y+34, r25	; 0x22
    7720:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    7722:	89 a1       	ldd	r24, Y+33	; 0x21
    7724:	9a a1       	ldd	r25, Y+34	; 0x22
    7726:	00 97       	sbiw	r24, 0x00	; 0
    7728:	69 f7       	brne	.-38     	; 0x7704 <HSTEP_U8SetAngDir+0x8e2>
    772a:	14 c0       	rjmp	.+40     	; 0x7754 <HSTEP_U8SetAngDir+0x932>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    772c:	6b a1       	ldd	r22, Y+35	; 0x23
    772e:	7c a1       	ldd	r23, Y+36	; 0x24
    7730:	8d a1       	ldd	r24, Y+37	; 0x25
    7732:	9e a1       	ldd	r25, Y+38	; 0x26
    7734:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    7738:	dc 01       	movw	r26, r24
    773a:	cb 01       	movw	r24, r22
    773c:	9a a3       	std	Y+34, r25	; 0x22
    773e:	89 a3       	std	Y+33, r24	; 0x21
    7740:	89 a1       	ldd	r24, Y+33	; 0x21
    7742:	9a a1       	ldd	r25, Y+34	; 0x22
    7744:	9e 8f       	std	Y+30, r25	; 0x1e
    7746:	8d 8f       	std	Y+29, r24	; 0x1d
    7748:	8d 8d       	ldd	r24, Y+29	; 0x1d
    774a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    774c:	01 97       	sbiw	r24, 0x01	; 1
    774e:	f1 f7       	brne	.-4      	; 0x774c <HSTEP_U8SetAngDir+0x92a>
    7750:	9e 8f       	std	Y+30, r25	; 0x1e
    7752:	8d 8f       	std	Y+29, r24	; 0x1d
									_delay_ms(10);
									//Full_step_3
									DIO_U8SetPinValue(STEP_PORT, STEP_PIN0, DIO_HIGH);
    7754:	80 e0       	ldi	r24, 0x00	; 0
    7756:	60 e0       	ldi	r22, 0x00	; 0
    7758:	41 e0       	ldi	r20, 0x01	; 1
    775a:	0e 94 8e 08 	call	0x111c	; 0x111c <DIO_U8SetPinValue>
									DIO_U8SetPinValue(STEP_PORT, STEP_PIN1, DIO_HIGH);
    775e:	80 e0       	ldi	r24, 0x00	; 0
    7760:	61 e0       	ldi	r22, 0x01	; 1
    7762:	41 e0       	ldi	r20, 0x01	; 1
    7764:	0e 94 8e 08 	call	0x111c	; 0x111c <DIO_U8SetPinValue>
									DIO_U8SetPinValue(STEP_PORT, STEP_PIN2, DIO_LOW);
    7768:	80 e0       	ldi	r24, 0x00	; 0
    776a:	62 e0       	ldi	r22, 0x02	; 2
    776c:	40 e0       	ldi	r20, 0x00	; 0
    776e:	0e 94 8e 08 	call	0x111c	; 0x111c <DIO_U8SetPinValue>
									DIO_U8SetPinValue(STEP_PORT, STEP_PIN3, DIO_HIGH);
    7772:	80 e0       	ldi	r24, 0x00	; 0
    7774:	63 e0       	ldi	r22, 0x03	; 3
    7776:	41 e0       	ldi	r20, 0x01	; 1
    7778:	0e 94 8e 08 	call	0x111c	; 0x111c <DIO_U8SetPinValue>
    777c:	80 e0       	ldi	r24, 0x00	; 0
    777e:	90 e0       	ldi	r25, 0x00	; 0
    7780:	a0 e2       	ldi	r26, 0x20	; 32
    7782:	b1 e4       	ldi	r27, 0x41	; 65
    7784:	89 8f       	std	Y+25, r24	; 0x19
    7786:	9a 8f       	std	Y+26, r25	; 0x1a
    7788:	ab 8f       	std	Y+27, r26	; 0x1b
    778a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    778c:	69 8d       	ldd	r22, Y+25	; 0x19
    778e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    7790:	8b 8d       	ldd	r24, Y+27	; 0x1b
    7792:	9c 8d       	ldd	r25, Y+28	; 0x1c
    7794:	20 e0       	ldi	r18, 0x00	; 0
    7796:	30 e0       	ldi	r19, 0x00	; 0
    7798:	4a ef       	ldi	r20, 0xFA	; 250
    779a:	54 e4       	ldi	r21, 0x44	; 68
    779c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    77a0:	dc 01       	movw	r26, r24
    77a2:	cb 01       	movw	r24, r22
    77a4:	8d 8b       	std	Y+21, r24	; 0x15
    77a6:	9e 8b       	std	Y+22, r25	; 0x16
    77a8:	af 8b       	std	Y+23, r26	; 0x17
    77aa:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    77ac:	6d 89       	ldd	r22, Y+21	; 0x15
    77ae:	7e 89       	ldd	r23, Y+22	; 0x16
    77b0:	8f 89       	ldd	r24, Y+23	; 0x17
    77b2:	98 8d       	ldd	r25, Y+24	; 0x18
    77b4:	20 e0       	ldi	r18, 0x00	; 0
    77b6:	30 e0       	ldi	r19, 0x00	; 0
    77b8:	40 e8       	ldi	r20, 0x80	; 128
    77ba:	5f e3       	ldi	r21, 0x3F	; 63
    77bc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    77c0:	88 23       	and	r24, r24
    77c2:	2c f4       	brge	.+10     	; 0x77ce <HSTEP_U8SetAngDir+0x9ac>
		__ticks = 1;
    77c4:	81 e0       	ldi	r24, 0x01	; 1
    77c6:	90 e0       	ldi	r25, 0x00	; 0
    77c8:	9c 8b       	std	Y+20, r25	; 0x14
    77ca:	8b 8b       	std	Y+19, r24	; 0x13
    77cc:	3f c0       	rjmp	.+126    	; 0x784c <HSTEP_U8SetAngDir+0xa2a>
	else if (__tmp > 65535)
    77ce:	6d 89       	ldd	r22, Y+21	; 0x15
    77d0:	7e 89       	ldd	r23, Y+22	; 0x16
    77d2:	8f 89       	ldd	r24, Y+23	; 0x17
    77d4:	98 8d       	ldd	r25, Y+24	; 0x18
    77d6:	20 e0       	ldi	r18, 0x00	; 0
    77d8:	3f ef       	ldi	r19, 0xFF	; 255
    77da:	4f e7       	ldi	r20, 0x7F	; 127
    77dc:	57 e4       	ldi	r21, 0x47	; 71
    77de:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    77e2:	18 16       	cp	r1, r24
    77e4:	4c f5       	brge	.+82     	; 0x7838 <HSTEP_U8SetAngDir+0xa16>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    77e6:	69 8d       	ldd	r22, Y+25	; 0x19
    77e8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    77ea:	8b 8d       	ldd	r24, Y+27	; 0x1b
    77ec:	9c 8d       	ldd	r25, Y+28	; 0x1c
    77ee:	20 e0       	ldi	r18, 0x00	; 0
    77f0:	30 e0       	ldi	r19, 0x00	; 0
    77f2:	40 e2       	ldi	r20, 0x20	; 32
    77f4:	51 e4       	ldi	r21, 0x41	; 65
    77f6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    77fa:	dc 01       	movw	r26, r24
    77fc:	cb 01       	movw	r24, r22
    77fe:	bc 01       	movw	r22, r24
    7800:	cd 01       	movw	r24, r26
    7802:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    7806:	dc 01       	movw	r26, r24
    7808:	cb 01       	movw	r24, r22
    780a:	9c 8b       	std	Y+20, r25	; 0x14
    780c:	8b 8b       	std	Y+19, r24	; 0x13
    780e:	0f c0       	rjmp	.+30     	; 0x782e <HSTEP_U8SetAngDir+0xa0c>
    7810:	88 ec       	ldi	r24, 0xC8	; 200
    7812:	90 e0       	ldi	r25, 0x00	; 0
    7814:	9a 8b       	std	Y+18, r25	; 0x12
    7816:	89 8b       	std	Y+17, r24	; 0x11
    7818:	89 89       	ldd	r24, Y+17	; 0x11
    781a:	9a 89       	ldd	r25, Y+18	; 0x12
    781c:	01 97       	sbiw	r24, 0x01	; 1
    781e:	f1 f7       	brne	.-4      	; 0x781c <HSTEP_U8SetAngDir+0x9fa>
    7820:	9a 8b       	std	Y+18, r25	; 0x12
    7822:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    7824:	8b 89       	ldd	r24, Y+19	; 0x13
    7826:	9c 89       	ldd	r25, Y+20	; 0x14
    7828:	01 97       	sbiw	r24, 0x01	; 1
    782a:	9c 8b       	std	Y+20, r25	; 0x14
    782c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    782e:	8b 89       	ldd	r24, Y+19	; 0x13
    7830:	9c 89       	ldd	r25, Y+20	; 0x14
    7832:	00 97       	sbiw	r24, 0x00	; 0
    7834:	69 f7       	brne	.-38     	; 0x7810 <HSTEP_U8SetAngDir+0x9ee>
    7836:	14 c0       	rjmp	.+40     	; 0x7860 <HSTEP_U8SetAngDir+0xa3e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    7838:	6d 89       	ldd	r22, Y+21	; 0x15
    783a:	7e 89       	ldd	r23, Y+22	; 0x16
    783c:	8f 89       	ldd	r24, Y+23	; 0x17
    783e:	98 8d       	ldd	r25, Y+24	; 0x18
    7840:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    7844:	dc 01       	movw	r26, r24
    7846:	cb 01       	movw	r24, r22
    7848:	9c 8b       	std	Y+20, r25	; 0x14
    784a:	8b 8b       	std	Y+19, r24	; 0x13
    784c:	8b 89       	ldd	r24, Y+19	; 0x13
    784e:	9c 89       	ldd	r25, Y+20	; 0x14
    7850:	98 8b       	std	Y+16, r25	; 0x10
    7852:	8f 87       	std	Y+15, r24	; 0x0f
    7854:	8f 85       	ldd	r24, Y+15	; 0x0f
    7856:	98 89       	ldd	r25, Y+16	; 0x10
    7858:	01 97       	sbiw	r24, 0x01	; 1
    785a:	f1 f7       	brne	.-4      	; 0x7858 <HSTEP_U8SetAngDir+0xa36>
    785c:	98 8b       	std	Y+16, r25	; 0x10
    785e:	8f 87       	std	Y+15, r24	; 0x0f
									_delay_ms(10);
									//Full_step_4
									DIO_U8SetPinValue(STEP_PORT, STEP_PIN0, DIO_HIGH);
    7860:	80 e0       	ldi	r24, 0x00	; 0
    7862:	60 e0       	ldi	r22, 0x00	; 0
    7864:	41 e0       	ldi	r20, 0x01	; 1
    7866:	0e 94 8e 08 	call	0x111c	; 0x111c <DIO_U8SetPinValue>
									DIO_U8SetPinValue(STEP_PORT, STEP_PIN1, DIO_HIGH);
    786a:	80 e0       	ldi	r24, 0x00	; 0
    786c:	61 e0       	ldi	r22, 0x01	; 1
    786e:	41 e0       	ldi	r20, 0x01	; 1
    7870:	0e 94 8e 08 	call	0x111c	; 0x111c <DIO_U8SetPinValue>
									DIO_U8SetPinValue(STEP_PORT, STEP_PIN2, DIO_HIGH);
    7874:	80 e0       	ldi	r24, 0x00	; 0
    7876:	62 e0       	ldi	r22, 0x02	; 2
    7878:	41 e0       	ldi	r20, 0x01	; 1
    787a:	0e 94 8e 08 	call	0x111c	; 0x111c <DIO_U8SetPinValue>
									DIO_U8SetPinValue(STEP_PORT, STEP_PIN3, DIO_LOW);
    787e:	80 e0       	ldi	r24, 0x00	; 0
    7880:	63 e0       	ldi	r22, 0x03	; 3
    7882:	40 e0       	ldi	r20, 0x00	; 0
    7884:	0e 94 8e 08 	call	0x111c	; 0x111c <DIO_U8SetPinValue>
    7888:	80 e0       	ldi	r24, 0x00	; 0
    788a:	90 e0       	ldi	r25, 0x00	; 0
    788c:	a0 e2       	ldi	r26, 0x20	; 32
    788e:	b1 e4       	ldi	r27, 0x41	; 65
    7890:	8b 87       	std	Y+11, r24	; 0x0b
    7892:	9c 87       	std	Y+12, r25	; 0x0c
    7894:	ad 87       	std	Y+13, r26	; 0x0d
    7896:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    7898:	6b 85       	ldd	r22, Y+11	; 0x0b
    789a:	7c 85       	ldd	r23, Y+12	; 0x0c
    789c:	8d 85       	ldd	r24, Y+13	; 0x0d
    789e:	9e 85       	ldd	r25, Y+14	; 0x0e
    78a0:	20 e0       	ldi	r18, 0x00	; 0
    78a2:	30 e0       	ldi	r19, 0x00	; 0
    78a4:	4a ef       	ldi	r20, 0xFA	; 250
    78a6:	54 e4       	ldi	r21, 0x44	; 68
    78a8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    78ac:	dc 01       	movw	r26, r24
    78ae:	cb 01       	movw	r24, r22
    78b0:	8f 83       	std	Y+7, r24	; 0x07
    78b2:	98 87       	std	Y+8, r25	; 0x08
    78b4:	a9 87       	std	Y+9, r26	; 0x09
    78b6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    78b8:	6f 81       	ldd	r22, Y+7	; 0x07
    78ba:	78 85       	ldd	r23, Y+8	; 0x08
    78bc:	89 85       	ldd	r24, Y+9	; 0x09
    78be:	9a 85       	ldd	r25, Y+10	; 0x0a
    78c0:	20 e0       	ldi	r18, 0x00	; 0
    78c2:	30 e0       	ldi	r19, 0x00	; 0
    78c4:	40 e8       	ldi	r20, 0x80	; 128
    78c6:	5f e3       	ldi	r21, 0x3F	; 63
    78c8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    78cc:	88 23       	and	r24, r24
    78ce:	2c f4       	brge	.+10     	; 0x78da <HSTEP_U8SetAngDir+0xab8>
		__ticks = 1;
    78d0:	81 e0       	ldi	r24, 0x01	; 1
    78d2:	90 e0       	ldi	r25, 0x00	; 0
    78d4:	9e 83       	std	Y+6, r25	; 0x06
    78d6:	8d 83       	std	Y+5, r24	; 0x05
    78d8:	3f c0       	rjmp	.+126    	; 0x7958 <HSTEP_U8SetAngDir+0xb36>
	else if (__tmp > 65535)
    78da:	6f 81       	ldd	r22, Y+7	; 0x07
    78dc:	78 85       	ldd	r23, Y+8	; 0x08
    78de:	89 85       	ldd	r24, Y+9	; 0x09
    78e0:	9a 85       	ldd	r25, Y+10	; 0x0a
    78e2:	20 e0       	ldi	r18, 0x00	; 0
    78e4:	3f ef       	ldi	r19, 0xFF	; 255
    78e6:	4f e7       	ldi	r20, 0x7F	; 127
    78e8:	57 e4       	ldi	r21, 0x47	; 71
    78ea:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    78ee:	18 16       	cp	r1, r24
    78f0:	4c f5       	brge	.+82     	; 0x7944 <HSTEP_U8SetAngDir+0xb22>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    78f2:	6b 85       	ldd	r22, Y+11	; 0x0b
    78f4:	7c 85       	ldd	r23, Y+12	; 0x0c
    78f6:	8d 85       	ldd	r24, Y+13	; 0x0d
    78f8:	9e 85       	ldd	r25, Y+14	; 0x0e
    78fa:	20 e0       	ldi	r18, 0x00	; 0
    78fc:	30 e0       	ldi	r19, 0x00	; 0
    78fe:	40 e2       	ldi	r20, 0x20	; 32
    7900:	51 e4       	ldi	r21, 0x41	; 65
    7902:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    7906:	dc 01       	movw	r26, r24
    7908:	cb 01       	movw	r24, r22
    790a:	bc 01       	movw	r22, r24
    790c:	cd 01       	movw	r24, r26
    790e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    7912:	dc 01       	movw	r26, r24
    7914:	cb 01       	movw	r24, r22
    7916:	9e 83       	std	Y+6, r25	; 0x06
    7918:	8d 83       	std	Y+5, r24	; 0x05
    791a:	0f c0       	rjmp	.+30     	; 0x793a <HSTEP_U8SetAngDir+0xb18>
    791c:	88 ec       	ldi	r24, 0xC8	; 200
    791e:	90 e0       	ldi	r25, 0x00	; 0
    7920:	9c 83       	std	Y+4, r25	; 0x04
    7922:	8b 83       	std	Y+3, r24	; 0x03
    7924:	8b 81       	ldd	r24, Y+3	; 0x03
    7926:	9c 81       	ldd	r25, Y+4	; 0x04
    7928:	01 97       	sbiw	r24, 0x01	; 1
    792a:	f1 f7       	brne	.-4      	; 0x7928 <HSTEP_U8SetAngDir+0xb06>
    792c:	9c 83       	std	Y+4, r25	; 0x04
    792e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    7930:	8d 81       	ldd	r24, Y+5	; 0x05
    7932:	9e 81       	ldd	r25, Y+6	; 0x06
    7934:	01 97       	sbiw	r24, 0x01	; 1
    7936:	9e 83       	std	Y+6, r25	; 0x06
    7938:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    793a:	8d 81       	ldd	r24, Y+5	; 0x05
    793c:	9e 81       	ldd	r25, Y+6	; 0x06
    793e:	00 97       	sbiw	r24, 0x00	; 0
    7940:	69 f7       	brne	.-38     	; 0x791c <HSTEP_U8SetAngDir+0xafa>
    7942:	14 c0       	rjmp	.+40     	; 0x796c <HSTEP_U8SetAngDir+0xb4a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    7944:	6f 81       	ldd	r22, Y+7	; 0x07
    7946:	78 85       	ldd	r23, Y+8	; 0x08
    7948:	89 85       	ldd	r24, Y+9	; 0x09
    794a:	9a 85       	ldd	r25, Y+10	; 0x0a
    794c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    7950:	dc 01       	movw	r26, r24
    7952:	cb 01       	movw	r24, r22
    7954:	9e 83       	std	Y+6, r25	; 0x06
    7956:	8d 83       	std	Y+5, r24	; 0x05
    7958:	8d 81       	ldd	r24, Y+5	; 0x05
    795a:	9e 81       	ldd	r25, Y+6	; 0x06
    795c:	9a 83       	std	Y+2, r25	; 0x02
    795e:	89 83       	std	Y+1, r24	; 0x01
    7960:	89 81       	ldd	r24, Y+1	; 0x01
    7962:	9a 81       	ldd	r25, Y+2	; 0x02
    7964:	01 97       	sbiw	r24, 0x01	; 1
    7966:	f1 f7       	brne	.-4      	; 0x7964 <HSTEP_U8SetAngDir+0xb42>
    7968:	9a 83       	std	Y+2, r25	; 0x02
    796a:	89 83       	std	Y+1, r24	; 0x01
									_delay_ms(10);
								}
								break;

			case STEP_DIR_ACW:	//Rotate Anti-Clock Wise
								for(Local_U16Counter = 0; Local_U16Counter < Local_U16Iterations; Local_U16Counter++)
    796c:	de 01       	movw	r26, r28
    796e:	af 58       	subi	r26, 0x8F	; 143
    7970:	bf 4f       	sbci	r27, 0xFF	; 255
    7972:	fe 01       	movw	r30, r28
    7974:	ef 58       	subi	r30, 0x8F	; 143
    7976:	ff 4f       	sbci	r31, 0xFF	; 255
    7978:	80 81       	ld	r24, Z
    797a:	91 81       	ldd	r25, Z+1	; 0x01
    797c:	01 96       	adiw	r24, 0x01	; 1
    797e:	8d 93       	st	X+, r24
    7980:	9c 93       	st	X, r25
    7982:	fe 01       	movw	r30, r28
    7984:	ef 58       	subi	r30, 0x8F	; 143
    7986:	ff 4f       	sbci	r31, 0xFF	; 255
    7988:	de 01       	movw	r26, r28
    798a:	ad 58       	subi	r26, 0x8D	; 141
    798c:	bf 4f       	sbci	r27, 0xFF	; 255
    798e:	20 81       	ld	r18, Z
    7990:	31 81       	ldd	r19, Z+1	; 0x01
    7992:	8d 91       	ld	r24, X+
    7994:	9c 91       	ld	r25, X
    7996:	11 97       	sbiw	r26, 0x01	; 1
    7998:	28 17       	cp	r18, r24
    799a:	39 07       	cpc	r19, r25
    799c:	08 f4       	brcc	.+2      	; 0x79a0 <HSTEP_U8SetAngDir+0xb7e>
    799e:	ce cd       	rjmp	.-1124   	; 0x753c <HSTEP_U8SetAngDir+0x71a>
								break;

			default:			/* Do Nothing */
								break;
		}
		Local_U8ErrorState = ERROR_STATE_OK;
    79a0:	fe 01       	movw	r30, r28
    79a2:	e9 58       	subi	r30, 0x89	; 137
    79a4:	ff 4f       	sbci	r31, 0xFF	; 255
    79a6:	81 e0       	ldi	r24, 0x01	; 1
    79a8:	80 83       	st	Z, r24
	}
	return Local_U8ErrorState;
    79aa:	fe 01       	movw	r30, r28
    79ac:	e9 58       	subi	r30, 0x89	; 137
    79ae:	ff 4f       	sbci	r31, 0xFF	; 255
    79b0:	80 81       	ld	r24, Z
}
    79b2:	c4 58       	subi	r28, 0x84	; 132
    79b4:	df 4f       	sbci	r29, 0xFF	; 255
    79b6:	0f b6       	in	r0, 0x3f	; 63
    79b8:	f8 94       	cli
    79ba:	de bf       	out	0x3e, r29	; 62
    79bc:	0f be       	out	0x3f, r0	; 63
    79be:	cd bf       	out	0x3d, r28	; 61
    79c0:	cf 91       	pop	r28
    79c2:	df 91       	pop	r29
    79c4:	1f 91       	pop	r17
    79c6:	0f 91       	pop	r16
    79c8:	08 95       	ret

000079ca <__udivmodqi4>:
    79ca:	99 1b       	sub	r25, r25
    79cc:	79 e0       	ldi	r23, 0x09	; 9
    79ce:	04 c0       	rjmp	.+8      	; 0x79d8 <__udivmodqi4_ep>

000079d0 <__udivmodqi4_loop>:
    79d0:	99 1f       	adc	r25, r25
    79d2:	96 17       	cp	r25, r22
    79d4:	08 f0       	brcs	.+2      	; 0x79d8 <__udivmodqi4_ep>
    79d6:	96 1b       	sub	r25, r22

000079d8 <__udivmodqi4_ep>:
    79d8:	88 1f       	adc	r24, r24
    79da:	7a 95       	dec	r23
    79dc:	c9 f7       	brne	.-14     	; 0x79d0 <__udivmodqi4_loop>
    79de:	80 95       	com	r24
    79e0:	08 95       	ret

000079e2 <__udivmodsi4>:
    79e2:	a1 e2       	ldi	r26, 0x21	; 33
    79e4:	1a 2e       	mov	r1, r26
    79e6:	aa 1b       	sub	r26, r26
    79e8:	bb 1b       	sub	r27, r27
    79ea:	fd 01       	movw	r30, r26
    79ec:	0d c0       	rjmp	.+26     	; 0x7a08 <__udivmodsi4_ep>

000079ee <__udivmodsi4_loop>:
    79ee:	aa 1f       	adc	r26, r26
    79f0:	bb 1f       	adc	r27, r27
    79f2:	ee 1f       	adc	r30, r30
    79f4:	ff 1f       	adc	r31, r31
    79f6:	a2 17       	cp	r26, r18
    79f8:	b3 07       	cpc	r27, r19
    79fa:	e4 07       	cpc	r30, r20
    79fc:	f5 07       	cpc	r31, r21
    79fe:	20 f0       	brcs	.+8      	; 0x7a08 <__udivmodsi4_ep>
    7a00:	a2 1b       	sub	r26, r18
    7a02:	b3 0b       	sbc	r27, r19
    7a04:	e4 0b       	sbc	r30, r20
    7a06:	f5 0b       	sbc	r31, r21

00007a08 <__udivmodsi4_ep>:
    7a08:	66 1f       	adc	r22, r22
    7a0a:	77 1f       	adc	r23, r23
    7a0c:	88 1f       	adc	r24, r24
    7a0e:	99 1f       	adc	r25, r25
    7a10:	1a 94       	dec	r1
    7a12:	69 f7       	brne	.-38     	; 0x79ee <__udivmodsi4_loop>
    7a14:	60 95       	com	r22
    7a16:	70 95       	com	r23
    7a18:	80 95       	com	r24
    7a1a:	90 95       	com	r25
    7a1c:	9b 01       	movw	r18, r22
    7a1e:	ac 01       	movw	r20, r24
    7a20:	bd 01       	movw	r22, r26
    7a22:	cf 01       	movw	r24, r30
    7a24:	08 95       	ret

00007a26 <__divmodsi4>:
    7a26:	97 fb       	bst	r25, 7
    7a28:	09 2e       	mov	r0, r25
    7a2a:	05 26       	eor	r0, r21
    7a2c:	0e d0       	rcall	.+28     	; 0x7a4a <__divmodsi4_neg1>
    7a2e:	57 fd       	sbrc	r21, 7
    7a30:	04 d0       	rcall	.+8      	; 0x7a3a <__divmodsi4_neg2>
    7a32:	d7 df       	rcall	.-82     	; 0x79e2 <__udivmodsi4>
    7a34:	0a d0       	rcall	.+20     	; 0x7a4a <__divmodsi4_neg1>
    7a36:	00 1c       	adc	r0, r0
    7a38:	38 f4       	brcc	.+14     	; 0x7a48 <__divmodsi4_exit>

00007a3a <__divmodsi4_neg2>:
    7a3a:	50 95       	com	r21
    7a3c:	40 95       	com	r20
    7a3e:	30 95       	com	r19
    7a40:	21 95       	neg	r18
    7a42:	3f 4f       	sbci	r19, 0xFF	; 255
    7a44:	4f 4f       	sbci	r20, 0xFF	; 255
    7a46:	5f 4f       	sbci	r21, 0xFF	; 255

00007a48 <__divmodsi4_exit>:
    7a48:	08 95       	ret

00007a4a <__divmodsi4_neg1>:
    7a4a:	f6 f7       	brtc	.-4      	; 0x7a48 <__divmodsi4_exit>
    7a4c:	90 95       	com	r25
    7a4e:	80 95       	com	r24
    7a50:	70 95       	com	r23
    7a52:	61 95       	neg	r22
    7a54:	7f 4f       	sbci	r23, 0xFF	; 255
    7a56:	8f 4f       	sbci	r24, 0xFF	; 255
    7a58:	9f 4f       	sbci	r25, 0xFF	; 255
    7a5a:	08 95       	ret

00007a5c <__prologue_saves__>:
    7a5c:	2f 92       	push	r2
    7a5e:	3f 92       	push	r3
    7a60:	4f 92       	push	r4
    7a62:	5f 92       	push	r5
    7a64:	6f 92       	push	r6
    7a66:	7f 92       	push	r7
    7a68:	8f 92       	push	r8
    7a6a:	9f 92       	push	r9
    7a6c:	af 92       	push	r10
    7a6e:	bf 92       	push	r11
    7a70:	cf 92       	push	r12
    7a72:	df 92       	push	r13
    7a74:	ef 92       	push	r14
    7a76:	ff 92       	push	r15
    7a78:	0f 93       	push	r16
    7a7a:	1f 93       	push	r17
    7a7c:	cf 93       	push	r28
    7a7e:	df 93       	push	r29
    7a80:	cd b7       	in	r28, 0x3d	; 61
    7a82:	de b7       	in	r29, 0x3e	; 62
    7a84:	ca 1b       	sub	r28, r26
    7a86:	db 0b       	sbc	r29, r27
    7a88:	0f b6       	in	r0, 0x3f	; 63
    7a8a:	f8 94       	cli
    7a8c:	de bf       	out	0x3e, r29	; 62
    7a8e:	0f be       	out	0x3f, r0	; 63
    7a90:	cd bf       	out	0x3d, r28	; 61
    7a92:	09 94       	ijmp

00007a94 <__epilogue_restores__>:
    7a94:	2a 88       	ldd	r2, Y+18	; 0x12
    7a96:	39 88       	ldd	r3, Y+17	; 0x11
    7a98:	48 88       	ldd	r4, Y+16	; 0x10
    7a9a:	5f 84       	ldd	r5, Y+15	; 0x0f
    7a9c:	6e 84       	ldd	r6, Y+14	; 0x0e
    7a9e:	7d 84       	ldd	r7, Y+13	; 0x0d
    7aa0:	8c 84       	ldd	r8, Y+12	; 0x0c
    7aa2:	9b 84       	ldd	r9, Y+11	; 0x0b
    7aa4:	aa 84       	ldd	r10, Y+10	; 0x0a
    7aa6:	b9 84       	ldd	r11, Y+9	; 0x09
    7aa8:	c8 84       	ldd	r12, Y+8	; 0x08
    7aaa:	df 80       	ldd	r13, Y+7	; 0x07
    7aac:	ee 80       	ldd	r14, Y+6	; 0x06
    7aae:	fd 80       	ldd	r15, Y+5	; 0x05
    7ab0:	0c 81       	ldd	r16, Y+4	; 0x04
    7ab2:	1b 81       	ldd	r17, Y+3	; 0x03
    7ab4:	aa 81       	ldd	r26, Y+2	; 0x02
    7ab6:	b9 81       	ldd	r27, Y+1	; 0x01
    7ab8:	ce 0f       	add	r28, r30
    7aba:	d1 1d       	adc	r29, r1
    7abc:	0f b6       	in	r0, 0x3f	; 63
    7abe:	f8 94       	cli
    7ac0:	de bf       	out	0x3e, r29	; 62
    7ac2:	0f be       	out	0x3f, r0	; 63
    7ac4:	cd bf       	out	0x3d, r28	; 61
    7ac6:	ed 01       	movw	r28, r26
    7ac8:	08 95       	ret
    7aca:	11 f4       	brne	.+4      	; 0x7ad0 <__epilogue_restores__+0x3c>
    7acc:	0e f4       	brtc	.+2      	; 0x7ad0 <__epilogue_restores__+0x3c>
    7ace:	4d c0       	rjmp	.+154    	; 0x7b6a <__fp_nan>
    7ad0:	3e c0       	rjmp	.+124    	; 0x7b4e <__fp_mpack>

00007ad2 <sqrt>:
    7ad2:	5d d0       	rcall	.+186    	; 0x7b8e <__fp_splitA>
    7ad4:	d0 f3       	brcs	.-12     	; 0x7aca <__epilogue_restores__+0x36>
    7ad6:	99 23       	and	r25, r25
    7ad8:	d9 f3       	breq	.-10     	; 0x7ad0 <__epilogue_restores__+0x3c>
    7ada:	ce f3       	brts	.-14     	; 0x7ace <__epilogue_restores__+0x3a>
    7adc:	9f 57       	subi	r25, 0x7F	; 127
    7ade:	55 0b       	sbc	r21, r21
    7ae0:	87 ff       	sbrs	r24, 7
    7ae2:	46 d0       	rcall	.+140    	; 0x7b70 <__fp_norm2>
    7ae4:	00 24       	eor	r0, r0
    7ae6:	a0 e6       	ldi	r26, 0x60	; 96
    7ae8:	40 ea       	ldi	r20, 0xA0	; 160
    7aea:	90 01       	movw	r18, r0
    7aec:	80 58       	subi	r24, 0x80	; 128
    7aee:	56 95       	lsr	r21
    7af0:	97 95       	ror	r25
    7af2:	28 f4       	brcc	.+10     	; 0x7afe <sqrt+0x2c>
    7af4:	80 5c       	subi	r24, 0xC0	; 192
    7af6:	66 0f       	add	r22, r22
    7af8:	77 1f       	adc	r23, r23
    7afa:	88 1f       	adc	r24, r24
    7afc:	20 f0       	brcs	.+8      	; 0x7b06 <sqrt+0x34>
    7afe:	26 17       	cp	r18, r22
    7b00:	37 07       	cpc	r19, r23
    7b02:	48 07       	cpc	r20, r24
    7b04:	30 f4       	brcc	.+12     	; 0x7b12 <sqrt+0x40>
    7b06:	62 1b       	sub	r22, r18
    7b08:	73 0b       	sbc	r23, r19
    7b0a:	84 0b       	sbc	r24, r20
    7b0c:	20 29       	or	r18, r0
    7b0e:	31 29       	or	r19, r1
    7b10:	4a 2b       	or	r20, r26
    7b12:	a6 95       	lsr	r26
    7b14:	17 94       	ror	r1
    7b16:	07 94       	ror	r0
    7b18:	20 25       	eor	r18, r0
    7b1a:	31 25       	eor	r19, r1
    7b1c:	4a 27       	eor	r20, r26
    7b1e:	58 f7       	brcc	.-42     	; 0x7af6 <sqrt+0x24>
    7b20:	66 0f       	add	r22, r22
    7b22:	77 1f       	adc	r23, r23
    7b24:	88 1f       	adc	r24, r24
    7b26:	20 f0       	brcs	.+8      	; 0x7b30 <sqrt+0x5e>
    7b28:	26 17       	cp	r18, r22
    7b2a:	37 07       	cpc	r19, r23
    7b2c:	48 07       	cpc	r20, r24
    7b2e:	30 f4       	brcc	.+12     	; 0x7b3c <sqrt+0x6a>
    7b30:	62 0b       	sbc	r22, r18
    7b32:	73 0b       	sbc	r23, r19
    7b34:	84 0b       	sbc	r24, r20
    7b36:	20 0d       	add	r18, r0
    7b38:	31 1d       	adc	r19, r1
    7b3a:	41 1d       	adc	r20, r1
    7b3c:	a0 95       	com	r26
    7b3e:	81 f7       	brne	.-32     	; 0x7b20 <sqrt+0x4e>
    7b40:	b9 01       	movw	r22, r18
    7b42:	84 2f       	mov	r24, r20
    7b44:	91 58       	subi	r25, 0x81	; 129
    7b46:	88 0f       	add	r24, r24
    7b48:	96 95       	lsr	r25
    7b4a:	87 95       	ror	r24
    7b4c:	08 95       	ret

00007b4e <__fp_mpack>:
    7b4e:	9f 3f       	cpi	r25, 0xFF	; 255
    7b50:	31 f0       	breq	.+12     	; 0x7b5e <__fp_mpack_finite+0xc>

00007b52 <__fp_mpack_finite>:
    7b52:	91 50       	subi	r25, 0x01	; 1
    7b54:	20 f4       	brcc	.+8      	; 0x7b5e <__fp_mpack_finite+0xc>
    7b56:	87 95       	ror	r24
    7b58:	77 95       	ror	r23
    7b5a:	67 95       	ror	r22
    7b5c:	b7 95       	ror	r27
    7b5e:	88 0f       	add	r24, r24
    7b60:	91 1d       	adc	r25, r1
    7b62:	96 95       	lsr	r25
    7b64:	87 95       	ror	r24
    7b66:	97 f9       	bld	r25, 7
    7b68:	08 95       	ret

00007b6a <__fp_nan>:
    7b6a:	9f ef       	ldi	r25, 0xFF	; 255
    7b6c:	80 ec       	ldi	r24, 0xC0	; 192
    7b6e:	08 95       	ret

00007b70 <__fp_norm2>:
    7b70:	91 50       	subi	r25, 0x01	; 1
    7b72:	50 40       	sbci	r21, 0x00	; 0
    7b74:	66 0f       	add	r22, r22
    7b76:	77 1f       	adc	r23, r23
    7b78:	88 1f       	adc	r24, r24
    7b7a:	d2 f7       	brpl	.-12     	; 0x7b70 <__fp_norm2>
    7b7c:	08 95       	ret

00007b7e <__fp_split3>:
    7b7e:	57 fd       	sbrc	r21, 7
    7b80:	90 58       	subi	r25, 0x80	; 128
    7b82:	44 0f       	add	r20, r20
    7b84:	55 1f       	adc	r21, r21
    7b86:	59 f0       	breq	.+22     	; 0x7b9e <__fp_splitA+0x10>
    7b88:	5f 3f       	cpi	r21, 0xFF	; 255
    7b8a:	71 f0       	breq	.+28     	; 0x7ba8 <__fp_splitA+0x1a>
    7b8c:	47 95       	ror	r20

00007b8e <__fp_splitA>:
    7b8e:	88 0f       	add	r24, r24
    7b90:	97 fb       	bst	r25, 7
    7b92:	99 1f       	adc	r25, r25
    7b94:	61 f0       	breq	.+24     	; 0x7bae <__fp_splitA+0x20>
    7b96:	9f 3f       	cpi	r25, 0xFF	; 255
    7b98:	79 f0       	breq	.+30     	; 0x7bb8 <__fp_splitA+0x2a>
    7b9a:	87 95       	ror	r24
    7b9c:	08 95       	ret
    7b9e:	12 16       	cp	r1, r18
    7ba0:	13 06       	cpc	r1, r19
    7ba2:	14 06       	cpc	r1, r20
    7ba4:	55 1f       	adc	r21, r21
    7ba6:	f2 cf       	rjmp	.-28     	; 0x7b8c <__fp_split3+0xe>
    7ba8:	46 95       	lsr	r20
    7baa:	f1 df       	rcall	.-30     	; 0x7b8e <__fp_splitA>
    7bac:	08 c0       	rjmp	.+16     	; 0x7bbe <__fp_splitA+0x30>
    7bae:	16 16       	cp	r1, r22
    7bb0:	17 06       	cpc	r1, r23
    7bb2:	18 06       	cpc	r1, r24
    7bb4:	99 1f       	adc	r25, r25
    7bb6:	f1 cf       	rjmp	.-30     	; 0x7b9a <__fp_splitA+0xc>
    7bb8:	86 95       	lsr	r24
    7bba:	71 05       	cpc	r23, r1
    7bbc:	61 05       	cpc	r22, r1
    7bbe:	08 94       	sec
    7bc0:	08 95       	ret

00007bc2 <_exit>:
    7bc2:	f8 94       	cli

00007bc4 <__stop_program>:
    7bc4:	ff cf       	rjmp	.-2      	; 0x7bc4 <__stop_program>
