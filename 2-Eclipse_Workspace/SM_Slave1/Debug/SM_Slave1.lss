
SM_Slave1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00006142  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000023a  00800060  00006142  000061d6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000b  0080029a  0080029a  00006410  2**0
                  ALLOC
  3 .stab         00004470  00000000  00000000  00006410  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000117a  00000000  00000000  0000a880  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  0000b9fa  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f0  00000000  00000000  0000bb9a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240c  00000000  00000000  0000bd8a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001377  00000000  00000000  0000e196  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d8  00000000  00000000  0000f50d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  000106e8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f3  00000000  00000000  000108a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000009ce  00000000  00000000  00010b9b  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00011569  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 0b 2f 	jmp	0x5e16	; 0x5e16 <__vector_10>
      2c:	0c 94 59 2f 	jmp	0x5eb2	; 0x5eb2 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	12 e0       	ldi	r17, 0x02	; 2
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 e4       	ldi	r30, 0x42	; 66
      68:	f1 e6       	ldi	r31, 0x61	; 97
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 39       	cpi	r26, 0x9A	; 154
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	12 e0       	ldi	r17, 0x02	; 2
      78:	aa e9       	ldi	r26, 0x9A	; 154
      7a:	b2 e0       	ldi	r27, 0x02	; 2
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a5 3a       	cpi	r26, 0xA5	; 165
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 9e 2f 	call	0x5f3c	; 0x5f3c <main>
      8a:	0c 94 9f 30 	jmp	0x613e	; 0x613e <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 ec 2f 	jmp	0x5fd8	; 0x5fd8 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a3 e7       	ldi	r26, 0x73	; 115
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 08 30 	jmp	0x6010	; 0x6010 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 f8 2f 	jmp	0x5ff0	; 0x5ff0 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 56 05 	call	0xaac	; 0xaac <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 14 30 	jmp	0x6028	; 0x6028 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 f8 2f 	jmp	0x5ff0	; 0x5ff0 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 56 05 	call	0xaac	; 0xaac <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 14 30 	jmp	0x6028	; 0x6028 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 ec 2f 	jmp	0x5fd8	; 0x5fd8 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	83 e7       	ldi	r24, 0x73	; 115
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 56 05 	call	0xaac	; 0xaac <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 08 30 	jmp	0x6010	; 0x6010 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 f4 2f 	jmp	0x5fe8	; 0x5fe8 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	63 e7       	ldi	r22, 0x73	; 115
     69c:	71 e0       	ldi	r23, 0x01	; 1
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 56 05 	call	0xaac	; 0xaac <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 10 30 	jmp	0x6020	; 0x6020 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 f8 2f 	jmp	0x5ff0	; 0x5ff0 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 a3 06 	call	0xd46	; 0xd46 <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 14 30 	jmp	0x6028	; 0x6028 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 f8 2f 	jmp	0x5ff0	; 0x5ff0 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 a3 06 	call	0xd46	; 0xd46 <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 14 30 	jmp	0x6028	; 0x6028 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 f8 2f 	jmp	0x5ff0	; 0x5ff0 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 a3 06 	call	0xd46	; 0xd46 <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 14 30 	jmp	0x6028	; 0x6028 <__epilogue_restores__+0x18>

000008aa <__floatsisf>:
     8aa:	a8 e0       	ldi	r26, 0x08	; 8
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 f5 2f 	jmp	0x5fea	; 0x5fea <__prologue_saves__+0x12>
     8b6:	9b 01       	movw	r18, r22
     8b8:	ac 01       	movw	r20, r24
     8ba:	83 e0       	ldi	r24, 0x03	; 3
     8bc:	89 83       	std	Y+1, r24	; 0x01
     8be:	da 01       	movw	r26, r20
     8c0:	c9 01       	movw	r24, r18
     8c2:	88 27       	eor	r24, r24
     8c4:	b7 fd       	sbrc	r27, 7
     8c6:	83 95       	inc	r24
     8c8:	99 27       	eor	r25, r25
     8ca:	aa 27       	eor	r26, r26
     8cc:	bb 27       	eor	r27, r27
     8ce:	b8 2e       	mov	r11, r24
     8d0:	21 15       	cp	r18, r1
     8d2:	31 05       	cpc	r19, r1
     8d4:	41 05       	cpc	r20, r1
     8d6:	51 05       	cpc	r21, r1
     8d8:	19 f4       	brne	.+6      	; 0x8e0 <__floatsisf+0x36>
     8da:	82 e0       	ldi	r24, 0x02	; 2
     8dc:	89 83       	std	Y+1, r24	; 0x01
     8de:	3a c0       	rjmp	.+116    	; 0x954 <__floatsisf+0xaa>
     8e0:	88 23       	and	r24, r24
     8e2:	a9 f0       	breq	.+42     	; 0x90e <__floatsisf+0x64>
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	80 e0       	ldi	r24, 0x00	; 0
     8e8:	38 07       	cpc	r19, r24
     8ea:	80 e0       	ldi	r24, 0x00	; 0
     8ec:	48 07       	cpc	r20, r24
     8ee:	80 e8       	ldi	r24, 0x80	; 128
     8f0:	58 07       	cpc	r21, r24
     8f2:	29 f4       	brne	.+10     	; 0x8fe <__floatsisf+0x54>
     8f4:	60 e0       	ldi	r22, 0x00	; 0
     8f6:	70 e0       	ldi	r23, 0x00	; 0
     8f8:	80 e0       	ldi	r24, 0x00	; 0
     8fa:	9f ec       	ldi	r25, 0xCF	; 207
     8fc:	30 c0       	rjmp	.+96     	; 0x95e <__floatsisf+0xb4>
     8fe:	ee 24       	eor	r14, r14
     900:	ff 24       	eor	r15, r15
     902:	87 01       	movw	r16, r14
     904:	e2 1a       	sub	r14, r18
     906:	f3 0a       	sbc	r15, r19
     908:	04 0b       	sbc	r16, r20
     90a:	15 0b       	sbc	r17, r21
     90c:	02 c0       	rjmp	.+4      	; 0x912 <__floatsisf+0x68>
     90e:	79 01       	movw	r14, r18
     910:	8a 01       	movw	r16, r20
     912:	8e e1       	ldi	r24, 0x1E	; 30
     914:	c8 2e       	mov	r12, r24
     916:	d1 2c       	mov	r13, r1
     918:	dc 82       	std	Y+4, r13	; 0x04
     91a:	cb 82       	std	Y+3, r12	; 0x03
     91c:	ed 82       	std	Y+5, r14	; 0x05
     91e:	fe 82       	std	Y+6, r15	; 0x06
     920:	0f 83       	std	Y+7, r16	; 0x07
     922:	18 87       	std	Y+8, r17	; 0x08
     924:	c8 01       	movw	r24, r16
     926:	b7 01       	movw	r22, r14
     928:	0e 94 07 05 	call	0xa0e	; 0xa0e <__clzsi2>
     92c:	01 97       	sbiw	r24, 0x01	; 1
     92e:	18 16       	cp	r1, r24
     930:	19 06       	cpc	r1, r25
     932:	84 f4       	brge	.+32     	; 0x954 <__floatsisf+0xaa>
     934:	08 2e       	mov	r0, r24
     936:	04 c0       	rjmp	.+8      	; 0x940 <__floatsisf+0x96>
     938:	ee 0c       	add	r14, r14
     93a:	ff 1c       	adc	r15, r15
     93c:	00 1f       	adc	r16, r16
     93e:	11 1f       	adc	r17, r17
     940:	0a 94       	dec	r0
     942:	d2 f7       	brpl	.-12     	; 0x938 <__floatsisf+0x8e>
     944:	ed 82       	std	Y+5, r14	; 0x05
     946:	fe 82       	std	Y+6, r15	; 0x06
     948:	0f 83       	std	Y+7, r16	; 0x07
     94a:	18 87       	std	Y+8, r17	; 0x08
     94c:	c8 1a       	sub	r12, r24
     94e:	d9 0a       	sbc	r13, r25
     950:	dc 82       	std	Y+4, r13	; 0x04
     952:	cb 82       	std	Y+3, r12	; 0x03
     954:	ba 82       	std	Y+2, r11	; 0x02
     956:	ce 01       	movw	r24, r28
     958:	01 96       	adiw	r24, 0x01	; 1
     95a:	0e 94 56 05 	call	0xaac	; 0xaac <__pack_f>
     95e:	28 96       	adiw	r28, 0x08	; 8
     960:	e9 e0       	ldi	r30, 0x09	; 9
     962:	0c 94 11 30 	jmp	0x6022	; 0x6022 <__epilogue_restores__+0x12>

00000966 <__fixsfsi>:
     966:	ac e0       	ldi	r26, 0x0C	; 12
     968:	b0 e0       	ldi	r27, 0x00	; 0
     96a:	e9 eb       	ldi	r30, 0xB9	; 185
     96c:	f4 e0       	ldi	r31, 0x04	; 4
     96e:	0c 94 fc 2f 	jmp	0x5ff8	; 0x5ff8 <__prologue_saves__+0x20>
     972:	69 83       	std	Y+1, r22	; 0x01
     974:	7a 83       	std	Y+2, r23	; 0x02
     976:	8b 83       	std	Y+3, r24	; 0x03
     978:	9c 83       	std	Y+4, r25	; 0x04
     97a:	ce 01       	movw	r24, r28
     97c:	01 96       	adiw	r24, 0x01	; 1
     97e:	be 01       	movw	r22, r28
     980:	6b 5f       	subi	r22, 0xFB	; 251
     982:	7f 4f       	sbci	r23, 0xFF	; 255
     984:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     988:	8d 81       	ldd	r24, Y+5	; 0x05
     98a:	82 30       	cpi	r24, 0x02	; 2
     98c:	61 f1       	breq	.+88     	; 0x9e6 <__fixsfsi+0x80>
     98e:	82 30       	cpi	r24, 0x02	; 2
     990:	50 f1       	brcs	.+84     	; 0x9e6 <__fixsfsi+0x80>
     992:	84 30       	cpi	r24, 0x04	; 4
     994:	21 f4       	brne	.+8      	; 0x99e <__fixsfsi+0x38>
     996:	8e 81       	ldd	r24, Y+6	; 0x06
     998:	88 23       	and	r24, r24
     99a:	51 f1       	breq	.+84     	; 0x9f0 <__fixsfsi+0x8a>
     99c:	2e c0       	rjmp	.+92     	; 0x9fa <__fixsfsi+0x94>
     99e:	2f 81       	ldd	r18, Y+7	; 0x07
     9a0:	38 85       	ldd	r19, Y+8	; 0x08
     9a2:	37 fd       	sbrc	r19, 7
     9a4:	20 c0       	rjmp	.+64     	; 0x9e6 <__fixsfsi+0x80>
     9a6:	6e 81       	ldd	r22, Y+6	; 0x06
     9a8:	2f 31       	cpi	r18, 0x1F	; 31
     9aa:	31 05       	cpc	r19, r1
     9ac:	1c f0       	brlt	.+6      	; 0x9b4 <__fixsfsi+0x4e>
     9ae:	66 23       	and	r22, r22
     9b0:	f9 f0       	breq	.+62     	; 0x9f0 <__fixsfsi+0x8a>
     9b2:	23 c0       	rjmp	.+70     	; 0x9fa <__fixsfsi+0x94>
     9b4:	8e e1       	ldi	r24, 0x1E	; 30
     9b6:	90 e0       	ldi	r25, 0x00	; 0
     9b8:	82 1b       	sub	r24, r18
     9ba:	93 0b       	sbc	r25, r19
     9bc:	29 85       	ldd	r18, Y+9	; 0x09
     9be:	3a 85       	ldd	r19, Y+10	; 0x0a
     9c0:	4b 85       	ldd	r20, Y+11	; 0x0b
     9c2:	5c 85       	ldd	r21, Y+12	; 0x0c
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__fixsfsi+0x68>
     9c6:	56 95       	lsr	r21
     9c8:	47 95       	ror	r20
     9ca:	37 95       	ror	r19
     9cc:	27 95       	ror	r18
     9ce:	8a 95       	dec	r24
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__fixsfsi+0x60>
     9d2:	66 23       	and	r22, r22
     9d4:	b1 f0       	breq	.+44     	; 0xa02 <__fixsfsi+0x9c>
     9d6:	50 95       	com	r21
     9d8:	40 95       	com	r20
     9da:	30 95       	com	r19
     9dc:	21 95       	neg	r18
     9de:	3f 4f       	sbci	r19, 0xFF	; 255
     9e0:	4f 4f       	sbci	r20, 0xFF	; 255
     9e2:	5f 4f       	sbci	r21, 0xFF	; 255
     9e4:	0e c0       	rjmp	.+28     	; 0xa02 <__fixsfsi+0x9c>
     9e6:	20 e0       	ldi	r18, 0x00	; 0
     9e8:	30 e0       	ldi	r19, 0x00	; 0
     9ea:	40 e0       	ldi	r20, 0x00	; 0
     9ec:	50 e0       	ldi	r21, 0x00	; 0
     9ee:	09 c0       	rjmp	.+18     	; 0xa02 <__fixsfsi+0x9c>
     9f0:	2f ef       	ldi	r18, 0xFF	; 255
     9f2:	3f ef       	ldi	r19, 0xFF	; 255
     9f4:	4f ef       	ldi	r20, 0xFF	; 255
     9f6:	5f e7       	ldi	r21, 0x7F	; 127
     9f8:	04 c0       	rjmp	.+8      	; 0xa02 <__fixsfsi+0x9c>
     9fa:	20 e0       	ldi	r18, 0x00	; 0
     9fc:	30 e0       	ldi	r19, 0x00	; 0
     9fe:	40 e0       	ldi	r20, 0x00	; 0
     a00:	50 e8       	ldi	r21, 0x80	; 128
     a02:	b9 01       	movw	r22, r18
     a04:	ca 01       	movw	r24, r20
     a06:	2c 96       	adiw	r28, 0x0c	; 12
     a08:	e2 e0       	ldi	r30, 0x02	; 2
     a0a:	0c 94 18 30 	jmp	0x6030	; 0x6030 <__epilogue_restores__+0x20>

00000a0e <__clzsi2>:
     a0e:	ef 92       	push	r14
     a10:	ff 92       	push	r15
     a12:	0f 93       	push	r16
     a14:	1f 93       	push	r17
     a16:	7b 01       	movw	r14, r22
     a18:	8c 01       	movw	r16, r24
     a1a:	80 e0       	ldi	r24, 0x00	; 0
     a1c:	e8 16       	cp	r14, r24
     a1e:	80 e0       	ldi	r24, 0x00	; 0
     a20:	f8 06       	cpc	r15, r24
     a22:	81 e0       	ldi	r24, 0x01	; 1
     a24:	08 07       	cpc	r16, r24
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	18 07       	cpc	r17, r24
     a2a:	88 f4       	brcc	.+34     	; 0xa4e <__clzsi2+0x40>
     a2c:	8f ef       	ldi	r24, 0xFF	; 255
     a2e:	e8 16       	cp	r14, r24
     a30:	f1 04       	cpc	r15, r1
     a32:	01 05       	cpc	r16, r1
     a34:	11 05       	cpc	r17, r1
     a36:	31 f0       	breq	.+12     	; 0xa44 <__clzsi2+0x36>
     a38:	28 f0       	brcs	.+10     	; 0xa44 <__clzsi2+0x36>
     a3a:	88 e0       	ldi	r24, 0x08	; 8
     a3c:	90 e0       	ldi	r25, 0x00	; 0
     a3e:	a0 e0       	ldi	r26, 0x00	; 0
     a40:	b0 e0       	ldi	r27, 0x00	; 0
     a42:	17 c0       	rjmp	.+46     	; 0xa72 <__clzsi2+0x64>
     a44:	80 e0       	ldi	r24, 0x00	; 0
     a46:	90 e0       	ldi	r25, 0x00	; 0
     a48:	a0 e0       	ldi	r26, 0x00	; 0
     a4a:	b0 e0       	ldi	r27, 0x00	; 0
     a4c:	12 c0       	rjmp	.+36     	; 0xa72 <__clzsi2+0x64>
     a4e:	80 e0       	ldi	r24, 0x00	; 0
     a50:	e8 16       	cp	r14, r24
     a52:	80 e0       	ldi	r24, 0x00	; 0
     a54:	f8 06       	cpc	r15, r24
     a56:	80 e0       	ldi	r24, 0x00	; 0
     a58:	08 07       	cpc	r16, r24
     a5a:	81 e0       	ldi	r24, 0x01	; 1
     a5c:	18 07       	cpc	r17, r24
     a5e:	28 f0       	brcs	.+10     	; 0xa6a <__clzsi2+0x5c>
     a60:	88 e1       	ldi	r24, 0x18	; 24
     a62:	90 e0       	ldi	r25, 0x00	; 0
     a64:	a0 e0       	ldi	r26, 0x00	; 0
     a66:	b0 e0       	ldi	r27, 0x00	; 0
     a68:	04 c0       	rjmp	.+8      	; 0xa72 <__clzsi2+0x64>
     a6a:	80 e1       	ldi	r24, 0x10	; 16
     a6c:	90 e0       	ldi	r25, 0x00	; 0
     a6e:	a0 e0       	ldi	r26, 0x00	; 0
     a70:	b0 e0       	ldi	r27, 0x00	; 0
     a72:	20 e2       	ldi	r18, 0x20	; 32
     a74:	30 e0       	ldi	r19, 0x00	; 0
     a76:	40 e0       	ldi	r20, 0x00	; 0
     a78:	50 e0       	ldi	r21, 0x00	; 0
     a7a:	28 1b       	sub	r18, r24
     a7c:	39 0b       	sbc	r19, r25
     a7e:	4a 0b       	sbc	r20, r26
     a80:	5b 0b       	sbc	r21, r27
     a82:	04 c0       	rjmp	.+8      	; 0xa8c <__clzsi2+0x7e>
     a84:	16 95       	lsr	r17
     a86:	07 95       	ror	r16
     a88:	f7 94       	ror	r15
     a8a:	e7 94       	ror	r14
     a8c:	8a 95       	dec	r24
     a8e:	d2 f7       	brpl	.-12     	; 0xa84 <__clzsi2+0x76>
     a90:	f7 01       	movw	r30, r14
     a92:	e5 58       	subi	r30, 0x85	; 133
     a94:	fe 4f       	sbci	r31, 0xFE	; 254
     a96:	80 81       	ld	r24, Z
     a98:	28 1b       	sub	r18, r24
     a9a:	31 09       	sbc	r19, r1
     a9c:	41 09       	sbc	r20, r1
     a9e:	51 09       	sbc	r21, r1
     aa0:	c9 01       	movw	r24, r18
     aa2:	1f 91       	pop	r17
     aa4:	0f 91       	pop	r16
     aa6:	ff 90       	pop	r15
     aa8:	ef 90       	pop	r14
     aaa:	08 95       	ret

00000aac <__pack_f>:
     aac:	df 92       	push	r13
     aae:	ef 92       	push	r14
     ab0:	ff 92       	push	r15
     ab2:	0f 93       	push	r16
     ab4:	1f 93       	push	r17
     ab6:	fc 01       	movw	r30, r24
     ab8:	e4 80       	ldd	r14, Z+4	; 0x04
     aba:	f5 80       	ldd	r15, Z+5	; 0x05
     abc:	06 81       	ldd	r16, Z+6	; 0x06
     abe:	17 81       	ldd	r17, Z+7	; 0x07
     ac0:	d1 80       	ldd	r13, Z+1	; 0x01
     ac2:	80 81       	ld	r24, Z
     ac4:	82 30       	cpi	r24, 0x02	; 2
     ac6:	48 f4       	brcc	.+18     	; 0xada <__pack_f+0x2e>
     ac8:	80 e0       	ldi	r24, 0x00	; 0
     aca:	90 e0       	ldi	r25, 0x00	; 0
     acc:	a0 e1       	ldi	r26, 0x10	; 16
     ace:	b0 e0       	ldi	r27, 0x00	; 0
     ad0:	e8 2a       	or	r14, r24
     ad2:	f9 2a       	or	r15, r25
     ad4:	0a 2b       	or	r16, r26
     ad6:	1b 2b       	or	r17, r27
     ad8:	a5 c0       	rjmp	.+330    	; 0xc24 <__pack_f+0x178>
     ada:	84 30       	cpi	r24, 0x04	; 4
     adc:	09 f4       	brne	.+2      	; 0xae0 <__pack_f+0x34>
     ade:	9f c0       	rjmp	.+318    	; 0xc1e <__pack_f+0x172>
     ae0:	82 30       	cpi	r24, 0x02	; 2
     ae2:	21 f4       	brne	.+8      	; 0xaec <__pack_f+0x40>
     ae4:	ee 24       	eor	r14, r14
     ae6:	ff 24       	eor	r15, r15
     ae8:	87 01       	movw	r16, r14
     aea:	05 c0       	rjmp	.+10     	; 0xaf6 <__pack_f+0x4a>
     aec:	e1 14       	cp	r14, r1
     aee:	f1 04       	cpc	r15, r1
     af0:	01 05       	cpc	r16, r1
     af2:	11 05       	cpc	r17, r1
     af4:	19 f4       	brne	.+6      	; 0xafc <__pack_f+0x50>
     af6:	e0 e0       	ldi	r30, 0x00	; 0
     af8:	f0 e0       	ldi	r31, 0x00	; 0
     afa:	96 c0       	rjmp	.+300    	; 0xc28 <__pack_f+0x17c>
     afc:	62 81       	ldd	r22, Z+2	; 0x02
     afe:	73 81       	ldd	r23, Z+3	; 0x03
     b00:	9f ef       	ldi	r25, 0xFF	; 255
     b02:	62 38       	cpi	r22, 0x82	; 130
     b04:	79 07       	cpc	r23, r25
     b06:	0c f0       	brlt	.+2      	; 0xb0a <__pack_f+0x5e>
     b08:	5b c0       	rjmp	.+182    	; 0xbc0 <__pack_f+0x114>
     b0a:	22 e8       	ldi	r18, 0x82	; 130
     b0c:	3f ef       	ldi	r19, 0xFF	; 255
     b0e:	26 1b       	sub	r18, r22
     b10:	37 0b       	sbc	r19, r23
     b12:	2a 31       	cpi	r18, 0x1A	; 26
     b14:	31 05       	cpc	r19, r1
     b16:	2c f0       	brlt	.+10     	; 0xb22 <__pack_f+0x76>
     b18:	20 e0       	ldi	r18, 0x00	; 0
     b1a:	30 e0       	ldi	r19, 0x00	; 0
     b1c:	40 e0       	ldi	r20, 0x00	; 0
     b1e:	50 e0       	ldi	r21, 0x00	; 0
     b20:	2a c0       	rjmp	.+84     	; 0xb76 <__pack_f+0xca>
     b22:	b8 01       	movw	r22, r16
     b24:	a7 01       	movw	r20, r14
     b26:	02 2e       	mov	r0, r18
     b28:	04 c0       	rjmp	.+8      	; 0xb32 <__pack_f+0x86>
     b2a:	76 95       	lsr	r23
     b2c:	67 95       	ror	r22
     b2e:	57 95       	ror	r21
     b30:	47 95       	ror	r20
     b32:	0a 94       	dec	r0
     b34:	d2 f7       	brpl	.-12     	; 0xb2a <__pack_f+0x7e>
     b36:	81 e0       	ldi	r24, 0x01	; 1
     b38:	90 e0       	ldi	r25, 0x00	; 0
     b3a:	a0 e0       	ldi	r26, 0x00	; 0
     b3c:	b0 e0       	ldi	r27, 0x00	; 0
     b3e:	04 c0       	rjmp	.+8      	; 0xb48 <__pack_f+0x9c>
     b40:	88 0f       	add	r24, r24
     b42:	99 1f       	adc	r25, r25
     b44:	aa 1f       	adc	r26, r26
     b46:	bb 1f       	adc	r27, r27
     b48:	2a 95       	dec	r18
     b4a:	d2 f7       	brpl	.-12     	; 0xb40 <__pack_f+0x94>
     b4c:	01 97       	sbiw	r24, 0x01	; 1
     b4e:	a1 09       	sbc	r26, r1
     b50:	b1 09       	sbc	r27, r1
     b52:	8e 21       	and	r24, r14
     b54:	9f 21       	and	r25, r15
     b56:	a0 23       	and	r26, r16
     b58:	b1 23       	and	r27, r17
     b5a:	00 97       	sbiw	r24, 0x00	; 0
     b5c:	a1 05       	cpc	r26, r1
     b5e:	b1 05       	cpc	r27, r1
     b60:	21 f0       	breq	.+8      	; 0xb6a <__pack_f+0xbe>
     b62:	81 e0       	ldi	r24, 0x01	; 1
     b64:	90 e0       	ldi	r25, 0x00	; 0
     b66:	a0 e0       	ldi	r26, 0x00	; 0
     b68:	b0 e0       	ldi	r27, 0x00	; 0
     b6a:	9a 01       	movw	r18, r20
     b6c:	ab 01       	movw	r20, r22
     b6e:	28 2b       	or	r18, r24
     b70:	39 2b       	or	r19, r25
     b72:	4a 2b       	or	r20, r26
     b74:	5b 2b       	or	r21, r27
     b76:	da 01       	movw	r26, r20
     b78:	c9 01       	movw	r24, r18
     b7a:	8f 77       	andi	r24, 0x7F	; 127
     b7c:	90 70       	andi	r25, 0x00	; 0
     b7e:	a0 70       	andi	r26, 0x00	; 0
     b80:	b0 70       	andi	r27, 0x00	; 0
     b82:	80 34       	cpi	r24, 0x40	; 64
     b84:	91 05       	cpc	r25, r1
     b86:	a1 05       	cpc	r26, r1
     b88:	b1 05       	cpc	r27, r1
     b8a:	39 f4       	brne	.+14     	; 0xb9a <__pack_f+0xee>
     b8c:	27 ff       	sbrs	r18, 7
     b8e:	09 c0       	rjmp	.+18     	; 0xba2 <__pack_f+0xf6>
     b90:	20 5c       	subi	r18, 0xC0	; 192
     b92:	3f 4f       	sbci	r19, 0xFF	; 255
     b94:	4f 4f       	sbci	r20, 0xFF	; 255
     b96:	5f 4f       	sbci	r21, 0xFF	; 255
     b98:	04 c0       	rjmp	.+8      	; 0xba2 <__pack_f+0xf6>
     b9a:	21 5c       	subi	r18, 0xC1	; 193
     b9c:	3f 4f       	sbci	r19, 0xFF	; 255
     b9e:	4f 4f       	sbci	r20, 0xFF	; 255
     ba0:	5f 4f       	sbci	r21, 0xFF	; 255
     ba2:	e0 e0       	ldi	r30, 0x00	; 0
     ba4:	f0 e0       	ldi	r31, 0x00	; 0
     ba6:	20 30       	cpi	r18, 0x00	; 0
     ba8:	a0 e0       	ldi	r26, 0x00	; 0
     baa:	3a 07       	cpc	r19, r26
     bac:	a0 e0       	ldi	r26, 0x00	; 0
     bae:	4a 07       	cpc	r20, r26
     bb0:	a0 e4       	ldi	r26, 0x40	; 64
     bb2:	5a 07       	cpc	r21, r26
     bb4:	10 f0       	brcs	.+4      	; 0xbba <__pack_f+0x10e>
     bb6:	e1 e0       	ldi	r30, 0x01	; 1
     bb8:	f0 e0       	ldi	r31, 0x00	; 0
     bba:	79 01       	movw	r14, r18
     bbc:	8a 01       	movw	r16, r20
     bbe:	27 c0       	rjmp	.+78     	; 0xc0e <__pack_f+0x162>
     bc0:	60 38       	cpi	r22, 0x80	; 128
     bc2:	71 05       	cpc	r23, r1
     bc4:	64 f5       	brge	.+88     	; 0xc1e <__pack_f+0x172>
     bc6:	fb 01       	movw	r30, r22
     bc8:	e1 58       	subi	r30, 0x81	; 129
     bca:	ff 4f       	sbci	r31, 0xFF	; 255
     bcc:	d8 01       	movw	r26, r16
     bce:	c7 01       	movw	r24, r14
     bd0:	8f 77       	andi	r24, 0x7F	; 127
     bd2:	90 70       	andi	r25, 0x00	; 0
     bd4:	a0 70       	andi	r26, 0x00	; 0
     bd6:	b0 70       	andi	r27, 0x00	; 0
     bd8:	80 34       	cpi	r24, 0x40	; 64
     bda:	91 05       	cpc	r25, r1
     bdc:	a1 05       	cpc	r26, r1
     bde:	b1 05       	cpc	r27, r1
     be0:	39 f4       	brne	.+14     	; 0xbf0 <__pack_f+0x144>
     be2:	e7 fe       	sbrs	r14, 7
     be4:	0d c0       	rjmp	.+26     	; 0xc00 <__pack_f+0x154>
     be6:	80 e4       	ldi	r24, 0x40	; 64
     be8:	90 e0       	ldi	r25, 0x00	; 0
     bea:	a0 e0       	ldi	r26, 0x00	; 0
     bec:	b0 e0       	ldi	r27, 0x00	; 0
     bee:	04 c0       	rjmp	.+8      	; 0xbf8 <__pack_f+0x14c>
     bf0:	8f e3       	ldi	r24, 0x3F	; 63
     bf2:	90 e0       	ldi	r25, 0x00	; 0
     bf4:	a0 e0       	ldi	r26, 0x00	; 0
     bf6:	b0 e0       	ldi	r27, 0x00	; 0
     bf8:	e8 0e       	add	r14, r24
     bfa:	f9 1e       	adc	r15, r25
     bfc:	0a 1f       	adc	r16, r26
     bfe:	1b 1f       	adc	r17, r27
     c00:	17 ff       	sbrs	r17, 7
     c02:	05 c0       	rjmp	.+10     	; 0xc0e <__pack_f+0x162>
     c04:	16 95       	lsr	r17
     c06:	07 95       	ror	r16
     c08:	f7 94       	ror	r15
     c0a:	e7 94       	ror	r14
     c0c:	31 96       	adiw	r30, 0x01	; 1
     c0e:	87 e0       	ldi	r24, 0x07	; 7
     c10:	16 95       	lsr	r17
     c12:	07 95       	ror	r16
     c14:	f7 94       	ror	r15
     c16:	e7 94       	ror	r14
     c18:	8a 95       	dec	r24
     c1a:	d1 f7       	brne	.-12     	; 0xc10 <__pack_f+0x164>
     c1c:	05 c0       	rjmp	.+10     	; 0xc28 <__pack_f+0x17c>
     c1e:	ee 24       	eor	r14, r14
     c20:	ff 24       	eor	r15, r15
     c22:	87 01       	movw	r16, r14
     c24:	ef ef       	ldi	r30, 0xFF	; 255
     c26:	f0 e0       	ldi	r31, 0x00	; 0
     c28:	6e 2f       	mov	r22, r30
     c2a:	67 95       	ror	r22
     c2c:	66 27       	eor	r22, r22
     c2e:	67 95       	ror	r22
     c30:	90 2f       	mov	r25, r16
     c32:	9f 77       	andi	r25, 0x7F	; 127
     c34:	d7 94       	ror	r13
     c36:	dd 24       	eor	r13, r13
     c38:	d7 94       	ror	r13
     c3a:	8e 2f       	mov	r24, r30
     c3c:	86 95       	lsr	r24
     c3e:	49 2f       	mov	r20, r25
     c40:	46 2b       	or	r20, r22
     c42:	58 2f       	mov	r21, r24
     c44:	5d 29       	or	r21, r13
     c46:	b7 01       	movw	r22, r14
     c48:	ca 01       	movw	r24, r20
     c4a:	1f 91       	pop	r17
     c4c:	0f 91       	pop	r16
     c4e:	ff 90       	pop	r15
     c50:	ef 90       	pop	r14
     c52:	df 90       	pop	r13
     c54:	08 95       	ret

00000c56 <__unpack_f>:
     c56:	fc 01       	movw	r30, r24
     c58:	db 01       	movw	r26, r22
     c5a:	40 81       	ld	r20, Z
     c5c:	51 81       	ldd	r21, Z+1	; 0x01
     c5e:	22 81       	ldd	r18, Z+2	; 0x02
     c60:	62 2f       	mov	r22, r18
     c62:	6f 77       	andi	r22, 0x7F	; 127
     c64:	70 e0       	ldi	r23, 0x00	; 0
     c66:	22 1f       	adc	r18, r18
     c68:	22 27       	eor	r18, r18
     c6a:	22 1f       	adc	r18, r18
     c6c:	93 81       	ldd	r25, Z+3	; 0x03
     c6e:	89 2f       	mov	r24, r25
     c70:	88 0f       	add	r24, r24
     c72:	82 2b       	or	r24, r18
     c74:	28 2f       	mov	r18, r24
     c76:	30 e0       	ldi	r19, 0x00	; 0
     c78:	99 1f       	adc	r25, r25
     c7a:	99 27       	eor	r25, r25
     c7c:	99 1f       	adc	r25, r25
     c7e:	11 96       	adiw	r26, 0x01	; 1
     c80:	9c 93       	st	X, r25
     c82:	11 97       	sbiw	r26, 0x01	; 1
     c84:	21 15       	cp	r18, r1
     c86:	31 05       	cpc	r19, r1
     c88:	a9 f5       	brne	.+106    	; 0xcf4 <__unpack_f+0x9e>
     c8a:	41 15       	cp	r20, r1
     c8c:	51 05       	cpc	r21, r1
     c8e:	61 05       	cpc	r22, r1
     c90:	71 05       	cpc	r23, r1
     c92:	11 f4       	brne	.+4      	; 0xc98 <__unpack_f+0x42>
     c94:	82 e0       	ldi	r24, 0x02	; 2
     c96:	37 c0       	rjmp	.+110    	; 0xd06 <__unpack_f+0xb0>
     c98:	82 e8       	ldi	r24, 0x82	; 130
     c9a:	9f ef       	ldi	r25, 0xFF	; 255
     c9c:	13 96       	adiw	r26, 0x03	; 3
     c9e:	9c 93       	st	X, r25
     ca0:	8e 93       	st	-X, r24
     ca2:	12 97       	sbiw	r26, 0x02	; 2
     ca4:	9a 01       	movw	r18, r20
     ca6:	ab 01       	movw	r20, r22
     ca8:	67 e0       	ldi	r22, 0x07	; 7
     caa:	22 0f       	add	r18, r18
     cac:	33 1f       	adc	r19, r19
     cae:	44 1f       	adc	r20, r20
     cb0:	55 1f       	adc	r21, r21
     cb2:	6a 95       	dec	r22
     cb4:	d1 f7       	brne	.-12     	; 0xcaa <__unpack_f+0x54>
     cb6:	83 e0       	ldi	r24, 0x03	; 3
     cb8:	8c 93       	st	X, r24
     cba:	0d c0       	rjmp	.+26     	; 0xcd6 <__unpack_f+0x80>
     cbc:	22 0f       	add	r18, r18
     cbe:	33 1f       	adc	r19, r19
     cc0:	44 1f       	adc	r20, r20
     cc2:	55 1f       	adc	r21, r21
     cc4:	12 96       	adiw	r26, 0x02	; 2
     cc6:	8d 91       	ld	r24, X+
     cc8:	9c 91       	ld	r25, X
     cca:	13 97       	sbiw	r26, 0x03	; 3
     ccc:	01 97       	sbiw	r24, 0x01	; 1
     cce:	13 96       	adiw	r26, 0x03	; 3
     cd0:	9c 93       	st	X, r25
     cd2:	8e 93       	st	-X, r24
     cd4:	12 97       	sbiw	r26, 0x02	; 2
     cd6:	20 30       	cpi	r18, 0x00	; 0
     cd8:	80 e0       	ldi	r24, 0x00	; 0
     cda:	38 07       	cpc	r19, r24
     cdc:	80 e0       	ldi	r24, 0x00	; 0
     cde:	48 07       	cpc	r20, r24
     ce0:	80 e4       	ldi	r24, 0x40	; 64
     ce2:	58 07       	cpc	r21, r24
     ce4:	58 f3       	brcs	.-42     	; 0xcbc <__unpack_f+0x66>
     ce6:	14 96       	adiw	r26, 0x04	; 4
     ce8:	2d 93       	st	X+, r18
     cea:	3d 93       	st	X+, r19
     cec:	4d 93       	st	X+, r20
     cee:	5c 93       	st	X, r21
     cf0:	17 97       	sbiw	r26, 0x07	; 7
     cf2:	08 95       	ret
     cf4:	2f 3f       	cpi	r18, 0xFF	; 255
     cf6:	31 05       	cpc	r19, r1
     cf8:	79 f4       	brne	.+30     	; 0xd18 <__unpack_f+0xc2>
     cfa:	41 15       	cp	r20, r1
     cfc:	51 05       	cpc	r21, r1
     cfe:	61 05       	cpc	r22, r1
     d00:	71 05       	cpc	r23, r1
     d02:	19 f4       	brne	.+6      	; 0xd0a <__unpack_f+0xb4>
     d04:	84 e0       	ldi	r24, 0x04	; 4
     d06:	8c 93       	st	X, r24
     d08:	08 95       	ret
     d0a:	64 ff       	sbrs	r22, 4
     d0c:	03 c0       	rjmp	.+6      	; 0xd14 <__unpack_f+0xbe>
     d0e:	81 e0       	ldi	r24, 0x01	; 1
     d10:	8c 93       	st	X, r24
     d12:	12 c0       	rjmp	.+36     	; 0xd38 <__unpack_f+0xe2>
     d14:	1c 92       	st	X, r1
     d16:	10 c0       	rjmp	.+32     	; 0xd38 <__unpack_f+0xe2>
     d18:	2f 57       	subi	r18, 0x7F	; 127
     d1a:	30 40       	sbci	r19, 0x00	; 0
     d1c:	13 96       	adiw	r26, 0x03	; 3
     d1e:	3c 93       	st	X, r19
     d20:	2e 93       	st	-X, r18
     d22:	12 97       	sbiw	r26, 0x02	; 2
     d24:	83 e0       	ldi	r24, 0x03	; 3
     d26:	8c 93       	st	X, r24
     d28:	87 e0       	ldi	r24, 0x07	; 7
     d2a:	44 0f       	add	r20, r20
     d2c:	55 1f       	adc	r21, r21
     d2e:	66 1f       	adc	r22, r22
     d30:	77 1f       	adc	r23, r23
     d32:	8a 95       	dec	r24
     d34:	d1 f7       	brne	.-12     	; 0xd2a <__unpack_f+0xd4>
     d36:	70 64       	ori	r23, 0x40	; 64
     d38:	14 96       	adiw	r26, 0x04	; 4
     d3a:	4d 93       	st	X+, r20
     d3c:	5d 93       	st	X+, r21
     d3e:	6d 93       	st	X+, r22
     d40:	7c 93       	st	X, r23
     d42:	17 97       	sbiw	r26, 0x07	; 7
     d44:	08 95       	ret

00000d46 <__fpcmp_parts_f>:
     d46:	1f 93       	push	r17
     d48:	dc 01       	movw	r26, r24
     d4a:	fb 01       	movw	r30, r22
     d4c:	9c 91       	ld	r25, X
     d4e:	92 30       	cpi	r25, 0x02	; 2
     d50:	08 f4       	brcc	.+2      	; 0xd54 <__fpcmp_parts_f+0xe>
     d52:	47 c0       	rjmp	.+142    	; 0xde2 <__fpcmp_parts_f+0x9c>
     d54:	80 81       	ld	r24, Z
     d56:	82 30       	cpi	r24, 0x02	; 2
     d58:	08 f4       	brcc	.+2      	; 0xd5c <__fpcmp_parts_f+0x16>
     d5a:	43 c0       	rjmp	.+134    	; 0xde2 <__fpcmp_parts_f+0x9c>
     d5c:	94 30       	cpi	r25, 0x04	; 4
     d5e:	51 f4       	brne	.+20     	; 0xd74 <__fpcmp_parts_f+0x2e>
     d60:	11 96       	adiw	r26, 0x01	; 1
     d62:	1c 91       	ld	r17, X
     d64:	84 30       	cpi	r24, 0x04	; 4
     d66:	99 f5       	brne	.+102    	; 0xdce <__fpcmp_parts_f+0x88>
     d68:	81 81       	ldd	r24, Z+1	; 0x01
     d6a:	68 2f       	mov	r22, r24
     d6c:	70 e0       	ldi	r23, 0x00	; 0
     d6e:	61 1b       	sub	r22, r17
     d70:	71 09       	sbc	r23, r1
     d72:	3f c0       	rjmp	.+126    	; 0xdf2 <__fpcmp_parts_f+0xac>
     d74:	84 30       	cpi	r24, 0x04	; 4
     d76:	21 f0       	breq	.+8      	; 0xd80 <__fpcmp_parts_f+0x3a>
     d78:	92 30       	cpi	r25, 0x02	; 2
     d7a:	31 f4       	brne	.+12     	; 0xd88 <__fpcmp_parts_f+0x42>
     d7c:	82 30       	cpi	r24, 0x02	; 2
     d7e:	b9 f1       	breq	.+110    	; 0xdee <__fpcmp_parts_f+0xa8>
     d80:	81 81       	ldd	r24, Z+1	; 0x01
     d82:	88 23       	and	r24, r24
     d84:	89 f1       	breq	.+98     	; 0xde8 <__fpcmp_parts_f+0xa2>
     d86:	2d c0       	rjmp	.+90     	; 0xde2 <__fpcmp_parts_f+0x9c>
     d88:	11 96       	adiw	r26, 0x01	; 1
     d8a:	1c 91       	ld	r17, X
     d8c:	11 97       	sbiw	r26, 0x01	; 1
     d8e:	82 30       	cpi	r24, 0x02	; 2
     d90:	f1 f0       	breq	.+60     	; 0xdce <__fpcmp_parts_f+0x88>
     d92:	81 81       	ldd	r24, Z+1	; 0x01
     d94:	18 17       	cp	r17, r24
     d96:	d9 f4       	brne	.+54     	; 0xdce <__fpcmp_parts_f+0x88>
     d98:	12 96       	adiw	r26, 0x02	; 2
     d9a:	2d 91       	ld	r18, X+
     d9c:	3c 91       	ld	r19, X
     d9e:	13 97       	sbiw	r26, 0x03	; 3
     da0:	82 81       	ldd	r24, Z+2	; 0x02
     da2:	93 81       	ldd	r25, Z+3	; 0x03
     da4:	82 17       	cp	r24, r18
     da6:	93 07       	cpc	r25, r19
     da8:	94 f0       	brlt	.+36     	; 0xdce <__fpcmp_parts_f+0x88>
     daa:	28 17       	cp	r18, r24
     dac:	39 07       	cpc	r19, r25
     dae:	bc f0       	brlt	.+46     	; 0xdde <__fpcmp_parts_f+0x98>
     db0:	14 96       	adiw	r26, 0x04	; 4
     db2:	8d 91       	ld	r24, X+
     db4:	9d 91       	ld	r25, X+
     db6:	0d 90       	ld	r0, X+
     db8:	bc 91       	ld	r27, X
     dba:	a0 2d       	mov	r26, r0
     dbc:	24 81       	ldd	r18, Z+4	; 0x04
     dbe:	35 81       	ldd	r19, Z+5	; 0x05
     dc0:	46 81       	ldd	r20, Z+6	; 0x06
     dc2:	57 81       	ldd	r21, Z+7	; 0x07
     dc4:	28 17       	cp	r18, r24
     dc6:	39 07       	cpc	r19, r25
     dc8:	4a 07       	cpc	r20, r26
     dca:	5b 07       	cpc	r21, r27
     dcc:	18 f4       	brcc	.+6      	; 0xdd4 <__fpcmp_parts_f+0x8e>
     dce:	11 23       	and	r17, r17
     dd0:	41 f0       	breq	.+16     	; 0xde2 <__fpcmp_parts_f+0x9c>
     dd2:	0a c0       	rjmp	.+20     	; 0xde8 <__fpcmp_parts_f+0xa2>
     dd4:	82 17       	cp	r24, r18
     dd6:	93 07       	cpc	r25, r19
     dd8:	a4 07       	cpc	r26, r20
     dda:	b5 07       	cpc	r27, r21
     ddc:	40 f4       	brcc	.+16     	; 0xdee <__fpcmp_parts_f+0xa8>
     dde:	11 23       	and	r17, r17
     de0:	19 f0       	breq	.+6      	; 0xde8 <__fpcmp_parts_f+0xa2>
     de2:	61 e0       	ldi	r22, 0x01	; 1
     de4:	70 e0       	ldi	r23, 0x00	; 0
     de6:	05 c0       	rjmp	.+10     	; 0xdf2 <__fpcmp_parts_f+0xac>
     de8:	6f ef       	ldi	r22, 0xFF	; 255
     dea:	7f ef       	ldi	r23, 0xFF	; 255
     dec:	02 c0       	rjmp	.+4      	; 0xdf2 <__fpcmp_parts_f+0xac>
     dee:	60 e0       	ldi	r22, 0x00	; 0
     df0:	70 e0       	ldi	r23, 0x00	; 0
     df2:	cb 01       	movw	r24, r22
     df4:	1f 91       	pop	r17
     df6:	08 95       	ret

00000df8 <DIO_U8SetPinDirection>:
#include "DIO_Interface.h"
#include "DIO_Private.h"
#include "DIO_Config.h"

u8 DIO_U8SetPinDirection(u8 Copy_U8PortNumb,u8 Copy_U8PinNumb,u8 Copy_U8Directon)
{
     df8:	df 93       	push	r29
     dfa:	cf 93       	push	r28
     dfc:	cd b7       	in	r28, 0x3d	; 61
     dfe:	de b7       	in	r29, 0x3e	; 62
     e00:	2a 97       	sbiw	r28, 0x0a	; 10
     e02:	0f b6       	in	r0, 0x3f	; 63
     e04:	f8 94       	cli
     e06:	de bf       	out	0x3e, r29	; 62
     e08:	0f be       	out	0x3f, r0	; 63
     e0a:	cd bf       	out	0x3d, r28	; 61
     e0c:	8a 83       	std	Y+2, r24	; 0x02
     e0e:	6b 83       	std	Y+3, r22	; 0x03
     e10:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_U8ErrorState=ERROR_STATE_NOK;
     e12:	19 82       	std	Y+1, r1	; 0x01
	if((Copy_U8PortNumb <= DIO_PORTD) && (Copy_U8PinNumb <= DIO_PIN7) &&(Copy_U8Directon <= DIO_PIN_OUT))
     e14:	8a 81       	ldd	r24, Y+2	; 0x02
     e16:	84 30       	cpi	r24, 0x04	; 4
     e18:	08 f0       	brcs	.+2      	; 0xe1c <DIO_U8SetPinDirection+0x24>
     e1a:	fb c0       	rjmp	.+502    	; 0x1012 <DIO_U8SetPinDirection+0x21a>
     e1c:	8b 81       	ldd	r24, Y+3	; 0x03
     e1e:	88 30       	cpi	r24, 0x08	; 8
     e20:	08 f0       	brcs	.+2      	; 0xe24 <DIO_U8SetPinDirection+0x2c>
     e22:	f7 c0       	rjmp	.+494    	; 0x1012 <DIO_U8SetPinDirection+0x21a>
     e24:	8c 81       	ldd	r24, Y+4	; 0x04
     e26:	82 30       	cpi	r24, 0x02	; 2
     e28:	08 f0       	brcs	.+2      	; 0xe2c <DIO_U8SetPinDirection+0x34>
     e2a:	f3 c0       	rjmp	.+486    	; 0x1012 <DIO_U8SetPinDirection+0x21a>
	{
		switch(Copy_U8Directon)
     e2c:	8c 81       	ldd	r24, Y+4	; 0x04
     e2e:	28 2f       	mov	r18, r24
     e30:	30 e0       	ldi	r19, 0x00	; 0
     e32:	3a 87       	std	Y+10, r19	; 0x0a
     e34:	29 87       	std	Y+9, r18	; 0x09
     e36:	89 85       	ldd	r24, Y+9	; 0x09
     e38:	9a 85       	ldd	r25, Y+10	; 0x0a
     e3a:	00 97       	sbiw	r24, 0x00	; 0
     e3c:	09 f4       	brne	.+2      	; 0xe40 <DIO_U8SetPinDirection+0x48>
     e3e:	75 c0       	rjmp	.+234    	; 0xf2a <DIO_U8SetPinDirection+0x132>
     e40:	29 85       	ldd	r18, Y+9	; 0x09
     e42:	3a 85       	ldd	r19, Y+10	; 0x0a
     e44:	21 30       	cpi	r18, 0x01	; 1
     e46:	31 05       	cpc	r19, r1
     e48:	09 f0       	breq	.+2      	; 0xe4c <DIO_U8SetPinDirection+0x54>
     e4a:	e5 c0       	rjmp	.+458    	; 0x1016 <DIO_U8SetPinDirection+0x21e>
		{
			case DIO_PIN_OUT:
			switch(Copy_U8PortNumb)
     e4c:	8a 81       	ldd	r24, Y+2	; 0x02
     e4e:	28 2f       	mov	r18, r24
     e50:	30 e0       	ldi	r19, 0x00	; 0
     e52:	38 87       	std	Y+8, r19	; 0x08
     e54:	2f 83       	std	Y+7, r18	; 0x07
     e56:	8f 81       	ldd	r24, Y+7	; 0x07
     e58:	98 85       	ldd	r25, Y+8	; 0x08
     e5a:	81 30       	cpi	r24, 0x01	; 1
     e5c:	91 05       	cpc	r25, r1
     e5e:	49 f1       	breq	.+82     	; 0xeb2 <DIO_U8SetPinDirection+0xba>
     e60:	2f 81       	ldd	r18, Y+7	; 0x07
     e62:	38 85       	ldd	r19, Y+8	; 0x08
     e64:	22 30       	cpi	r18, 0x02	; 2
     e66:	31 05       	cpc	r19, r1
     e68:	2c f4       	brge	.+10     	; 0xe74 <DIO_U8SetPinDirection+0x7c>
     e6a:	8f 81       	ldd	r24, Y+7	; 0x07
     e6c:	98 85       	ldd	r25, Y+8	; 0x08
     e6e:	00 97       	sbiw	r24, 0x00	; 0
     e70:	61 f0       	breq	.+24     	; 0xe8a <DIO_U8SetPinDirection+0x92>
     e72:	d1 c0       	rjmp	.+418    	; 0x1016 <DIO_U8SetPinDirection+0x21e>
     e74:	2f 81       	ldd	r18, Y+7	; 0x07
     e76:	38 85       	ldd	r19, Y+8	; 0x08
     e78:	22 30       	cpi	r18, 0x02	; 2
     e7a:	31 05       	cpc	r19, r1
     e7c:	71 f1       	breq	.+92     	; 0xeda <DIO_U8SetPinDirection+0xe2>
     e7e:	8f 81       	ldd	r24, Y+7	; 0x07
     e80:	98 85       	ldd	r25, Y+8	; 0x08
     e82:	83 30       	cpi	r24, 0x03	; 3
     e84:	91 05       	cpc	r25, r1
     e86:	e9 f1       	breq	.+122    	; 0xf02 <DIO_U8SetPinDirection+0x10a>
     e88:	c6 c0       	rjmp	.+396    	; 0x1016 <DIO_U8SetPinDirection+0x21e>
			{
				case DIO_PORTA: SET_BIT(DDRA,Copy_U8PinNumb);break;
     e8a:	aa e3       	ldi	r26, 0x3A	; 58
     e8c:	b0 e0       	ldi	r27, 0x00	; 0
     e8e:	ea e3       	ldi	r30, 0x3A	; 58
     e90:	f0 e0       	ldi	r31, 0x00	; 0
     e92:	80 81       	ld	r24, Z
     e94:	48 2f       	mov	r20, r24
     e96:	8b 81       	ldd	r24, Y+3	; 0x03
     e98:	28 2f       	mov	r18, r24
     e9a:	30 e0       	ldi	r19, 0x00	; 0
     e9c:	81 e0       	ldi	r24, 0x01	; 1
     e9e:	90 e0       	ldi	r25, 0x00	; 0
     ea0:	02 2e       	mov	r0, r18
     ea2:	02 c0       	rjmp	.+4      	; 0xea8 <DIO_U8SetPinDirection+0xb0>
     ea4:	88 0f       	add	r24, r24
     ea6:	99 1f       	adc	r25, r25
     ea8:	0a 94       	dec	r0
     eaa:	e2 f7       	brpl	.-8      	; 0xea4 <DIO_U8SetPinDirection+0xac>
     eac:	84 2b       	or	r24, r20
     eae:	8c 93       	st	X, r24
     eb0:	b2 c0       	rjmp	.+356    	; 0x1016 <DIO_U8SetPinDirection+0x21e>
				case DIO_PORTB: SET_BIT(DDRB,Copy_U8PinNumb);break;
     eb2:	a7 e3       	ldi	r26, 0x37	; 55
     eb4:	b0 e0       	ldi	r27, 0x00	; 0
     eb6:	e7 e3       	ldi	r30, 0x37	; 55
     eb8:	f0 e0       	ldi	r31, 0x00	; 0
     eba:	80 81       	ld	r24, Z
     ebc:	48 2f       	mov	r20, r24
     ebe:	8b 81       	ldd	r24, Y+3	; 0x03
     ec0:	28 2f       	mov	r18, r24
     ec2:	30 e0       	ldi	r19, 0x00	; 0
     ec4:	81 e0       	ldi	r24, 0x01	; 1
     ec6:	90 e0       	ldi	r25, 0x00	; 0
     ec8:	02 2e       	mov	r0, r18
     eca:	02 c0       	rjmp	.+4      	; 0xed0 <DIO_U8SetPinDirection+0xd8>
     ecc:	88 0f       	add	r24, r24
     ece:	99 1f       	adc	r25, r25
     ed0:	0a 94       	dec	r0
     ed2:	e2 f7       	brpl	.-8      	; 0xecc <DIO_U8SetPinDirection+0xd4>
     ed4:	84 2b       	or	r24, r20
     ed6:	8c 93       	st	X, r24
     ed8:	9e c0       	rjmp	.+316    	; 0x1016 <DIO_U8SetPinDirection+0x21e>
				case DIO_PORTC: SET_BIT(DDRC,Copy_U8PinNumb);break;
     eda:	a4 e3       	ldi	r26, 0x34	; 52
     edc:	b0 e0       	ldi	r27, 0x00	; 0
     ede:	e4 e3       	ldi	r30, 0x34	; 52
     ee0:	f0 e0       	ldi	r31, 0x00	; 0
     ee2:	80 81       	ld	r24, Z
     ee4:	48 2f       	mov	r20, r24
     ee6:	8b 81       	ldd	r24, Y+3	; 0x03
     ee8:	28 2f       	mov	r18, r24
     eea:	30 e0       	ldi	r19, 0x00	; 0
     eec:	81 e0       	ldi	r24, 0x01	; 1
     eee:	90 e0       	ldi	r25, 0x00	; 0
     ef0:	02 2e       	mov	r0, r18
     ef2:	02 c0       	rjmp	.+4      	; 0xef8 <DIO_U8SetPinDirection+0x100>
     ef4:	88 0f       	add	r24, r24
     ef6:	99 1f       	adc	r25, r25
     ef8:	0a 94       	dec	r0
     efa:	e2 f7       	brpl	.-8      	; 0xef4 <DIO_U8SetPinDirection+0xfc>
     efc:	84 2b       	or	r24, r20
     efe:	8c 93       	st	X, r24
     f00:	8a c0       	rjmp	.+276    	; 0x1016 <DIO_U8SetPinDirection+0x21e>
				case DIO_PORTD: SET_BIT(DDRD,Copy_U8PinNumb);break;
     f02:	a1 e3       	ldi	r26, 0x31	; 49
     f04:	b0 e0       	ldi	r27, 0x00	; 0
     f06:	e1 e3       	ldi	r30, 0x31	; 49
     f08:	f0 e0       	ldi	r31, 0x00	; 0
     f0a:	80 81       	ld	r24, Z
     f0c:	48 2f       	mov	r20, r24
     f0e:	8b 81       	ldd	r24, Y+3	; 0x03
     f10:	28 2f       	mov	r18, r24
     f12:	30 e0       	ldi	r19, 0x00	; 0
     f14:	81 e0       	ldi	r24, 0x01	; 1
     f16:	90 e0       	ldi	r25, 0x00	; 0
     f18:	02 2e       	mov	r0, r18
     f1a:	02 c0       	rjmp	.+4      	; 0xf20 <DIO_U8SetPinDirection+0x128>
     f1c:	88 0f       	add	r24, r24
     f1e:	99 1f       	adc	r25, r25
     f20:	0a 94       	dec	r0
     f22:	e2 f7       	brpl	.-8      	; 0xf1c <DIO_U8SetPinDirection+0x124>
     f24:	84 2b       	or	r24, r20
     f26:	8c 93       	st	X, r24
     f28:	76 c0       	rjmp	.+236    	; 0x1016 <DIO_U8SetPinDirection+0x21e>
			}
			break;
			case DIO_PIN_IN:
			switch(Copy_U8PortNumb)
     f2a:	8a 81       	ldd	r24, Y+2	; 0x02
     f2c:	28 2f       	mov	r18, r24
     f2e:	30 e0       	ldi	r19, 0x00	; 0
     f30:	3e 83       	std	Y+6, r19	; 0x06
     f32:	2d 83       	std	Y+5, r18	; 0x05
     f34:	8d 81       	ldd	r24, Y+5	; 0x05
     f36:	9e 81       	ldd	r25, Y+6	; 0x06
     f38:	81 30       	cpi	r24, 0x01	; 1
     f3a:	91 05       	cpc	r25, r1
     f3c:	59 f1       	breq	.+86     	; 0xf94 <DIO_U8SetPinDirection+0x19c>
     f3e:	2d 81       	ldd	r18, Y+5	; 0x05
     f40:	3e 81       	ldd	r19, Y+6	; 0x06
     f42:	22 30       	cpi	r18, 0x02	; 2
     f44:	31 05       	cpc	r19, r1
     f46:	2c f4       	brge	.+10     	; 0xf52 <DIO_U8SetPinDirection+0x15a>
     f48:	8d 81       	ldd	r24, Y+5	; 0x05
     f4a:	9e 81       	ldd	r25, Y+6	; 0x06
     f4c:	00 97       	sbiw	r24, 0x00	; 0
     f4e:	69 f0       	breq	.+26     	; 0xf6a <DIO_U8SetPinDirection+0x172>
     f50:	62 c0       	rjmp	.+196    	; 0x1016 <DIO_U8SetPinDirection+0x21e>
     f52:	2d 81       	ldd	r18, Y+5	; 0x05
     f54:	3e 81       	ldd	r19, Y+6	; 0x06
     f56:	22 30       	cpi	r18, 0x02	; 2
     f58:	31 05       	cpc	r19, r1
     f5a:	89 f1       	breq	.+98     	; 0xfbe <DIO_U8SetPinDirection+0x1c6>
     f5c:	8d 81       	ldd	r24, Y+5	; 0x05
     f5e:	9e 81       	ldd	r25, Y+6	; 0x06
     f60:	83 30       	cpi	r24, 0x03	; 3
     f62:	91 05       	cpc	r25, r1
     f64:	09 f4       	brne	.+2      	; 0xf68 <DIO_U8SetPinDirection+0x170>
     f66:	40 c0       	rjmp	.+128    	; 0xfe8 <DIO_U8SetPinDirection+0x1f0>
     f68:	56 c0       	rjmp	.+172    	; 0x1016 <DIO_U8SetPinDirection+0x21e>
			{
				case DIO_PORTA: CLR_BIT(DDRA,Copy_U8PinNumb);break;
     f6a:	aa e3       	ldi	r26, 0x3A	; 58
     f6c:	b0 e0       	ldi	r27, 0x00	; 0
     f6e:	ea e3       	ldi	r30, 0x3A	; 58
     f70:	f0 e0       	ldi	r31, 0x00	; 0
     f72:	80 81       	ld	r24, Z
     f74:	48 2f       	mov	r20, r24
     f76:	8b 81       	ldd	r24, Y+3	; 0x03
     f78:	28 2f       	mov	r18, r24
     f7a:	30 e0       	ldi	r19, 0x00	; 0
     f7c:	81 e0       	ldi	r24, 0x01	; 1
     f7e:	90 e0       	ldi	r25, 0x00	; 0
     f80:	02 2e       	mov	r0, r18
     f82:	02 c0       	rjmp	.+4      	; 0xf88 <DIO_U8SetPinDirection+0x190>
     f84:	88 0f       	add	r24, r24
     f86:	99 1f       	adc	r25, r25
     f88:	0a 94       	dec	r0
     f8a:	e2 f7       	brpl	.-8      	; 0xf84 <DIO_U8SetPinDirection+0x18c>
     f8c:	80 95       	com	r24
     f8e:	84 23       	and	r24, r20
     f90:	8c 93       	st	X, r24
     f92:	41 c0       	rjmp	.+130    	; 0x1016 <DIO_U8SetPinDirection+0x21e>
				case DIO_PORTB: CLR_BIT(DDRB,Copy_U8PinNumb);break;
     f94:	a7 e3       	ldi	r26, 0x37	; 55
     f96:	b0 e0       	ldi	r27, 0x00	; 0
     f98:	e7 e3       	ldi	r30, 0x37	; 55
     f9a:	f0 e0       	ldi	r31, 0x00	; 0
     f9c:	80 81       	ld	r24, Z
     f9e:	48 2f       	mov	r20, r24
     fa0:	8b 81       	ldd	r24, Y+3	; 0x03
     fa2:	28 2f       	mov	r18, r24
     fa4:	30 e0       	ldi	r19, 0x00	; 0
     fa6:	81 e0       	ldi	r24, 0x01	; 1
     fa8:	90 e0       	ldi	r25, 0x00	; 0
     faa:	02 2e       	mov	r0, r18
     fac:	02 c0       	rjmp	.+4      	; 0xfb2 <DIO_U8SetPinDirection+0x1ba>
     fae:	88 0f       	add	r24, r24
     fb0:	99 1f       	adc	r25, r25
     fb2:	0a 94       	dec	r0
     fb4:	e2 f7       	brpl	.-8      	; 0xfae <DIO_U8SetPinDirection+0x1b6>
     fb6:	80 95       	com	r24
     fb8:	84 23       	and	r24, r20
     fba:	8c 93       	st	X, r24
     fbc:	2c c0       	rjmp	.+88     	; 0x1016 <DIO_U8SetPinDirection+0x21e>
				case DIO_PORTC: CLR_BIT(DDRC,Copy_U8PinNumb);break;
     fbe:	a4 e3       	ldi	r26, 0x34	; 52
     fc0:	b0 e0       	ldi	r27, 0x00	; 0
     fc2:	e4 e3       	ldi	r30, 0x34	; 52
     fc4:	f0 e0       	ldi	r31, 0x00	; 0
     fc6:	80 81       	ld	r24, Z
     fc8:	48 2f       	mov	r20, r24
     fca:	8b 81       	ldd	r24, Y+3	; 0x03
     fcc:	28 2f       	mov	r18, r24
     fce:	30 e0       	ldi	r19, 0x00	; 0
     fd0:	81 e0       	ldi	r24, 0x01	; 1
     fd2:	90 e0       	ldi	r25, 0x00	; 0
     fd4:	02 2e       	mov	r0, r18
     fd6:	02 c0       	rjmp	.+4      	; 0xfdc <DIO_U8SetPinDirection+0x1e4>
     fd8:	88 0f       	add	r24, r24
     fda:	99 1f       	adc	r25, r25
     fdc:	0a 94       	dec	r0
     fde:	e2 f7       	brpl	.-8      	; 0xfd8 <DIO_U8SetPinDirection+0x1e0>
     fe0:	80 95       	com	r24
     fe2:	84 23       	and	r24, r20
     fe4:	8c 93       	st	X, r24
     fe6:	17 c0       	rjmp	.+46     	; 0x1016 <DIO_U8SetPinDirection+0x21e>
				case DIO_PORTD: CLR_BIT(DDRD,Copy_U8PinNumb);break;
     fe8:	a1 e3       	ldi	r26, 0x31	; 49
     fea:	b0 e0       	ldi	r27, 0x00	; 0
     fec:	e1 e3       	ldi	r30, 0x31	; 49
     fee:	f0 e0       	ldi	r31, 0x00	; 0
     ff0:	80 81       	ld	r24, Z
     ff2:	48 2f       	mov	r20, r24
     ff4:	8b 81       	ldd	r24, Y+3	; 0x03
     ff6:	28 2f       	mov	r18, r24
     ff8:	30 e0       	ldi	r19, 0x00	; 0
     ffa:	81 e0       	ldi	r24, 0x01	; 1
     ffc:	90 e0       	ldi	r25, 0x00	; 0
     ffe:	02 2e       	mov	r0, r18
    1000:	02 c0       	rjmp	.+4      	; 0x1006 <DIO_U8SetPinDirection+0x20e>
    1002:	88 0f       	add	r24, r24
    1004:	99 1f       	adc	r25, r25
    1006:	0a 94       	dec	r0
    1008:	e2 f7       	brpl	.-8      	; 0x1002 <DIO_U8SetPinDirection+0x20a>
    100a:	80 95       	com	r24
    100c:	84 23       	and	r24, r20
    100e:	8c 93       	st	X, r24
    1010:	02 c0       	rjmp	.+4      	; 0x1016 <DIO_U8SetPinDirection+0x21e>
			
		}
	}
	else
	{
		 Local_U8ErrorState=ERROR_STATE_OK;
    1012:	81 e0       	ldi	r24, 0x01	; 1
    1014:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_U8ErrorState;
    1016:	89 81       	ldd	r24, Y+1	; 0x01
}
    1018:	2a 96       	adiw	r28, 0x0a	; 10
    101a:	0f b6       	in	r0, 0x3f	; 63
    101c:	f8 94       	cli
    101e:	de bf       	out	0x3e, r29	; 62
    1020:	0f be       	out	0x3f, r0	; 63
    1022:	cd bf       	out	0x3d, r28	; 61
    1024:	cf 91       	pop	r28
    1026:	df 91       	pop	r29
    1028:	08 95       	ret

0000102a <DIO_U8SetPinValue>:

u8 DIO_U8SetPinValue(u8 Copy_U8PortNumb,u8 Copy_U8PinNumb,u8 Copy_U8Value)
{
    102a:	df 93       	push	r29
    102c:	cf 93       	push	r28
    102e:	cd b7       	in	r28, 0x3d	; 61
    1030:	de b7       	in	r29, 0x3e	; 62
    1032:	2a 97       	sbiw	r28, 0x0a	; 10
    1034:	0f b6       	in	r0, 0x3f	; 63
    1036:	f8 94       	cli
    1038:	de bf       	out	0x3e, r29	; 62
    103a:	0f be       	out	0x3f, r0	; 63
    103c:	cd bf       	out	0x3d, r28	; 61
    103e:	8a 83       	std	Y+2, r24	; 0x02
    1040:	6b 83       	std	Y+3, r22	; 0x03
    1042:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_U8ErrorState=ERROR_STATE_NOK;
    1044:	19 82       	std	Y+1, r1	; 0x01
	if((Copy_U8PortNumb <= DIO_PORTD) && (Copy_U8PinNumb <= DIO_PIN7) &&(Copy_U8Value <= DIO_HIGH))
    1046:	8a 81       	ldd	r24, Y+2	; 0x02
    1048:	84 30       	cpi	r24, 0x04	; 4
    104a:	08 f0       	brcs	.+2      	; 0x104e <DIO_U8SetPinValue+0x24>
    104c:	fe c0       	rjmp	.+508    	; 0x124a <DIO_U8SetPinValue+0x220>
    104e:	8b 81       	ldd	r24, Y+3	; 0x03
    1050:	88 30       	cpi	r24, 0x08	; 8
    1052:	08 f0       	brcs	.+2      	; 0x1056 <DIO_U8SetPinValue+0x2c>
    1054:	fa c0       	rjmp	.+500    	; 0x124a <DIO_U8SetPinValue+0x220>
    1056:	8c 81       	ldd	r24, Y+4	; 0x04
    1058:	82 30       	cpi	r24, 0x02	; 2
    105a:	08 f0       	brcs	.+2      	; 0x105e <DIO_U8SetPinValue+0x34>
    105c:	f6 c0       	rjmp	.+492    	; 0x124a <DIO_U8SetPinValue+0x220>
	{
		switch(Copy_U8Value)
    105e:	8c 81       	ldd	r24, Y+4	; 0x04
    1060:	28 2f       	mov	r18, r24
    1062:	30 e0       	ldi	r19, 0x00	; 0
    1064:	3a 87       	std	Y+10, r19	; 0x0a
    1066:	29 87       	std	Y+9, r18	; 0x09
    1068:	89 85       	ldd	r24, Y+9	; 0x09
    106a:	9a 85       	ldd	r25, Y+10	; 0x0a
    106c:	00 97       	sbiw	r24, 0x00	; 0
    106e:	09 f4       	brne	.+2      	; 0x1072 <DIO_U8SetPinValue+0x48>
    1070:	75 c0       	rjmp	.+234    	; 0x115c <DIO_U8SetPinValue+0x132>
    1072:	29 85       	ldd	r18, Y+9	; 0x09
    1074:	3a 85       	ldd	r19, Y+10	; 0x0a
    1076:	21 30       	cpi	r18, 0x01	; 1
    1078:	31 05       	cpc	r19, r1
    107a:	09 f0       	breq	.+2      	; 0x107e <DIO_U8SetPinValue+0x54>
    107c:	e3 c0       	rjmp	.+454    	; 0x1244 <DIO_U8SetPinValue+0x21a>
		{
			case DIO_HIGH:
			switch(Copy_U8PortNumb)
    107e:	8a 81       	ldd	r24, Y+2	; 0x02
    1080:	28 2f       	mov	r18, r24
    1082:	30 e0       	ldi	r19, 0x00	; 0
    1084:	38 87       	std	Y+8, r19	; 0x08
    1086:	2f 83       	std	Y+7, r18	; 0x07
    1088:	8f 81       	ldd	r24, Y+7	; 0x07
    108a:	98 85       	ldd	r25, Y+8	; 0x08
    108c:	81 30       	cpi	r24, 0x01	; 1
    108e:	91 05       	cpc	r25, r1
    1090:	49 f1       	breq	.+82     	; 0x10e4 <DIO_U8SetPinValue+0xba>
    1092:	2f 81       	ldd	r18, Y+7	; 0x07
    1094:	38 85       	ldd	r19, Y+8	; 0x08
    1096:	22 30       	cpi	r18, 0x02	; 2
    1098:	31 05       	cpc	r19, r1
    109a:	2c f4       	brge	.+10     	; 0x10a6 <DIO_U8SetPinValue+0x7c>
    109c:	8f 81       	ldd	r24, Y+7	; 0x07
    109e:	98 85       	ldd	r25, Y+8	; 0x08
    10a0:	00 97       	sbiw	r24, 0x00	; 0
    10a2:	61 f0       	breq	.+24     	; 0x10bc <DIO_U8SetPinValue+0x92>
    10a4:	d4 c0       	rjmp	.+424    	; 0x124e <DIO_U8SetPinValue+0x224>
    10a6:	2f 81       	ldd	r18, Y+7	; 0x07
    10a8:	38 85       	ldd	r19, Y+8	; 0x08
    10aa:	22 30       	cpi	r18, 0x02	; 2
    10ac:	31 05       	cpc	r19, r1
    10ae:	71 f1       	breq	.+92     	; 0x110c <DIO_U8SetPinValue+0xe2>
    10b0:	8f 81       	ldd	r24, Y+7	; 0x07
    10b2:	98 85       	ldd	r25, Y+8	; 0x08
    10b4:	83 30       	cpi	r24, 0x03	; 3
    10b6:	91 05       	cpc	r25, r1
    10b8:	e9 f1       	breq	.+122    	; 0x1134 <DIO_U8SetPinValue+0x10a>
    10ba:	c9 c0       	rjmp	.+402    	; 0x124e <DIO_U8SetPinValue+0x224>
			{
				case DIO_PORTA: SET_BIT(PORTA,Copy_U8PinNumb);break;
    10bc:	ab e3       	ldi	r26, 0x3B	; 59
    10be:	b0 e0       	ldi	r27, 0x00	; 0
    10c0:	eb e3       	ldi	r30, 0x3B	; 59
    10c2:	f0 e0       	ldi	r31, 0x00	; 0
    10c4:	80 81       	ld	r24, Z
    10c6:	48 2f       	mov	r20, r24
    10c8:	8b 81       	ldd	r24, Y+3	; 0x03
    10ca:	28 2f       	mov	r18, r24
    10cc:	30 e0       	ldi	r19, 0x00	; 0
    10ce:	81 e0       	ldi	r24, 0x01	; 1
    10d0:	90 e0       	ldi	r25, 0x00	; 0
    10d2:	02 2e       	mov	r0, r18
    10d4:	02 c0       	rjmp	.+4      	; 0x10da <DIO_U8SetPinValue+0xb0>
    10d6:	88 0f       	add	r24, r24
    10d8:	99 1f       	adc	r25, r25
    10da:	0a 94       	dec	r0
    10dc:	e2 f7       	brpl	.-8      	; 0x10d6 <DIO_U8SetPinValue+0xac>
    10de:	84 2b       	or	r24, r20
    10e0:	8c 93       	st	X, r24
    10e2:	b5 c0       	rjmp	.+362    	; 0x124e <DIO_U8SetPinValue+0x224>
				case DIO_PORTB: SET_BIT(PORTB,Copy_U8PinNumb);break;
    10e4:	a8 e3       	ldi	r26, 0x38	; 56
    10e6:	b0 e0       	ldi	r27, 0x00	; 0
    10e8:	e8 e3       	ldi	r30, 0x38	; 56
    10ea:	f0 e0       	ldi	r31, 0x00	; 0
    10ec:	80 81       	ld	r24, Z
    10ee:	48 2f       	mov	r20, r24
    10f0:	8b 81       	ldd	r24, Y+3	; 0x03
    10f2:	28 2f       	mov	r18, r24
    10f4:	30 e0       	ldi	r19, 0x00	; 0
    10f6:	81 e0       	ldi	r24, 0x01	; 1
    10f8:	90 e0       	ldi	r25, 0x00	; 0
    10fa:	02 2e       	mov	r0, r18
    10fc:	02 c0       	rjmp	.+4      	; 0x1102 <DIO_U8SetPinValue+0xd8>
    10fe:	88 0f       	add	r24, r24
    1100:	99 1f       	adc	r25, r25
    1102:	0a 94       	dec	r0
    1104:	e2 f7       	brpl	.-8      	; 0x10fe <DIO_U8SetPinValue+0xd4>
    1106:	84 2b       	or	r24, r20
    1108:	8c 93       	st	X, r24
    110a:	a1 c0       	rjmp	.+322    	; 0x124e <DIO_U8SetPinValue+0x224>
				case DIO_PORTC: SET_BIT(PORTC,Copy_U8PinNumb);break;
    110c:	a5 e3       	ldi	r26, 0x35	; 53
    110e:	b0 e0       	ldi	r27, 0x00	; 0
    1110:	e5 e3       	ldi	r30, 0x35	; 53
    1112:	f0 e0       	ldi	r31, 0x00	; 0
    1114:	80 81       	ld	r24, Z
    1116:	48 2f       	mov	r20, r24
    1118:	8b 81       	ldd	r24, Y+3	; 0x03
    111a:	28 2f       	mov	r18, r24
    111c:	30 e0       	ldi	r19, 0x00	; 0
    111e:	81 e0       	ldi	r24, 0x01	; 1
    1120:	90 e0       	ldi	r25, 0x00	; 0
    1122:	02 2e       	mov	r0, r18
    1124:	02 c0       	rjmp	.+4      	; 0x112a <DIO_U8SetPinValue+0x100>
    1126:	88 0f       	add	r24, r24
    1128:	99 1f       	adc	r25, r25
    112a:	0a 94       	dec	r0
    112c:	e2 f7       	brpl	.-8      	; 0x1126 <DIO_U8SetPinValue+0xfc>
    112e:	84 2b       	or	r24, r20
    1130:	8c 93       	st	X, r24
    1132:	8d c0       	rjmp	.+282    	; 0x124e <DIO_U8SetPinValue+0x224>
				case DIO_PORTD: SET_BIT(PORTD,Copy_U8PinNumb);break;
    1134:	a2 e3       	ldi	r26, 0x32	; 50
    1136:	b0 e0       	ldi	r27, 0x00	; 0
    1138:	e2 e3       	ldi	r30, 0x32	; 50
    113a:	f0 e0       	ldi	r31, 0x00	; 0
    113c:	80 81       	ld	r24, Z
    113e:	48 2f       	mov	r20, r24
    1140:	8b 81       	ldd	r24, Y+3	; 0x03
    1142:	28 2f       	mov	r18, r24
    1144:	30 e0       	ldi	r19, 0x00	; 0
    1146:	81 e0       	ldi	r24, 0x01	; 1
    1148:	90 e0       	ldi	r25, 0x00	; 0
    114a:	02 2e       	mov	r0, r18
    114c:	02 c0       	rjmp	.+4      	; 0x1152 <DIO_U8SetPinValue+0x128>
    114e:	88 0f       	add	r24, r24
    1150:	99 1f       	adc	r25, r25
    1152:	0a 94       	dec	r0
    1154:	e2 f7       	brpl	.-8      	; 0x114e <DIO_U8SetPinValue+0x124>
    1156:	84 2b       	or	r24, r20
    1158:	8c 93       	st	X, r24
    115a:	79 c0       	rjmp	.+242    	; 0x124e <DIO_U8SetPinValue+0x224>
			}
			break;
			case DIO_LOW:
			switch(Copy_U8PortNumb)
    115c:	8a 81       	ldd	r24, Y+2	; 0x02
    115e:	28 2f       	mov	r18, r24
    1160:	30 e0       	ldi	r19, 0x00	; 0
    1162:	3e 83       	std	Y+6, r19	; 0x06
    1164:	2d 83       	std	Y+5, r18	; 0x05
    1166:	8d 81       	ldd	r24, Y+5	; 0x05
    1168:	9e 81       	ldd	r25, Y+6	; 0x06
    116a:	81 30       	cpi	r24, 0x01	; 1
    116c:	91 05       	cpc	r25, r1
    116e:	59 f1       	breq	.+86     	; 0x11c6 <DIO_U8SetPinValue+0x19c>
    1170:	2d 81       	ldd	r18, Y+5	; 0x05
    1172:	3e 81       	ldd	r19, Y+6	; 0x06
    1174:	22 30       	cpi	r18, 0x02	; 2
    1176:	31 05       	cpc	r19, r1
    1178:	2c f4       	brge	.+10     	; 0x1184 <DIO_U8SetPinValue+0x15a>
    117a:	8d 81       	ldd	r24, Y+5	; 0x05
    117c:	9e 81       	ldd	r25, Y+6	; 0x06
    117e:	00 97       	sbiw	r24, 0x00	; 0
    1180:	69 f0       	breq	.+26     	; 0x119c <DIO_U8SetPinValue+0x172>
    1182:	65 c0       	rjmp	.+202    	; 0x124e <DIO_U8SetPinValue+0x224>
    1184:	2d 81       	ldd	r18, Y+5	; 0x05
    1186:	3e 81       	ldd	r19, Y+6	; 0x06
    1188:	22 30       	cpi	r18, 0x02	; 2
    118a:	31 05       	cpc	r19, r1
    118c:	89 f1       	breq	.+98     	; 0x11f0 <DIO_U8SetPinValue+0x1c6>
    118e:	8d 81       	ldd	r24, Y+5	; 0x05
    1190:	9e 81       	ldd	r25, Y+6	; 0x06
    1192:	83 30       	cpi	r24, 0x03	; 3
    1194:	91 05       	cpc	r25, r1
    1196:	09 f4       	brne	.+2      	; 0x119a <DIO_U8SetPinValue+0x170>
    1198:	40 c0       	rjmp	.+128    	; 0x121a <DIO_U8SetPinValue+0x1f0>
    119a:	59 c0       	rjmp	.+178    	; 0x124e <DIO_U8SetPinValue+0x224>
			{
				case DIO_PORTA: CLR_BIT(PORTA,Copy_U8PinNumb);break;
    119c:	ab e3       	ldi	r26, 0x3B	; 59
    119e:	b0 e0       	ldi	r27, 0x00	; 0
    11a0:	eb e3       	ldi	r30, 0x3B	; 59
    11a2:	f0 e0       	ldi	r31, 0x00	; 0
    11a4:	80 81       	ld	r24, Z
    11a6:	48 2f       	mov	r20, r24
    11a8:	8b 81       	ldd	r24, Y+3	; 0x03
    11aa:	28 2f       	mov	r18, r24
    11ac:	30 e0       	ldi	r19, 0x00	; 0
    11ae:	81 e0       	ldi	r24, 0x01	; 1
    11b0:	90 e0       	ldi	r25, 0x00	; 0
    11b2:	02 2e       	mov	r0, r18
    11b4:	02 c0       	rjmp	.+4      	; 0x11ba <DIO_U8SetPinValue+0x190>
    11b6:	88 0f       	add	r24, r24
    11b8:	99 1f       	adc	r25, r25
    11ba:	0a 94       	dec	r0
    11bc:	e2 f7       	brpl	.-8      	; 0x11b6 <DIO_U8SetPinValue+0x18c>
    11be:	80 95       	com	r24
    11c0:	84 23       	and	r24, r20
    11c2:	8c 93       	st	X, r24
    11c4:	44 c0       	rjmp	.+136    	; 0x124e <DIO_U8SetPinValue+0x224>
				case DIO_PORTB: CLR_BIT(PORTB,Copy_U8PinNumb);break;
    11c6:	a8 e3       	ldi	r26, 0x38	; 56
    11c8:	b0 e0       	ldi	r27, 0x00	; 0
    11ca:	e8 e3       	ldi	r30, 0x38	; 56
    11cc:	f0 e0       	ldi	r31, 0x00	; 0
    11ce:	80 81       	ld	r24, Z
    11d0:	48 2f       	mov	r20, r24
    11d2:	8b 81       	ldd	r24, Y+3	; 0x03
    11d4:	28 2f       	mov	r18, r24
    11d6:	30 e0       	ldi	r19, 0x00	; 0
    11d8:	81 e0       	ldi	r24, 0x01	; 1
    11da:	90 e0       	ldi	r25, 0x00	; 0
    11dc:	02 2e       	mov	r0, r18
    11de:	02 c0       	rjmp	.+4      	; 0x11e4 <DIO_U8SetPinValue+0x1ba>
    11e0:	88 0f       	add	r24, r24
    11e2:	99 1f       	adc	r25, r25
    11e4:	0a 94       	dec	r0
    11e6:	e2 f7       	brpl	.-8      	; 0x11e0 <DIO_U8SetPinValue+0x1b6>
    11e8:	80 95       	com	r24
    11ea:	84 23       	and	r24, r20
    11ec:	8c 93       	st	X, r24
    11ee:	2f c0       	rjmp	.+94     	; 0x124e <DIO_U8SetPinValue+0x224>
				case DIO_PORTC: CLR_BIT(PORTC,Copy_U8PinNumb);break;
    11f0:	a5 e3       	ldi	r26, 0x35	; 53
    11f2:	b0 e0       	ldi	r27, 0x00	; 0
    11f4:	e5 e3       	ldi	r30, 0x35	; 53
    11f6:	f0 e0       	ldi	r31, 0x00	; 0
    11f8:	80 81       	ld	r24, Z
    11fa:	48 2f       	mov	r20, r24
    11fc:	8b 81       	ldd	r24, Y+3	; 0x03
    11fe:	28 2f       	mov	r18, r24
    1200:	30 e0       	ldi	r19, 0x00	; 0
    1202:	81 e0       	ldi	r24, 0x01	; 1
    1204:	90 e0       	ldi	r25, 0x00	; 0
    1206:	02 2e       	mov	r0, r18
    1208:	02 c0       	rjmp	.+4      	; 0x120e <DIO_U8SetPinValue+0x1e4>
    120a:	88 0f       	add	r24, r24
    120c:	99 1f       	adc	r25, r25
    120e:	0a 94       	dec	r0
    1210:	e2 f7       	brpl	.-8      	; 0x120a <DIO_U8SetPinValue+0x1e0>
    1212:	80 95       	com	r24
    1214:	84 23       	and	r24, r20
    1216:	8c 93       	st	X, r24
    1218:	1a c0       	rjmp	.+52     	; 0x124e <DIO_U8SetPinValue+0x224>
				case DIO_PORTD: CLR_BIT(PORTD,Copy_U8PinNumb);break;
    121a:	a2 e3       	ldi	r26, 0x32	; 50
    121c:	b0 e0       	ldi	r27, 0x00	; 0
    121e:	e2 e3       	ldi	r30, 0x32	; 50
    1220:	f0 e0       	ldi	r31, 0x00	; 0
    1222:	80 81       	ld	r24, Z
    1224:	48 2f       	mov	r20, r24
    1226:	8b 81       	ldd	r24, Y+3	; 0x03
    1228:	28 2f       	mov	r18, r24
    122a:	30 e0       	ldi	r19, 0x00	; 0
    122c:	81 e0       	ldi	r24, 0x01	; 1
    122e:	90 e0       	ldi	r25, 0x00	; 0
    1230:	02 2e       	mov	r0, r18
    1232:	02 c0       	rjmp	.+4      	; 0x1238 <DIO_U8SetPinValue+0x20e>
    1234:	88 0f       	add	r24, r24
    1236:	99 1f       	adc	r25, r25
    1238:	0a 94       	dec	r0
    123a:	e2 f7       	brpl	.-8      	; 0x1234 <DIO_U8SetPinValue+0x20a>
    123c:	80 95       	com	r24
    123e:	84 23       	and	r24, r20
    1240:	8c 93       	st	X, r24
    1242:	05 c0       	rjmp	.+10     	; 0x124e <DIO_U8SetPinValue+0x224>
			}
			break;
			default:
			Local_U8ErrorState=ERROR_STATE_OK;
    1244:	81 e0       	ldi	r24, 0x01	; 1
    1246:	89 83       	std	Y+1, r24	; 0x01
    1248:	02 c0       	rjmp	.+4      	; 0x124e <DIO_U8SetPinValue+0x224>
			break;	
		}
	}
	else
	{
		 Local_U8ErrorState=ERROR_STATE_OK;
    124a:	81 e0       	ldi	r24, 0x01	; 1
    124c:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_U8ErrorState;
    124e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1250:	2a 96       	adiw	r28, 0x0a	; 10
    1252:	0f b6       	in	r0, 0x3f	; 63
    1254:	f8 94       	cli
    1256:	de bf       	out	0x3e, r29	; 62
    1258:	0f be       	out	0x3f, r0	; 63
    125a:	cd bf       	out	0x3d, r28	; 61
    125c:	cf 91       	pop	r28
    125e:	df 91       	pop	r29
    1260:	08 95       	ret

00001262 <DIO_U8GetPinValue>:

u8 DIO_U8GetPinValue(u8 Copy_U8PortNumb,u8 Copy_U8PinNumb,u8 *Copy_U8Value)
{
    1262:	df 93       	push	r29
    1264:	cf 93       	push	r28
    1266:	cd b7       	in	r28, 0x3d	; 61
    1268:	de b7       	in	r29, 0x3e	; 62
    126a:	27 97       	sbiw	r28, 0x07	; 7
    126c:	0f b6       	in	r0, 0x3f	; 63
    126e:	f8 94       	cli
    1270:	de bf       	out	0x3e, r29	; 62
    1272:	0f be       	out	0x3f, r0	; 63
    1274:	cd bf       	out	0x3d, r28	; 61
    1276:	8a 83       	std	Y+2, r24	; 0x02
    1278:	6b 83       	std	Y+3, r22	; 0x03
    127a:	5d 83       	std	Y+5, r21	; 0x05
    127c:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_U8ErrorState=ERROR_STATE_NOK;
    127e:	19 82       	std	Y+1, r1	; 0x01
	if((Copy_U8PortNumb <= DIO_PORTD) && (Copy_U8PinNumb <= DIO_PIN7))
    1280:	8a 81       	ldd	r24, Y+2	; 0x02
    1282:	84 30       	cpi	r24, 0x04	; 4
    1284:	08 f0       	brcs	.+2      	; 0x1288 <DIO_U8GetPinValue+0x26>
    1286:	78 c0       	rjmp	.+240    	; 0x1378 <DIO_U8GetPinValue+0x116>
    1288:	8b 81       	ldd	r24, Y+3	; 0x03
    128a:	88 30       	cpi	r24, 0x08	; 8
    128c:	08 f0       	brcs	.+2      	; 0x1290 <DIO_U8GetPinValue+0x2e>
    128e:	74 c0       	rjmp	.+232    	; 0x1378 <DIO_U8GetPinValue+0x116>
	{
		switch(Copy_U8PortNumb)
    1290:	8a 81       	ldd	r24, Y+2	; 0x02
    1292:	28 2f       	mov	r18, r24
    1294:	30 e0       	ldi	r19, 0x00	; 0
    1296:	3f 83       	std	Y+7, r19	; 0x07
    1298:	2e 83       	std	Y+6, r18	; 0x06
    129a:	4e 81       	ldd	r20, Y+6	; 0x06
    129c:	5f 81       	ldd	r21, Y+7	; 0x07
    129e:	41 30       	cpi	r20, 0x01	; 1
    12a0:	51 05       	cpc	r21, r1
    12a2:	59 f1       	breq	.+86     	; 0x12fa <DIO_U8GetPinValue+0x98>
    12a4:	8e 81       	ldd	r24, Y+6	; 0x06
    12a6:	9f 81       	ldd	r25, Y+7	; 0x07
    12a8:	82 30       	cpi	r24, 0x02	; 2
    12aa:	91 05       	cpc	r25, r1
    12ac:	34 f4       	brge	.+12     	; 0x12ba <DIO_U8GetPinValue+0x58>
    12ae:	2e 81       	ldd	r18, Y+6	; 0x06
    12b0:	3f 81       	ldd	r19, Y+7	; 0x07
    12b2:	21 15       	cp	r18, r1
    12b4:	31 05       	cpc	r19, r1
    12b6:	69 f0       	breq	.+26     	; 0x12d2 <DIO_U8GetPinValue+0x70>
    12b8:	5c c0       	rjmp	.+184    	; 0x1372 <DIO_U8GetPinValue+0x110>
    12ba:	4e 81       	ldd	r20, Y+6	; 0x06
    12bc:	5f 81       	ldd	r21, Y+7	; 0x07
    12be:	42 30       	cpi	r20, 0x02	; 2
    12c0:	51 05       	cpc	r21, r1
    12c2:	79 f1       	breq	.+94     	; 0x1322 <DIO_U8GetPinValue+0xc0>
    12c4:	8e 81       	ldd	r24, Y+6	; 0x06
    12c6:	9f 81       	ldd	r25, Y+7	; 0x07
    12c8:	83 30       	cpi	r24, 0x03	; 3
    12ca:	91 05       	cpc	r25, r1
    12cc:	09 f4       	brne	.+2      	; 0x12d0 <DIO_U8GetPinValue+0x6e>
    12ce:	3d c0       	rjmp	.+122    	; 0x134a <DIO_U8GetPinValue+0xe8>
    12d0:	50 c0       	rjmp	.+160    	; 0x1372 <DIO_U8GetPinValue+0x110>
		{	
			case DIO_PORTA: *Copy_U8Value = GET_BIT(PINA,Copy_U8PinNumb); break;
    12d2:	e9 e3       	ldi	r30, 0x39	; 57
    12d4:	f0 e0       	ldi	r31, 0x00	; 0
    12d6:	80 81       	ld	r24, Z
    12d8:	28 2f       	mov	r18, r24
    12da:	30 e0       	ldi	r19, 0x00	; 0
    12dc:	8b 81       	ldd	r24, Y+3	; 0x03
    12de:	88 2f       	mov	r24, r24
    12e0:	90 e0       	ldi	r25, 0x00	; 0
    12e2:	a9 01       	movw	r20, r18
    12e4:	02 c0       	rjmp	.+4      	; 0x12ea <DIO_U8GetPinValue+0x88>
    12e6:	55 95       	asr	r21
    12e8:	47 95       	ror	r20
    12ea:	8a 95       	dec	r24
    12ec:	e2 f7       	brpl	.-8      	; 0x12e6 <DIO_U8GetPinValue+0x84>
    12ee:	ca 01       	movw	r24, r20
    12f0:	81 70       	andi	r24, 0x01	; 1
    12f2:	ec 81       	ldd	r30, Y+4	; 0x04
    12f4:	fd 81       	ldd	r31, Y+5	; 0x05
    12f6:	80 83       	st	Z, r24
    12f8:	41 c0       	rjmp	.+130    	; 0x137c <DIO_U8GetPinValue+0x11a>
			case DIO_PORTB: *Copy_U8Value = GET_BIT(PINB,Copy_U8PinNumb); break;
    12fa:	e6 e3       	ldi	r30, 0x36	; 54
    12fc:	f0 e0       	ldi	r31, 0x00	; 0
    12fe:	80 81       	ld	r24, Z
    1300:	28 2f       	mov	r18, r24
    1302:	30 e0       	ldi	r19, 0x00	; 0
    1304:	8b 81       	ldd	r24, Y+3	; 0x03
    1306:	88 2f       	mov	r24, r24
    1308:	90 e0       	ldi	r25, 0x00	; 0
    130a:	a9 01       	movw	r20, r18
    130c:	02 c0       	rjmp	.+4      	; 0x1312 <DIO_U8GetPinValue+0xb0>
    130e:	55 95       	asr	r21
    1310:	47 95       	ror	r20
    1312:	8a 95       	dec	r24
    1314:	e2 f7       	brpl	.-8      	; 0x130e <DIO_U8GetPinValue+0xac>
    1316:	ca 01       	movw	r24, r20
    1318:	81 70       	andi	r24, 0x01	; 1
    131a:	ec 81       	ldd	r30, Y+4	; 0x04
    131c:	fd 81       	ldd	r31, Y+5	; 0x05
    131e:	80 83       	st	Z, r24
    1320:	2d c0       	rjmp	.+90     	; 0x137c <DIO_U8GetPinValue+0x11a>
			case DIO_PORTC:	*Copy_U8Value = GET_BIT(PINC,Copy_U8PinNumb); break;
    1322:	e3 e3       	ldi	r30, 0x33	; 51
    1324:	f0 e0       	ldi	r31, 0x00	; 0
    1326:	80 81       	ld	r24, Z
    1328:	28 2f       	mov	r18, r24
    132a:	30 e0       	ldi	r19, 0x00	; 0
    132c:	8b 81       	ldd	r24, Y+3	; 0x03
    132e:	88 2f       	mov	r24, r24
    1330:	90 e0       	ldi	r25, 0x00	; 0
    1332:	a9 01       	movw	r20, r18
    1334:	02 c0       	rjmp	.+4      	; 0x133a <DIO_U8GetPinValue+0xd8>
    1336:	55 95       	asr	r21
    1338:	47 95       	ror	r20
    133a:	8a 95       	dec	r24
    133c:	e2 f7       	brpl	.-8      	; 0x1336 <DIO_U8GetPinValue+0xd4>
    133e:	ca 01       	movw	r24, r20
    1340:	81 70       	andi	r24, 0x01	; 1
    1342:	ec 81       	ldd	r30, Y+4	; 0x04
    1344:	fd 81       	ldd	r31, Y+5	; 0x05
    1346:	80 83       	st	Z, r24
    1348:	19 c0       	rjmp	.+50     	; 0x137c <DIO_U8GetPinValue+0x11a>
			case DIO_PORTD: *Copy_U8Value = GET_BIT(PIND,Copy_U8PinNumb); break;
    134a:	e0 e3       	ldi	r30, 0x30	; 48
    134c:	f0 e0       	ldi	r31, 0x00	; 0
    134e:	80 81       	ld	r24, Z
    1350:	28 2f       	mov	r18, r24
    1352:	30 e0       	ldi	r19, 0x00	; 0
    1354:	8b 81       	ldd	r24, Y+3	; 0x03
    1356:	88 2f       	mov	r24, r24
    1358:	90 e0       	ldi	r25, 0x00	; 0
    135a:	a9 01       	movw	r20, r18
    135c:	02 c0       	rjmp	.+4      	; 0x1362 <DIO_U8GetPinValue+0x100>
    135e:	55 95       	asr	r21
    1360:	47 95       	ror	r20
    1362:	8a 95       	dec	r24
    1364:	e2 f7       	brpl	.-8      	; 0x135e <DIO_U8GetPinValue+0xfc>
    1366:	ca 01       	movw	r24, r20
    1368:	81 70       	andi	r24, 0x01	; 1
    136a:	ec 81       	ldd	r30, Y+4	; 0x04
    136c:	fd 81       	ldd	r31, Y+5	; 0x05
    136e:	80 83       	st	Z, r24
    1370:	05 c0       	rjmp	.+10     	; 0x137c <DIO_U8GetPinValue+0x11a>
			default:
			Local_U8ErrorState=ERROR_STATE_OK;
    1372:	81 e0       	ldi	r24, 0x01	; 1
    1374:	89 83       	std	Y+1, r24	; 0x01
    1376:	02 c0       	rjmp	.+4      	; 0x137c <DIO_U8GetPinValue+0x11a>
			break;
		}
	}
	else
	{
		 Local_U8ErrorState=ERROR_STATE_OK;
    1378:	81 e0       	ldi	r24, 0x01	; 1
    137a:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_U8ErrorState;
    137c:	89 81       	ldd	r24, Y+1	; 0x01
}
    137e:	27 96       	adiw	r28, 0x07	; 7
    1380:	0f b6       	in	r0, 0x3f	; 63
    1382:	f8 94       	cli
    1384:	de bf       	out	0x3e, r29	; 62
    1386:	0f be       	out	0x3f, r0	; 63
    1388:	cd bf       	out	0x3d, r28	; 61
    138a:	cf 91       	pop	r28
    138c:	df 91       	pop	r29
    138e:	08 95       	ret

00001390 <DIO_U8TogglePin>:

u8 DIO_U8TogglePin(u8 Copy_U8PortNumb,u8 Copy_U8PinNumb)
{
    1390:	df 93       	push	r29
    1392:	cf 93       	push	r28
    1394:	00 d0       	rcall	.+0      	; 0x1396 <DIO_U8TogglePin+0x6>
    1396:	00 d0       	rcall	.+0      	; 0x1398 <DIO_U8TogglePin+0x8>
    1398:	0f 92       	push	r0
    139a:	cd b7       	in	r28, 0x3d	; 61
    139c:	de b7       	in	r29, 0x3e	; 62
    139e:	8a 83       	std	Y+2, r24	; 0x02
    13a0:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_U8ErrorState=ERROR_STATE_NOK;
    13a2:	19 82       	std	Y+1, r1	; 0x01
	if((Copy_U8PortNumb <= DIO_PORTD) && (Copy_U8PinNumb <= DIO_PIN7))
    13a4:	8a 81       	ldd	r24, Y+2	; 0x02
    13a6:	84 30       	cpi	r24, 0x04	; 4
    13a8:	08 f0       	brcs	.+2      	; 0x13ac <DIO_U8TogglePin+0x1c>
    13aa:	76 c0       	rjmp	.+236    	; 0x1498 <DIO_U8TogglePin+0x108>
    13ac:	8b 81       	ldd	r24, Y+3	; 0x03
    13ae:	88 30       	cpi	r24, 0x08	; 8
    13b0:	08 f0       	brcs	.+2      	; 0x13b4 <DIO_U8TogglePin+0x24>
    13b2:	72 c0       	rjmp	.+228    	; 0x1498 <DIO_U8TogglePin+0x108>
	{
		switch(Copy_U8PortNumb)
    13b4:	8a 81       	ldd	r24, Y+2	; 0x02
    13b6:	28 2f       	mov	r18, r24
    13b8:	30 e0       	ldi	r19, 0x00	; 0
    13ba:	3d 83       	std	Y+5, r19	; 0x05
    13bc:	2c 83       	std	Y+4, r18	; 0x04
    13be:	8c 81       	ldd	r24, Y+4	; 0x04
    13c0:	9d 81       	ldd	r25, Y+5	; 0x05
    13c2:	81 30       	cpi	r24, 0x01	; 1
    13c4:	91 05       	cpc	r25, r1
    13c6:	49 f1       	breq	.+82     	; 0x141a <DIO_U8TogglePin+0x8a>
    13c8:	2c 81       	ldd	r18, Y+4	; 0x04
    13ca:	3d 81       	ldd	r19, Y+5	; 0x05
    13cc:	22 30       	cpi	r18, 0x02	; 2
    13ce:	31 05       	cpc	r19, r1
    13d0:	2c f4       	brge	.+10     	; 0x13dc <DIO_U8TogglePin+0x4c>
    13d2:	8c 81       	ldd	r24, Y+4	; 0x04
    13d4:	9d 81       	ldd	r25, Y+5	; 0x05
    13d6:	00 97       	sbiw	r24, 0x00	; 0
    13d8:	61 f0       	breq	.+24     	; 0x13f2 <DIO_U8TogglePin+0x62>
    13da:	5b c0       	rjmp	.+182    	; 0x1492 <DIO_U8TogglePin+0x102>
    13dc:	2c 81       	ldd	r18, Y+4	; 0x04
    13de:	3d 81       	ldd	r19, Y+5	; 0x05
    13e0:	22 30       	cpi	r18, 0x02	; 2
    13e2:	31 05       	cpc	r19, r1
    13e4:	71 f1       	breq	.+92     	; 0x1442 <DIO_U8TogglePin+0xb2>
    13e6:	8c 81       	ldd	r24, Y+4	; 0x04
    13e8:	9d 81       	ldd	r25, Y+5	; 0x05
    13ea:	83 30       	cpi	r24, 0x03	; 3
    13ec:	91 05       	cpc	r25, r1
    13ee:	e9 f1       	breq	.+122    	; 0x146a <DIO_U8TogglePin+0xda>
    13f0:	50 c0       	rjmp	.+160    	; 0x1492 <DIO_U8TogglePin+0x102>
		{	
			case DIO_PORTA: TOG_BIT(PORTA,Copy_U8PinNumb); break;
    13f2:	ab e3       	ldi	r26, 0x3B	; 59
    13f4:	b0 e0       	ldi	r27, 0x00	; 0
    13f6:	eb e3       	ldi	r30, 0x3B	; 59
    13f8:	f0 e0       	ldi	r31, 0x00	; 0
    13fa:	80 81       	ld	r24, Z
    13fc:	48 2f       	mov	r20, r24
    13fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1400:	28 2f       	mov	r18, r24
    1402:	30 e0       	ldi	r19, 0x00	; 0
    1404:	81 e0       	ldi	r24, 0x01	; 1
    1406:	90 e0       	ldi	r25, 0x00	; 0
    1408:	02 2e       	mov	r0, r18
    140a:	02 c0       	rjmp	.+4      	; 0x1410 <DIO_U8TogglePin+0x80>
    140c:	88 0f       	add	r24, r24
    140e:	99 1f       	adc	r25, r25
    1410:	0a 94       	dec	r0
    1412:	e2 f7       	brpl	.-8      	; 0x140c <DIO_U8TogglePin+0x7c>
    1414:	84 27       	eor	r24, r20
    1416:	8c 93       	st	X, r24
    1418:	41 c0       	rjmp	.+130    	; 0x149c <DIO_U8TogglePin+0x10c>
			case DIO_PORTB: TOG_BIT(PORTB,Copy_U8PinNumb); break;
    141a:	a8 e3       	ldi	r26, 0x38	; 56
    141c:	b0 e0       	ldi	r27, 0x00	; 0
    141e:	e8 e3       	ldi	r30, 0x38	; 56
    1420:	f0 e0       	ldi	r31, 0x00	; 0
    1422:	80 81       	ld	r24, Z
    1424:	48 2f       	mov	r20, r24
    1426:	8b 81       	ldd	r24, Y+3	; 0x03
    1428:	28 2f       	mov	r18, r24
    142a:	30 e0       	ldi	r19, 0x00	; 0
    142c:	81 e0       	ldi	r24, 0x01	; 1
    142e:	90 e0       	ldi	r25, 0x00	; 0
    1430:	02 2e       	mov	r0, r18
    1432:	02 c0       	rjmp	.+4      	; 0x1438 <DIO_U8TogglePin+0xa8>
    1434:	88 0f       	add	r24, r24
    1436:	99 1f       	adc	r25, r25
    1438:	0a 94       	dec	r0
    143a:	e2 f7       	brpl	.-8      	; 0x1434 <DIO_U8TogglePin+0xa4>
    143c:	84 27       	eor	r24, r20
    143e:	8c 93       	st	X, r24
    1440:	2d c0       	rjmp	.+90     	; 0x149c <DIO_U8TogglePin+0x10c>
			case DIO_PORTC: TOG_BIT(PORTC,Copy_U8PinNumb); break;
    1442:	a5 e3       	ldi	r26, 0x35	; 53
    1444:	b0 e0       	ldi	r27, 0x00	; 0
    1446:	e5 e3       	ldi	r30, 0x35	; 53
    1448:	f0 e0       	ldi	r31, 0x00	; 0
    144a:	80 81       	ld	r24, Z
    144c:	48 2f       	mov	r20, r24
    144e:	8b 81       	ldd	r24, Y+3	; 0x03
    1450:	28 2f       	mov	r18, r24
    1452:	30 e0       	ldi	r19, 0x00	; 0
    1454:	81 e0       	ldi	r24, 0x01	; 1
    1456:	90 e0       	ldi	r25, 0x00	; 0
    1458:	02 2e       	mov	r0, r18
    145a:	02 c0       	rjmp	.+4      	; 0x1460 <DIO_U8TogglePin+0xd0>
    145c:	88 0f       	add	r24, r24
    145e:	99 1f       	adc	r25, r25
    1460:	0a 94       	dec	r0
    1462:	e2 f7       	brpl	.-8      	; 0x145c <DIO_U8TogglePin+0xcc>
    1464:	84 27       	eor	r24, r20
    1466:	8c 93       	st	X, r24
    1468:	19 c0       	rjmp	.+50     	; 0x149c <DIO_U8TogglePin+0x10c>
			case DIO_PORTD: TOG_BIT(PORTD,Copy_U8PinNumb); break;
    146a:	a2 e3       	ldi	r26, 0x32	; 50
    146c:	b0 e0       	ldi	r27, 0x00	; 0
    146e:	e2 e3       	ldi	r30, 0x32	; 50
    1470:	f0 e0       	ldi	r31, 0x00	; 0
    1472:	80 81       	ld	r24, Z
    1474:	48 2f       	mov	r20, r24
    1476:	8b 81       	ldd	r24, Y+3	; 0x03
    1478:	28 2f       	mov	r18, r24
    147a:	30 e0       	ldi	r19, 0x00	; 0
    147c:	81 e0       	ldi	r24, 0x01	; 1
    147e:	90 e0       	ldi	r25, 0x00	; 0
    1480:	02 2e       	mov	r0, r18
    1482:	02 c0       	rjmp	.+4      	; 0x1488 <DIO_U8TogglePin+0xf8>
    1484:	88 0f       	add	r24, r24
    1486:	99 1f       	adc	r25, r25
    1488:	0a 94       	dec	r0
    148a:	e2 f7       	brpl	.-8      	; 0x1484 <DIO_U8TogglePin+0xf4>
    148c:	84 27       	eor	r24, r20
    148e:	8c 93       	st	X, r24
    1490:	05 c0       	rjmp	.+10     	; 0x149c <DIO_U8TogglePin+0x10c>
			default:
			Local_U8ErrorState=ERROR_STATE_OK;
    1492:	81 e0       	ldi	r24, 0x01	; 1
    1494:	89 83       	std	Y+1, r24	; 0x01
    1496:	02 c0       	rjmp	.+4      	; 0x149c <DIO_U8TogglePin+0x10c>
			break;		
		}
	}
	else
	{
		 Local_U8ErrorState=ERROR_STATE_OK;
    1498:	81 e0       	ldi	r24, 0x01	; 1
    149a:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_U8ErrorState;
    149c:	89 81       	ldd	r24, Y+1	; 0x01
}
    149e:	0f 90       	pop	r0
    14a0:	0f 90       	pop	r0
    14a2:	0f 90       	pop	r0
    14a4:	0f 90       	pop	r0
    14a6:	0f 90       	pop	r0
    14a8:	cf 91       	pop	r28
    14aa:	df 91       	pop	r29
    14ac:	08 95       	ret

000014ae <DIO_U8SetPortDirection>:

u8 DIO_U8SetPortDirection(u8 Copy_U8PortNumb,u8 Copy_U8Directon)
{
    14ae:	df 93       	push	r29
    14b0:	cf 93       	push	r28
    14b2:	cd b7       	in	r28, 0x3d	; 61
    14b4:	de b7       	in	r29, 0x3e	; 62
    14b6:	29 97       	sbiw	r28, 0x09	; 9
    14b8:	0f b6       	in	r0, 0x3f	; 63
    14ba:	f8 94       	cli
    14bc:	de bf       	out	0x3e, r29	; 62
    14be:	0f be       	out	0x3f, r0	; 63
    14c0:	cd bf       	out	0x3d, r28	; 61
    14c2:	8a 83       	std	Y+2, r24	; 0x02
    14c4:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_U8ErrorState=ERROR_STATE_NOK;
    14c6:	19 82       	std	Y+1, r1	; 0x01
	if((Copy_U8PortNumb <= DIO_PORTD) && (Copy_U8Directon <=DIO_PORT_OUT))
    14c8:	8a 81       	ldd	r24, Y+2	; 0x02
    14ca:	84 30       	cpi	r24, 0x04	; 4
    14cc:	08 f0       	brcs	.+2      	; 0x14d0 <DIO_U8SetPortDirection+0x22>
    14ce:	a4 c0       	rjmp	.+328    	; 0x1618 <DIO_U8SetPortDirection+0x16a>
	{
		if(Copy_U8Directon == DIO_PORT_OUT)
    14d0:	8b 81       	ldd	r24, Y+3	; 0x03
    14d2:	8f 3f       	cpi	r24, 0xFF	; 255
    14d4:	b1 f5       	brne	.+108    	; 0x1542 <DIO_U8SetPortDirection+0x94>
		{
			switch(Copy_U8PortNumb)
    14d6:	8a 81       	ldd	r24, Y+2	; 0x02
    14d8:	28 2f       	mov	r18, r24
    14da:	30 e0       	ldi	r19, 0x00	; 0
    14dc:	39 87       	std	Y+9, r19	; 0x09
    14de:	28 87       	std	Y+8, r18	; 0x08
    14e0:	88 85       	ldd	r24, Y+8	; 0x08
    14e2:	99 85       	ldd	r25, Y+9	; 0x09
    14e4:	81 30       	cpi	r24, 0x01	; 1
    14e6:	91 05       	cpc	r25, r1
    14e8:	d1 f0       	breq	.+52     	; 0x151e <DIO_U8SetPortDirection+0x70>
    14ea:	28 85       	ldd	r18, Y+8	; 0x08
    14ec:	39 85       	ldd	r19, Y+9	; 0x09
    14ee:	22 30       	cpi	r18, 0x02	; 2
    14f0:	31 05       	cpc	r19, r1
    14f2:	2c f4       	brge	.+10     	; 0x14fe <DIO_U8SetPortDirection+0x50>
    14f4:	88 85       	ldd	r24, Y+8	; 0x08
    14f6:	99 85       	ldd	r25, Y+9	; 0x09
    14f8:	00 97       	sbiw	r24, 0x00	; 0
    14fa:	61 f0       	breq	.+24     	; 0x1514 <DIO_U8SetPortDirection+0x66>
    14fc:	1f c0       	rjmp	.+62     	; 0x153c <DIO_U8SetPortDirection+0x8e>
    14fe:	28 85       	ldd	r18, Y+8	; 0x08
    1500:	39 85       	ldd	r19, Y+9	; 0x09
    1502:	22 30       	cpi	r18, 0x02	; 2
    1504:	31 05       	cpc	r19, r1
    1506:	81 f0       	breq	.+32     	; 0x1528 <DIO_U8SetPortDirection+0x7a>
    1508:	88 85       	ldd	r24, Y+8	; 0x08
    150a:	99 85       	ldd	r25, Y+9	; 0x09
    150c:	83 30       	cpi	r24, 0x03	; 3
    150e:	91 05       	cpc	r25, r1
    1510:	81 f0       	breq	.+32     	; 0x1532 <DIO_U8SetPortDirection+0x84>
    1512:	14 c0       	rjmp	.+40     	; 0x153c <DIO_U8SetPortDirection+0x8e>
			{
				case DIO_PORTA: DDRA=DIO_PORT_OUT; break;
    1514:	ea e3       	ldi	r30, 0x3A	; 58
    1516:	f0 e0       	ldi	r31, 0x00	; 0
    1518:	8f ef       	ldi	r24, 0xFF	; 255
    151a:	80 83       	st	Z, r24
    151c:	7f c0       	rjmp	.+254    	; 0x161c <DIO_U8SetPortDirection+0x16e>
				case DIO_PORTB: DDRB=DIO_PORT_OUT; break;
    151e:	e7 e3       	ldi	r30, 0x37	; 55
    1520:	f0 e0       	ldi	r31, 0x00	; 0
    1522:	8f ef       	ldi	r24, 0xFF	; 255
    1524:	80 83       	st	Z, r24
    1526:	7a c0       	rjmp	.+244    	; 0x161c <DIO_U8SetPortDirection+0x16e>
				case DIO_PORTC: DDRC=DIO_PORT_OUT; break;
    1528:	e4 e3       	ldi	r30, 0x34	; 52
    152a:	f0 e0       	ldi	r31, 0x00	; 0
    152c:	8f ef       	ldi	r24, 0xFF	; 255
    152e:	80 83       	st	Z, r24
    1530:	75 c0       	rjmp	.+234    	; 0x161c <DIO_U8SetPortDirection+0x16e>
				case DIO_PORTD: DDRD=DIO_PORT_OUT; break;
    1532:	e1 e3       	ldi	r30, 0x31	; 49
    1534:	f0 e0       	ldi	r31, 0x00	; 0
    1536:	8f ef       	ldi	r24, 0xFF	; 255
    1538:	80 83       	st	Z, r24
    153a:	70 c0       	rjmp	.+224    	; 0x161c <DIO_U8SetPortDirection+0x16e>
				default:
				Local_U8ErrorState=ERROR_STATE_OK;
    153c:	81 e0       	ldi	r24, 0x01	; 1
    153e:	89 83       	std	Y+1, r24	; 0x01
    1540:	6d c0       	rjmp	.+218    	; 0x161c <DIO_U8SetPortDirection+0x16e>
				break;	
			}
		}
		else if(Copy_U8Directon == DIO_PORT_IN)
    1542:	8b 81       	ldd	r24, Y+3	; 0x03
    1544:	88 23       	and	r24, r24
    1546:	91 f5       	brne	.+100    	; 0x15ac <DIO_U8SetPortDirection+0xfe>
		{
			switch(Copy_U8PortNumb)
    1548:	8a 81       	ldd	r24, Y+2	; 0x02
    154a:	28 2f       	mov	r18, r24
    154c:	30 e0       	ldi	r19, 0x00	; 0
    154e:	3f 83       	std	Y+7, r19	; 0x07
    1550:	2e 83       	std	Y+6, r18	; 0x06
    1552:	8e 81       	ldd	r24, Y+6	; 0x06
    1554:	9f 81       	ldd	r25, Y+7	; 0x07
    1556:	81 30       	cpi	r24, 0x01	; 1
    1558:	91 05       	cpc	r25, r1
    155a:	c9 f0       	breq	.+50     	; 0x158e <DIO_U8SetPortDirection+0xe0>
    155c:	2e 81       	ldd	r18, Y+6	; 0x06
    155e:	3f 81       	ldd	r19, Y+7	; 0x07
    1560:	22 30       	cpi	r18, 0x02	; 2
    1562:	31 05       	cpc	r19, r1
    1564:	2c f4       	brge	.+10     	; 0x1570 <DIO_U8SetPortDirection+0xc2>
    1566:	8e 81       	ldd	r24, Y+6	; 0x06
    1568:	9f 81       	ldd	r25, Y+7	; 0x07
    156a:	00 97       	sbiw	r24, 0x00	; 0
    156c:	61 f0       	breq	.+24     	; 0x1586 <DIO_U8SetPortDirection+0xd8>
    156e:	1b c0       	rjmp	.+54     	; 0x15a6 <DIO_U8SetPortDirection+0xf8>
    1570:	2e 81       	ldd	r18, Y+6	; 0x06
    1572:	3f 81       	ldd	r19, Y+7	; 0x07
    1574:	22 30       	cpi	r18, 0x02	; 2
    1576:	31 05       	cpc	r19, r1
    1578:	71 f0       	breq	.+28     	; 0x1596 <DIO_U8SetPortDirection+0xe8>
    157a:	8e 81       	ldd	r24, Y+6	; 0x06
    157c:	9f 81       	ldd	r25, Y+7	; 0x07
    157e:	83 30       	cpi	r24, 0x03	; 3
    1580:	91 05       	cpc	r25, r1
    1582:	69 f0       	breq	.+26     	; 0x159e <DIO_U8SetPortDirection+0xf0>
    1584:	10 c0       	rjmp	.+32     	; 0x15a6 <DIO_U8SetPortDirection+0xf8>
			{
				case DIO_PORTA: DDRA=DIO_PORT_IN; break;
    1586:	ea e3       	ldi	r30, 0x3A	; 58
    1588:	f0 e0       	ldi	r31, 0x00	; 0
    158a:	10 82       	st	Z, r1
    158c:	47 c0       	rjmp	.+142    	; 0x161c <DIO_U8SetPortDirection+0x16e>
				case DIO_PORTB: DDRB=DIO_PORT_IN; break;
    158e:	e7 e3       	ldi	r30, 0x37	; 55
    1590:	f0 e0       	ldi	r31, 0x00	; 0
    1592:	10 82       	st	Z, r1
    1594:	43 c0       	rjmp	.+134    	; 0x161c <DIO_U8SetPortDirection+0x16e>
				case DIO_PORTC: DDRC=DIO_PORT_IN; break;
    1596:	e4 e3       	ldi	r30, 0x34	; 52
    1598:	f0 e0       	ldi	r31, 0x00	; 0
    159a:	10 82       	st	Z, r1
    159c:	3f c0       	rjmp	.+126    	; 0x161c <DIO_U8SetPortDirection+0x16e>
				case DIO_PORTD: DDRD=DIO_PORT_IN; break;
    159e:	e1 e3       	ldi	r30, 0x31	; 49
    15a0:	f0 e0       	ldi	r31, 0x00	; 0
    15a2:	10 82       	st	Z, r1
    15a4:	3b c0       	rjmp	.+118    	; 0x161c <DIO_U8SetPortDirection+0x16e>
				default:
				Local_U8ErrorState=ERROR_STATE_OK;
    15a6:	81 e0       	ldi	r24, 0x01	; 1
    15a8:	89 83       	std	Y+1, r24	; 0x01
    15aa:	38 c0       	rjmp	.+112    	; 0x161c <DIO_U8SetPortDirection+0x16e>
				break;	
			}
		}
		else
		{
			switch(Copy_U8PortNumb)
    15ac:	8a 81       	ldd	r24, Y+2	; 0x02
    15ae:	28 2f       	mov	r18, r24
    15b0:	30 e0       	ldi	r19, 0x00	; 0
    15b2:	3d 83       	std	Y+5, r19	; 0x05
    15b4:	2c 83       	std	Y+4, r18	; 0x04
    15b6:	8c 81       	ldd	r24, Y+4	; 0x04
    15b8:	9d 81       	ldd	r25, Y+5	; 0x05
    15ba:	81 30       	cpi	r24, 0x01	; 1
    15bc:	91 05       	cpc	r25, r1
    15be:	d1 f0       	breq	.+52     	; 0x15f4 <DIO_U8SetPortDirection+0x146>
    15c0:	2c 81       	ldd	r18, Y+4	; 0x04
    15c2:	3d 81       	ldd	r19, Y+5	; 0x05
    15c4:	22 30       	cpi	r18, 0x02	; 2
    15c6:	31 05       	cpc	r19, r1
    15c8:	2c f4       	brge	.+10     	; 0x15d4 <DIO_U8SetPortDirection+0x126>
    15ca:	8c 81       	ldd	r24, Y+4	; 0x04
    15cc:	9d 81       	ldd	r25, Y+5	; 0x05
    15ce:	00 97       	sbiw	r24, 0x00	; 0
    15d0:	61 f0       	breq	.+24     	; 0x15ea <DIO_U8SetPortDirection+0x13c>
    15d2:	1f c0       	rjmp	.+62     	; 0x1612 <DIO_U8SetPortDirection+0x164>
    15d4:	2c 81       	ldd	r18, Y+4	; 0x04
    15d6:	3d 81       	ldd	r19, Y+5	; 0x05
    15d8:	22 30       	cpi	r18, 0x02	; 2
    15da:	31 05       	cpc	r19, r1
    15dc:	81 f0       	breq	.+32     	; 0x15fe <DIO_U8SetPortDirection+0x150>
    15de:	8c 81       	ldd	r24, Y+4	; 0x04
    15e0:	9d 81       	ldd	r25, Y+5	; 0x05
    15e2:	83 30       	cpi	r24, 0x03	; 3
    15e4:	91 05       	cpc	r25, r1
    15e6:	81 f0       	breq	.+32     	; 0x1608 <DIO_U8SetPortDirection+0x15a>
    15e8:	14 c0       	rjmp	.+40     	; 0x1612 <DIO_U8SetPortDirection+0x164>
			{
				case DIO_PORTA: DDRA=Copy_U8Directon; break;
    15ea:	ea e3       	ldi	r30, 0x3A	; 58
    15ec:	f0 e0       	ldi	r31, 0x00	; 0
    15ee:	8b 81       	ldd	r24, Y+3	; 0x03
    15f0:	80 83       	st	Z, r24
    15f2:	14 c0       	rjmp	.+40     	; 0x161c <DIO_U8SetPortDirection+0x16e>
				case DIO_PORTB: DDRB=Copy_U8Directon; break;
    15f4:	e7 e3       	ldi	r30, 0x37	; 55
    15f6:	f0 e0       	ldi	r31, 0x00	; 0
    15f8:	8b 81       	ldd	r24, Y+3	; 0x03
    15fa:	80 83       	st	Z, r24
    15fc:	0f c0       	rjmp	.+30     	; 0x161c <DIO_U8SetPortDirection+0x16e>
				case DIO_PORTC: DDRC=Copy_U8Directon; break;
    15fe:	e4 e3       	ldi	r30, 0x34	; 52
    1600:	f0 e0       	ldi	r31, 0x00	; 0
    1602:	8b 81       	ldd	r24, Y+3	; 0x03
    1604:	80 83       	st	Z, r24
    1606:	0a c0       	rjmp	.+20     	; 0x161c <DIO_U8SetPortDirection+0x16e>
				case DIO_PORTD: DDRD=Copy_U8Directon; break;
    1608:	e1 e3       	ldi	r30, 0x31	; 49
    160a:	f0 e0       	ldi	r31, 0x00	; 0
    160c:	8b 81       	ldd	r24, Y+3	; 0x03
    160e:	80 83       	st	Z, r24
    1610:	05 c0       	rjmp	.+10     	; 0x161c <DIO_U8SetPortDirection+0x16e>
				default:
				Local_U8ErrorState=ERROR_STATE_OK;
    1612:	81 e0       	ldi	r24, 0x01	; 1
    1614:	89 83       	std	Y+1, r24	; 0x01
    1616:	02 c0       	rjmp	.+4      	; 0x161c <DIO_U8SetPortDirection+0x16e>
			}
		}
	}
	else
	{
		 Local_U8ErrorState=ERROR_STATE_OK;
    1618:	81 e0       	ldi	r24, 0x01	; 1
    161a:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_U8ErrorState;
    161c:	89 81       	ldd	r24, Y+1	; 0x01
}
    161e:	29 96       	adiw	r28, 0x09	; 9
    1620:	0f b6       	in	r0, 0x3f	; 63
    1622:	f8 94       	cli
    1624:	de bf       	out	0x3e, r29	; 62
    1626:	0f be       	out	0x3f, r0	; 63
    1628:	cd bf       	out	0x3d, r28	; 61
    162a:	cf 91       	pop	r28
    162c:	df 91       	pop	r29
    162e:	08 95       	ret

00001630 <DIO_U8SetPortValue>:

u8 DIO_U8SetPortValue(u8 Copy_U8PortNumb,u8 Copy_U8Value)
{
    1630:	df 93       	push	r29
    1632:	cf 93       	push	r28
    1634:	cd b7       	in	r28, 0x3d	; 61
    1636:	de b7       	in	r29, 0x3e	; 62
    1638:	29 97       	sbiw	r28, 0x09	; 9
    163a:	0f b6       	in	r0, 0x3f	; 63
    163c:	f8 94       	cli
    163e:	de bf       	out	0x3e, r29	; 62
    1640:	0f be       	out	0x3f, r0	; 63
    1642:	cd bf       	out	0x3d, r28	; 61
    1644:	8a 83       	std	Y+2, r24	; 0x02
    1646:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_U8ErrorState=ERROR_STATE_NOK;
    1648:	19 82       	std	Y+1, r1	; 0x01
	if((Copy_U8PortNumb <= DIO_PORTD) && (Copy_U8Value <=DIO_PORT_HIGH))
    164a:	8a 81       	ldd	r24, Y+2	; 0x02
    164c:	84 30       	cpi	r24, 0x04	; 4
    164e:	08 f0       	brcs	.+2      	; 0x1652 <DIO_U8SetPortValue+0x22>
    1650:	a4 c0       	rjmp	.+328    	; 0x179a <DIO_U8SetPortValue+0x16a>
	{
		if(Copy_U8Value == DIO_PORT_HIGH)
    1652:	8b 81       	ldd	r24, Y+3	; 0x03
    1654:	8f 3f       	cpi	r24, 0xFF	; 255
    1656:	b1 f5       	brne	.+108    	; 0x16c4 <DIO_U8SetPortValue+0x94>
		{
			switch(Copy_U8PortNumb)
    1658:	8a 81       	ldd	r24, Y+2	; 0x02
    165a:	28 2f       	mov	r18, r24
    165c:	30 e0       	ldi	r19, 0x00	; 0
    165e:	39 87       	std	Y+9, r19	; 0x09
    1660:	28 87       	std	Y+8, r18	; 0x08
    1662:	88 85       	ldd	r24, Y+8	; 0x08
    1664:	99 85       	ldd	r25, Y+9	; 0x09
    1666:	81 30       	cpi	r24, 0x01	; 1
    1668:	91 05       	cpc	r25, r1
    166a:	d1 f0       	breq	.+52     	; 0x16a0 <DIO_U8SetPortValue+0x70>
    166c:	28 85       	ldd	r18, Y+8	; 0x08
    166e:	39 85       	ldd	r19, Y+9	; 0x09
    1670:	22 30       	cpi	r18, 0x02	; 2
    1672:	31 05       	cpc	r19, r1
    1674:	2c f4       	brge	.+10     	; 0x1680 <DIO_U8SetPortValue+0x50>
    1676:	88 85       	ldd	r24, Y+8	; 0x08
    1678:	99 85       	ldd	r25, Y+9	; 0x09
    167a:	00 97       	sbiw	r24, 0x00	; 0
    167c:	61 f0       	breq	.+24     	; 0x1696 <DIO_U8SetPortValue+0x66>
    167e:	1f c0       	rjmp	.+62     	; 0x16be <DIO_U8SetPortValue+0x8e>
    1680:	28 85       	ldd	r18, Y+8	; 0x08
    1682:	39 85       	ldd	r19, Y+9	; 0x09
    1684:	22 30       	cpi	r18, 0x02	; 2
    1686:	31 05       	cpc	r19, r1
    1688:	81 f0       	breq	.+32     	; 0x16aa <DIO_U8SetPortValue+0x7a>
    168a:	88 85       	ldd	r24, Y+8	; 0x08
    168c:	99 85       	ldd	r25, Y+9	; 0x09
    168e:	83 30       	cpi	r24, 0x03	; 3
    1690:	91 05       	cpc	r25, r1
    1692:	81 f0       	breq	.+32     	; 0x16b4 <DIO_U8SetPortValue+0x84>
    1694:	14 c0       	rjmp	.+40     	; 0x16be <DIO_U8SetPortValue+0x8e>
			{
				case DIO_PORTA:  PORTA=DIO_PORT_HIGH; break;
    1696:	eb e3       	ldi	r30, 0x3B	; 59
    1698:	f0 e0       	ldi	r31, 0x00	; 0
    169a:	8f ef       	ldi	r24, 0xFF	; 255
    169c:	80 83       	st	Z, r24
    169e:	7f c0       	rjmp	.+254    	; 0x179e <DIO_U8SetPortValue+0x16e>
				case DIO_PORTB: PORTB=DIO_PORT_HIGH; break;
    16a0:	e8 e3       	ldi	r30, 0x38	; 56
    16a2:	f0 e0       	ldi	r31, 0x00	; 0
    16a4:	8f ef       	ldi	r24, 0xFF	; 255
    16a6:	80 83       	st	Z, r24
    16a8:	7a c0       	rjmp	.+244    	; 0x179e <DIO_U8SetPortValue+0x16e>
				case DIO_PORTC: PORTC=DIO_PORT_HIGH; break;
    16aa:	e5 e3       	ldi	r30, 0x35	; 53
    16ac:	f0 e0       	ldi	r31, 0x00	; 0
    16ae:	8f ef       	ldi	r24, 0xFF	; 255
    16b0:	80 83       	st	Z, r24
    16b2:	75 c0       	rjmp	.+234    	; 0x179e <DIO_U8SetPortValue+0x16e>
				case DIO_PORTD: PORTD=DIO_PORT_HIGH; break;
    16b4:	e2 e3       	ldi	r30, 0x32	; 50
    16b6:	f0 e0       	ldi	r31, 0x00	; 0
    16b8:	8f ef       	ldi	r24, 0xFF	; 255
    16ba:	80 83       	st	Z, r24
    16bc:	70 c0       	rjmp	.+224    	; 0x179e <DIO_U8SetPortValue+0x16e>
				default:
				Local_U8ErrorState=ERROR_STATE_OK;
    16be:	81 e0       	ldi	r24, 0x01	; 1
    16c0:	89 83       	std	Y+1, r24	; 0x01
    16c2:	6d c0       	rjmp	.+218    	; 0x179e <DIO_U8SetPortValue+0x16e>
				break;	
			}
		}
		else if(Copy_U8Value == DIO_PORT_IN)
    16c4:	8b 81       	ldd	r24, Y+3	; 0x03
    16c6:	88 23       	and	r24, r24
    16c8:	91 f5       	brne	.+100    	; 0x172e <DIO_U8SetPortValue+0xfe>
		{
			switch(Copy_U8PortNumb)
    16ca:	8a 81       	ldd	r24, Y+2	; 0x02
    16cc:	28 2f       	mov	r18, r24
    16ce:	30 e0       	ldi	r19, 0x00	; 0
    16d0:	3f 83       	std	Y+7, r19	; 0x07
    16d2:	2e 83       	std	Y+6, r18	; 0x06
    16d4:	8e 81       	ldd	r24, Y+6	; 0x06
    16d6:	9f 81       	ldd	r25, Y+7	; 0x07
    16d8:	81 30       	cpi	r24, 0x01	; 1
    16da:	91 05       	cpc	r25, r1
    16dc:	c9 f0       	breq	.+50     	; 0x1710 <DIO_U8SetPortValue+0xe0>
    16de:	2e 81       	ldd	r18, Y+6	; 0x06
    16e0:	3f 81       	ldd	r19, Y+7	; 0x07
    16e2:	22 30       	cpi	r18, 0x02	; 2
    16e4:	31 05       	cpc	r19, r1
    16e6:	2c f4       	brge	.+10     	; 0x16f2 <DIO_U8SetPortValue+0xc2>
    16e8:	8e 81       	ldd	r24, Y+6	; 0x06
    16ea:	9f 81       	ldd	r25, Y+7	; 0x07
    16ec:	00 97       	sbiw	r24, 0x00	; 0
    16ee:	61 f0       	breq	.+24     	; 0x1708 <DIO_U8SetPortValue+0xd8>
    16f0:	1b c0       	rjmp	.+54     	; 0x1728 <DIO_U8SetPortValue+0xf8>
    16f2:	2e 81       	ldd	r18, Y+6	; 0x06
    16f4:	3f 81       	ldd	r19, Y+7	; 0x07
    16f6:	22 30       	cpi	r18, 0x02	; 2
    16f8:	31 05       	cpc	r19, r1
    16fa:	71 f0       	breq	.+28     	; 0x1718 <DIO_U8SetPortValue+0xe8>
    16fc:	8e 81       	ldd	r24, Y+6	; 0x06
    16fe:	9f 81       	ldd	r25, Y+7	; 0x07
    1700:	83 30       	cpi	r24, 0x03	; 3
    1702:	91 05       	cpc	r25, r1
    1704:	69 f0       	breq	.+26     	; 0x1720 <DIO_U8SetPortValue+0xf0>
    1706:	10 c0       	rjmp	.+32     	; 0x1728 <DIO_U8SetPortValue+0xf8>
			{
				case DIO_PORTA: PORTA=DIO_PORT_LOW; break;
    1708:	eb e3       	ldi	r30, 0x3B	; 59
    170a:	f0 e0       	ldi	r31, 0x00	; 0
    170c:	10 82       	st	Z, r1
    170e:	47 c0       	rjmp	.+142    	; 0x179e <DIO_U8SetPortValue+0x16e>
				case DIO_PORTB: PORTB=DIO_PORT_LOW; break;
    1710:	e8 e3       	ldi	r30, 0x38	; 56
    1712:	f0 e0       	ldi	r31, 0x00	; 0
    1714:	10 82       	st	Z, r1
    1716:	43 c0       	rjmp	.+134    	; 0x179e <DIO_U8SetPortValue+0x16e>
				case DIO_PORTC: PORTC=DIO_PORT_LOW; break;
    1718:	e5 e3       	ldi	r30, 0x35	; 53
    171a:	f0 e0       	ldi	r31, 0x00	; 0
    171c:	10 82       	st	Z, r1
    171e:	3f c0       	rjmp	.+126    	; 0x179e <DIO_U8SetPortValue+0x16e>
				case DIO_PORTD: PORTD=DIO_PORT_LOW; break;
    1720:	e2 e3       	ldi	r30, 0x32	; 50
    1722:	f0 e0       	ldi	r31, 0x00	; 0
    1724:	10 82       	st	Z, r1
    1726:	3b c0       	rjmp	.+118    	; 0x179e <DIO_U8SetPortValue+0x16e>
				default:
				Local_U8ErrorState=ERROR_STATE_OK;
    1728:	81 e0       	ldi	r24, 0x01	; 1
    172a:	89 83       	std	Y+1, r24	; 0x01
    172c:	38 c0       	rjmp	.+112    	; 0x179e <DIO_U8SetPortValue+0x16e>
				break;	
			}
		}
		else
		{
			switch(Copy_U8PortNumb)
    172e:	8a 81       	ldd	r24, Y+2	; 0x02
    1730:	28 2f       	mov	r18, r24
    1732:	30 e0       	ldi	r19, 0x00	; 0
    1734:	3d 83       	std	Y+5, r19	; 0x05
    1736:	2c 83       	std	Y+4, r18	; 0x04
    1738:	8c 81       	ldd	r24, Y+4	; 0x04
    173a:	9d 81       	ldd	r25, Y+5	; 0x05
    173c:	81 30       	cpi	r24, 0x01	; 1
    173e:	91 05       	cpc	r25, r1
    1740:	d1 f0       	breq	.+52     	; 0x1776 <DIO_U8SetPortValue+0x146>
    1742:	2c 81       	ldd	r18, Y+4	; 0x04
    1744:	3d 81       	ldd	r19, Y+5	; 0x05
    1746:	22 30       	cpi	r18, 0x02	; 2
    1748:	31 05       	cpc	r19, r1
    174a:	2c f4       	brge	.+10     	; 0x1756 <DIO_U8SetPortValue+0x126>
    174c:	8c 81       	ldd	r24, Y+4	; 0x04
    174e:	9d 81       	ldd	r25, Y+5	; 0x05
    1750:	00 97       	sbiw	r24, 0x00	; 0
    1752:	61 f0       	breq	.+24     	; 0x176c <DIO_U8SetPortValue+0x13c>
    1754:	1f c0       	rjmp	.+62     	; 0x1794 <DIO_U8SetPortValue+0x164>
    1756:	2c 81       	ldd	r18, Y+4	; 0x04
    1758:	3d 81       	ldd	r19, Y+5	; 0x05
    175a:	22 30       	cpi	r18, 0x02	; 2
    175c:	31 05       	cpc	r19, r1
    175e:	81 f0       	breq	.+32     	; 0x1780 <DIO_U8SetPortValue+0x150>
    1760:	8c 81       	ldd	r24, Y+4	; 0x04
    1762:	9d 81       	ldd	r25, Y+5	; 0x05
    1764:	83 30       	cpi	r24, 0x03	; 3
    1766:	91 05       	cpc	r25, r1
    1768:	81 f0       	breq	.+32     	; 0x178a <DIO_U8SetPortValue+0x15a>
    176a:	14 c0       	rjmp	.+40     	; 0x1794 <DIO_U8SetPortValue+0x164>
			{
				case DIO_PORTA: PORTA=Copy_U8Value; break;
    176c:	eb e3       	ldi	r30, 0x3B	; 59
    176e:	f0 e0       	ldi	r31, 0x00	; 0
    1770:	8b 81       	ldd	r24, Y+3	; 0x03
    1772:	80 83       	st	Z, r24
    1774:	14 c0       	rjmp	.+40     	; 0x179e <DIO_U8SetPortValue+0x16e>
				case DIO_PORTB: PORTB=Copy_U8Value; break;
    1776:	e8 e3       	ldi	r30, 0x38	; 56
    1778:	f0 e0       	ldi	r31, 0x00	; 0
    177a:	8b 81       	ldd	r24, Y+3	; 0x03
    177c:	80 83       	st	Z, r24
    177e:	0f c0       	rjmp	.+30     	; 0x179e <DIO_U8SetPortValue+0x16e>
				case DIO_PORTC: PORTC=Copy_U8Value; break;
    1780:	e5 e3       	ldi	r30, 0x35	; 53
    1782:	f0 e0       	ldi	r31, 0x00	; 0
    1784:	8b 81       	ldd	r24, Y+3	; 0x03
    1786:	80 83       	st	Z, r24
    1788:	0a c0       	rjmp	.+20     	; 0x179e <DIO_U8SetPortValue+0x16e>
				case DIO_PORTD: PORTD=Copy_U8Value; break;
    178a:	e2 e3       	ldi	r30, 0x32	; 50
    178c:	f0 e0       	ldi	r31, 0x00	; 0
    178e:	8b 81       	ldd	r24, Y+3	; 0x03
    1790:	80 83       	st	Z, r24
    1792:	05 c0       	rjmp	.+10     	; 0x179e <DIO_U8SetPortValue+0x16e>
				default:
				Local_U8ErrorState=ERROR_STATE_OK;
    1794:	81 e0       	ldi	r24, 0x01	; 1
    1796:	89 83       	std	Y+1, r24	; 0x01
    1798:	02 c0       	rjmp	.+4      	; 0x179e <DIO_U8SetPortValue+0x16e>
		}
		
	}
	else
	{
		 Local_U8ErrorState=ERROR_STATE_OK;
    179a:	81 e0       	ldi	r24, 0x01	; 1
    179c:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_U8ErrorState;
    179e:	89 81       	ldd	r24, Y+1	; 0x01
}
    17a0:	29 96       	adiw	r28, 0x09	; 9
    17a2:	0f b6       	in	r0, 0x3f	; 63
    17a4:	f8 94       	cli
    17a6:	de bf       	out	0x3e, r29	; 62
    17a8:	0f be       	out	0x3f, r0	; 63
    17aa:	cd bf       	out	0x3d, r28	; 61
    17ac:	cf 91       	pop	r28
    17ae:	df 91       	pop	r29
    17b0:	08 95       	ret

000017b2 <DIO_U8GetPortValue>:

u8 DIO_U8GetPortValue(u8 Copy_U8PortNumb,u8 *Copy_U8Value)
{
    17b2:	df 93       	push	r29
    17b4:	cf 93       	push	r28
    17b6:	00 d0       	rcall	.+0      	; 0x17b8 <DIO_U8GetPortValue+0x6>
    17b8:	00 d0       	rcall	.+0      	; 0x17ba <DIO_U8GetPortValue+0x8>
    17ba:	00 d0       	rcall	.+0      	; 0x17bc <DIO_U8GetPortValue+0xa>
    17bc:	cd b7       	in	r28, 0x3d	; 61
    17be:	de b7       	in	r29, 0x3e	; 62
    17c0:	8a 83       	std	Y+2, r24	; 0x02
    17c2:	7c 83       	std	Y+4, r23	; 0x04
    17c4:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_U8ErrorState=ERROR_STATE_NOK;
    17c6:	19 82       	std	Y+1, r1	; 0x01
	if((Copy_U8PortNumb <= DIO_PORTD))
    17c8:	8a 81       	ldd	r24, Y+2	; 0x02
    17ca:	84 30       	cpi	r24, 0x04	; 4
    17cc:	08 f0       	brcs	.+2      	; 0x17d0 <DIO_U8GetPortValue+0x1e>
    17ce:	3e c0       	rjmp	.+124    	; 0x184c <DIO_U8GetPortValue+0x9a>
	{
		switch(Copy_U8PortNumb)
    17d0:	8a 81       	ldd	r24, Y+2	; 0x02
    17d2:	28 2f       	mov	r18, r24
    17d4:	30 e0       	ldi	r19, 0x00	; 0
    17d6:	3e 83       	std	Y+6, r19	; 0x06
    17d8:	2d 83       	std	Y+5, r18	; 0x05
    17da:	8d 81       	ldd	r24, Y+5	; 0x05
    17dc:	9e 81       	ldd	r25, Y+6	; 0x06
    17de:	81 30       	cpi	r24, 0x01	; 1
    17e0:	91 05       	cpc	r25, r1
    17e2:	e1 f0       	breq	.+56     	; 0x181c <DIO_U8GetPortValue+0x6a>
    17e4:	2d 81       	ldd	r18, Y+5	; 0x05
    17e6:	3e 81       	ldd	r19, Y+6	; 0x06
    17e8:	22 30       	cpi	r18, 0x02	; 2
    17ea:	31 05       	cpc	r19, r1
    17ec:	2c f4       	brge	.+10     	; 0x17f8 <DIO_U8GetPortValue+0x46>
    17ee:	8d 81       	ldd	r24, Y+5	; 0x05
    17f0:	9e 81       	ldd	r25, Y+6	; 0x06
    17f2:	00 97       	sbiw	r24, 0x00	; 0
    17f4:	61 f0       	breq	.+24     	; 0x180e <DIO_U8GetPortValue+0x5c>
    17f6:	27 c0       	rjmp	.+78     	; 0x1846 <DIO_U8GetPortValue+0x94>
    17f8:	2d 81       	ldd	r18, Y+5	; 0x05
    17fa:	3e 81       	ldd	r19, Y+6	; 0x06
    17fc:	22 30       	cpi	r18, 0x02	; 2
    17fe:	31 05       	cpc	r19, r1
    1800:	a1 f0       	breq	.+40     	; 0x182a <DIO_U8GetPortValue+0x78>
    1802:	8d 81       	ldd	r24, Y+5	; 0x05
    1804:	9e 81       	ldd	r25, Y+6	; 0x06
    1806:	83 30       	cpi	r24, 0x03	; 3
    1808:	91 05       	cpc	r25, r1
    180a:	b1 f0       	breq	.+44     	; 0x1838 <DIO_U8GetPortValue+0x86>
    180c:	1c c0       	rjmp	.+56     	; 0x1846 <DIO_U8GetPortValue+0x94>
		{
			case DIO_PORTA: *Copy_U8Value=PINA; break;
    180e:	e9 e3       	ldi	r30, 0x39	; 57
    1810:	f0 e0       	ldi	r31, 0x00	; 0
    1812:	80 81       	ld	r24, Z
    1814:	eb 81       	ldd	r30, Y+3	; 0x03
    1816:	fc 81       	ldd	r31, Y+4	; 0x04
    1818:	80 83       	st	Z, r24
    181a:	1a c0       	rjmp	.+52     	; 0x1850 <DIO_U8GetPortValue+0x9e>
			case DIO_PORTB: *Copy_U8Value=PINB;; break;
    181c:	e6 e3       	ldi	r30, 0x36	; 54
    181e:	f0 e0       	ldi	r31, 0x00	; 0
    1820:	80 81       	ld	r24, Z
    1822:	eb 81       	ldd	r30, Y+3	; 0x03
    1824:	fc 81       	ldd	r31, Y+4	; 0x04
    1826:	80 83       	st	Z, r24
    1828:	13 c0       	rjmp	.+38     	; 0x1850 <DIO_U8GetPortValue+0x9e>
			case DIO_PORTC: *Copy_U8Value=PINC;; break;
    182a:	e3 e3       	ldi	r30, 0x33	; 51
    182c:	f0 e0       	ldi	r31, 0x00	; 0
    182e:	80 81       	ld	r24, Z
    1830:	eb 81       	ldd	r30, Y+3	; 0x03
    1832:	fc 81       	ldd	r31, Y+4	; 0x04
    1834:	80 83       	st	Z, r24
    1836:	0c c0       	rjmp	.+24     	; 0x1850 <DIO_U8GetPortValue+0x9e>
			case DIO_PORTD: *Copy_U8Value=PIND;; break;
    1838:	e0 e3       	ldi	r30, 0x30	; 48
    183a:	f0 e0       	ldi	r31, 0x00	; 0
    183c:	80 81       	ld	r24, Z
    183e:	eb 81       	ldd	r30, Y+3	; 0x03
    1840:	fc 81       	ldd	r31, Y+4	; 0x04
    1842:	80 83       	st	Z, r24
    1844:	05 c0       	rjmp	.+10     	; 0x1850 <DIO_U8GetPortValue+0x9e>
			default:
			Local_U8ErrorState=ERROR_STATE_OK;
    1846:	81 e0       	ldi	r24, 0x01	; 1
    1848:	89 83       	std	Y+1, r24	; 0x01
    184a:	02 c0       	rjmp	.+4      	; 0x1850 <DIO_U8GetPortValue+0x9e>
			break;	
		}
	}
	else
	{
		 Local_U8ErrorState=ERROR_STATE_OK;
    184c:	81 e0       	ldi	r24, 0x01	; 1
    184e:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_U8ErrorState;
    1850:	89 81       	ldd	r24, Y+1	; 0x01
}
    1852:	26 96       	adiw	r28, 0x06	; 6
    1854:	0f b6       	in	r0, 0x3f	; 63
    1856:	f8 94       	cli
    1858:	de bf       	out	0x3e, r29	; 62
    185a:	0f be       	out	0x3f, r0	; 63
    185c:	cd bf       	out	0x3d, r28	; 61
    185e:	cf 91       	pop	r28
    1860:	df 91       	pop	r29
    1862:	08 95       	ret

00001864 <I2C_VidMasterInit>:
#include "I2C_Interface.h"
#include "I2C_Private.h"


void I2C_VidMasterInit(void)
{
    1864:	df 93       	push	r29
    1866:	cf 93       	push	r28
    1868:	cd b7       	in	r28, 0x3d	; 61
    186a:	de b7       	in	r29, 0x3e	; 62
	/*01- set the Prescaller-> 1*/
	CLR_BIT(I2C_TWSR,TWPS0);
    186c:	a1 e2       	ldi	r26, 0x21	; 33
    186e:	b0 e0       	ldi	r27, 0x00	; 0
    1870:	e1 e2       	ldi	r30, 0x21	; 33
    1872:	f0 e0       	ldi	r31, 0x00	; 0
    1874:	80 81       	ld	r24, Z
    1876:	8e 7f       	andi	r24, 0xFE	; 254
    1878:	8c 93       	st	X, r24
	CLR_BIT(I2C_TWSR,TWPS1);
    187a:	a1 e2       	ldi	r26, 0x21	; 33
    187c:	b0 e0       	ldi	r27, 0x00	; 0
    187e:	e1 e2       	ldi	r30, 0x21	; 33
    1880:	f0 e0       	ldi	r31, 0x00	; 0
    1882:	80 81       	ld	r24, Z
    1884:	8d 7f       	andi	r24, 0xFD	; 253
    1886:	8c 93       	st	X, r24
	/*02- choose Frequancy -->400KHZ Max speed and for 200 200KHZ --> I2C_TWBR=12 */
	I2C_TWBR=2;
    1888:	e0 e2       	ldi	r30, 0x20	; 32
    188a:	f0 e0       	ldi	r31, 0x00	; 0
    188c:	82 e0       	ldi	r24, 0x02	; 2
    188e:	80 83       	st	Z, r24
	/*03- Enable I2C*/
	SET_BIT(I2C_TWCR,TWEN);
    1890:	a6 e5       	ldi	r26, 0x56	; 86
    1892:	b0 e0       	ldi	r27, 0x00	; 0
    1894:	e6 e5       	ldi	r30, 0x56	; 86
    1896:	f0 e0       	ldi	r31, 0x00	; 0
    1898:	80 81       	ld	r24, Z
    189a:	84 60       	ori	r24, 0x04	; 4
    189c:	8c 93       	st	X, r24
}
    189e:	cf 91       	pop	r28
    18a0:	df 91       	pop	r29
    18a2:	08 95       	ret

000018a4 <I2C_VidSlaveInit>:

void I2C_VidSlaveInit(u8 Copy_u8SlaveAddress)
{
    18a4:	df 93       	push	r29
    18a6:	cf 93       	push	r28
    18a8:	0f 92       	push	r0
    18aa:	cd b7       	in	r28, 0x3d	; 61
    18ac:	de b7       	in	r29, 0x3e	; 62
    18ae:	89 83       	std	Y+1, r24	; 0x01
	/*01- Enable the ACK Bit */
	SET_BIT(I2C_TWCR,TWEA);
    18b0:	a6 e5       	ldi	r26, 0x56	; 86
    18b2:	b0 e0       	ldi	r27, 0x00	; 0
    18b4:	e6 e5       	ldi	r30, 0x56	; 86
    18b6:	f0 e0       	ldi	r31, 0x00	; 0
    18b8:	80 81       	ld	r24, Z
    18ba:	80 64       	ori	r24, 0x40	; 64
    18bc:	8c 93       	st	X, r24
	/*02- Write Slave Address --> only 7 MSB*/
	I2C_TWAR=Copy_u8SlaveAddress<<1;  // as the data is only 7 bits and bit 0 is read write bit
    18be:	e2 e2       	ldi	r30, 0x22	; 34
    18c0:	f0 e0       	ldi	r31, 0x00	; 0
    18c2:	89 81       	ldd	r24, Y+1	; 0x01
    18c4:	88 0f       	add	r24, r24
    18c6:	80 83       	st	Z, r24
	/*03- Enable I2C */
	SET_BIT(I2C_TWCR,TWEN);
    18c8:	a6 e5       	ldi	r26, 0x56	; 86
    18ca:	b0 e0       	ldi	r27, 0x00	; 0
    18cc:	e6 e5       	ldi	r30, 0x56	; 86
    18ce:	f0 e0       	ldi	r31, 0x00	; 0
    18d0:	80 81       	ld	r24, Z
    18d2:	84 60       	ori	r24, 0x04	; 4
    18d4:	8c 93       	st	X, r24
}
    18d6:	0f 90       	pop	r0
    18d8:	cf 91       	pop	r28
    18da:	df 91       	pop	r29
    18dc:	08 95       	ret

000018de <I2C_VidStartCondition>:

void I2C_VidStartCondition(void)
{
    18de:	df 93       	push	r29
    18e0:	cf 93       	push	r28
    18e2:	cd b7       	in	r28, 0x3d	; 61
    18e4:	de b7       	in	r29, 0x3e	; 62
	/*01- Clear the flag & Enable the SC Pins*/
	
	SET_BIT(I2C_TWCR,TWINT);
    18e6:	a6 e5       	ldi	r26, 0x56	; 86
    18e8:	b0 e0       	ldi	r27, 0x00	; 0
    18ea:	e6 e5       	ldi	r30, 0x56	; 86
    18ec:	f0 e0       	ldi	r31, 0x00	; 0
    18ee:	80 81       	ld	r24, Z
    18f0:	80 68       	ori	r24, 0x80	; 128
    18f2:	8c 93       	st	X, r24
	SET_BIT(I2C_TWCR,TWSTA);
    18f4:	a6 e5       	ldi	r26, 0x56	; 86
    18f6:	b0 e0       	ldi	r27, 0x00	; 0
    18f8:	e6 e5       	ldi	r30, 0x56	; 86
    18fa:	f0 e0       	ldi	r31, 0x00	; 0
    18fc:	80 81       	ld	r24, Z
    18fe:	80 62       	ori	r24, 0x20	; 32
    1900:	8c 93       	st	X, r24
	
	/*02- wait for flag to be Cleared ---> Stuck */
	
	while((GET_BIT(I2C_TWCR,TWINT))==0);
    1902:	e6 e5       	ldi	r30, 0x56	; 86
    1904:	f0 e0       	ldi	r31, 0x00	; 0
    1906:	80 81       	ld	r24, Z
    1908:	88 23       	and	r24, r24
    190a:	dc f7       	brge	.-10     	; 0x1902 <I2C_VidStartCondition+0x24>
}
    190c:	cf 91       	pop	r28
    190e:	df 91       	pop	r29
    1910:	08 95       	ret

00001912 <I2C_VidStopCondition>:

void I2C_VidStopCondition(void)
{
    1912:	df 93       	push	r29
    1914:	cf 93       	push	r28
    1916:	cd b7       	in	r28, 0x3d	; 61
    1918:	de b7       	in	r29, 0x3e	; 62
	/*01- Clear the flag & Enable the SC Pins*/
	
	SET_BIT(I2C_TWCR,TWINT);
    191a:	a6 e5       	ldi	r26, 0x56	; 86
    191c:	b0 e0       	ldi	r27, 0x00	; 0
    191e:	e6 e5       	ldi	r30, 0x56	; 86
    1920:	f0 e0       	ldi	r31, 0x00	; 0
    1922:	80 81       	ld	r24, Z
    1924:	80 68       	ori	r24, 0x80	; 128
    1926:	8c 93       	st	X, r24
	SET_BIT(I2C_TWCR,TWSTO);
    1928:	a6 e5       	ldi	r26, 0x56	; 86
    192a:	b0 e0       	ldi	r27, 0x00	; 0
    192c:	e6 e5       	ldi	r30, 0x56	; 86
    192e:	f0 e0       	ldi	r31, 0x00	; 0
    1930:	80 81       	ld	r24, Z
    1932:	80 61       	ori	r24, 0x10	; 16
    1934:	8c 93       	st	X, r24
}
    1936:	cf 91       	pop	r28
    1938:	df 91       	pop	r29
    193a:	08 95       	ret

0000193c <I2C_VidSlaveAddressWrite>:

void I2C_VidSlaveAddressWrite(u8 Copy_u8SlaveAddress)//written by master
{
    193c:	df 93       	push	r29
    193e:	cf 93       	push	r28
    1940:	0f 92       	push	r0
    1942:	cd b7       	in	r28, 0x3d	; 61
    1944:	de b7       	in	r29, 0x3e	; 62
    1946:	89 83       	std	Y+1, r24	; 0x01
	/*01- Write Slave Address --> only 7 MSB*/
	I2C_TWDR=Copy_u8SlaveAddress<<1;
    1948:	e3 e2       	ldi	r30, 0x23	; 35
    194a:	f0 e0       	ldi	r31, 0x00	; 0
    194c:	89 81       	ldd	r24, Y+1	; 0x01
    194e:	88 0f       	add	r24, r24
    1950:	80 83       	st	Z, r24
	/*02- Clear TWGCE bit to select Write  */
	CLR_BIT(I2C_TWDR,TWGCE);
    1952:	a3 e2       	ldi	r26, 0x23	; 35
    1954:	b0 e0       	ldi	r27, 0x00	; 0
    1956:	e3 e2       	ldi	r30, 0x23	; 35
    1958:	f0 e0       	ldi	r31, 0x00	; 0
    195a:	80 81       	ld	r24, Z
    195c:	8e 7f       	andi	r24, 0xFE	; 254
    195e:	8c 93       	st	X, r24

	CLR_BIT(I2C_TWCR,TWSTA);
    1960:	a6 e5       	ldi	r26, 0x56	; 86
    1962:	b0 e0       	ldi	r27, 0x00	; 0
    1964:	e6 e5       	ldi	r30, 0x56	; 86
    1966:	f0 e0       	ldi	r31, 0x00	; 0
    1968:	80 81       	ld	r24, Z
    196a:	8f 7d       	andi	r24, 0xDF	; 223
    196c:	8c 93       	st	X, r24
	/*03-Clear flag */
	SET_BIT(I2C_TWCR,TWINT);
    196e:	a6 e5       	ldi	r26, 0x56	; 86
    1970:	b0 e0       	ldi	r27, 0x00	; 0
    1972:	e6 e5       	ldi	r30, 0x56	; 86
    1974:	f0 e0       	ldi	r31, 0x00	; 0
    1976:	80 81       	ld	r24, Z
    1978:	80 68       	ori	r24, 0x80	; 128
    197a:	8c 93       	st	X, r24
	
	/*04- wait for flag to be Cleared ---> Stuck */
	while((GET_BIT(I2C_TWCR,TWINT))==0);
    197c:	e6 e5       	ldi	r30, 0x56	; 86
    197e:	f0 e0       	ldi	r31, 0x00	; 0
    1980:	80 81       	ld	r24, Z
    1982:	88 23       	and	r24, r24
    1984:	dc f7       	brge	.-10     	; 0x197c <I2C_VidSlaveAddressWrite+0x40>

}
    1986:	0f 90       	pop	r0
    1988:	cf 91       	pop	r28
    198a:	df 91       	pop	r29
    198c:	08 95       	ret

0000198e <I2C_VidSlaveAddressRead>:

void I2C_VidSlaveAddressRead(u8 Copy_u8SlaveAddress)
{
    198e:	df 93       	push	r29
    1990:	cf 93       	push	r28
    1992:	0f 92       	push	r0
    1994:	cd b7       	in	r28, 0x3d	; 61
    1996:	de b7       	in	r29, 0x3e	; 62
    1998:	89 83       	std	Y+1, r24	; 0x01
	/*01- Write Slave Address --> only 7 MSB*/
	I2C_TWDR=Copy_u8SlaveAddress<<1;
    199a:	e3 e2       	ldi	r30, 0x23	; 35
    199c:	f0 e0       	ldi	r31, 0x00	; 0
    199e:	89 81       	ldd	r24, Y+1	; 0x01
    19a0:	88 0f       	add	r24, r24
    19a2:	80 83       	st	Z, r24
	
	/*02- Clear TWGCE bit to select Write  */
	
	SET_BIT(I2C_TWDR,TWGCE);
    19a4:	a3 e2       	ldi	r26, 0x23	; 35
    19a6:	b0 e0       	ldi	r27, 0x00	; 0
    19a8:	e3 e2       	ldi	r30, 0x23	; 35
    19aa:	f0 e0       	ldi	r31, 0x00	; 0
    19ac:	80 81       	ld	r24, Z
    19ae:	81 60       	ori	r24, 0x01	; 1
    19b0:	8c 93       	st	X, r24
	CLR_BIT(I2C_TWCR,TWSTA);
    19b2:	a6 e5       	ldi	r26, 0x56	; 86
    19b4:	b0 e0       	ldi	r27, 0x00	; 0
    19b6:	e6 e5       	ldi	r30, 0x56	; 86
    19b8:	f0 e0       	ldi	r31, 0x00	; 0
    19ba:	80 81       	ld	r24, Z
    19bc:	8f 7d       	andi	r24, 0xDF	; 223
    19be:	8c 93       	st	X, r24
	
	/*03-Clear flag */
	SET_BIT(I2C_TWCR,TWINT);
    19c0:	a6 e5       	ldi	r26, 0x56	; 86
    19c2:	b0 e0       	ldi	r27, 0x00	; 0
    19c4:	e6 e5       	ldi	r30, 0x56	; 86
    19c6:	f0 e0       	ldi	r31, 0x00	; 0
    19c8:	80 81       	ld	r24, Z
    19ca:	80 68       	ori	r24, 0x80	; 128
    19cc:	8c 93       	st	X, r24
	
	/*04- wait for flag to be Cleared ---> Stuck */
	while((GET_BIT(I2C_TWCR,TWINT))==0);
    19ce:	e6 e5       	ldi	r30, 0x56	; 86
    19d0:	f0 e0       	ldi	r31, 0x00	; 0
    19d2:	80 81       	ld	r24, Z
    19d4:	88 23       	and	r24, r24
    19d6:	dc f7       	brge	.-10     	; 0x19ce <I2C_VidSlaveAddressRead+0x40>
}
    19d8:	0f 90       	pop	r0
    19da:	cf 91       	pop	r28
    19dc:	df 91       	pop	r29
    19de:	08 95       	ret

000019e0 <I2C_VidMastarSendData>:

void I2C_VidMastarSendData(u8 Copy_u8Data)
{
    19e0:	df 93       	push	r29
    19e2:	cf 93       	push	r28
    19e4:	0f 92       	push	r0
    19e6:	cd b7       	in	r28, 0x3d	; 61
    19e8:	de b7       	in	r29, 0x3e	; 62
    19ea:	89 83       	std	Y+1, r24	; 0x01
	/*01- Send the data to I2C Data Register */
	I2C_TWDR=Copy_u8Data;
    19ec:	e3 e2       	ldi	r30, 0x23	; 35
    19ee:	f0 e0       	ldi	r31, 0x00	; 0
    19f0:	89 81       	ldd	r24, Y+1	; 0x01
    19f2:	80 83       	st	Z, r24
	
	/*02-Clear flag */
	SET_BIT(I2C_TWCR,TWINT);
    19f4:	a6 e5       	ldi	r26, 0x56	; 86
    19f6:	b0 e0       	ldi	r27, 0x00	; 0
    19f8:	e6 e5       	ldi	r30, 0x56	; 86
    19fa:	f0 e0       	ldi	r31, 0x00	; 0
    19fc:	80 81       	ld	r24, Z
    19fe:	80 68       	ori	r24, 0x80	; 128
    1a00:	8c 93       	st	X, r24
	
	/*03- wait for flag to be Cleared ---> Stuck */
	while((GET_BIT(I2C_TWCR,TWINT))==0);
    1a02:	e6 e5       	ldi	r30, 0x56	; 86
    1a04:	f0 e0       	ldi	r31, 0x00	; 0
    1a06:	80 81       	ld	r24, Z
    1a08:	88 23       	and	r24, r24
    1a0a:	dc f7       	brge	.-10     	; 0x1a02 <I2C_VidMastarSendData+0x22>
}
    1a0c:	0f 90       	pop	r0
    1a0e:	cf 91       	pop	r28
    1a10:	df 91       	pop	r29
    1a12:	08 95       	ret

00001a14 <I2C_VidMastarRecieveData>:

u8 I2C_VidMastarRecieveData(void)
{
    1a14:	df 93       	push	r29
    1a16:	cf 93       	push	r28
    1a18:	cd b7       	in	r28, 0x3d	; 61
    1a1a:	de b7       	in	r29, 0x3e	; 62
	/*01-Clear flag */
	SET_BIT(I2C_TWCR,TWINT);
    1a1c:	a6 e5       	ldi	r26, 0x56	; 86
    1a1e:	b0 e0       	ldi	r27, 0x00	; 0
    1a20:	e6 e5       	ldi	r30, 0x56	; 86
    1a22:	f0 e0       	ldi	r31, 0x00	; 0
    1a24:	80 81       	ld	r24, Z
    1a26:	80 68       	ori	r24, 0x80	; 128
    1a28:	8c 93       	st	X, r24
	
	/*02- wait for flag to be Cleared ---> Stuck */
	while((GET_BIT(I2C_TWCR,TWINT))==0);
    1a2a:	e6 e5       	ldi	r30, 0x56	; 86
    1a2c:	f0 e0       	ldi	r31, 0x00	; 0
    1a2e:	80 81       	ld	r24, Z
    1a30:	88 23       	and	r24, r24
    1a32:	dc f7       	brge	.-10     	; 0x1a2a <I2C_VidMastarRecieveData+0x16>
	
	/*03- read the data to I2C Data Register */
	return I2C_TWDR;
    1a34:	e3 e2       	ldi	r30, 0x23	; 35
    1a36:	f0 e0       	ldi	r31, 0x00	; 0
    1a38:	80 81       	ld	r24, Z
}
    1a3a:	cf 91       	pop	r28
    1a3c:	df 91       	pop	r29
    1a3e:	08 95       	ret

00001a40 <I2C_VidSlaveRecieveData>:

u8 I2C_VidSlaveRecieveData(void)
{
    1a40:	df 93       	push	r29
    1a42:	cf 93       	push	r28
    1a44:	cd b7       	in	r28, 0x3d	; 61
    1a46:	de b7       	in	r29, 0x3e	; 62
	/*01- wait ---> Stuck */
	while((I2C_TWSR&0xf8)!=0x60);
    1a48:	e1 e2       	ldi	r30, 0x21	; 33
    1a4a:	f0 e0       	ldi	r31, 0x00	; 0
    1a4c:	80 81       	ld	r24, Z
    1a4e:	88 2f       	mov	r24, r24
    1a50:	90 e0       	ldi	r25, 0x00	; 0
    1a52:	88 7f       	andi	r24, 0xF8	; 248
    1a54:	90 70       	andi	r25, 0x00	; 0
    1a56:	80 36       	cpi	r24, 0x60	; 96
    1a58:	91 05       	cpc	r25, r1
    1a5a:	b1 f7       	brne	.-20     	; 0x1a48 <I2C_VidSlaveRecieveData+0x8>

	/*02- set the I2C Init */
	SET_BIT(I2C_TWCR,TWINT);
    1a5c:	a6 e5       	ldi	r26, 0x56	; 86
    1a5e:	b0 e0       	ldi	r27, 0x00	; 0
    1a60:	e6 e5       	ldi	r30, 0x56	; 86
    1a62:	f0 e0       	ldi	r31, 0x00	; 0
    1a64:	80 81       	ld	r24, Z
    1a66:	80 68       	ori	r24, 0x80	; 128
    1a68:	8c 93       	st	X, r24
	/*03- wait ---> Stuck */
	while((I2C_TWSR&0xf8)!=0x80);
    1a6a:	e1 e2       	ldi	r30, 0x21	; 33
    1a6c:	f0 e0       	ldi	r31, 0x00	; 0
    1a6e:	80 81       	ld	r24, Z
    1a70:	88 2f       	mov	r24, r24
    1a72:	90 e0       	ldi	r25, 0x00	; 0
    1a74:	88 7f       	andi	r24, 0xF8	; 248
    1a76:	90 70       	andi	r25, 0x00	; 0
    1a78:	80 38       	cpi	r24, 0x80	; 128
    1a7a:	91 05       	cpc	r25, r1
    1a7c:	b1 f7       	brne	.-20     	; 0x1a6a <I2C_VidSlaveRecieveData+0x2a>

	/*04- read the data to I2C Data Register */
	return I2C_TWDR;
    1a7e:	e3 e2       	ldi	r30, 0x23	; 35
    1a80:	f0 e0       	ldi	r31, 0x00	; 0
    1a82:	80 81       	ld	r24, Z

}
    1a84:	cf 91       	pop	r28
    1a86:	df 91       	pop	r29
    1a88:	08 95       	ret

00001a8a <KPAD_U8GetPressedKey>:
#include "KPAD_Interface.h"
#include "KPAD_Private.h"
#include "KPAD_Config.h"

u8 KPAD_U8GetPressedKey(u8 *Copy_U8Returned)
{
    1a8a:	df 93       	push	r29
    1a8c:	cf 93       	push	r28
    1a8e:	cd b7       	in	r28, 0x3d	; 61
    1a90:	de b7       	in	r29, 0x3e	; 62
    1a92:	c0 54       	subi	r28, 0x40	; 64
    1a94:	d0 40       	sbci	r29, 0x00	; 0
    1a96:	0f b6       	in	r0, 0x3f	; 63
    1a98:	f8 94       	cli
    1a9a:	de bf       	out	0x3e, r29	; 62
    1a9c:	0f be       	out	0x3f, r0	; 63
    1a9e:	cd bf       	out	0x3d, r28	; 61
    1aa0:	9e ab       	std	Y+54, r25	; 0x36
    1aa2:	8d ab       	std	Y+53, r24	; 0x35
	u8 Local_U8ErrorState=ERROR_STATE_NOK;
    1aa4:	19 8a       	std	Y+17, r1	; 0x11
	u8 LocaL_U8KPAD_ARR[ROW_NUMBERS][COLUMN_NUMBERS]= KPAD_ARR;
    1aa6:	ce 01       	movw	r24, r28
    1aa8:	42 96       	adiw	r24, 0x12	; 18
    1aaa:	98 af       	std	Y+56, r25	; 0x38
    1aac:	8f ab       	std	Y+55, r24	; 0x37
    1aae:	e2 e8       	ldi	r30, 0x82	; 130
    1ab0:	f2 e0       	ldi	r31, 0x02	; 2
    1ab2:	fa af       	std	Y+58, r31	; 0x3a
    1ab4:	e9 af       	std	Y+57, r30	; 0x39
    1ab6:	f8 e1       	ldi	r31, 0x18	; 24
    1ab8:	fb af       	std	Y+59, r31	; 0x3b
    1aba:	e9 ad       	ldd	r30, Y+57	; 0x39
    1abc:	fa ad       	ldd	r31, Y+58	; 0x3a
    1abe:	00 80       	ld	r0, Z
    1ac0:	89 ad       	ldd	r24, Y+57	; 0x39
    1ac2:	9a ad       	ldd	r25, Y+58	; 0x3a
    1ac4:	01 96       	adiw	r24, 0x01	; 1
    1ac6:	9a af       	std	Y+58, r25	; 0x3a
    1ac8:	89 af       	std	Y+57, r24	; 0x39
    1aca:	ef a9       	ldd	r30, Y+55	; 0x37
    1acc:	f8 ad       	ldd	r31, Y+56	; 0x38
    1ace:	00 82       	st	Z, r0
    1ad0:	8f a9       	ldd	r24, Y+55	; 0x37
    1ad2:	98 ad       	ldd	r25, Y+56	; 0x38
    1ad4:	01 96       	adiw	r24, 0x01	; 1
    1ad6:	98 af       	std	Y+56, r25	; 0x38
    1ad8:	8f ab       	std	Y+55, r24	; 0x37
    1ada:	9b ad       	ldd	r25, Y+59	; 0x3b
    1adc:	91 50       	subi	r25, 0x01	; 1
    1ade:	9b af       	std	Y+59, r25	; 0x3b
    1ae0:	eb ad       	ldd	r30, Y+59	; 0x3b
    1ae2:	ee 23       	and	r30, r30
    1ae4:	51 f7       	brne	.-44     	; 0x1aba <KPAD_U8GetPressedKey+0x30>
	u8 Local_U8PinState;

	u8 Local_U8ColIndex,Local_U8CRowIndex;
	u8 KPAD_U8RowsPins[ROW_NUMBERS]={KPAD_ROW_PIN0,KPAD_ROW_PIN1,KPAD_ROW_PIN2,KPAD_ROW_PIN3};
    1ae6:	1b a6       	std	Y+43, r1	; 0x2b
    1ae8:	81 e0       	ldi	r24, 0x01	; 1
    1aea:	8c a7       	std	Y+44, r24	; 0x2c
    1aec:	82 e0       	ldi	r24, 0x02	; 2
    1aee:	8d a7       	std	Y+45, r24	; 0x2d
    1af0:	83 e0       	ldi	r24, 0x03	; 3
    1af2:	8e a7       	std	Y+46, r24	; 0x2e
	u8 KPAD_U8ColsPins[COLUMN_NUMBERS]={KPAD_COLUMN_PIN0,KPAD_COLUMN_PIN1,KPAD_COLUMN_PIN2,KPAD_COLUMN_PIN3,KPAD_COLUMN_PIN4 ,KPAD_COLUMN_PIN5};
    1af4:	ce 01       	movw	r24, r28
    1af6:	8f 96       	adiw	r24, 0x2f	; 47
    1af8:	9d af       	std	Y+61, r25	; 0x3d
    1afa:	8c af       	std	Y+60, r24	; 0x3c
    1afc:	ec e7       	ldi	r30, 0x7C	; 124
    1afe:	f2 e0       	ldi	r31, 0x02	; 2
    1b00:	ff af       	std	Y+63, r31	; 0x3f
    1b02:	ee af       	std	Y+62, r30	; 0x3e
    1b04:	f6 e0       	ldi	r31, 0x06	; 6
    1b06:	21 96       	adiw	r28, 0x01	; 1
    1b08:	ff af       	std	Y+63, r31	; 0x3f
    1b0a:	21 97       	sbiw	r28, 0x01	; 1
    1b0c:	ee ad       	ldd	r30, Y+62	; 0x3e
    1b0e:	ff ad       	ldd	r31, Y+63	; 0x3f
    1b10:	00 80       	ld	r0, Z
    1b12:	8e ad       	ldd	r24, Y+62	; 0x3e
    1b14:	9f ad       	ldd	r25, Y+63	; 0x3f
    1b16:	01 96       	adiw	r24, 0x01	; 1
    1b18:	9f af       	std	Y+63, r25	; 0x3f
    1b1a:	8e af       	std	Y+62, r24	; 0x3e
    1b1c:	ec ad       	ldd	r30, Y+60	; 0x3c
    1b1e:	fd ad       	ldd	r31, Y+61	; 0x3d
    1b20:	00 82       	st	Z, r0
    1b22:	8c ad       	ldd	r24, Y+60	; 0x3c
    1b24:	9d ad       	ldd	r25, Y+61	; 0x3d
    1b26:	01 96       	adiw	r24, 0x01	; 1
    1b28:	9d af       	std	Y+61, r25	; 0x3d
    1b2a:	8c af       	std	Y+60, r24	; 0x3c
    1b2c:	21 96       	adiw	r28, 0x01	; 1
    1b2e:	9f ad       	ldd	r25, Y+63	; 0x3f
    1b30:	21 97       	sbiw	r28, 0x01	; 1
    1b32:	91 50       	subi	r25, 0x01	; 1
    1b34:	21 96       	adiw	r28, 0x01	; 1
    1b36:	9f af       	std	Y+63, r25	; 0x3f
    1b38:	21 97       	sbiw	r28, 0x01	; 1
    1b3a:	21 96       	adiw	r28, 0x01	; 1
    1b3c:	ef ad       	ldd	r30, Y+63	; 0x3f
    1b3e:	21 97       	sbiw	r28, 0x01	; 1
    1b40:	ee 23       	and	r30, r30
    1b42:	21 f7       	brne	.-56     	; 0x1b0c <KPAD_U8GetPressedKey+0x82>

	if(Copy_U8Returned !=NULL)
    1b44:	8d a9       	ldd	r24, Y+53	; 0x35
    1b46:	9e a9       	ldd	r25, Y+54	; 0x36
    1b48:	00 97       	sbiw	r24, 0x00	; 0
    1b4a:	09 f4       	brne	.+2      	; 0x1b4e <KPAD_U8GetPressedKey+0xc4>
    1b4c:	e9 c0       	rjmp	.+466    	; 0x1d20 <KPAD_U8GetPressedKey+0x296>
	{
		*Copy_U8Returned=0xff;
    1b4e:	ed a9       	ldd	r30, Y+53	; 0x35
    1b50:	fe a9       	ldd	r31, Y+54	; 0x36
    1b52:	8f ef       	ldi	r24, 0xFF	; 255
    1b54:	80 83       	st	Z, r24
		for(Local_U8ColIndex=0;Local_U8ColIndex <COLUMN_NUMBERS ; Local_U8ColIndex++)
    1b56:	18 8a       	std	Y+16, r1	; 0x10
    1b58:	de c0       	rjmp	.+444    	; 0x1d16 <KPAD_U8GetPressedKey+0x28c>
		{
			DIO_U8SetPinValue(KPAD_COLUMN_PORT,KPAD_U8ColsPins[Local_U8ColIndex],DIO_LOW);
    1b5a:	88 89       	ldd	r24, Y+16	; 0x10
    1b5c:	28 2f       	mov	r18, r24
    1b5e:	30 e0       	ldi	r19, 0x00	; 0
    1b60:	ce 01       	movw	r24, r28
    1b62:	8f 96       	adiw	r24, 0x2f	; 47
    1b64:	fc 01       	movw	r30, r24
    1b66:	e2 0f       	add	r30, r18
    1b68:	f3 1f       	adc	r31, r19
    1b6a:	90 81       	ld	r25, Z
    1b6c:	81 e0       	ldi	r24, 0x01	; 1
    1b6e:	69 2f       	mov	r22, r25
    1b70:	40 e0       	ldi	r20, 0x00	; 0
    1b72:	0e 94 15 08 	call	0x102a	; 0x102a <DIO_U8SetPinValue>
			for(Local_U8CRowIndex=0; Local_U8CRowIndex < ROW_NUMBERS ; Local_U8CRowIndex++)
    1b76:	1f 86       	std	Y+15, r1	; 0x0f
    1b78:	b9 c0       	rjmp	.+370    	; 0x1cec <KPAD_U8GetPressedKey+0x262>
			{
				DIO_U8GetPinValue(KPAD_ROW_PORT ,KPAD_U8RowsPins[Local_U8CRowIndex],&Local_U8PinState);
    1b7a:	8f 85       	ldd	r24, Y+15	; 0x0f
    1b7c:	28 2f       	mov	r18, r24
    1b7e:	30 e0       	ldi	r19, 0x00	; 0
    1b80:	ce 01       	movw	r24, r28
    1b82:	8b 96       	adiw	r24, 0x2b	; 43
    1b84:	fc 01       	movw	r30, r24
    1b86:	e2 0f       	add	r30, r18
    1b88:	f3 1f       	adc	r31, r19
    1b8a:	90 81       	ld	r25, Z
    1b8c:	9e 01       	movw	r18, r28
    1b8e:	26 5d       	subi	r18, 0xD6	; 214
    1b90:	3f 4f       	sbci	r19, 0xFF	; 255
    1b92:	83 e0       	ldi	r24, 0x03	; 3
    1b94:	69 2f       	mov	r22, r25
    1b96:	a9 01       	movw	r20, r18
    1b98:	0e 94 31 09 	call	0x1262	; 0x1262 <DIO_U8GetPinValue>
				if(Local_U8PinState==DIO_LOW)
    1b9c:	8a a5       	ldd	r24, Y+42	; 0x2a
    1b9e:	88 23       	and	r24, r24
    1ba0:	09 f0       	breq	.+2      	; 0x1ba4 <KPAD_U8GetPressedKey+0x11a>
    1ba2:	a1 c0       	rjmp	.+322    	; 0x1ce6 <KPAD_U8GetPressedKey+0x25c>
    1ba4:	80 e0       	ldi	r24, 0x00	; 0
    1ba6:	90 e0       	ldi	r25, 0x00	; 0
    1ba8:	a0 ef       	ldi	r26, 0xF0	; 240
    1baa:	b1 e4       	ldi	r27, 0x41	; 65
    1bac:	8b 87       	std	Y+11, r24	; 0x0b
    1bae:	9c 87       	std	Y+12, r25	; 0x0c
    1bb0:	ad 87       	std	Y+13, r26	; 0x0d
    1bb2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1bb4:	6b 85       	ldd	r22, Y+11	; 0x0b
    1bb6:	7c 85       	ldd	r23, Y+12	; 0x0c
    1bb8:	8d 85       	ldd	r24, Y+13	; 0x0d
    1bba:	9e 85       	ldd	r25, Y+14	; 0x0e
    1bbc:	20 e0       	ldi	r18, 0x00	; 0
    1bbe:	30 e0       	ldi	r19, 0x00	; 0
    1bc0:	4a ef       	ldi	r20, 0xFA	; 250
    1bc2:	54 e4       	ldi	r21, 0x44	; 68
    1bc4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bc8:	dc 01       	movw	r26, r24
    1bca:	cb 01       	movw	r24, r22
    1bcc:	8f 83       	std	Y+7, r24	; 0x07
    1bce:	98 87       	std	Y+8, r25	; 0x08
    1bd0:	a9 87       	std	Y+9, r26	; 0x09
    1bd2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1bd4:	6f 81       	ldd	r22, Y+7	; 0x07
    1bd6:	78 85       	ldd	r23, Y+8	; 0x08
    1bd8:	89 85       	ldd	r24, Y+9	; 0x09
    1bda:	9a 85       	ldd	r25, Y+10	; 0x0a
    1bdc:	20 e0       	ldi	r18, 0x00	; 0
    1bde:	30 e0       	ldi	r19, 0x00	; 0
    1be0:	40 e8       	ldi	r20, 0x80	; 128
    1be2:	5f e3       	ldi	r21, 0x3F	; 63
    1be4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1be8:	88 23       	and	r24, r24
    1bea:	2c f4       	brge	.+10     	; 0x1bf6 <KPAD_U8GetPressedKey+0x16c>
		__ticks = 1;
    1bec:	81 e0       	ldi	r24, 0x01	; 1
    1bee:	90 e0       	ldi	r25, 0x00	; 0
    1bf0:	9e 83       	std	Y+6, r25	; 0x06
    1bf2:	8d 83       	std	Y+5, r24	; 0x05
    1bf4:	3f c0       	rjmp	.+126    	; 0x1c74 <KPAD_U8GetPressedKey+0x1ea>
	else if (__tmp > 65535)
    1bf6:	6f 81       	ldd	r22, Y+7	; 0x07
    1bf8:	78 85       	ldd	r23, Y+8	; 0x08
    1bfa:	89 85       	ldd	r24, Y+9	; 0x09
    1bfc:	9a 85       	ldd	r25, Y+10	; 0x0a
    1bfe:	20 e0       	ldi	r18, 0x00	; 0
    1c00:	3f ef       	ldi	r19, 0xFF	; 255
    1c02:	4f e7       	ldi	r20, 0x7F	; 127
    1c04:	57 e4       	ldi	r21, 0x47	; 71
    1c06:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1c0a:	18 16       	cp	r1, r24
    1c0c:	4c f5       	brge	.+82     	; 0x1c60 <KPAD_U8GetPressedKey+0x1d6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c0e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c10:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c12:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c14:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c16:	20 e0       	ldi	r18, 0x00	; 0
    1c18:	30 e0       	ldi	r19, 0x00	; 0
    1c1a:	40 e2       	ldi	r20, 0x20	; 32
    1c1c:	51 e4       	ldi	r21, 0x41	; 65
    1c1e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c22:	dc 01       	movw	r26, r24
    1c24:	cb 01       	movw	r24, r22
    1c26:	bc 01       	movw	r22, r24
    1c28:	cd 01       	movw	r24, r26
    1c2a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c2e:	dc 01       	movw	r26, r24
    1c30:	cb 01       	movw	r24, r22
    1c32:	9e 83       	std	Y+6, r25	; 0x06
    1c34:	8d 83       	std	Y+5, r24	; 0x05
    1c36:	0f c0       	rjmp	.+30     	; 0x1c56 <KPAD_U8GetPressedKey+0x1cc>
    1c38:	88 ec       	ldi	r24, 0xC8	; 200
    1c3a:	90 e0       	ldi	r25, 0x00	; 0
    1c3c:	9c 83       	std	Y+4, r25	; 0x04
    1c3e:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1c40:	8b 81       	ldd	r24, Y+3	; 0x03
    1c42:	9c 81       	ldd	r25, Y+4	; 0x04
    1c44:	01 97       	sbiw	r24, 0x01	; 1
    1c46:	f1 f7       	brne	.-4      	; 0x1c44 <KPAD_U8GetPressedKey+0x1ba>
    1c48:	9c 83       	std	Y+4, r25	; 0x04
    1c4a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c4c:	8d 81       	ldd	r24, Y+5	; 0x05
    1c4e:	9e 81       	ldd	r25, Y+6	; 0x06
    1c50:	01 97       	sbiw	r24, 0x01	; 1
    1c52:	9e 83       	std	Y+6, r25	; 0x06
    1c54:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c56:	8d 81       	ldd	r24, Y+5	; 0x05
    1c58:	9e 81       	ldd	r25, Y+6	; 0x06
    1c5a:	00 97       	sbiw	r24, 0x00	; 0
    1c5c:	69 f7       	brne	.-38     	; 0x1c38 <KPAD_U8GetPressedKey+0x1ae>
    1c5e:	26 c0       	rjmp	.+76     	; 0x1cac <KPAD_U8GetPressedKey+0x222>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c60:	6f 81       	ldd	r22, Y+7	; 0x07
    1c62:	78 85       	ldd	r23, Y+8	; 0x08
    1c64:	89 85       	ldd	r24, Y+9	; 0x09
    1c66:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c68:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c6c:	dc 01       	movw	r26, r24
    1c6e:	cb 01       	movw	r24, r22
    1c70:	9e 83       	std	Y+6, r25	; 0x06
    1c72:	8d 83       	std	Y+5, r24	; 0x05
    1c74:	8d 81       	ldd	r24, Y+5	; 0x05
    1c76:	9e 81       	ldd	r25, Y+6	; 0x06
    1c78:	9a 83       	std	Y+2, r25	; 0x02
    1c7a:	89 83       	std	Y+1, r24	; 0x01
    1c7c:	89 81       	ldd	r24, Y+1	; 0x01
    1c7e:	9a 81       	ldd	r25, Y+2	; 0x02
    1c80:	01 97       	sbiw	r24, 0x01	; 1
    1c82:	f1 f7       	brne	.-4      	; 0x1c80 <KPAD_U8GetPressedKey+0x1f6>
    1c84:	9a 83       	std	Y+2, r25	; 0x02
    1c86:	89 83       	std	Y+1, r24	; 0x01
    1c88:	11 c0       	rjmp	.+34     	; 0x1cac <KPAD_U8GetPressedKey+0x222>
						_delay_ms(30);

						/* Polling on the pressed Key */
						while(Local_U8PinState==DIO_LOW)
						{
							DIO_U8GetPinValue(KPAD_ROW_PORT ,KPAD_U8RowsPins[Local_U8CRowIndex],&Local_U8PinState);
    1c8a:	8f 85       	ldd	r24, Y+15	; 0x0f
    1c8c:	28 2f       	mov	r18, r24
    1c8e:	30 e0       	ldi	r19, 0x00	; 0
    1c90:	ce 01       	movw	r24, r28
    1c92:	8b 96       	adiw	r24, 0x2b	; 43
    1c94:	fc 01       	movw	r30, r24
    1c96:	e2 0f       	add	r30, r18
    1c98:	f3 1f       	adc	r31, r19
    1c9a:	90 81       	ld	r25, Z
    1c9c:	9e 01       	movw	r18, r28
    1c9e:	26 5d       	subi	r18, 0xD6	; 214
    1ca0:	3f 4f       	sbci	r19, 0xFF	; 255
    1ca2:	83 e0       	ldi	r24, 0x03	; 3
    1ca4:	69 2f       	mov	r22, r25
    1ca6:	a9 01       	movw	r20, r18
    1ca8:	0e 94 31 09 	call	0x1262	; 0x1262 <DIO_U8GetPinValue>
				if(Local_U8PinState==DIO_LOW)
					{
						_delay_ms(30);

						/* Polling on the pressed Key */
						while(Local_U8PinState==DIO_LOW)
    1cac:	8a a5       	ldd	r24, Y+42	; 0x2a
    1cae:	88 23       	and	r24, r24
    1cb0:	61 f3       	breq	.-40     	; 0x1c8a <KPAD_U8GetPressedKey+0x200>
						{
							DIO_U8GetPinValue(KPAD_ROW_PORT ,KPAD_U8RowsPins[Local_U8CRowIndex],&Local_U8PinState);
						}
						*Copy_U8Returned=LocaL_U8KPAD_ARR[Local_U8CRowIndex][Local_U8ColIndex];
    1cb2:	8f 85       	ldd	r24, Y+15	; 0x0f
    1cb4:	28 2f       	mov	r18, r24
    1cb6:	30 e0       	ldi	r19, 0x00	; 0
    1cb8:	88 89       	ldd	r24, Y+16	; 0x10
    1cba:	48 2f       	mov	r20, r24
    1cbc:	50 e0       	ldi	r21, 0x00	; 0
    1cbe:	c9 01       	movw	r24, r18
    1cc0:	88 0f       	add	r24, r24
    1cc2:	99 1f       	adc	r25, r25
    1cc4:	82 0f       	add	r24, r18
    1cc6:	93 1f       	adc	r25, r19
    1cc8:	9c 01       	movw	r18, r24
    1cca:	22 0f       	add	r18, r18
    1ccc:	33 1f       	adc	r19, r19
    1cce:	ce 01       	movw	r24, r28
    1cd0:	01 96       	adiw	r24, 0x01	; 1
    1cd2:	82 0f       	add	r24, r18
    1cd4:	93 1f       	adc	r25, r19
    1cd6:	84 0f       	add	r24, r20
    1cd8:	95 1f       	adc	r25, r21
    1cda:	fc 01       	movw	r30, r24
    1cdc:	71 96       	adiw	r30, 0x11	; 17
    1cde:	80 81       	ld	r24, Z
    1ce0:	ed a9       	ldd	r30, Y+53	; 0x35
    1ce2:	fe a9       	ldd	r31, Y+54	; 0x36
    1ce4:	80 83       	st	Z, r24
	{
		*Copy_U8Returned=0xff;
		for(Local_U8ColIndex=0;Local_U8ColIndex <COLUMN_NUMBERS ; Local_U8ColIndex++)
		{
			DIO_U8SetPinValue(KPAD_COLUMN_PORT,KPAD_U8ColsPins[Local_U8ColIndex],DIO_LOW);
			for(Local_U8CRowIndex=0; Local_U8CRowIndex < ROW_NUMBERS ; Local_U8CRowIndex++)
    1ce6:	8f 85       	ldd	r24, Y+15	; 0x0f
    1ce8:	8f 5f       	subi	r24, 0xFF	; 255
    1cea:	8f 87       	std	Y+15, r24	; 0x0f
    1cec:	8f 85       	ldd	r24, Y+15	; 0x0f
    1cee:	84 30       	cpi	r24, 0x04	; 4
    1cf0:	08 f4       	brcc	.+2      	; 0x1cf4 <KPAD_U8GetPressedKey+0x26a>
    1cf2:	43 cf       	rjmp	.-378    	; 0x1b7a <KPAD_U8GetPressedKey+0xf0>
						}
						*Copy_U8Returned=LocaL_U8KPAD_ARR[Local_U8CRowIndex][Local_U8ColIndex];

					}
			}
			DIO_U8SetPinValue(KPAD_COLUMN_PORT,KPAD_U8ColsPins[Local_U8ColIndex],DIO_HIGH);
    1cf4:	88 89       	ldd	r24, Y+16	; 0x10
    1cf6:	28 2f       	mov	r18, r24
    1cf8:	30 e0       	ldi	r19, 0x00	; 0
    1cfa:	ce 01       	movw	r24, r28
    1cfc:	8f 96       	adiw	r24, 0x2f	; 47
    1cfe:	fc 01       	movw	r30, r24
    1d00:	e2 0f       	add	r30, r18
    1d02:	f3 1f       	adc	r31, r19
    1d04:	90 81       	ld	r25, Z
    1d06:	81 e0       	ldi	r24, 0x01	; 1
    1d08:	69 2f       	mov	r22, r25
    1d0a:	41 e0       	ldi	r20, 0x01	; 1
    1d0c:	0e 94 15 08 	call	0x102a	; 0x102a <DIO_U8SetPinValue>
	u8 KPAD_U8ColsPins[COLUMN_NUMBERS]={KPAD_COLUMN_PIN0,KPAD_COLUMN_PIN1,KPAD_COLUMN_PIN2,KPAD_COLUMN_PIN3,KPAD_COLUMN_PIN4 ,KPAD_COLUMN_PIN5};

	if(Copy_U8Returned !=NULL)
	{
		*Copy_U8Returned=0xff;
		for(Local_U8ColIndex=0;Local_U8ColIndex <COLUMN_NUMBERS ; Local_U8ColIndex++)
    1d10:	88 89       	ldd	r24, Y+16	; 0x10
    1d12:	8f 5f       	subi	r24, 0xFF	; 255
    1d14:	88 8b       	std	Y+16, r24	; 0x10
    1d16:	88 89       	ldd	r24, Y+16	; 0x10
    1d18:	86 30       	cpi	r24, 0x06	; 6
    1d1a:	08 f4       	brcc	.+2      	; 0x1d1e <KPAD_U8GetPressedKey+0x294>
    1d1c:	1e cf       	rjmp	.-452    	; 0x1b5a <KPAD_U8GetPressedKey+0xd0>
    1d1e:	02 c0       	rjmp	.+4      	; 0x1d24 <KPAD_U8GetPressedKey+0x29a>
		}

	}
	else
	{
		Local_U8ErrorState=ERROR_STATE_OK;
    1d20:	81 e0       	ldi	r24, 0x01	; 1
    1d22:	89 8b       	std	Y+17, r24	; 0x11
	}

return Local_U8ErrorState;
    1d24:	89 89       	ldd	r24, Y+17	; 0x11

}
    1d26:	c0 5c       	subi	r28, 0xC0	; 192
    1d28:	df 4f       	sbci	r29, 0xFF	; 255
    1d2a:	0f b6       	in	r0, 0x3f	; 63
    1d2c:	f8 94       	cli
    1d2e:	de bf       	out	0x3e, r29	; 62
    1d30:	0f be       	out	0x3f, r0	; 63
    1d32:	cd bf       	out	0x3d, r28	; 61
    1d34:	cf 91       	pop	r28
    1d36:	df 91       	pop	r29
    1d38:	08 95       	ret

00001d3a <KPAD_Void_INIT>:

void KPAD_Void_INIT(void)
{
    1d3a:	df 93       	push	r29
    1d3c:	cf 93       	push	r28
    1d3e:	cd b7       	in	r28, 0x3d	; 61
    1d40:	de b7       	in	r29, 0x3e	; 62
	//KEYPAD
	DIO_U8SetPortDirection(KPAD_COLUMN_PORT ,0xff);
    1d42:	81 e0       	ldi	r24, 0x01	; 1
    1d44:	6f ef       	ldi	r22, 0xFF	; 255
    1d46:	0e 94 57 0a 	call	0x14ae	; 0x14ae <DIO_U8SetPortDirection>
	DIO_U8SetPortValue(KPAD_COLUMN_PORT ,DIO_PORT_OUT);
    1d4a:	81 e0       	ldi	r24, 0x01	; 1
    1d4c:	6f ef       	ldi	r22, 0xFF	; 255
    1d4e:	0e 94 18 0b 	call	0x1630	; 0x1630 <DIO_U8SetPortValue>

	DIO_U8SetPinDirection(KPAD_ROW_PORT,DIO_PIN0,DIO_PIN_IN);
    1d52:	83 e0       	ldi	r24, 0x03	; 3
    1d54:	60 e0       	ldi	r22, 0x00	; 0
    1d56:	40 e0       	ldi	r20, 0x00	; 0
    1d58:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <DIO_U8SetPinDirection>
	DIO_U8SetPinDirection(KPAD_ROW_PORT,DIO_PIN1,DIO_PIN_IN);
    1d5c:	83 e0       	ldi	r24, 0x03	; 3
    1d5e:	61 e0       	ldi	r22, 0x01	; 1
    1d60:	40 e0       	ldi	r20, 0x00	; 0
    1d62:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <DIO_U8SetPinDirection>
	DIO_U8SetPinDirection(KPAD_ROW_PORT,DIO_PIN2,DIO_PIN_IN);
    1d66:	83 e0       	ldi	r24, 0x03	; 3
    1d68:	62 e0       	ldi	r22, 0x02	; 2
    1d6a:	40 e0       	ldi	r20, 0x00	; 0
    1d6c:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <DIO_U8SetPinDirection>
	DIO_U8SetPinDirection(KPAD_ROW_PORT,DIO_PIN3,DIO_PIN_IN);
    1d70:	83 e0       	ldi	r24, 0x03	; 3
    1d72:	63 e0       	ldi	r22, 0x03	; 3
    1d74:	40 e0       	ldi	r20, 0x00	; 0
    1d76:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <DIO_U8SetPinDirection>

	DIO_U8SetPinValue(KPAD_ROW_PORT,DIO_PIN0,DIO_PIN_OUT);
    1d7a:	83 e0       	ldi	r24, 0x03	; 3
    1d7c:	60 e0       	ldi	r22, 0x00	; 0
    1d7e:	41 e0       	ldi	r20, 0x01	; 1
    1d80:	0e 94 15 08 	call	0x102a	; 0x102a <DIO_U8SetPinValue>
	DIO_U8SetPinValue(KPAD_ROW_PORT,DIO_PIN1,DIO_PIN_OUT);
    1d84:	83 e0       	ldi	r24, 0x03	; 3
    1d86:	61 e0       	ldi	r22, 0x01	; 1
    1d88:	41 e0       	ldi	r20, 0x01	; 1
    1d8a:	0e 94 15 08 	call	0x102a	; 0x102a <DIO_U8SetPinValue>
	DIO_U8SetPinValue(KPAD_ROW_PORT,DIO_PIN2,DIO_PIN_OUT);
    1d8e:	83 e0       	ldi	r24, 0x03	; 3
    1d90:	62 e0       	ldi	r22, 0x02	; 2
    1d92:	41 e0       	ldi	r20, 0x01	; 1
    1d94:	0e 94 15 08 	call	0x102a	; 0x102a <DIO_U8SetPinValue>
	DIO_U8SetPinValue(KPAD_ROW_PORT,DIO_PIN3,DIO_PIN_OUT);
    1d98:	83 e0       	ldi	r24, 0x03	; 3
    1d9a:	63 e0       	ldi	r22, 0x03	; 3
    1d9c:	41 e0       	ldi	r20, 0x01	; 1
    1d9e:	0e 94 15 08 	call	0x102a	; 0x102a <DIO_U8SetPinValue>

}
    1da2:	cf 91       	pop	r28
    1da4:	df 91       	pop	r29
    1da6:	08 95       	ret

00001da8 <LCD_VoidLCDInit>:
#include "LCD_Interface.h"
#include "LCD_Private.h"
#include "LCD_Config.h"

void LCD_VoidLCDInit(void)
{
    1da8:	0f 93       	push	r16
    1daa:	1f 93       	push	r17
    1dac:	df 93       	push	r29
    1dae:	cf 93       	push	r28
    1db0:	cd b7       	in	r28, 0x3d	; 61
    1db2:	de b7       	in	r29, 0x3e	; 62
    1db4:	cc 54       	subi	r28, 0x4C	; 76
    1db6:	d0 40       	sbci	r29, 0x00	; 0
    1db8:	0f b6       	in	r0, 0x3f	; 63
    1dba:	f8 94       	cli
    1dbc:	de bf       	out	0x3e, r29	; 62
    1dbe:	0f be       	out	0x3f, r0	; 63
    1dc0:	cd bf       	out	0x3d, r28	; 61
	_delay_ms(2);
	/*SET the the ENTRY_SET_MODE Command*/
	LCD_VoidSendCommand(ENTRY_MODE_SET);
#elif LCD_PINS_MODE==LCD_4BIT_MODE
	/* Set Direction Data PORT -> High */
	DIO_U8SetPortDirection(LCD_DATA_PORT,DIO_PORT_OUT);
    1dc2:	80 e0       	ldi	r24, 0x00	; 0
    1dc4:	6f ef       	ldi	r22, 0xFF	; 255
    1dc6:	0e 94 57 0a 	call	0x14ae	; 0x14ae <DIO_U8SetPortDirection>

	/* Set Direction Control PORT ( E,RS,RW ) -> High */
	DIO_U8SetPinDirection(LCD_CONTROL_PORT,CONTROL_E,HIGH);
    1dca:	83 e0       	ldi	r24, 0x03	; 3
    1dcc:	66 e0       	ldi	r22, 0x06	; 6
    1dce:	41 e0       	ldi	r20, 0x01	; 1
    1dd0:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <DIO_U8SetPinDirection>
	DIO_U8SetPinDirection(LCD_CONTROL_PORT,CONTROL_RS,HIGH);
    1dd4:	83 e0       	ldi	r24, 0x03	; 3
    1dd6:	64 e0       	ldi	r22, 0x04	; 4
    1dd8:	41 e0       	ldi	r20, 0x01	; 1
    1dda:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <DIO_U8SetPinDirection>
	DIO_U8SetPinDirection(LCD_CONTROL_PORT,CONTROL_RW,HIGH);
    1dde:	83 e0       	ldi	r24, 0x03	; 3
    1de0:	65 e0       	ldi	r22, 0x05	; 5
    1de2:	41 e0       	ldi	r20, 0x01	; 1
    1de4:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <DIO_U8SetPinDirection>
    1de8:	fe 01       	movw	r30, r28
    1dea:	e7 5b       	subi	r30, 0xB7	; 183
    1dec:	ff 4f       	sbci	r31, 0xFF	; 255
    1dee:	80 e0       	ldi	r24, 0x00	; 0
    1df0:	90 e0       	ldi	r25, 0x00	; 0
    1df2:	a0 e0       	ldi	r26, 0x00	; 0
    1df4:	b2 e4       	ldi	r27, 0x42	; 66
    1df6:	80 83       	st	Z, r24
    1df8:	91 83       	std	Z+1, r25	; 0x01
    1dfa:	a2 83       	std	Z+2, r26	; 0x02
    1dfc:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1dfe:	8e 01       	movw	r16, r28
    1e00:	0b 5b       	subi	r16, 0xBB	; 187
    1e02:	1f 4f       	sbci	r17, 0xFF	; 255
    1e04:	fe 01       	movw	r30, r28
    1e06:	e7 5b       	subi	r30, 0xB7	; 183
    1e08:	ff 4f       	sbci	r31, 0xFF	; 255
    1e0a:	60 81       	ld	r22, Z
    1e0c:	71 81       	ldd	r23, Z+1	; 0x01
    1e0e:	82 81       	ldd	r24, Z+2	; 0x02
    1e10:	93 81       	ldd	r25, Z+3	; 0x03
    1e12:	20 e0       	ldi	r18, 0x00	; 0
    1e14:	30 e0       	ldi	r19, 0x00	; 0
    1e16:	4a ef       	ldi	r20, 0xFA	; 250
    1e18:	54 e4       	ldi	r21, 0x44	; 68
    1e1a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e1e:	dc 01       	movw	r26, r24
    1e20:	cb 01       	movw	r24, r22
    1e22:	f8 01       	movw	r30, r16
    1e24:	80 83       	st	Z, r24
    1e26:	91 83       	std	Z+1, r25	; 0x01
    1e28:	a2 83       	std	Z+2, r26	; 0x02
    1e2a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1e2c:	fe 01       	movw	r30, r28
    1e2e:	eb 5b       	subi	r30, 0xBB	; 187
    1e30:	ff 4f       	sbci	r31, 0xFF	; 255
    1e32:	60 81       	ld	r22, Z
    1e34:	71 81       	ldd	r23, Z+1	; 0x01
    1e36:	82 81       	ldd	r24, Z+2	; 0x02
    1e38:	93 81       	ldd	r25, Z+3	; 0x03
    1e3a:	20 e0       	ldi	r18, 0x00	; 0
    1e3c:	30 e0       	ldi	r19, 0x00	; 0
    1e3e:	40 e8       	ldi	r20, 0x80	; 128
    1e40:	5f e3       	ldi	r21, 0x3F	; 63
    1e42:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1e46:	88 23       	and	r24, r24
    1e48:	44 f4       	brge	.+16     	; 0x1e5a <LCD_VoidLCDInit+0xb2>
		__ticks = 1;
    1e4a:	fe 01       	movw	r30, r28
    1e4c:	ed 5b       	subi	r30, 0xBD	; 189
    1e4e:	ff 4f       	sbci	r31, 0xFF	; 255
    1e50:	81 e0       	ldi	r24, 0x01	; 1
    1e52:	90 e0       	ldi	r25, 0x00	; 0
    1e54:	91 83       	std	Z+1, r25	; 0x01
    1e56:	80 83       	st	Z, r24
    1e58:	64 c0       	rjmp	.+200    	; 0x1f22 <LCD_VoidLCDInit+0x17a>
	else if (__tmp > 65535)
    1e5a:	fe 01       	movw	r30, r28
    1e5c:	eb 5b       	subi	r30, 0xBB	; 187
    1e5e:	ff 4f       	sbci	r31, 0xFF	; 255
    1e60:	60 81       	ld	r22, Z
    1e62:	71 81       	ldd	r23, Z+1	; 0x01
    1e64:	82 81       	ldd	r24, Z+2	; 0x02
    1e66:	93 81       	ldd	r25, Z+3	; 0x03
    1e68:	20 e0       	ldi	r18, 0x00	; 0
    1e6a:	3f ef       	ldi	r19, 0xFF	; 255
    1e6c:	4f e7       	ldi	r20, 0x7F	; 127
    1e6e:	57 e4       	ldi	r21, 0x47	; 71
    1e70:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1e74:	18 16       	cp	r1, r24
    1e76:	0c f0       	brlt	.+2      	; 0x1e7a <LCD_VoidLCDInit+0xd2>
    1e78:	43 c0       	rjmp	.+134    	; 0x1f00 <LCD_VoidLCDInit+0x158>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e7a:	fe 01       	movw	r30, r28
    1e7c:	e7 5b       	subi	r30, 0xB7	; 183
    1e7e:	ff 4f       	sbci	r31, 0xFF	; 255
    1e80:	60 81       	ld	r22, Z
    1e82:	71 81       	ldd	r23, Z+1	; 0x01
    1e84:	82 81       	ldd	r24, Z+2	; 0x02
    1e86:	93 81       	ldd	r25, Z+3	; 0x03
    1e88:	20 e0       	ldi	r18, 0x00	; 0
    1e8a:	30 e0       	ldi	r19, 0x00	; 0
    1e8c:	40 e2       	ldi	r20, 0x20	; 32
    1e8e:	51 e4       	ldi	r21, 0x41	; 65
    1e90:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e94:	dc 01       	movw	r26, r24
    1e96:	cb 01       	movw	r24, r22
    1e98:	8e 01       	movw	r16, r28
    1e9a:	0d 5b       	subi	r16, 0xBD	; 189
    1e9c:	1f 4f       	sbci	r17, 0xFF	; 255
    1e9e:	bc 01       	movw	r22, r24
    1ea0:	cd 01       	movw	r24, r26
    1ea2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ea6:	dc 01       	movw	r26, r24
    1ea8:	cb 01       	movw	r24, r22
    1eaa:	f8 01       	movw	r30, r16
    1eac:	91 83       	std	Z+1, r25	; 0x01
    1eae:	80 83       	st	Z, r24
    1eb0:	1f c0       	rjmp	.+62     	; 0x1ef0 <LCD_VoidLCDInit+0x148>
    1eb2:	fe 01       	movw	r30, r28
    1eb4:	ef 5b       	subi	r30, 0xBF	; 191
    1eb6:	ff 4f       	sbci	r31, 0xFF	; 255
    1eb8:	88 ec       	ldi	r24, 0xC8	; 200
    1eba:	90 e0       	ldi	r25, 0x00	; 0
    1ebc:	91 83       	std	Z+1, r25	; 0x01
    1ebe:	80 83       	st	Z, r24
    1ec0:	fe 01       	movw	r30, r28
    1ec2:	ef 5b       	subi	r30, 0xBF	; 191
    1ec4:	ff 4f       	sbci	r31, 0xFF	; 255
    1ec6:	80 81       	ld	r24, Z
    1ec8:	91 81       	ldd	r25, Z+1	; 0x01
    1eca:	01 97       	sbiw	r24, 0x01	; 1
    1ecc:	f1 f7       	brne	.-4      	; 0x1eca <LCD_VoidLCDInit+0x122>
    1ece:	fe 01       	movw	r30, r28
    1ed0:	ef 5b       	subi	r30, 0xBF	; 191
    1ed2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ed4:	91 83       	std	Z+1, r25	; 0x01
    1ed6:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ed8:	de 01       	movw	r26, r28
    1eda:	ad 5b       	subi	r26, 0xBD	; 189
    1edc:	bf 4f       	sbci	r27, 0xFF	; 255
    1ede:	fe 01       	movw	r30, r28
    1ee0:	ed 5b       	subi	r30, 0xBD	; 189
    1ee2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ee4:	80 81       	ld	r24, Z
    1ee6:	91 81       	ldd	r25, Z+1	; 0x01
    1ee8:	01 97       	sbiw	r24, 0x01	; 1
    1eea:	11 96       	adiw	r26, 0x01	; 1
    1eec:	9c 93       	st	X, r25
    1eee:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ef0:	fe 01       	movw	r30, r28
    1ef2:	ed 5b       	subi	r30, 0xBD	; 189
    1ef4:	ff 4f       	sbci	r31, 0xFF	; 255
    1ef6:	80 81       	ld	r24, Z
    1ef8:	91 81       	ldd	r25, Z+1	; 0x01
    1efa:	00 97       	sbiw	r24, 0x00	; 0
    1efc:	d1 f6       	brne	.-76     	; 0x1eb2 <LCD_VoidLCDInit+0x10a>
    1efe:	24 c0       	rjmp	.+72     	; 0x1f48 <LCD_VoidLCDInit+0x1a0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f00:	8e 01       	movw	r16, r28
    1f02:	0d 5b       	subi	r16, 0xBD	; 189
    1f04:	1f 4f       	sbci	r17, 0xFF	; 255
    1f06:	fe 01       	movw	r30, r28
    1f08:	eb 5b       	subi	r30, 0xBB	; 187
    1f0a:	ff 4f       	sbci	r31, 0xFF	; 255
    1f0c:	60 81       	ld	r22, Z
    1f0e:	71 81       	ldd	r23, Z+1	; 0x01
    1f10:	82 81       	ldd	r24, Z+2	; 0x02
    1f12:	93 81       	ldd	r25, Z+3	; 0x03
    1f14:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f18:	dc 01       	movw	r26, r24
    1f1a:	cb 01       	movw	r24, r22
    1f1c:	f8 01       	movw	r30, r16
    1f1e:	91 83       	std	Z+1, r25	; 0x01
    1f20:	80 83       	st	Z, r24
    1f22:	fe 01       	movw	r30, r28
    1f24:	ed 5b       	subi	r30, 0xBD	; 189
    1f26:	ff 4f       	sbci	r31, 0xFF	; 255
    1f28:	80 81       	ld	r24, Z
    1f2a:	91 81       	ldd	r25, Z+1	; 0x01
    1f2c:	fe 01       	movw	r30, r28
    1f2e:	ff 96       	adiw	r30, 0x3f	; 63
    1f30:	91 83       	std	Z+1, r25	; 0x01
    1f32:	80 83       	st	Z, r24
    1f34:	fe 01       	movw	r30, r28
    1f36:	ff 96       	adiw	r30, 0x3f	; 63
    1f38:	80 81       	ld	r24, Z
    1f3a:	91 81       	ldd	r25, Z+1	; 0x01
    1f3c:	01 97       	sbiw	r24, 0x01	; 1
    1f3e:	f1 f7       	brne	.-4      	; 0x1f3c <LCD_VoidLCDInit+0x194>
    1f40:	fe 01       	movw	r30, r28
    1f42:	ff 96       	adiw	r30, 0x3f	; 63
    1f44:	91 83       	std	Z+1, r25	; 0x01
    1f46:	80 83       	st	Z, r24
	_delay_ms(32);
	/*Send the Function Set >> 2 lines and font size 5*7 */
	LCD_VoidSendCommand(FUN_SET1);
    1f48:	83 e3       	ldi	r24, 0x33	; 51
    1f4a:	0e 94 b0 11 	call	0x2360	; 0x2360 <LCD_VoidSendCommand>
	LCD_VoidSendCommand(FUN_SET2);
    1f4e:	82 e3       	ldi	r24, 0x32	; 50
    1f50:	0e 94 b0 11 	call	0x2360	; 0x2360 <LCD_VoidSendCommand>
	LCD_VoidSendCommand(FUN_SET3);
    1f54:	88 e2       	ldi	r24, 0x28	; 40
    1f56:	0e 94 b0 11 	call	0x2360	; 0x2360 <LCD_VoidSendCommand>
    1f5a:	80 e0       	ldi	r24, 0x00	; 0
    1f5c:	90 e0       	ldi	r25, 0x00	; 0
    1f5e:	a0 e2       	ldi	r26, 0x20	; 32
    1f60:	b2 e4       	ldi	r27, 0x42	; 66
    1f62:	8b af       	std	Y+59, r24	; 0x3b
    1f64:	9c af       	std	Y+60, r25	; 0x3c
    1f66:	ad af       	std	Y+61, r26	; 0x3d
    1f68:	be af       	std	Y+62, r27	; 0x3e
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1f6a:	6b ad       	ldd	r22, Y+59	; 0x3b
    1f6c:	7c ad       	ldd	r23, Y+60	; 0x3c
    1f6e:	8d ad       	ldd	r24, Y+61	; 0x3d
    1f70:	9e ad       	ldd	r25, Y+62	; 0x3e
    1f72:	2b ea       	ldi	r18, 0xAB	; 171
    1f74:	3a ea       	ldi	r19, 0xAA	; 170
    1f76:	4a e2       	ldi	r20, 0x2A	; 42
    1f78:	50 e4       	ldi	r21, 0x40	; 64
    1f7a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f7e:	dc 01       	movw	r26, r24
    1f80:	cb 01       	movw	r24, r22
    1f82:	8f ab       	std	Y+55, r24	; 0x37
    1f84:	98 af       	std	Y+56, r25	; 0x38
    1f86:	a9 af       	std	Y+57, r26	; 0x39
    1f88:	ba af       	std	Y+58, r27	; 0x3a
	if (__tmp < 1.0)
    1f8a:	6f a9       	ldd	r22, Y+55	; 0x37
    1f8c:	78 ad       	ldd	r23, Y+56	; 0x38
    1f8e:	89 ad       	ldd	r24, Y+57	; 0x39
    1f90:	9a ad       	ldd	r25, Y+58	; 0x3a
    1f92:	20 e0       	ldi	r18, 0x00	; 0
    1f94:	30 e0       	ldi	r19, 0x00	; 0
    1f96:	40 e8       	ldi	r20, 0x80	; 128
    1f98:	5f e3       	ldi	r21, 0x3F	; 63
    1f9a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1f9e:	88 23       	and	r24, r24
    1fa0:	1c f4       	brge	.+6      	; 0x1fa8 <LCD_VoidLCDInit+0x200>
		__ticks = 1;
    1fa2:	81 e0       	ldi	r24, 0x01	; 1
    1fa4:	8e ab       	std	Y+54, r24	; 0x36
    1fa6:	91 c0       	rjmp	.+290    	; 0x20ca <LCD_VoidLCDInit+0x322>
	else if (__tmp > 255)
    1fa8:	6f a9       	ldd	r22, Y+55	; 0x37
    1faa:	78 ad       	ldd	r23, Y+56	; 0x38
    1fac:	89 ad       	ldd	r24, Y+57	; 0x39
    1fae:	9a ad       	ldd	r25, Y+58	; 0x3a
    1fb0:	20 e0       	ldi	r18, 0x00	; 0
    1fb2:	30 e0       	ldi	r19, 0x00	; 0
    1fb4:	4f e7       	ldi	r20, 0x7F	; 127
    1fb6:	53 e4       	ldi	r21, 0x43	; 67
    1fb8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1fbc:	18 16       	cp	r1, r24
    1fbe:	0c f0       	brlt	.+2      	; 0x1fc2 <LCD_VoidLCDInit+0x21a>
    1fc0:	7b c0       	rjmp	.+246    	; 0x20b8 <LCD_VoidLCDInit+0x310>
	{
		_delay_ms(__us / 1000.0);
    1fc2:	6b ad       	ldd	r22, Y+59	; 0x3b
    1fc4:	7c ad       	ldd	r23, Y+60	; 0x3c
    1fc6:	8d ad       	ldd	r24, Y+61	; 0x3d
    1fc8:	9e ad       	ldd	r25, Y+62	; 0x3e
    1fca:	20 e0       	ldi	r18, 0x00	; 0
    1fcc:	30 e0       	ldi	r19, 0x00	; 0
    1fce:	4a e7       	ldi	r20, 0x7A	; 122
    1fd0:	54 e4       	ldi	r21, 0x44	; 68
    1fd2:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1fd6:	dc 01       	movw	r26, r24
    1fd8:	cb 01       	movw	r24, r22
    1fda:	8a ab       	std	Y+50, r24	; 0x32
    1fdc:	9b ab       	std	Y+51, r25	; 0x33
    1fde:	ac ab       	std	Y+52, r26	; 0x34
    1fe0:	bd ab       	std	Y+53, r27	; 0x35
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1fe2:	6a a9       	ldd	r22, Y+50	; 0x32
    1fe4:	7b a9       	ldd	r23, Y+51	; 0x33
    1fe6:	8c a9       	ldd	r24, Y+52	; 0x34
    1fe8:	9d a9       	ldd	r25, Y+53	; 0x35
    1fea:	20 e0       	ldi	r18, 0x00	; 0
    1fec:	30 e0       	ldi	r19, 0x00	; 0
    1fee:	4a ef       	ldi	r20, 0xFA	; 250
    1ff0:	54 e4       	ldi	r21, 0x44	; 68
    1ff2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ff6:	dc 01       	movw	r26, r24
    1ff8:	cb 01       	movw	r24, r22
    1ffa:	8e a7       	std	Y+46, r24	; 0x2e
    1ffc:	9f a7       	std	Y+47, r25	; 0x2f
    1ffe:	a8 ab       	std	Y+48, r26	; 0x30
    2000:	b9 ab       	std	Y+49, r27	; 0x31
	if (__tmp < 1.0)
    2002:	6e a5       	ldd	r22, Y+46	; 0x2e
    2004:	7f a5       	ldd	r23, Y+47	; 0x2f
    2006:	88 a9       	ldd	r24, Y+48	; 0x30
    2008:	99 a9       	ldd	r25, Y+49	; 0x31
    200a:	20 e0       	ldi	r18, 0x00	; 0
    200c:	30 e0       	ldi	r19, 0x00	; 0
    200e:	40 e8       	ldi	r20, 0x80	; 128
    2010:	5f e3       	ldi	r21, 0x3F	; 63
    2012:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2016:	88 23       	and	r24, r24
    2018:	2c f4       	brge	.+10     	; 0x2024 <LCD_VoidLCDInit+0x27c>
		__ticks = 1;
    201a:	81 e0       	ldi	r24, 0x01	; 1
    201c:	90 e0       	ldi	r25, 0x00	; 0
    201e:	9d a7       	std	Y+45, r25	; 0x2d
    2020:	8c a7       	std	Y+44, r24	; 0x2c
    2022:	3f c0       	rjmp	.+126    	; 0x20a2 <LCD_VoidLCDInit+0x2fa>
	else if (__tmp > 65535)
    2024:	6e a5       	ldd	r22, Y+46	; 0x2e
    2026:	7f a5       	ldd	r23, Y+47	; 0x2f
    2028:	88 a9       	ldd	r24, Y+48	; 0x30
    202a:	99 a9       	ldd	r25, Y+49	; 0x31
    202c:	20 e0       	ldi	r18, 0x00	; 0
    202e:	3f ef       	ldi	r19, 0xFF	; 255
    2030:	4f e7       	ldi	r20, 0x7F	; 127
    2032:	57 e4       	ldi	r21, 0x47	; 71
    2034:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2038:	18 16       	cp	r1, r24
    203a:	4c f5       	brge	.+82     	; 0x208e <LCD_VoidLCDInit+0x2e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    203c:	6a a9       	ldd	r22, Y+50	; 0x32
    203e:	7b a9       	ldd	r23, Y+51	; 0x33
    2040:	8c a9       	ldd	r24, Y+52	; 0x34
    2042:	9d a9       	ldd	r25, Y+53	; 0x35
    2044:	20 e0       	ldi	r18, 0x00	; 0
    2046:	30 e0       	ldi	r19, 0x00	; 0
    2048:	40 e2       	ldi	r20, 0x20	; 32
    204a:	51 e4       	ldi	r21, 0x41	; 65
    204c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2050:	dc 01       	movw	r26, r24
    2052:	cb 01       	movw	r24, r22
    2054:	bc 01       	movw	r22, r24
    2056:	cd 01       	movw	r24, r26
    2058:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    205c:	dc 01       	movw	r26, r24
    205e:	cb 01       	movw	r24, r22
    2060:	9d a7       	std	Y+45, r25	; 0x2d
    2062:	8c a7       	std	Y+44, r24	; 0x2c
    2064:	0f c0       	rjmp	.+30     	; 0x2084 <LCD_VoidLCDInit+0x2dc>
    2066:	88 ec       	ldi	r24, 0xC8	; 200
    2068:	90 e0       	ldi	r25, 0x00	; 0
    206a:	9b a7       	std	Y+43, r25	; 0x2b
    206c:	8a a7       	std	Y+42, r24	; 0x2a
    206e:	8a a5       	ldd	r24, Y+42	; 0x2a
    2070:	9b a5       	ldd	r25, Y+43	; 0x2b
    2072:	01 97       	sbiw	r24, 0x01	; 1
    2074:	f1 f7       	brne	.-4      	; 0x2072 <LCD_VoidLCDInit+0x2ca>
    2076:	9b a7       	std	Y+43, r25	; 0x2b
    2078:	8a a7       	std	Y+42, r24	; 0x2a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    207a:	8c a5       	ldd	r24, Y+44	; 0x2c
    207c:	9d a5       	ldd	r25, Y+45	; 0x2d
    207e:	01 97       	sbiw	r24, 0x01	; 1
    2080:	9d a7       	std	Y+45, r25	; 0x2d
    2082:	8c a7       	std	Y+44, r24	; 0x2c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2084:	8c a5       	ldd	r24, Y+44	; 0x2c
    2086:	9d a5       	ldd	r25, Y+45	; 0x2d
    2088:	00 97       	sbiw	r24, 0x00	; 0
    208a:	69 f7       	brne	.-38     	; 0x2066 <LCD_VoidLCDInit+0x2be>
    208c:	24 c0       	rjmp	.+72     	; 0x20d6 <LCD_VoidLCDInit+0x32e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    208e:	6e a5       	ldd	r22, Y+46	; 0x2e
    2090:	7f a5       	ldd	r23, Y+47	; 0x2f
    2092:	88 a9       	ldd	r24, Y+48	; 0x30
    2094:	99 a9       	ldd	r25, Y+49	; 0x31
    2096:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    209a:	dc 01       	movw	r26, r24
    209c:	cb 01       	movw	r24, r22
    209e:	9d a7       	std	Y+45, r25	; 0x2d
    20a0:	8c a7       	std	Y+44, r24	; 0x2c
    20a2:	8c a5       	ldd	r24, Y+44	; 0x2c
    20a4:	9d a5       	ldd	r25, Y+45	; 0x2d
    20a6:	99 a7       	std	Y+41, r25	; 0x29
    20a8:	88 a7       	std	Y+40, r24	; 0x28
    20aa:	88 a5       	ldd	r24, Y+40	; 0x28
    20ac:	99 a5       	ldd	r25, Y+41	; 0x29
    20ae:	01 97       	sbiw	r24, 0x01	; 1
    20b0:	f1 f7       	brne	.-4      	; 0x20ae <LCD_VoidLCDInit+0x306>
    20b2:	99 a7       	std	Y+41, r25	; 0x29
    20b4:	88 a7       	std	Y+40, r24	; 0x28
    20b6:	0f c0       	rjmp	.+30     	; 0x20d6 <LCD_VoidLCDInit+0x32e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    20b8:	6f a9       	ldd	r22, Y+55	; 0x37
    20ba:	78 ad       	ldd	r23, Y+56	; 0x38
    20bc:	89 ad       	ldd	r24, Y+57	; 0x39
    20be:	9a ad       	ldd	r25, Y+58	; 0x3a
    20c0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20c4:	dc 01       	movw	r26, r24
    20c6:	cb 01       	movw	r24, r22
    20c8:	8e ab       	std	Y+54, r24	; 0x36
    20ca:	8e a9       	ldd	r24, Y+54	; 0x36
    20cc:	8f a3       	std	Y+39, r24	; 0x27
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    20ce:	8f a1       	ldd	r24, Y+39	; 0x27
    20d0:	8a 95       	dec	r24
    20d2:	f1 f7       	brne	.-4      	; 0x20d0 <LCD_VoidLCDInit+0x328>
    20d4:	8f a3       	std	Y+39, r24	; 0x27
	_delay_us(40);
	/*SET the the DISPLAY_ON_OFF Command*/
	LCD_VoidSendCommand(DISPLAY_ON_OFF);
    20d6:	8f e0       	ldi	r24, 0x0F	; 15
    20d8:	0e 94 b0 11 	call	0x2360	; 0x2360 <LCD_VoidSendCommand>
    20dc:	80 e0       	ldi	r24, 0x00	; 0
    20de:	90 e0       	ldi	r25, 0x00	; 0
    20e0:	a0 e2       	ldi	r26, 0x20	; 32
    20e2:	b2 e4       	ldi	r27, 0x42	; 66
    20e4:	8b a3       	std	Y+35, r24	; 0x23
    20e6:	9c a3       	std	Y+36, r25	; 0x24
    20e8:	ad a3       	std	Y+37, r26	; 0x25
    20ea:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    20ec:	6b a1       	ldd	r22, Y+35	; 0x23
    20ee:	7c a1       	ldd	r23, Y+36	; 0x24
    20f0:	8d a1       	ldd	r24, Y+37	; 0x25
    20f2:	9e a1       	ldd	r25, Y+38	; 0x26
    20f4:	2b ea       	ldi	r18, 0xAB	; 171
    20f6:	3a ea       	ldi	r19, 0xAA	; 170
    20f8:	4a e2       	ldi	r20, 0x2A	; 42
    20fa:	50 e4       	ldi	r21, 0x40	; 64
    20fc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2100:	dc 01       	movw	r26, r24
    2102:	cb 01       	movw	r24, r22
    2104:	8f 8f       	std	Y+31, r24	; 0x1f
    2106:	98 a3       	std	Y+32, r25	; 0x20
    2108:	a9 a3       	std	Y+33, r26	; 0x21
    210a:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    210c:	6f 8d       	ldd	r22, Y+31	; 0x1f
    210e:	78 a1       	ldd	r23, Y+32	; 0x20
    2110:	89 a1       	ldd	r24, Y+33	; 0x21
    2112:	9a a1       	ldd	r25, Y+34	; 0x22
    2114:	20 e0       	ldi	r18, 0x00	; 0
    2116:	30 e0       	ldi	r19, 0x00	; 0
    2118:	40 e8       	ldi	r20, 0x80	; 128
    211a:	5f e3       	ldi	r21, 0x3F	; 63
    211c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2120:	88 23       	and	r24, r24
    2122:	1c f4       	brge	.+6      	; 0x212a <LCD_VoidLCDInit+0x382>
		__ticks = 1;
    2124:	81 e0       	ldi	r24, 0x01	; 1
    2126:	8e 8f       	std	Y+30, r24	; 0x1e
    2128:	91 c0       	rjmp	.+290    	; 0x224c <LCD_VoidLCDInit+0x4a4>
	else if (__tmp > 255)
    212a:	6f 8d       	ldd	r22, Y+31	; 0x1f
    212c:	78 a1       	ldd	r23, Y+32	; 0x20
    212e:	89 a1       	ldd	r24, Y+33	; 0x21
    2130:	9a a1       	ldd	r25, Y+34	; 0x22
    2132:	20 e0       	ldi	r18, 0x00	; 0
    2134:	30 e0       	ldi	r19, 0x00	; 0
    2136:	4f e7       	ldi	r20, 0x7F	; 127
    2138:	53 e4       	ldi	r21, 0x43	; 67
    213a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    213e:	18 16       	cp	r1, r24
    2140:	0c f0       	brlt	.+2      	; 0x2144 <LCD_VoidLCDInit+0x39c>
    2142:	7b c0       	rjmp	.+246    	; 0x223a <LCD_VoidLCDInit+0x492>
	{
		_delay_ms(__us / 1000.0);
    2144:	6b a1       	ldd	r22, Y+35	; 0x23
    2146:	7c a1       	ldd	r23, Y+36	; 0x24
    2148:	8d a1       	ldd	r24, Y+37	; 0x25
    214a:	9e a1       	ldd	r25, Y+38	; 0x26
    214c:	20 e0       	ldi	r18, 0x00	; 0
    214e:	30 e0       	ldi	r19, 0x00	; 0
    2150:	4a e7       	ldi	r20, 0x7A	; 122
    2152:	54 e4       	ldi	r21, 0x44	; 68
    2154:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2158:	dc 01       	movw	r26, r24
    215a:	cb 01       	movw	r24, r22
    215c:	8a 8f       	std	Y+26, r24	; 0x1a
    215e:	9b 8f       	std	Y+27, r25	; 0x1b
    2160:	ac 8f       	std	Y+28, r26	; 0x1c
    2162:	bd 8f       	std	Y+29, r27	; 0x1d
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2164:	6a 8d       	ldd	r22, Y+26	; 0x1a
    2166:	7b 8d       	ldd	r23, Y+27	; 0x1b
    2168:	8c 8d       	ldd	r24, Y+28	; 0x1c
    216a:	9d 8d       	ldd	r25, Y+29	; 0x1d
    216c:	20 e0       	ldi	r18, 0x00	; 0
    216e:	30 e0       	ldi	r19, 0x00	; 0
    2170:	4a ef       	ldi	r20, 0xFA	; 250
    2172:	54 e4       	ldi	r21, 0x44	; 68
    2174:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2178:	dc 01       	movw	r26, r24
    217a:	cb 01       	movw	r24, r22
    217c:	8e 8b       	std	Y+22, r24	; 0x16
    217e:	9f 8b       	std	Y+23, r25	; 0x17
    2180:	a8 8f       	std	Y+24, r26	; 0x18
    2182:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
    2184:	6e 89       	ldd	r22, Y+22	; 0x16
    2186:	7f 89       	ldd	r23, Y+23	; 0x17
    2188:	88 8d       	ldd	r24, Y+24	; 0x18
    218a:	99 8d       	ldd	r25, Y+25	; 0x19
    218c:	20 e0       	ldi	r18, 0x00	; 0
    218e:	30 e0       	ldi	r19, 0x00	; 0
    2190:	40 e8       	ldi	r20, 0x80	; 128
    2192:	5f e3       	ldi	r21, 0x3F	; 63
    2194:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2198:	88 23       	and	r24, r24
    219a:	2c f4       	brge	.+10     	; 0x21a6 <LCD_VoidLCDInit+0x3fe>
		__ticks = 1;
    219c:	81 e0       	ldi	r24, 0x01	; 1
    219e:	90 e0       	ldi	r25, 0x00	; 0
    21a0:	9d 8b       	std	Y+21, r25	; 0x15
    21a2:	8c 8b       	std	Y+20, r24	; 0x14
    21a4:	3f c0       	rjmp	.+126    	; 0x2224 <LCD_VoidLCDInit+0x47c>
	else if (__tmp > 65535)
    21a6:	6e 89       	ldd	r22, Y+22	; 0x16
    21a8:	7f 89       	ldd	r23, Y+23	; 0x17
    21aa:	88 8d       	ldd	r24, Y+24	; 0x18
    21ac:	99 8d       	ldd	r25, Y+25	; 0x19
    21ae:	20 e0       	ldi	r18, 0x00	; 0
    21b0:	3f ef       	ldi	r19, 0xFF	; 255
    21b2:	4f e7       	ldi	r20, 0x7F	; 127
    21b4:	57 e4       	ldi	r21, 0x47	; 71
    21b6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    21ba:	18 16       	cp	r1, r24
    21bc:	4c f5       	brge	.+82     	; 0x2210 <LCD_VoidLCDInit+0x468>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21be:	6a 8d       	ldd	r22, Y+26	; 0x1a
    21c0:	7b 8d       	ldd	r23, Y+27	; 0x1b
    21c2:	8c 8d       	ldd	r24, Y+28	; 0x1c
    21c4:	9d 8d       	ldd	r25, Y+29	; 0x1d
    21c6:	20 e0       	ldi	r18, 0x00	; 0
    21c8:	30 e0       	ldi	r19, 0x00	; 0
    21ca:	40 e2       	ldi	r20, 0x20	; 32
    21cc:	51 e4       	ldi	r21, 0x41	; 65
    21ce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21d2:	dc 01       	movw	r26, r24
    21d4:	cb 01       	movw	r24, r22
    21d6:	bc 01       	movw	r22, r24
    21d8:	cd 01       	movw	r24, r26
    21da:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21de:	dc 01       	movw	r26, r24
    21e0:	cb 01       	movw	r24, r22
    21e2:	9d 8b       	std	Y+21, r25	; 0x15
    21e4:	8c 8b       	std	Y+20, r24	; 0x14
    21e6:	0f c0       	rjmp	.+30     	; 0x2206 <LCD_VoidLCDInit+0x45e>
    21e8:	88 ec       	ldi	r24, 0xC8	; 200
    21ea:	90 e0       	ldi	r25, 0x00	; 0
    21ec:	9b 8b       	std	Y+19, r25	; 0x13
    21ee:	8a 8b       	std	Y+18, r24	; 0x12
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    21f0:	8a 89       	ldd	r24, Y+18	; 0x12
    21f2:	9b 89       	ldd	r25, Y+19	; 0x13
    21f4:	01 97       	sbiw	r24, 0x01	; 1
    21f6:	f1 f7       	brne	.-4      	; 0x21f4 <LCD_VoidLCDInit+0x44c>
    21f8:	9b 8b       	std	Y+19, r25	; 0x13
    21fa:	8a 8b       	std	Y+18, r24	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21fc:	8c 89       	ldd	r24, Y+20	; 0x14
    21fe:	9d 89       	ldd	r25, Y+21	; 0x15
    2200:	01 97       	sbiw	r24, 0x01	; 1
    2202:	9d 8b       	std	Y+21, r25	; 0x15
    2204:	8c 8b       	std	Y+20, r24	; 0x14
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2206:	8c 89       	ldd	r24, Y+20	; 0x14
    2208:	9d 89       	ldd	r25, Y+21	; 0x15
    220a:	00 97       	sbiw	r24, 0x00	; 0
    220c:	69 f7       	brne	.-38     	; 0x21e8 <LCD_VoidLCDInit+0x440>
    220e:	24 c0       	rjmp	.+72     	; 0x2258 <LCD_VoidLCDInit+0x4b0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2210:	6e 89       	ldd	r22, Y+22	; 0x16
    2212:	7f 89       	ldd	r23, Y+23	; 0x17
    2214:	88 8d       	ldd	r24, Y+24	; 0x18
    2216:	99 8d       	ldd	r25, Y+25	; 0x19
    2218:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    221c:	dc 01       	movw	r26, r24
    221e:	cb 01       	movw	r24, r22
    2220:	9d 8b       	std	Y+21, r25	; 0x15
    2222:	8c 8b       	std	Y+20, r24	; 0x14
    2224:	8c 89       	ldd	r24, Y+20	; 0x14
    2226:	9d 89       	ldd	r25, Y+21	; 0x15
    2228:	99 8b       	std	Y+17, r25	; 0x11
    222a:	88 8b       	std	Y+16, r24	; 0x10
    222c:	88 89       	ldd	r24, Y+16	; 0x10
    222e:	99 89       	ldd	r25, Y+17	; 0x11
    2230:	01 97       	sbiw	r24, 0x01	; 1
    2232:	f1 f7       	brne	.-4      	; 0x2230 <LCD_VoidLCDInit+0x488>
    2234:	99 8b       	std	Y+17, r25	; 0x11
    2236:	88 8b       	std	Y+16, r24	; 0x10
    2238:	0f c0       	rjmp	.+30     	; 0x2258 <LCD_VoidLCDInit+0x4b0>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    223a:	6f 8d       	ldd	r22, Y+31	; 0x1f
    223c:	78 a1       	ldd	r23, Y+32	; 0x20
    223e:	89 a1       	ldd	r24, Y+33	; 0x21
    2240:	9a a1       	ldd	r25, Y+34	; 0x22
    2242:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2246:	dc 01       	movw	r26, r24
    2248:	cb 01       	movw	r24, r22
    224a:	8e 8f       	std	Y+30, r24	; 0x1e
    224c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    224e:	8f 87       	std	Y+15, r24	; 0x0f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2250:	8f 85       	ldd	r24, Y+15	; 0x0f
    2252:	8a 95       	dec	r24
    2254:	f1 f7       	brne	.-4      	; 0x2252 <LCD_VoidLCDInit+0x4aa>
    2256:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_us(40);
	/*SET the the DISPLAY_CLEAR Command*/
	LCD_VoidSendCommand(DISPLAY_CLEAR);
    2258:	81 e0       	ldi	r24, 0x01	; 1
    225a:	0e 94 b0 11 	call	0x2360	; 0x2360 <LCD_VoidSendCommand>
    225e:	80 e0       	ldi	r24, 0x00	; 0
    2260:	90 e0       	ldi	r25, 0x00	; 0
    2262:	a0 e0       	ldi	r26, 0x00	; 0
    2264:	b0 e4       	ldi	r27, 0x40	; 64
    2266:	8b 87       	std	Y+11, r24	; 0x0b
    2268:	9c 87       	std	Y+12, r25	; 0x0c
    226a:	ad 87       	std	Y+13, r26	; 0x0d
    226c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    226e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2270:	7c 85       	ldd	r23, Y+12	; 0x0c
    2272:	8d 85       	ldd	r24, Y+13	; 0x0d
    2274:	9e 85       	ldd	r25, Y+14	; 0x0e
    2276:	20 e0       	ldi	r18, 0x00	; 0
    2278:	30 e0       	ldi	r19, 0x00	; 0
    227a:	4a ef       	ldi	r20, 0xFA	; 250
    227c:	54 e4       	ldi	r21, 0x44	; 68
    227e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2282:	dc 01       	movw	r26, r24
    2284:	cb 01       	movw	r24, r22
    2286:	8f 83       	std	Y+7, r24	; 0x07
    2288:	98 87       	std	Y+8, r25	; 0x08
    228a:	a9 87       	std	Y+9, r26	; 0x09
    228c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    228e:	6f 81       	ldd	r22, Y+7	; 0x07
    2290:	78 85       	ldd	r23, Y+8	; 0x08
    2292:	89 85       	ldd	r24, Y+9	; 0x09
    2294:	9a 85       	ldd	r25, Y+10	; 0x0a
    2296:	20 e0       	ldi	r18, 0x00	; 0
    2298:	30 e0       	ldi	r19, 0x00	; 0
    229a:	40 e8       	ldi	r20, 0x80	; 128
    229c:	5f e3       	ldi	r21, 0x3F	; 63
    229e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    22a2:	88 23       	and	r24, r24
    22a4:	2c f4       	brge	.+10     	; 0x22b0 <LCD_VoidLCDInit+0x508>
		__ticks = 1;
    22a6:	81 e0       	ldi	r24, 0x01	; 1
    22a8:	90 e0       	ldi	r25, 0x00	; 0
    22aa:	9e 83       	std	Y+6, r25	; 0x06
    22ac:	8d 83       	std	Y+5, r24	; 0x05
    22ae:	3f c0       	rjmp	.+126    	; 0x232e <LCD_VoidLCDInit+0x586>
	else if (__tmp > 65535)
    22b0:	6f 81       	ldd	r22, Y+7	; 0x07
    22b2:	78 85       	ldd	r23, Y+8	; 0x08
    22b4:	89 85       	ldd	r24, Y+9	; 0x09
    22b6:	9a 85       	ldd	r25, Y+10	; 0x0a
    22b8:	20 e0       	ldi	r18, 0x00	; 0
    22ba:	3f ef       	ldi	r19, 0xFF	; 255
    22bc:	4f e7       	ldi	r20, 0x7F	; 127
    22be:	57 e4       	ldi	r21, 0x47	; 71
    22c0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    22c4:	18 16       	cp	r1, r24
    22c6:	4c f5       	brge	.+82     	; 0x231a <LCD_VoidLCDInit+0x572>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22c8:	6b 85       	ldd	r22, Y+11	; 0x0b
    22ca:	7c 85       	ldd	r23, Y+12	; 0x0c
    22cc:	8d 85       	ldd	r24, Y+13	; 0x0d
    22ce:	9e 85       	ldd	r25, Y+14	; 0x0e
    22d0:	20 e0       	ldi	r18, 0x00	; 0
    22d2:	30 e0       	ldi	r19, 0x00	; 0
    22d4:	40 e2       	ldi	r20, 0x20	; 32
    22d6:	51 e4       	ldi	r21, 0x41	; 65
    22d8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22dc:	dc 01       	movw	r26, r24
    22de:	cb 01       	movw	r24, r22
    22e0:	bc 01       	movw	r22, r24
    22e2:	cd 01       	movw	r24, r26
    22e4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22e8:	dc 01       	movw	r26, r24
    22ea:	cb 01       	movw	r24, r22
    22ec:	9e 83       	std	Y+6, r25	; 0x06
    22ee:	8d 83       	std	Y+5, r24	; 0x05
    22f0:	0f c0       	rjmp	.+30     	; 0x2310 <LCD_VoidLCDInit+0x568>
    22f2:	88 ec       	ldi	r24, 0xC8	; 200
    22f4:	90 e0       	ldi	r25, 0x00	; 0
    22f6:	9c 83       	std	Y+4, r25	; 0x04
    22f8:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    22fa:	8b 81       	ldd	r24, Y+3	; 0x03
    22fc:	9c 81       	ldd	r25, Y+4	; 0x04
    22fe:	01 97       	sbiw	r24, 0x01	; 1
    2300:	f1 f7       	brne	.-4      	; 0x22fe <LCD_VoidLCDInit+0x556>
    2302:	9c 83       	std	Y+4, r25	; 0x04
    2304:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2306:	8d 81       	ldd	r24, Y+5	; 0x05
    2308:	9e 81       	ldd	r25, Y+6	; 0x06
    230a:	01 97       	sbiw	r24, 0x01	; 1
    230c:	9e 83       	std	Y+6, r25	; 0x06
    230e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2310:	8d 81       	ldd	r24, Y+5	; 0x05
    2312:	9e 81       	ldd	r25, Y+6	; 0x06
    2314:	00 97       	sbiw	r24, 0x00	; 0
    2316:	69 f7       	brne	.-38     	; 0x22f2 <LCD_VoidLCDInit+0x54a>
    2318:	14 c0       	rjmp	.+40     	; 0x2342 <LCD_VoidLCDInit+0x59a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    231a:	6f 81       	ldd	r22, Y+7	; 0x07
    231c:	78 85       	ldd	r23, Y+8	; 0x08
    231e:	89 85       	ldd	r24, Y+9	; 0x09
    2320:	9a 85       	ldd	r25, Y+10	; 0x0a
    2322:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2326:	dc 01       	movw	r26, r24
    2328:	cb 01       	movw	r24, r22
    232a:	9e 83       	std	Y+6, r25	; 0x06
    232c:	8d 83       	std	Y+5, r24	; 0x05
    232e:	8d 81       	ldd	r24, Y+5	; 0x05
    2330:	9e 81       	ldd	r25, Y+6	; 0x06
    2332:	9a 83       	std	Y+2, r25	; 0x02
    2334:	89 83       	std	Y+1, r24	; 0x01
    2336:	89 81       	ldd	r24, Y+1	; 0x01
    2338:	9a 81       	ldd	r25, Y+2	; 0x02
    233a:	01 97       	sbiw	r24, 0x01	; 1
    233c:	f1 f7       	brne	.-4      	; 0x233a <LCD_VoidLCDInit+0x592>
    233e:	9a 83       	std	Y+2, r25	; 0x02
    2340:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	/*SET the the ENTRY_SET_MODE Command*/
	LCD_VoidSendCommand(ENTRY_MODE_SET);
    2342:	86 e0       	ldi	r24, 0x06	; 6
    2344:	0e 94 b0 11 	call	0x2360	; 0x2360 <LCD_VoidSendCommand>

#endif
}
    2348:	c4 5b       	subi	r28, 0xB4	; 180
    234a:	df 4f       	sbci	r29, 0xFF	; 255
    234c:	0f b6       	in	r0, 0x3f	; 63
    234e:	f8 94       	cli
    2350:	de bf       	out	0x3e, r29	; 62
    2352:	0f be       	out	0x3f, r0	; 63
    2354:	cd bf       	out	0x3d, r28	; 61
    2356:	cf 91       	pop	r28
    2358:	df 91       	pop	r29
    235a:	1f 91       	pop	r17
    235c:	0f 91       	pop	r16
    235e:	08 95       	ret

00002360 <LCD_VoidSendCommand>:
void LCD_VoidSendCommand(u8 Copy_U8Command)
{
    2360:	df 93       	push	r29
    2362:	cf 93       	push	r28
    2364:	cd b7       	in	r28, 0x3d	; 61
    2366:	de b7       	in	r29, 0x3e	; 62
    2368:	e1 97       	sbiw	r28, 0x31	; 49
    236a:	0f b6       	in	r0, 0x3f	; 63
    236c:	f8 94       	cli
    236e:	de bf       	out	0x3e, r29	; 62
    2370:	0f be       	out	0x3f, r0	; 63
    2372:	cd bf       	out	0x3d, r28	; 61
    2374:	89 ab       	std	Y+49, r24	; 0x31
	DIO_U8SetPinValue(LCD_CONTROL_PORT,CONTROL_E,LOW);

#elif LCD_PINS_MODE==LCD_4BIT_MODE

  /* clear the RS Pin*/
	DIO_U8SetPinValue(LCD_CONTROL_PORT,CONTROL_RS,LOW);
    2376:	83 e0       	ldi	r24, 0x03	; 3
    2378:	64 e0       	ldi	r22, 0x04	; 4
    237a:	40 e0       	ldi	r20, 0x00	; 0
    237c:	0e 94 15 08 	call	0x102a	; 0x102a <DIO_U8SetPinValue>
	/* Clear the R/W PIN >>> Selects Write*/
	DIO_U8SetPinValue(LCD_CONTROL_PORT,CONTROL_RW,LOW);
    2380:	83 e0       	ldi	r24, 0x03	; 3
    2382:	65 e0       	ldi	r22, 0x05	; 5
    2384:	40 e0       	ldi	r20, 0x00	; 0
    2386:	0e 94 15 08 	call	0x102a	; 0x102a <DIO_U8SetPinValue>
	/* Send Command the first high 4bits*/
	DIO_U8SetPortValue(LCD_DATA_PORT,Copy_U8Command);
    238a:	80 e0       	ldi	r24, 0x00	; 0
    238c:	69 a9       	ldd	r22, Y+49	; 0x31
    238e:	0e 94 18 0b 	call	0x1630	; 0x1630 <DIO_U8SetPortValue>
	/* SET Enable */
	DIO_U8SetPinValue(LCD_CONTROL_PORT,CONTROL_E,HIGH);
    2392:	83 e0       	ldi	r24, 0x03	; 3
    2394:	66 e0       	ldi	r22, 0x06	; 6
    2396:	41 e0       	ldi	r20, 0x01	; 1
    2398:	0e 94 15 08 	call	0x102a	; 0x102a <DIO_U8SetPinValue>
    239c:	80 e0       	ldi	r24, 0x00	; 0
    239e:	90 e0       	ldi	r25, 0x00	; 0
    23a0:	a0 e8       	ldi	r26, 0x80	; 128
    23a2:	bf e3       	ldi	r27, 0x3F	; 63
    23a4:	8d a7       	std	Y+45, r24	; 0x2d
    23a6:	9e a7       	std	Y+46, r25	; 0x2e
    23a8:	af a7       	std	Y+47, r26	; 0x2f
    23aa:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    23ac:	6d a5       	ldd	r22, Y+45	; 0x2d
    23ae:	7e a5       	ldd	r23, Y+46	; 0x2e
    23b0:	8f a5       	ldd	r24, Y+47	; 0x2f
    23b2:	98 a9       	ldd	r25, Y+48	; 0x30
    23b4:	2b ea       	ldi	r18, 0xAB	; 171
    23b6:	3a ea       	ldi	r19, 0xAA	; 170
    23b8:	4a e2       	ldi	r20, 0x2A	; 42
    23ba:	50 e4       	ldi	r21, 0x40	; 64
    23bc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23c0:	dc 01       	movw	r26, r24
    23c2:	cb 01       	movw	r24, r22
    23c4:	89 a7       	std	Y+41, r24	; 0x29
    23c6:	9a a7       	std	Y+42, r25	; 0x2a
    23c8:	ab a7       	std	Y+43, r26	; 0x2b
    23ca:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    23cc:	69 a5       	ldd	r22, Y+41	; 0x29
    23ce:	7a a5       	ldd	r23, Y+42	; 0x2a
    23d0:	8b a5       	ldd	r24, Y+43	; 0x2b
    23d2:	9c a5       	ldd	r25, Y+44	; 0x2c
    23d4:	20 e0       	ldi	r18, 0x00	; 0
    23d6:	30 e0       	ldi	r19, 0x00	; 0
    23d8:	40 e8       	ldi	r20, 0x80	; 128
    23da:	5f e3       	ldi	r21, 0x3F	; 63
    23dc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    23e0:	88 23       	and	r24, r24
    23e2:	1c f4       	brge	.+6      	; 0x23ea <LCD_VoidSendCommand+0x8a>
		__ticks = 1;
    23e4:	81 e0       	ldi	r24, 0x01	; 1
    23e6:	88 a7       	std	Y+40, r24	; 0x28
    23e8:	91 c0       	rjmp	.+290    	; 0x250c <LCD_VoidSendCommand+0x1ac>
	else if (__tmp > 255)
    23ea:	69 a5       	ldd	r22, Y+41	; 0x29
    23ec:	7a a5       	ldd	r23, Y+42	; 0x2a
    23ee:	8b a5       	ldd	r24, Y+43	; 0x2b
    23f0:	9c a5       	ldd	r25, Y+44	; 0x2c
    23f2:	20 e0       	ldi	r18, 0x00	; 0
    23f4:	30 e0       	ldi	r19, 0x00	; 0
    23f6:	4f e7       	ldi	r20, 0x7F	; 127
    23f8:	53 e4       	ldi	r21, 0x43	; 67
    23fa:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    23fe:	18 16       	cp	r1, r24
    2400:	0c f0       	brlt	.+2      	; 0x2404 <LCD_VoidSendCommand+0xa4>
    2402:	7b c0       	rjmp	.+246    	; 0x24fa <LCD_VoidSendCommand+0x19a>
	{
		_delay_ms(__us / 1000.0);
    2404:	6d a5       	ldd	r22, Y+45	; 0x2d
    2406:	7e a5       	ldd	r23, Y+46	; 0x2e
    2408:	8f a5       	ldd	r24, Y+47	; 0x2f
    240a:	98 a9       	ldd	r25, Y+48	; 0x30
    240c:	20 e0       	ldi	r18, 0x00	; 0
    240e:	30 e0       	ldi	r19, 0x00	; 0
    2410:	4a e7       	ldi	r20, 0x7A	; 122
    2412:	54 e4       	ldi	r21, 0x44	; 68
    2414:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2418:	dc 01       	movw	r26, r24
    241a:	cb 01       	movw	r24, r22
    241c:	8c a3       	std	Y+36, r24	; 0x24
    241e:	9d a3       	std	Y+37, r25	; 0x25
    2420:	ae a3       	std	Y+38, r26	; 0x26
    2422:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2424:	6c a1       	ldd	r22, Y+36	; 0x24
    2426:	7d a1       	ldd	r23, Y+37	; 0x25
    2428:	8e a1       	ldd	r24, Y+38	; 0x26
    242a:	9f a1       	ldd	r25, Y+39	; 0x27
    242c:	20 e0       	ldi	r18, 0x00	; 0
    242e:	30 e0       	ldi	r19, 0x00	; 0
    2430:	4a ef       	ldi	r20, 0xFA	; 250
    2432:	54 e4       	ldi	r21, 0x44	; 68
    2434:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2438:	dc 01       	movw	r26, r24
    243a:	cb 01       	movw	r24, r22
    243c:	88 a3       	std	Y+32, r24	; 0x20
    243e:	99 a3       	std	Y+33, r25	; 0x21
    2440:	aa a3       	std	Y+34, r26	; 0x22
    2442:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    2444:	68 a1       	ldd	r22, Y+32	; 0x20
    2446:	79 a1       	ldd	r23, Y+33	; 0x21
    2448:	8a a1       	ldd	r24, Y+34	; 0x22
    244a:	9b a1       	ldd	r25, Y+35	; 0x23
    244c:	20 e0       	ldi	r18, 0x00	; 0
    244e:	30 e0       	ldi	r19, 0x00	; 0
    2450:	40 e8       	ldi	r20, 0x80	; 128
    2452:	5f e3       	ldi	r21, 0x3F	; 63
    2454:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2458:	88 23       	and	r24, r24
    245a:	2c f4       	brge	.+10     	; 0x2466 <LCD_VoidSendCommand+0x106>
		__ticks = 1;
    245c:	81 e0       	ldi	r24, 0x01	; 1
    245e:	90 e0       	ldi	r25, 0x00	; 0
    2460:	9f 8f       	std	Y+31, r25	; 0x1f
    2462:	8e 8f       	std	Y+30, r24	; 0x1e
    2464:	3f c0       	rjmp	.+126    	; 0x24e4 <LCD_VoidSendCommand+0x184>
	else if (__tmp > 65535)
    2466:	68 a1       	ldd	r22, Y+32	; 0x20
    2468:	79 a1       	ldd	r23, Y+33	; 0x21
    246a:	8a a1       	ldd	r24, Y+34	; 0x22
    246c:	9b a1       	ldd	r25, Y+35	; 0x23
    246e:	20 e0       	ldi	r18, 0x00	; 0
    2470:	3f ef       	ldi	r19, 0xFF	; 255
    2472:	4f e7       	ldi	r20, 0x7F	; 127
    2474:	57 e4       	ldi	r21, 0x47	; 71
    2476:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    247a:	18 16       	cp	r1, r24
    247c:	4c f5       	brge	.+82     	; 0x24d0 <LCD_VoidSendCommand+0x170>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    247e:	6c a1       	ldd	r22, Y+36	; 0x24
    2480:	7d a1       	ldd	r23, Y+37	; 0x25
    2482:	8e a1       	ldd	r24, Y+38	; 0x26
    2484:	9f a1       	ldd	r25, Y+39	; 0x27
    2486:	20 e0       	ldi	r18, 0x00	; 0
    2488:	30 e0       	ldi	r19, 0x00	; 0
    248a:	40 e2       	ldi	r20, 0x20	; 32
    248c:	51 e4       	ldi	r21, 0x41	; 65
    248e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2492:	dc 01       	movw	r26, r24
    2494:	cb 01       	movw	r24, r22
    2496:	bc 01       	movw	r22, r24
    2498:	cd 01       	movw	r24, r26
    249a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    249e:	dc 01       	movw	r26, r24
    24a0:	cb 01       	movw	r24, r22
    24a2:	9f 8f       	std	Y+31, r25	; 0x1f
    24a4:	8e 8f       	std	Y+30, r24	; 0x1e
    24a6:	0f c0       	rjmp	.+30     	; 0x24c6 <LCD_VoidSendCommand+0x166>
    24a8:	88 ec       	ldi	r24, 0xC8	; 200
    24aa:	90 e0       	ldi	r25, 0x00	; 0
    24ac:	9d 8f       	std	Y+29, r25	; 0x1d
    24ae:	8c 8f       	std	Y+28, r24	; 0x1c
    24b0:	8c 8d       	ldd	r24, Y+28	; 0x1c
    24b2:	9d 8d       	ldd	r25, Y+29	; 0x1d
    24b4:	01 97       	sbiw	r24, 0x01	; 1
    24b6:	f1 f7       	brne	.-4      	; 0x24b4 <LCD_VoidSendCommand+0x154>
    24b8:	9d 8f       	std	Y+29, r25	; 0x1d
    24ba:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24bc:	8e 8d       	ldd	r24, Y+30	; 0x1e
    24be:	9f 8d       	ldd	r25, Y+31	; 0x1f
    24c0:	01 97       	sbiw	r24, 0x01	; 1
    24c2:	9f 8f       	std	Y+31, r25	; 0x1f
    24c4:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24c6:	8e 8d       	ldd	r24, Y+30	; 0x1e
    24c8:	9f 8d       	ldd	r25, Y+31	; 0x1f
    24ca:	00 97       	sbiw	r24, 0x00	; 0
    24cc:	69 f7       	brne	.-38     	; 0x24a8 <LCD_VoidSendCommand+0x148>
    24ce:	24 c0       	rjmp	.+72     	; 0x2518 <LCD_VoidSendCommand+0x1b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24d0:	68 a1       	ldd	r22, Y+32	; 0x20
    24d2:	79 a1       	ldd	r23, Y+33	; 0x21
    24d4:	8a a1       	ldd	r24, Y+34	; 0x22
    24d6:	9b a1       	ldd	r25, Y+35	; 0x23
    24d8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24dc:	dc 01       	movw	r26, r24
    24de:	cb 01       	movw	r24, r22
    24e0:	9f 8f       	std	Y+31, r25	; 0x1f
    24e2:	8e 8f       	std	Y+30, r24	; 0x1e
    24e4:	8e 8d       	ldd	r24, Y+30	; 0x1e
    24e6:	9f 8d       	ldd	r25, Y+31	; 0x1f
    24e8:	9b 8f       	std	Y+27, r25	; 0x1b
    24ea:	8a 8f       	std	Y+26, r24	; 0x1a
    24ec:	8a 8d       	ldd	r24, Y+26	; 0x1a
    24ee:	9b 8d       	ldd	r25, Y+27	; 0x1b
    24f0:	01 97       	sbiw	r24, 0x01	; 1
    24f2:	f1 f7       	brne	.-4      	; 0x24f0 <LCD_VoidSendCommand+0x190>
    24f4:	9b 8f       	std	Y+27, r25	; 0x1b
    24f6:	8a 8f       	std	Y+26, r24	; 0x1a
    24f8:	0f c0       	rjmp	.+30     	; 0x2518 <LCD_VoidSendCommand+0x1b8>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    24fa:	69 a5       	ldd	r22, Y+41	; 0x29
    24fc:	7a a5       	ldd	r23, Y+42	; 0x2a
    24fe:	8b a5       	ldd	r24, Y+43	; 0x2b
    2500:	9c a5       	ldd	r25, Y+44	; 0x2c
    2502:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2506:	dc 01       	movw	r26, r24
    2508:	cb 01       	movw	r24, r22
    250a:	88 a7       	std	Y+40, r24	; 0x28
    250c:	88 a5       	ldd	r24, Y+40	; 0x28
    250e:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2510:	89 8d       	ldd	r24, Y+25	; 0x19
    2512:	8a 95       	dec	r24
    2514:	f1 f7       	brne	.-4      	; 0x2512 <LCD_VoidSendCommand+0x1b2>
    2516:	89 8f       	std	Y+25, r24	; 0x19
	/* Set the Tw the time width of the enable min_Value is 230ns >> Setting 1microS */
	/*NOTE : >>>>>> Delay can't be float value  */
	_delay_us(1);
	/* Clear Enable */
	DIO_U8SetPinValue(LCD_CONTROL_PORT,CONTROL_E,LOW);
    2518:	83 e0       	ldi	r24, 0x03	; 3
    251a:	66 e0       	ldi	r22, 0x06	; 6
    251c:	40 e0       	ldi	r20, 0x00	; 0
    251e:	0e 94 15 08 	call	0x102a	; 0x102a <DIO_U8SetPinValue>
	/* Send Command the second high 4bits by shifting the first 4 bits to left*/
	DIO_U8SetPortValue(LCD_DATA_PORT,Copy_U8Command<<4);
    2522:	89 a9       	ldd	r24, Y+49	; 0x31
    2524:	98 2f       	mov	r25, r24
    2526:	92 95       	swap	r25
    2528:	90 7f       	andi	r25, 0xF0	; 240
    252a:	80 e0       	ldi	r24, 0x00	; 0
    252c:	69 2f       	mov	r22, r25
    252e:	0e 94 18 0b 	call	0x1630	; 0x1630 <DIO_U8SetPortValue>
	/* SET Enable */
	DIO_U8SetPinValue(LCD_CONTROL_PORT,CONTROL_E,HIGH);
    2532:	83 e0       	ldi	r24, 0x03	; 3
    2534:	66 e0       	ldi	r22, 0x06	; 6
    2536:	41 e0       	ldi	r20, 0x01	; 1
    2538:	0e 94 15 08 	call	0x102a	; 0x102a <DIO_U8SetPinValue>
    253c:	80 e0       	ldi	r24, 0x00	; 0
    253e:	90 e0       	ldi	r25, 0x00	; 0
    2540:	a0 e8       	ldi	r26, 0x80	; 128
    2542:	bf e3       	ldi	r27, 0x3F	; 63
    2544:	8d 8b       	std	Y+21, r24	; 0x15
    2546:	9e 8b       	std	Y+22, r25	; 0x16
    2548:	af 8b       	std	Y+23, r26	; 0x17
    254a:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    254c:	6d 89       	ldd	r22, Y+21	; 0x15
    254e:	7e 89       	ldd	r23, Y+22	; 0x16
    2550:	8f 89       	ldd	r24, Y+23	; 0x17
    2552:	98 8d       	ldd	r25, Y+24	; 0x18
    2554:	2b ea       	ldi	r18, 0xAB	; 171
    2556:	3a ea       	ldi	r19, 0xAA	; 170
    2558:	4a e2       	ldi	r20, 0x2A	; 42
    255a:	50 e4       	ldi	r21, 0x40	; 64
    255c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2560:	dc 01       	movw	r26, r24
    2562:	cb 01       	movw	r24, r22
    2564:	89 8b       	std	Y+17, r24	; 0x11
    2566:	9a 8b       	std	Y+18, r25	; 0x12
    2568:	ab 8b       	std	Y+19, r26	; 0x13
    256a:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    256c:	69 89       	ldd	r22, Y+17	; 0x11
    256e:	7a 89       	ldd	r23, Y+18	; 0x12
    2570:	8b 89       	ldd	r24, Y+19	; 0x13
    2572:	9c 89       	ldd	r25, Y+20	; 0x14
    2574:	20 e0       	ldi	r18, 0x00	; 0
    2576:	30 e0       	ldi	r19, 0x00	; 0
    2578:	40 e8       	ldi	r20, 0x80	; 128
    257a:	5f e3       	ldi	r21, 0x3F	; 63
    257c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2580:	88 23       	and	r24, r24
    2582:	1c f4       	brge	.+6      	; 0x258a <LCD_VoidSendCommand+0x22a>
		__ticks = 1;
    2584:	81 e0       	ldi	r24, 0x01	; 1
    2586:	88 8b       	std	Y+16, r24	; 0x10
    2588:	91 c0       	rjmp	.+290    	; 0x26ac <LCD_VoidSendCommand+0x34c>
	else if (__tmp > 255)
    258a:	69 89       	ldd	r22, Y+17	; 0x11
    258c:	7a 89       	ldd	r23, Y+18	; 0x12
    258e:	8b 89       	ldd	r24, Y+19	; 0x13
    2590:	9c 89       	ldd	r25, Y+20	; 0x14
    2592:	20 e0       	ldi	r18, 0x00	; 0
    2594:	30 e0       	ldi	r19, 0x00	; 0
    2596:	4f e7       	ldi	r20, 0x7F	; 127
    2598:	53 e4       	ldi	r21, 0x43	; 67
    259a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    259e:	18 16       	cp	r1, r24
    25a0:	0c f0       	brlt	.+2      	; 0x25a4 <LCD_VoidSendCommand+0x244>
    25a2:	7b c0       	rjmp	.+246    	; 0x269a <LCD_VoidSendCommand+0x33a>
	{
		_delay_ms(__us / 1000.0);
    25a4:	6d 89       	ldd	r22, Y+21	; 0x15
    25a6:	7e 89       	ldd	r23, Y+22	; 0x16
    25a8:	8f 89       	ldd	r24, Y+23	; 0x17
    25aa:	98 8d       	ldd	r25, Y+24	; 0x18
    25ac:	20 e0       	ldi	r18, 0x00	; 0
    25ae:	30 e0       	ldi	r19, 0x00	; 0
    25b0:	4a e7       	ldi	r20, 0x7A	; 122
    25b2:	54 e4       	ldi	r21, 0x44	; 68
    25b4:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    25b8:	dc 01       	movw	r26, r24
    25ba:	cb 01       	movw	r24, r22
    25bc:	8c 87       	std	Y+12, r24	; 0x0c
    25be:	9d 87       	std	Y+13, r25	; 0x0d
    25c0:	ae 87       	std	Y+14, r26	; 0x0e
    25c2:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    25c4:	6c 85       	ldd	r22, Y+12	; 0x0c
    25c6:	7d 85       	ldd	r23, Y+13	; 0x0d
    25c8:	8e 85       	ldd	r24, Y+14	; 0x0e
    25ca:	9f 85       	ldd	r25, Y+15	; 0x0f
    25cc:	20 e0       	ldi	r18, 0x00	; 0
    25ce:	30 e0       	ldi	r19, 0x00	; 0
    25d0:	4a ef       	ldi	r20, 0xFA	; 250
    25d2:	54 e4       	ldi	r21, 0x44	; 68
    25d4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25d8:	dc 01       	movw	r26, r24
    25da:	cb 01       	movw	r24, r22
    25dc:	88 87       	std	Y+8, r24	; 0x08
    25de:	99 87       	std	Y+9, r25	; 0x09
    25e0:	aa 87       	std	Y+10, r26	; 0x0a
    25e2:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    25e4:	68 85       	ldd	r22, Y+8	; 0x08
    25e6:	79 85       	ldd	r23, Y+9	; 0x09
    25e8:	8a 85       	ldd	r24, Y+10	; 0x0a
    25ea:	9b 85       	ldd	r25, Y+11	; 0x0b
    25ec:	20 e0       	ldi	r18, 0x00	; 0
    25ee:	30 e0       	ldi	r19, 0x00	; 0
    25f0:	40 e8       	ldi	r20, 0x80	; 128
    25f2:	5f e3       	ldi	r21, 0x3F	; 63
    25f4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    25f8:	88 23       	and	r24, r24
    25fa:	2c f4       	brge	.+10     	; 0x2606 <LCD_VoidSendCommand+0x2a6>
		__ticks = 1;
    25fc:	81 e0       	ldi	r24, 0x01	; 1
    25fe:	90 e0       	ldi	r25, 0x00	; 0
    2600:	9f 83       	std	Y+7, r25	; 0x07
    2602:	8e 83       	std	Y+6, r24	; 0x06
    2604:	3f c0       	rjmp	.+126    	; 0x2684 <LCD_VoidSendCommand+0x324>
	else if (__tmp > 65535)
    2606:	68 85       	ldd	r22, Y+8	; 0x08
    2608:	79 85       	ldd	r23, Y+9	; 0x09
    260a:	8a 85       	ldd	r24, Y+10	; 0x0a
    260c:	9b 85       	ldd	r25, Y+11	; 0x0b
    260e:	20 e0       	ldi	r18, 0x00	; 0
    2610:	3f ef       	ldi	r19, 0xFF	; 255
    2612:	4f e7       	ldi	r20, 0x7F	; 127
    2614:	57 e4       	ldi	r21, 0x47	; 71
    2616:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    261a:	18 16       	cp	r1, r24
    261c:	4c f5       	brge	.+82     	; 0x2670 <LCD_VoidSendCommand+0x310>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    261e:	6c 85       	ldd	r22, Y+12	; 0x0c
    2620:	7d 85       	ldd	r23, Y+13	; 0x0d
    2622:	8e 85       	ldd	r24, Y+14	; 0x0e
    2624:	9f 85       	ldd	r25, Y+15	; 0x0f
    2626:	20 e0       	ldi	r18, 0x00	; 0
    2628:	30 e0       	ldi	r19, 0x00	; 0
    262a:	40 e2       	ldi	r20, 0x20	; 32
    262c:	51 e4       	ldi	r21, 0x41	; 65
    262e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2632:	dc 01       	movw	r26, r24
    2634:	cb 01       	movw	r24, r22
    2636:	bc 01       	movw	r22, r24
    2638:	cd 01       	movw	r24, r26
    263a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    263e:	dc 01       	movw	r26, r24
    2640:	cb 01       	movw	r24, r22
    2642:	9f 83       	std	Y+7, r25	; 0x07
    2644:	8e 83       	std	Y+6, r24	; 0x06
    2646:	0f c0       	rjmp	.+30     	; 0x2666 <LCD_VoidSendCommand+0x306>
    2648:	88 ec       	ldi	r24, 0xC8	; 200
    264a:	90 e0       	ldi	r25, 0x00	; 0
    264c:	9d 83       	std	Y+5, r25	; 0x05
    264e:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2650:	8c 81       	ldd	r24, Y+4	; 0x04
    2652:	9d 81       	ldd	r25, Y+5	; 0x05
    2654:	01 97       	sbiw	r24, 0x01	; 1
    2656:	f1 f7       	brne	.-4      	; 0x2654 <LCD_VoidSendCommand+0x2f4>
    2658:	9d 83       	std	Y+5, r25	; 0x05
    265a:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    265c:	8e 81       	ldd	r24, Y+6	; 0x06
    265e:	9f 81       	ldd	r25, Y+7	; 0x07
    2660:	01 97       	sbiw	r24, 0x01	; 1
    2662:	9f 83       	std	Y+7, r25	; 0x07
    2664:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2666:	8e 81       	ldd	r24, Y+6	; 0x06
    2668:	9f 81       	ldd	r25, Y+7	; 0x07
    266a:	00 97       	sbiw	r24, 0x00	; 0
    266c:	69 f7       	brne	.-38     	; 0x2648 <LCD_VoidSendCommand+0x2e8>
    266e:	24 c0       	rjmp	.+72     	; 0x26b8 <LCD_VoidSendCommand+0x358>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2670:	68 85       	ldd	r22, Y+8	; 0x08
    2672:	79 85       	ldd	r23, Y+9	; 0x09
    2674:	8a 85       	ldd	r24, Y+10	; 0x0a
    2676:	9b 85       	ldd	r25, Y+11	; 0x0b
    2678:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    267c:	dc 01       	movw	r26, r24
    267e:	cb 01       	movw	r24, r22
    2680:	9f 83       	std	Y+7, r25	; 0x07
    2682:	8e 83       	std	Y+6, r24	; 0x06
    2684:	8e 81       	ldd	r24, Y+6	; 0x06
    2686:	9f 81       	ldd	r25, Y+7	; 0x07
    2688:	9b 83       	std	Y+3, r25	; 0x03
    268a:	8a 83       	std	Y+2, r24	; 0x02
    268c:	8a 81       	ldd	r24, Y+2	; 0x02
    268e:	9b 81       	ldd	r25, Y+3	; 0x03
    2690:	01 97       	sbiw	r24, 0x01	; 1
    2692:	f1 f7       	brne	.-4      	; 0x2690 <LCD_VoidSendCommand+0x330>
    2694:	9b 83       	std	Y+3, r25	; 0x03
    2696:	8a 83       	std	Y+2, r24	; 0x02
    2698:	0f c0       	rjmp	.+30     	; 0x26b8 <LCD_VoidSendCommand+0x358>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    269a:	69 89       	ldd	r22, Y+17	; 0x11
    269c:	7a 89       	ldd	r23, Y+18	; 0x12
    269e:	8b 89       	ldd	r24, Y+19	; 0x13
    26a0:	9c 89       	ldd	r25, Y+20	; 0x14
    26a2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26a6:	dc 01       	movw	r26, r24
    26a8:	cb 01       	movw	r24, r22
    26aa:	88 8b       	std	Y+16, r24	; 0x10
    26ac:	88 89       	ldd	r24, Y+16	; 0x10
    26ae:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    26b0:	89 81       	ldd	r24, Y+1	; 0x01
    26b2:	8a 95       	dec	r24
    26b4:	f1 f7       	brne	.-4      	; 0x26b2 <LCD_VoidSendCommand+0x352>
    26b6:	89 83       	std	Y+1, r24	; 0x01
	/* Set the Tw the time width of the enable min_Value is 230ns >> Setting 1microS */
	/*NOTE : >>>>>> Delay can't be float value  */
	_delay_us(1);
	/* Clear Enable */
	DIO_U8SetPinValue(LCD_CONTROL_PORT,CONTROL_E,LOW);
    26b8:	83 e0       	ldi	r24, 0x03	; 3
    26ba:	66 e0       	ldi	r22, 0x06	; 6
    26bc:	40 e0       	ldi	r20, 0x00	; 0
    26be:	0e 94 15 08 	call	0x102a	; 0x102a <DIO_U8SetPinValue>

#endif
}
    26c2:	e1 96       	adiw	r28, 0x31	; 49
    26c4:	0f b6       	in	r0, 0x3f	; 63
    26c6:	f8 94       	cli
    26c8:	de bf       	out	0x3e, r29	; 62
    26ca:	0f be       	out	0x3f, r0	; 63
    26cc:	cd bf       	out	0x3d, r28	; 61
    26ce:	cf 91       	pop	r28
    26d0:	df 91       	pop	r29
    26d2:	08 95       	ret

000026d4 <LCD_VoidSendData>:
void LCD_VoidSendData(u8 Copy_u8Char)
{
    26d4:	df 93       	push	r29
    26d6:	cf 93       	push	r28
    26d8:	cd b7       	in	r28, 0x3d	; 61
    26da:	de b7       	in	r29, 0x3e	; 62
    26dc:	e1 97       	sbiw	r28, 0x31	; 49
    26de:	0f b6       	in	r0, 0x3f	; 63
    26e0:	f8 94       	cli
    26e2:	de bf       	out	0x3e, r29	; 62
    26e4:	0f be       	out	0x3f, r0	; 63
    26e6:	cd bf       	out	0x3d, r28	; 61
    26e8:	89 ab       	std	Y+49, r24	; 0x31
	DIO_U8SetPinValue(LCD_CONTROL_PORT,CONTROL_E,LOW);

#elif LCD_PINS_MODE==LCD_4BIT_MODE

   /* SET the RS Pin*/
	DIO_U8SetPinValue(LCD_CONTROL_PORT,CONTROL_RS,HIGH);
    26ea:	83 e0       	ldi	r24, 0x03	; 3
    26ec:	64 e0       	ldi	r22, 0x04	; 4
    26ee:	41 e0       	ldi	r20, 0x01	; 1
    26f0:	0e 94 15 08 	call	0x102a	; 0x102a <DIO_U8SetPinValue>
	/* Clear the R/W PIN >>> Selects Write*/
	DIO_U8SetPinValue(LCD_CONTROL_PORT,CONTROL_RW,LOW);
    26f4:	83 e0       	ldi	r24, 0x03	; 3
    26f6:	65 e0       	ldi	r22, 0x05	; 5
    26f8:	40 e0       	ldi	r20, 0x00	; 0
    26fa:	0e 94 15 08 	call	0x102a	; 0x102a <DIO_U8SetPinValue>
	/* Send the highest 4 bit of the char */
	DIO_U8SetPortValue(LCD_DATA_PORT,Copy_u8Char);
    26fe:	80 e0       	ldi	r24, 0x00	; 0
    2700:	69 a9       	ldd	r22, Y+49	; 0x31
    2702:	0e 94 18 0b 	call	0x1630	; 0x1630 <DIO_U8SetPortValue>
	/* SET Enable */
	DIO_U8SetPinValue(LCD_CONTROL_PORT,CONTROL_E,HIGH);
    2706:	83 e0       	ldi	r24, 0x03	; 3
    2708:	66 e0       	ldi	r22, 0x06	; 6
    270a:	41 e0       	ldi	r20, 0x01	; 1
    270c:	0e 94 15 08 	call	0x102a	; 0x102a <DIO_U8SetPinValue>
    2710:	80 e0       	ldi	r24, 0x00	; 0
    2712:	90 e0       	ldi	r25, 0x00	; 0
    2714:	a0 e8       	ldi	r26, 0x80	; 128
    2716:	bf e3       	ldi	r27, 0x3F	; 63
    2718:	8d a7       	std	Y+45, r24	; 0x2d
    271a:	9e a7       	std	Y+46, r25	; 0x2e
    271c:	af a7       	std	Y+47, r26	; 0x2f
    271e:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2720:	6d a5       	ldd	r22, Y+45	; 0x2d
    2722:	7e a5       	ldd	r23, Y+46	; 0x2e
    2724:	8f a5       	ldd	r24, Y+47	; 0x2f
    2726:	98 a9       	ldd	r25, Y+48	; 0x30
    2728:	2b ea       	ldi	r18, 0xAB	; 171
    272a:	3a ea       	ldi	r19, 0xAA	; 170
    272c:	4a e2       	ldi	r20, 0x2A	; 42
    272e:	50 e4       	ldi	r21, 0x40	; 64
    2730:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2734:	dc 01       	movw	r26, r24
    2736:	cb 01       	movw	r24, r22
    2738:	89 a7       	std	Y+41, r24	; 0x29
    273a:	9a a7       	std	Y+42, r25	; 0x2a
    273c:	ab a7       	std	Y+43, r26	; 0x2b
    273e:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    2740:	69 a5       	ldd	r22, Y+41	; 0x29
    2742:	7a a5       	ldd	r23, Y+42	; 0x2a
    2744:	8b a5       	ldd	r24, Y+43	; 0x2b
    2746:	9c a5       	ldd	r25, Y+44	; 0x2c
    2748:	20 e0       	ldi	r18, 0x00	; 0
    274a:	30 e0       	ldi	r19, 0x00	; 0
    274c:	40 e8       	ldi	r20, 0x80	; 128
    274e:	5f e3       	ldi	r21, 0x3F	; 63
    2750:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2754:	88 23       	and	r24, r24
    2756:	1c f4       	brge	.+6      	; 0x275e <LCD_VoidSendData+0x8a>
		__ticks = 1;
    2758:	81 e0       	ldi	r24, 0x01	; 1
    275a:	88 a7       	std	Y+40, r24	; 0x28
    275c:	91 c0       	rjmp	.+290    	; 0x2880 <LCD_VoidSendData+0x1ac>
	else if (__tmp > 255)
    275e:	69 a5       	ldd	r22, Y+41	; 0x29
    2760:	7a a5       	ldd	r23, Y+42	; 0x2a
    2762:	8b a5       	ldd	r24, Y+43	; 0x2b
    2764:	9c a5       	ldd	r25, Y+44	; 0x2c
    2766:	20 e0       	ldi	r18, 0x00	; 0
    2768:	30 e0       	ldi	r19, 0x00	; 0
    276a:	4f e7       	ldi	r20, 0x7F	; 127
    276c:	53 e4       	ldi	r21, 0x43	; 67
    276e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2772:	18 16       	cp	r1, r24
    2774:	0c f0       	brlt	.+2      	; 0x2778 <LCD_VoidSendData+0xa4>
    2776:	7b c0       	rjmp	.+246    	; 0x286e <LCD_VoidSendData+0x19a>
	{
		_delay_ms(__us / 1000.0);
    2778:	6d a5       	ldd	r22, Y+45	; 0x2d
    277a:	7e a5       	ldd	r23, Y+46	; 0x2e
    277c:	8f a5       	ldd	r24, Y+47	; 0x2f
    277e:	98 a9       	ldd	r25, Y+48	; 0x30
    2780:	20 e0       	ldi	r18, 0x00	; 0
    2782:	30 e0       	ldi	r19, 0x00	; 0
    2784:	4a e7       	ldi	r20, 0x7A	; 122
    2786:	54 e4       	ldi	r21, 0x44	; 68
    2788:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    278c:	dc 01       	movw	r26, r24
    278e:	cb 01       	movw	r24, r22
    2790:	8c a3       	std	Y+36, r24	; 0x24
    2792:	9d a3       	std	Y+37, r25	; 0x25
    2794:	ae a3       	std	Y+38, r26	; 0x26
    2796:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2798:	6c a1       	ldd	r22, Y+36	; 0x24
    279a:	7d a1       	ldd	r23, Y+37	; 0x25
    279c:	8e a1       	ldd	r24, Y+38	; 0x26
    279e:	9f a1       	ldd	r25, Y+39	; 0x27
    27a0:	20 e0       	ldi	r18, 0x00	; 0
    27a2:	30 e0       	ldi	r19, 0x00	; 0
    27a4:	4a ef       	ldi	r20, 0xFA	; 250
    27a6:	54 e4       	ldi	r21, 0x44	; 68
    27a8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27ac:	dc 01       	movw	r26, r24
    27ae:	cb 01       	movw	r24, r22
    27b0:	88 a3       	std	Y+32, r24	; 0x20
    27b2:	99 a3       	std	Y+33, r25	; 0x21
    27b4:	aa a3       	std	Y+34, r26	; 0x22
    27b6:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    27b8:	68 a1       	ldd	r22, Y+32	; 0x20
    27ba:	79 a1       	ldd	r23, Y+33	; 0x21
    27bc:	8a a1       	ldd	r24, Y+34	; 0x22
    27be:	9b a1       	ldd	r25, Y+35	; 0x23
    27c0:	20 e0       	ldi	r18, 0x00	; 0
    27c2:	30 e0       	ldi	r19, 0x00	; 0
    27c4:	40 e8       	ldi	r20, 0x80	; 128
    27c6:	5f e3       	ldi	r21, 0x3F	; 63
    27c8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    27cc:	88 23       	and	r24, r24
    27ce:	2c f4       	brge	.+10     	; 0x27da <LCD_VoidSendData+0x106>
		__ticks = 1;
    27d0:	81 e0       	ldi	r24, 0x01	; 1
    27d2:	90 e0       	ldi	r25, 0x00	; 0
    27d4:	9f 8f       	std	Y+31, r25	; 0x1f
    27d6:	8e 8f       	std	Y+30, r24	; 0x1e
    27d8:	3f c0       	rjmp	.+126    	; 0x2858 <LCD_VoidSendData+0x184>
	else if (__tmp > 65535)
    27da:	68 a1       	ldd	r22, Y+32	; 0x20
    27dc:	79 a1       	ldd	r23, Y+33	; 0x21
    27de:	8a a1       	ldd	r24, Y+34	; 0x22
    27e0:	9b a1       	ldd	r25, Y+35	; 0x23
    27e2:	20 e0       	ldi	r18, 0x00	; 0
    27e4:	3f ef       	ldi	r19, 0xFF	; 255
    27e6:	4f e7       	ldi	r20, 0x7F	; 127
    27e8:	57 e4       	ldi	r21, 0x47	; 71
    27ea:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    27ee:	18 16       	cp	r1, r24
    27f0:	4c f5       	brge	.+82     	; 0x2844 <LCD_VoidSendData+0x170>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27f2:	6c a1       	ldd	r22, Y+36	; 0x24
    27f4:	7d a1       	ldd	r23, Y+37	; 0x25
    27f6:	8e a1       	ldd	r24, Y+38	; 0x26
    27f8:	9f a1       	ldd	r25, Y+39	; 0x27
    27fa:	20 e0       	ldi	r18, 0x00	; 0
    27fc:	30 e0       	ldi	r19, 0x00	; 0
    27fe:	40 e2       	ldi	r20, 0x20	; 32
    2800:	51 e4       	ldi	r21, 0x41	; 65
    2802:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2806:	dc 01       	movw	r26, r24
    2808:	cb 01       	movw	r24, r22
    280a:	bc 01       	movw	r22, r24
    280c:	cd 01       	movw	r24, r26
    280e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2812:	dc 01       	movw	r26, r24
    2814:	cb 01       	movw	r24, r22
    2816:	9f 8f       	std	Y+31, r25	; 0x1f
    2818:	8e 8f       	std	Y+30, r24	; 0x1e
    281a:	0f c0       	rjmp	.+30     	; 0x283a <LCD_VoidSendData+0x166>
    281c:	88 ec       	ldi	r24, 0xC8	; 200
    281e:	90 e0       	ldi	r25, 0x00	; 0
    2820:	9d 8f       	std	Y+29, r25	; 0x1d
    2822:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2824:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2826:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2828:	01 97       	sbiw	r24, 0x01	; 1
    282a:	f1 f7       	brne	.-4      	; 0x2828 <LCD_VoidSendData+0x154>
    282c:	9d 8f       	std	Y+29, r25	; 0x1d
    282e:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2830:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2832:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2834:	01 97       	sbiw	r24, 0x01	; 1
    2836:	9f 8f       	std	Y+31, r25	; 0x1f
    2838:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    283a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    283c:	9f 8d       	ldd	r25, Y+31	; 0x1f
    283e:	00 97       	sbiw	r24, 0x00	; 0
    2840:	69 f7       	brne	.-38     	; 0x281c <LCD_VoidSendData+0x148>
    2842:	24 c0       	rjmp	.+72     	; 0x288c <LCD_VoidSendData+0x1b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2844:	68 a1       	ldd	r22, Y+32	; 0x20
    2846:	79 a1       	ldd	r23, Y+33	; 0x21
    2848:	8a a1       	ldd	r24, Y+34	; 0x22
    284a:	9b a1       	ldd	r25, Y+35	; 0x23
    284c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2850:	dc 01       	movw	r26, r24
    2852:	cb 01       	movw	r24, r22
    2854:	9f 8f       	std	Y+31, r25	; 0x1f
    2856:	8e 8f       	std	Y+30, r24	; 0x1e
    2858:	8e 8d       	ldd	r24, Y+30	; 0x1e
    285a:	9f 8d       	ldd	r25, Y+31	; 0x1f
    285c:	9b 8f       	std	Y+27, r25	; 0x1b
    285e:	8a 8f       	std	Y+26, r24	; 0x1a
    2860:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2862:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2864:	01 97       	sbiw	r24, 0x01	; 1
    2866:	f1 f7       	brne	.-4      	; 0x2864 <LCD_VoidSendData+0x190>
    2868:	9b 8f       	std	Y+27, r25	; 0x1b
    286a:	8a 8f       	std	Y+26, r24	; 0x1a
    286c:	0f c0       	rjmp	.+30     	; 0x288c <LCD_VoidSendData+0x1b8>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    286e:	69 a5       	ldd	r22, Y+41	; 0x29
    2870:	7a a5       	ldd	r23, Y+42	; 0x2a
    2872:	8b a5       	ldd	r24, Y+43	; 0x2b
    2874:	9c a5       	ldd	r25, Y+44	; 0x2c
    2876:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    287a:	dc 01       	movw	r26, r24
    287c:	cb 01       	movw	r24, r22
    287e:	88 a7       	std	Y+40, r24	; 0x28
    2880:	88 a5       	ldd	r24, Y+40	; 0x28
    2882:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2884:	89 8d       	ldd	r24, Y+25	; 0x19
    2886:	8a 95       	dec	r24
    2888:	f1 f7       	brne	.-4      	; 0x2886 <LCD_VoidSendData+0x1b2>
    288a:	89 8f       	std	Y+25, r24	; 0x19
	/* Set the Tw the time width of the enable min_Value is 230ns >> Setting 1microS */
	/*NOTE : >>>>>> Delay can't be float value  */
	_delay_us(1);
	/* Clear Enable */
	DIO_U8SetPinValue(LCD_CONTROL_PORT,CONTROL_E,LOW);
    288c:	83 e0       	ldi	r24, 0x03	; 3
    288e:	66 e0       	ldi	r22, 0x06	; 6
    2890:	40 e0       	ldi	r20, 0x00	; 0
    2892:	0e 94 15 08 	call	0x102a	; 0x102a <DIO_U8SetPinValue>
	/* Send the lowest 4 bit of the char by shifting the highest to left */
	DIO_U8SetPortValue(LCD_DATA_PORT,Copy_u8Char<<4);
    2896:	89 a9       	ldd	r24, Y+49	; 0x31
    2898:	98 2f       	mov	r25, r24
    289a:	92 95       	swap	r25
    289c:	90 7f       	andi	r25, 0xF0	; 240
    289e:	80 e0       	ldi	r24, 0x00	; 0
    28a0:	69 2f       	mov	r22, r25
    28a2:	0e 94 18 0b 	call	0x1630	; 0x1630 <DIO_U8SetPortValue>
	/* SET Enable */
	DIO_U8SetPinValue(LCD_CONTROL_PORT,CONTROL_E,HIGH);
    28a6:	83 e0       	ldi	r24, 0x03	; 3
    28a8:	66 e0       	ldi	r22, 0x06	; 6
    28aa:	41 e0       	ldi	r20, 0x01	; 1
    28ac:	0e 94 15 08 	call	0x102a	; 0x102a <DIO_U8SetPinValue>
    28b0:	80 e0       	ldi	r24, 0x00	; 0
    28b2:	90 e0       	ldi	r25, 0x00	; 0
    28b4:	a0 e8       	ldi	r26, 0x80	; 128
    28b6:	bf e3       	ldi	r27, 0x3F	; 63
    28b8:	8d 8b       	std	Y+21, r24	; 0x15
    28ba:	9e 8b       	std	Y+22, r25	; 0x16
    28bc:	af 8b       	std	Y+23, r26	; 0x17
    28be:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    28c0:	6d 89       	ldd	r22, Y+21	; 0x15
    28c2:	7e 89       	ldd	r23, Y+22	; 0x16
    28c4:	8f 89       	ldd	r24, Y+23	; 0x17
    28c6:	98 8d       	ldd	r25, Y+24	; 0x18
    28c8:	2b ea       	ldi	r18, 0xAB	; 171
    28ca:	3a ea       	ldi	r19, 0xAA	; 170
    28cc:	4a e2       	ldi	r20, 0x2A	; 42
    28ce:	50 e4       	ldi	r21, 0x40	; 64
    28d0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28d4:	dc 01       	movw	r26, r24
    28d6:	cb 01       	movw	r24, r22
    28d8:	89 8b       	std	Y+17, r24	; 0x11
    28da:	9a 8b       	std	Y+18, r25	; 0x12
    28dc:	ab 8b       	std	Y+19, r26	; 0x13
    28de:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    28e0:	69 89       	ldd	r22, Y+17	; 0x11
    28e2:	7a 89       	ldd	r23, Y+18	; 0x12
    28e4:	8b 89       	ldd	r24, Y+19	; 0x13
    28e6:	9c 89       	ldd	r25, Y+20	; 0x14
    28e8:	20 e0       	ldi	r18, 0x00	; 0
    28ea:	30 e0       	ldi	r19, 0x00	; 0
    28ec:	40 e8       	ldi	r20, 0x80	; 128
    28ee:	5f e3       	ldi	r21, 0x3F	; 63
    28f0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    28f4:	88 23       	and	r24, r24
    28f6:	1c f4       	brge	.+6      	; 0x28fe <LCD_VoidSendData+0x22a>
		__ticks = 1;
    28f8:	81 e0       	ldi	r24, 0x01	; 1
    28fa:	88 8b       	std	Y+16, r24	; 0x10
    28fc:	91 c0       	rjmp	.+290    	; 0x2a20 <LCD_VoidSendData+0x34c>
	else if (__tmp > 255)
    28fe:	69 89       	ldd	r22, Y+17	; 0x11
    2900:	7a 89       	ldd	r23, Y+18	; 0x12
    2902:	8b 89       	ldd	r24, Y+19	; 0x13
    2904:	9c 89       	ldd	r25, Y+20	; 0x14
    2906:	20 e0       	ldi	r18, 0x00	; 0
    2908:	30 e0       	ldi	r19, 0x00	; 0
    290a:	4f e7       	ldi	r20, 0x7F	; 127
    290c:	53 e4       	ldi	r21, 0x43	; 67
    290e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2912:	18 16       	cp	r1, r24
    2914:	0c f0       	brlt	.+2      	; 0x2918 <LCD_VoidSendData+0x244>
    2916:	7b c0       	rjmp	.+246    	; 0x2a0e <LCD_VoidSendData+0x33a>
	{
		_delay_ms(__us / 1000.0);
    2918:	6d 89       	ldd	r22, Y+21	; 0x15
    291a:	7e 89       	ldd	r23, Y+22	; 0x16
    291c:	8f 89       	ldd	r24, Y+23	; 0x17
    291e:	98 8d       	ldd	r25, Y+24	; 0x18
    2920:	20 e0       	ldi	r18, 0x00	; 0
    2922:	30 e0       	ldi	r19, 0x00	; 0
    2924:	4a e7       	ldi	r20, 0x7A	; 122
    2926:	54 e4       	ldi	r21, 0x44	; 68
    2928:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    292c:	dc 01       	movw	r26, r24
    292e:	cb 01       	movw	r24, r22
    2930:	8c 87       	std	Y+12, r24	; 0x0c
    2932:	9d 87       	std	Y+13, r25	; 0x0d
    2934:	ae 87       	std	Y+14, r26	; 0x0e
    2936:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2938:	6c 85       	ldd	r22, Y+12	; 0x0c
    293a:	7d 85       	ldd	r23, Y+13	; 0x0d
    293c:	8e 85       	ldd	r24, Y+14	; 0x0e
    293e:	9f 85       	ldd	r25, Y+15	; 0x0f
    2940:	20 e0       	ldi	r18, 0x00	; 0
    2942:	30 e0       	ldi	r19, 0x00	; 0
    2944:	4a ef       	ldi	r20, 0xFA	; 250
    2946:	54 e4       	ldi	r21, 0x44	; 68
    2948:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    294c:	dc 01       	movw	r26, r24
    294e:	cb 01       	movw	r24, r22
    2950:	88 87       	std	Y+8, r24	; 0x08
    2952:	99 87       	std	Y+9, r25	; 0x09
    2954:	aa 87       	std	Y+10, r26	; 0x0a
    2956:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    2958:	68 85       	ldd	r22, Y+8	; 0x08
    295a:	79 85       	ldd	r23, Y+9	; 0x09
    295c:	8a 85       	ldd	r24, Y+10	; 0x0a
    295e:	9b 85       	ldd	r25, Y+11	; 0x0b
    2960:	20 e0       	ldi	r18, 0x00	; 0
    2962:	30 e0       	ldi	r19, 0x00	; 0
    2964:	40 e8       	ldi	r20, 0x80	; 128
    2966:	5f e3       	ldi	r21, 0x3F	; 63
    2968:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    296c:	88 23       	and	r24, r24
    296e:	2c f4       	brge	.+10     	; 0x297a <LCD_VoidSendData+0x2a6>
		__ticks = 1;
    2970:	81 e0       	ldi	r24, 0x01	; 1
    2972:	90 e0       	ldi	r25, 0x00	; 0
    2974:	9f 83       	std	Y+7, r25	; 0x07
    2976:	8e 83       	std	Y+6, r24	; 0x06
    2978:	3f c0       	rjmp	.+126    	; 0x29f8 <LCD_VoidSendData+0x324>
	else if (__tmp > 65535)
    297a:	68 85       	ldd	r22, Y+8	; 0x08
    297c:	79 85       	ldd	r23, Y+9	; 0x09
    297e:	8a 85       	ldd	r24, Y+10	; 0x0a
    2980:	9b 85       	ldd	r25, Y+11	; 0x0b
    2982:	20 e0       	ldi	r18, 0x00	; 0
    2984:	3f ef       	ldi	r19, 0xFF	; 255
    2986:	4f e7       	ldi	r20, 0x7F	; 127
    2988:	57 e4       	ldi	r21, 0x47	; 71
    298a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    298e:	18 16       	cp	r1, r24
    2990:	4c f5       	brge	.+82     	; 0x29e4 <LCD_VoidSendData+0x310>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2992:	6c 85       	ldd	r22, Y+12	; 0x0c
    2994:	7d 85       	ldd	r23, Y+13	; 0x0d
    2996:	8e 85       	ldd	r24, Y+14	; 0x0e
    2998:	9f 85       	ldd	r25, Y+15	; 0x0f
    299a:	20 e0       	ldi	r18, 0x00	; 0
    299c:	30 e0       	ldi	r19, 0x00	; 0
    299e:	40 e2       	ldi	r20, 0x20	; 32
    29a0:	51 e4       	ldi	r21, 0x41	; 65
    29a2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29a6:	dc 01       	movw	r26, r24
    29a8:	cb 01       	movw	r24, r22
    29aa:	bc 01       	movw	r22, r24
    29ac:	cd 01       	movw	r24, r26
    29ae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29b2:	dc 01       	movw	r26, r24
    29b4:	cb 01       	movw	r24, r22
    29b6:	9f 83       	std	Y+7, r25	; 0x07
    29b8:	8e 83       	std	Y+6, r24	; 0x06
    29ba:	0f c0       	rjmp	.+30     	; 0x29da <LCD_VoidSendData+0x306>
    29bc:	88 ec       	ldi	r24, 0xC8	; 200
    29be:	90 e0       	ldi	r25, 0x00	; 0
    29c0:	9d 83       	std	Y+5, r25	; 0x05
    29c2:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    29c4:	8c 81       	ldd	r24, Y+4	; 0x04
    29c6:	9d 81       	ldd	r25, Y+5	; 0x05
    29c8:	01 97       	sbiw	r24, 0x01	; 1
    29ca:	f1 f7       	brne	.-4      	; 0x29c8 <LCD_VoidSendData+0x2f4>
    29cc:	9d 83       	std	Y+5, r25	; 0x05
    29ce:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29d0:	8e 81       	ldd	r24, Y+6	; 0x06
    29d2:	9f 81       	ldd	r25, Y+7	; 0x07
    29d4:	01 97       	sbiw	r24, 0x01	; 1
    29d6:	9f 83       	std	Y+7, r25	; 0x07
    29d8:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    29da:	8e 81       	ldd	r24, Y+6	; 0x06
    29dc:	9f 81       	ldd	r25, Y+7	; 0x07
    29de:	00 97       	sbiw	r24, 0x00	; 0
    29e0:	69 f7       	brne	.-38     	; 0x29bc <LCD_VoidSendData+0x2e8>
    29e2:	24 c0       	rjmp	.+72     	; 0x2a2c <LCD_VoidSendData+0x358>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    29e4:	68 85       	ldd	r22, Y+8	; 0x08
    29e6:	79 85       	ldd	r23, Y+9	; 0x09
    29e8:	8a 85       	ldd	r24, Y+10	; 0x0a
    29ea:	9b 85       	ldd	r25, Y+11	; 0x0b
    29ec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29f0:	dc 01       	movw	r26, r24
    29f2:	cb 01       	movw	r24, r22
    29f4:	9f 83       	std	Y+7, r25	; 0x07
    29f6:	8e 83       	std	Y+6, r24	; 0x06
    29f8:	8e 81       	ldd	r24, Y+6	; 0x06
    29fa:	9f 81       	ldd	r25, Y+7	; 0x07
    29fc:	9b 83       	std	Y+3, r25	; 0x03
    29fe:	8a 83       	std	Y+2, r24	; 0x02
    2a00:	8a 81       	ldd	r24, Y+2	; 0x02
    2a02:	9b 81       	ldd	r25, Y+3	; 0x03
    2a04:	01 97       	sbiw	r24, 0x01	; 1
    2a06:	f1 f7       	brne	.-4      	; 0x2a04 <LCD_VoidSendData+0x330>
    2a08:	9b 83       	std	Y+3, r25	; 0x03
    2a0a:	8a 83       	std	Y+2, r24	; 0x02
    2a0c:	0f c0       	rjmp	.+30     	; 0x2a2c <LCD_VoidSendData+0x358>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2a0e:	69 89       	ldd	r22, Y+17	; 0x11
    2a10:	7a 89       	ldd	r23, Y+18	; 0x12
    2a12:	8b 89       	ldd	r24, Y+19	; 0x13
    2a14:	9c 89       	ldd	r25, Y+20	; 0x14
    2a16:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a1a:	dc 01       	movw	r26, r24
    2a1c:	cb 01       	movw	r24, r22
    2a1e:	88 8b       	std	Y+16, r24	; 0x10
    2a20:	88 89       	ldd	r24, Y+16	; 0x10
    2a22:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2a24:	89 81       	ldd	r24, Y+1	; 0x01
    2a26:	8a 95       	dec	r24
    2a28:	f1 f7       	brne	.-4      	; 0x2a26 <LCD_VoidSendData+0x352>
    2a2a:	89 83       	std	Y+1, r24	; 0x01
	/* Set the Tw the time width of the enable min_Value is 230ns >> Setting 1microS */
	/*NOTE : >>>>>> Delay can't be float value  */
	_delay_us(1);
	/* Clear Enable */
	DIO_U8SetPinValue(LCD_CONTROL_PORT,CONTROL_E,LOW);
    2a2c:	83 e0       	ldi	r24, 0x03	; 3
    2a2e:	66 e0       	ldi	r22, 0x06	; 6
    2a30:	40 e0       	ldi	r20, 0x00	; 0
    2a32:	0e 94 15 08 	call	0x102a	; 0x102a <DIO_U8SetPinValue>
#endif
}
    2a36:	e1 96       	adiw	r28, 0x31	; 49
    2a38:	0f b6       	in	r0, 0x3f	; 63
    2a3a:	f8 94       	cli
    2a3c:	de bf       	out	0x3e, r29	; 62
    2a3e:	0f be       	out	0x3f, r0	; 63
    2a40:	cd bf       	out	0x3d, r28	; 61
    2a42:	cf 91       	pop	r28
    2a44:	df 91       	pop	r29
    2a46:	08 95       	ret

00002a48 <LCD_VoidGoToRowCol>:


void LCD_VoidGoToRowCol(u8 Copy_U8Row ,u8 Copy_U8Col)
{
    2a48:	df 93       	push	r29
    2a4a:	cf 93       	push	r28
    2a4c:	00 d0       	rcall	.+0      	; 0x2a4e <LCD_VoidGoToRowCol+0x6>
    2a4e:	00 d0       	rcall	.+0      	; 0x2a50 <LCD_VoidGoToRowCol+0x8>
    2a50:	cd b7       	in	r28, 0x3d	; 61
    2a52:	de b7       	in	r29, 0x3e	; 62
    2a54:	89 83       	std	Y+1, r24	; 0x01
    2a56:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_U8Row)
    2a58:	89 81       	ldd	r24, Y+1	; 0x01
    2a5a:	28 2f       	mov	r18, r24
    2a5c:	30 e0       	ldi	r19, 0x00	; 0
    2a5e:	3c 83       	std	Y+4, r19	; 0x04
    2a60:	2b 83       	std	Y+3, r18	; 0x03
    2a62:	8b 81       	ldd	r24, Y+3	; 0x03
    2a64:	9c 81       	ldd	r25, Y+4	; 0x04
    2a66:	00 97       	sbiw	r24, 0x00	; 0
    2a68:	31 f0       	breq	.+12     	; 0x2a76 <LCD_VoidGoToRowCol+0x2e>
    2a6a:	2b 81       	ldd	r18, Y+3	; 0x03
    2a6c:	3c 81       	ldd	r19, Y+4	; 0x04
    2a6e:	21 30       	cpi	r18, 0x01	; 1
    2a70:	31 05       	cpc	r19, r1
    2a72:	31 f0       	breq	.+12     	; 0x2a80 <LCD_VoidGoToRowCol+0x38>
    2a74:	09 c0       	rjmp	.+18     	; 0x2a88 <LCD_VoidGoToRowCol+0x40>
	{
		case 0:LCD_VoidSendCommand(0x80+Copy_U8Col);break;
    2a76:	8a 81       	ldd	r24, Y+2	; 0x02
    2a78:	80 58       	subi	r24, 0x80	; 128
    2a7a:	0e 94 b0 11 	call	0x2360	; 0x2360 <LCD_VoidSendCommand>
    2a7e:	04 c0       	rjmp	.+8      	; 0x2a88 <LCD_VoidGoToRowCol+0x40>
		case 1:LCD_VoidSendCommand(0xc0+Copy_U8Col);break;
    2a80:	8a 81       	ldd	r24, Y+2	; 0x02
    2a82:	80 54       	subi	r24, 0x40	; 64
    2a84:	0e 94 b0 11 	call	0x2360	; 0x2360 <LCD_VoidSendCommand>
	}
}
    2a88:	0f 90       	pop	r0
    2a8a:	0f 90       	pop	r0
    2a8c:	0f 90       	pop	r0
    2a8e:	0f 90       	pop	r0
    2a90:	cf 91       	pop	r28
    2a92:	df 91       	pop	r29
    2a94:	08 95       	ret

00002a96 <LCD_VoidSendNumber>:


void LCD_VoidSendNumber(s32 Copy_s32Number)
{
    2a96:	0f 93       	push	r16
    2a98:	1f 93       	push	r17
    2a9a:	df 93       	push	r29
    2a9c:	cf 93       	push	r28
    2a9e:	cd b7       	in	r28, 0x3d	; 61
    2aa0:	de b7       	in	r29, 0x3e	; 62
    2aa2:	60 97       	sbiw	r28, 0x10	; 16
    2aa4:	0f b6       	in	r0, 0x3f	; 63
    2aa6:	f8 94       	cli
    2aa8:	de bf       	out	0x3e, r29	; 62
    2aaa:	0f be       	out	0x3f, r0	; 63
    2aac:	cd bf       	out	0x3d, r28	; 61
    2aae:	6d 87       	std	Y+13, r22	; 0x0d
    2ab0:	7e 87       	std	Y+14, r23	; 0x0e
    2ab2:	8f 87       	std	Y+15, r24	; 0x0f
    2ab4:	98 8b       	std	Y+16, r25	; 0x10
    u8 Local_u8Array[11]; // Increased array size to accommodate negative sign
    s8 Local_counter = 0;
    2ab6:	19 82       	std	Y+1, r1	; 0x01

    if (Copy_s32Number < 0)
    2ab8:	8d 85       	ldd	r24, Y+13	; 0x0d
    2aba:	9e 85       	ldd	r25, Y+14	; 0x0e
    2abc:	af 85       	ldd	r26, Y+15	; 0x0f
    2abe:	b8 89       	ldd	r27, Y+16	; 0x10
    2ac0:	bb 23       	and	r27, r27
    2ac2:	9c f4       	brge	.+38     	; 0x2aea <LCD_VoidSendNumber+0x54>
    {
    	LCD_VoidSendData('-'); // Display negative sign
    2ac4:	8d e2       	ldi	r24, 0x2D	; 45
    2ac6:	0e 94 6a 13 	call	0x26d4	; 0x26d4 <LCD_VoidSendData>
    	Copy_s32Number = -Copy_s32Number; // Convert negative number to positive for processing
    2aca:	8d 85       	ldd	r24, Y+13	; 0x0d
    2acc:	9e 85       	ldd	r25, Y+14	; 0x0e
    2ace:	af 85       	ldd	r26, Y+15	; 0x0f
    2ad0:	b8 89       	ldd	r27, Y+16	; 0x10
    2ad2:	b0 95       	com	r27
    2ad4:	a0 95       	com	r26
    2ad6:	90 95       	com	r25
    2ad8:	81 95       	neg	r24
    2ada:	9f 4f       	sbci	r25, 0xFF	; 255
    2adc:	af 4f       	sbci	r26, 0xFF	; 255
    2ade:	bf 4f       	sbci	r27, 0xFF	; 255
    2ae0:	8d 87       	std	Y+13, r24	; 0x0d
    2ae2:	9e 87       	std	Y+14, r25	; 0x0e
    2ae4:	af 87       	std	Y+15, r26	; 0x0f
    2ae6:	b8 8b       	std	Y+16, r27	; 0x10
    2ae8:	3c c0       	rjmp	.+120    	; 0x2b62 <LCD_VoidSendNumber+0xcc>
    }
    else if (Copy_s32Number == 0)
    2aea:	8d 85       	ldd	r24, Y+13	; 0x0d
    2aec:	9e 85       	ldd	r25, Y+14	; 0x0e
    2aee:	af 85       	ldd	r26, Y+15	; 0x0f
    2af0:	b8 89       	ldd	r27, Y+16	; 0x10
    2af2:	00 97       	sbiw	r24, 0x00	; 0
    2af4:	a1 05       	cpc	r26, r1
    2af6:	b1 05       	cpc	r27, r1
    2af8:	a1 f5       	brne	.+104    	; 0x2b62 <LCD_VoidSendNumber+0xcc>
    {
    	LCD_VoidSendData('0');
    2afa:	80 e3       	ldi	r24, 0x30	; 48
    2afc:	0e 94 6a 13 	call	0x26d4	; 0x26d4 <LCD_VoidSendData>
    2b00:	30 c0       	rjmp	.+96     	; 0x2b62 <LCD_VoidSendNumber+0xcc>
    }

    while (Copy_s32Number > 0)
    {
        Local_u8Array[Local_counter++] = (Copy_s32Number % 10) + 48;
    2b02:	89 81       	ldd	r24, Y+1	; 0x01
    2b04:	08 2f       	mov	r16, r24
    2b06:	11 27       	eor	r17, r17
    2b08:	07 fd       	sbrc	r16, 7
    2b0a:	10 95       	com	r17
    2b0c:	8d 85       	ldd	r24, Y+13	; 0x0d
    2b0e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2b10:	af 85       	ldd	r26, Y+15	; 0x0f
    2b12:	b8 89       	ldd	r27, Y+16	; 0x10
    2b14:	2a e0       	ldi	r18, 0x0A	; 10
    2b16:	30 e0       	ldi	r19, 0x00	; 0
    2b18:	40 e0       	ldi	r20, 0x00	; 0
    2b1a:	50 e0       	ldi	r21, 0x00	; 0
    2b1c:	bc 01       	movw	r22, r24
    2b1e:	cd 01       	movw	r24, r26
    2b20:	0e 94 af 2f 	call	0x5f5e	; 0x5f5e <__divmodsi4>
    2b24:	dc 01       	movw	r26, r24
    2b26:	cb 01       	movw	r24, r22
    2b28:	28 2f       	mov	r18, r24
    2b2a:	20 5d       	subi	r18, 0xD0	; 208
    2b2c:	ce 01       	movw	r24, r28
    2b2e:	02 96       	adiw	r24, 0x02	; 2
    2b30:	fc 01       	movw	r30, r24
    2b32:	e0 0f       	add	r30, r16
    2b34:	f1 1f       	adc	r31, r17
    2b36:	20 83       	st	Z, r18
    2b38:	89 81       	ldd	r24, Y+1	; 0x01
    2b3a:	8f 5f       	subi	r24, 0xFF	; 255
    2b3c:	89 83       	std	Y+1, r24	; 0x01
        Copy_s32Number /= 10;
    2b3e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2b40:	9e 85       	ldd	r25, Y+14	; 0x0e
    2b42:	af 85       	ldd	r26, Y+15	; 0x0f
    2b44:	b8 89       	ldd	r27, Y+16	; 0x10
    2b46:	2a e0       	ldi	r18, 0x0A	; 10
    2b48:	30 e0       	ldi	r19, 0x00	; 0
    2b4a:	40 e0       	ldi	r20, 0x00	; 0
    2b4c:	50 e0       	ldi	r21, 0x00	; 0
    2b4e:	bc 01       	movw	r22, r24
    2b50:	cd 01       	movw	r24, r26
    2b52:	0e 94 af 2f 	call	0x5f5e	; 0x5f5e <__divmodsi4>
    2b56:	da 01       	movw	r26, r20
    2b58:	c9 01       	movw	r24, r18
    2b5a:	8d 87       	std	Y+13, r24	; 0x0d
    2b5c:	9e 87       	std	Y+14, r25	; 0x0e
    2b5e:	af 87       	std	Y+15, r26	; 0x0f
    2b60:	b8 8b       	std	Y+16, r27	; 0x10
    else if (Copy_s32Number == 0)
    {
    	LCD_VoidSendData('0');
    }

    while (Copy_s32Number > 0)
    2b62:	8d 85       	ldd	r24, Y+13	; 0x0d
    2b64:	9e 85       	ldd	r25, Y+14	; 0x0e
    2b66:	af 85       	ldd	r26, Y+15	; 0x0f
    2b68:	b8 89       	ldd	r27, Y+16	; 0x10
    2b6a:	18 16       	cp	r1, r24
    2b6c:	19 06       	cpc	r1, r25
    2b6e:	1a 06       	cpc	r1, r26
    2b70:	1b 06       	cpc	r1, r27
    2b72:	3c f2       	brlt	.-114    	; 0x2b02 <LCD_VoidSendNumber+0x6c>
    {
        Local_u8Array[Local_counter++] = (Copy_s32Number % 10) + 48;
        Copy_s32Number /= 10;
    }

    Local_counter--;
    2b74:	89 81       	ldd	r24, Y+1	; 0x01
    2b76:	81 50       	subi	r24, 0x01	; 1
    2b78:	89 83       	std	Y+1, r24	; 0x01
    2b7a:	10 c0       	rjmp	.+32     	; 0x2b9c <LCD_VoidSendNumber+0x106>

    // Loop for sending the reverse of the array
    while (Local_counter >= 0)
    {
    	LCD_VoidSendData(Local_u8Array[Local_counter]);
    2b7c:	89 81       	ldd	r24, Y+1	; 0x01
    2b7e:	28 2f       	mov	r18, r24
    2b80:	33 27       	eor	r19, r19
    2b82:	27 fd       	sbrc	r18, 7
    2b84:	30 95       	com	r19
    2b86:	ce 01       	movw	r24, r28
    2b88:	02 96       	adiw	r24, 0x02	; 2
    2b8a:	fc 01       	movw	r30, r24
    2b8c:	e2 0f       	add	r30, r18
    2b8e:	f3 1f       	adc	r31, r19
    2b90:	80 81       	ld	r24, Z
    2b92:	0e 94 6a 13 	call	0x26d4	; 0x26d4 <LCD_VoidSendData>
        Local_counter--;
    2b96:	89 81       	ldd	r24, Y+1	; 0x01
    2b98:	81 50       	subi	r24, 0x01	; 1
    2b9a:	89 83       	std	Y+1, r24	; 0x01
    }

    Local_counter--;

    // Loop for sending the reverse of the array
    while (Local_counter >= 0)
    2b9c:	89 81       	ldd	r24, Y+1	; 0x01
    2b9e:	88 23       	and	r24, r24
    2ba0:	6c f7       	brge	.-38     	; 0x2b7c <LCD_VoidSendNumber+0xe6>
    {
    	LCD_VoidSendData(Local_u8Array[Local_counter]);
        Local_counter--;
    }
}
    2ba2:	60 96       	adiw	r28, 0x10	; 16
    2ba4:	0f b6       	in	r0, 0x3f	; 63
    2ba6:	f8 94       	cli
    2ba8:	de bf       	out	0x3e, r29	; 62
    2baa:	0f be       	out	0x3f, r0	; 63
    2bac:	cd bf       	out	0x3d, r28	; 61
    2bae:	cf 91       	pop	r28
    2bb0:	df 91       	pop	r29
    2bb2:	1f 91       	pop	r17
    2bb4:	0f 91       	pop	r16
    2bb6:	08 95       	ret

00002bb8 <LCD_u8WriteString>:
u8 LCD_u8WriteString(u8 *Copy_U8String)
{
    2bb8:	df 93       	push	r29
    2bba:	cf 93       	push	r28
    2bbc:	00 d0       	rcall	.+0      	; 0x2bbe <LCD_u8WriteString+0x6>
    2bbe:	0f 92       	push	r0
    2bc0:	cd b7       	in	r28, 0x3d	; 61
    2bc2:	de b7       	in	r29, 0x3e	; 62
    2bc4:	9b 83       	std	Y+3, r25	; 0x03
    2bc6:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_U8ErrorState = ERROR_STATE_OK;
    2bc8:	81 e0       	ldi	r24, 0x01	; 1
    2bca:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_U8String != NULL)
    2bcc:	8a 81       	ldd	r24, Y+2	; 0x02
    2bce:	9b 81       	ldd	r25, Y+3	; 0x03
    2bd0:	00 97       	sbiw	r24, 0x00	; 0
    2bd2:	91 f0       	breq	.+36     	; 0x2bf8 <LCD_u8WriteString+0x40>
    2bd4:	0b c0       	rjmp	.+22     	; 0x2bec <LCD_u8WriteString+0x34>
	{
		while(*Copy_U8String > NULL_STR)
		{
			LCD_VoidSendData(*Copy_U8String++);
    2bd6:	ea 81       	ldd	r30, Y+2	; 0x02
    2bd8:	fb 81       	ldd	r31, Y+3	; 0x03
    2bda:	20 81       	ld	r18, Z
    2bdc:	8a 81       	ldd	r24, Y+2	; 0x02
    2bde:	9b 81       	ldd	r25, Y+3	; 0x03
    2be0:	01 96       	adiw	r24, 0x01	; 1
    2be2:	9b 83       	std	Y+3, r25	; 0x03
    2be4:	8a 83       	std	Y+2, r24	; 0x02
    2be6:	82 2f       	mov	r24, r18
    2be8:	0e 94 6a 13 	call	0x26d4	; 0x26d4 <LCD_VoidSendData>
u8 LCD_u8WriteString(u8 *Copy_U8String)
{
	u8 Local_U8ErrorState = ERROR_STATE_OK;
	if(Copy_U8String != NULL)
	{
		while(*Copy_U8String > NULL_STR)
    2bec:	ea 81       	ldd	r30, Y+2	; 0x02
    2bee:	fb 81       	ldd	r31, Y+3	; 0x03
    2bf0:	80 81       	ld	r24, Z
    2bf2:	88 23       	and	r24, r24
    2bf4:	81 f7       	brne	.-32     	; 0x2bd6 <LCD_u8WriteString+0x1e>
    2bf6:	01 c0       	rjmp	.+2      	; 0x2bfa <LCD_u8WriteString+0x42>
			LCD_VoidSendData(*Copy_U8String++);
		}
	}
	else
	{
		Local_U8ErrorState = ERROR_STATE_NOK;
    2bf8:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_U8ErrorState;
    2bfa:	89 81       	ldd	r24, Y+1	; 0x01
}
    2bfc:	0f 90       	pop	r0
    2bfe:	0f 90       	pop	r0
    2c00:	0f 90       	pop	r0
    2c02:	cf 91       	pop	r28
    2c04:	df 91       	pop	r29
    2c06:	08 95       	ret

00002c08 <SERVO_U8SetServoAngle>:
#include "DIO_interface.h"
#include "Timer.h"
#include "SERVO_Interface.h"

u8 SERVO_U8SetServoAngle(s8 Copy_S8Angle)
{
    2c08:	df 93       	push	r29
    2c0a:	cf 93       	push	r28
    2c0c:	cd b7       	in	r28, 0x3d	; 61
    2c0e:	de b7       	in	r29, 0x3e	; 62
    2c10:	a0 97       	sbiw	r28, 0x20	; 32
    2c12:	0f b6       	in	r0, 0x3f	; 63
    2c14:	f8 94       	cli
    2c16:	de bf       	out	0x3e, r29	; 62
    2c18:	0f be       	out	0x3f, r0	; 63
    2c1a:	cd bf       	out	0x3d, r28	; 61
    2c1c:	88 a3       	std	Y+32, r24	; 0x20
	u8 Local_U8ErrorState = ERROR_STATE_OK;
    2c1e:	81 e0       	ldi	r24, 0x01	; 1
    2c20:	8f 8f       	std	Y+31, r24	; 0x1f

	if((Copy_S8Angle<= 90  )&&(Copy_S8Angle >= -90))
    2c22:	88 a1       	ldd	r24, Y+32	; 0x20
    2c24:	8b 35       	cpi	r24, 0x5B	; 91
    2c26:	0c f0       	brlt	.+2      	; 0x2c2a <SERVO_U8SetServoAngle+0x22>
    2c28:	52 c1       	rjmp	.+676    	; 0x2ece <SERVO_U8SetServoAngle+0x2c6>
    2c2a:	88 a1       	ldd	r24, Y+32	; 0x20
    2c2c:	86 3a       	cpi	r24, 0xA6	; 166
    2c2e:	0c f4       	brge	.+2      	; 0x2c32 <SERVO_U8SetServoAngle+0x2a>
    2c30:	4e c1       	rjmp	.+668    	; 0x2ece <SERVO_U8SetServoAngle+0x2c6>
	{
		if(Copy_S8Angle >=0)
    2c32:	88 a1       	ldd	r24, Y+32	; 0x20
    2c34:	88 23       	and	r24, r24
    2c36:	0c f4       	brge	.+2      	; 0x2c3a <SERVO_U8SetServoAngle+0x32>
    2c38:	a5 c0       	rjmp	.+330    	; 0x2d84 <SERVO_U8SetServoAngle+0x17c>
		{
			for(s8 local_S16Counter=0; local_S16Counter<=Copy_S8Angle;local_S16Counter++)
    2c3a:	1e 8e       	std	Y+30, r1	; 0x1e
    2c3c:	9d c0       	rjmp	.+314    	; 0x2d78 <SERVO_U8SetServoAngle+0x170>
				{
					TIMER_VidCTCTimer1Preload(5.550*local_S16Counter+1500);
    2c3e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2c40:	99 27       	eor	r25, r25
    2c42:	87 fd       	sbrc	r24, 7
    2c44:	90 95       	com	r25
    2c46:	a9 2f       	mov	r26, r25
    2c48:	b9 2f       	mov	r27, r25
    2c4a:	bc 01       	movw	r22, r24
    2c4c:	cd 01       	movw	r24, r26
    2c4e:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    2c52:	dc 01       	movw	r26, r24
    2c54:	cb 01       	movw	r24, r22
    2c56:	bc 01       	movw	r22, r24
    2c58:	cd 01       	movw	r24, r26
    2c5a:	2a e9       	ldi	r18, 0x9A	; 154
    2c5c:	39 e9       	ldi	r19, 0x99	; 153
    2c5e:	41 eb       	ldi	r20, 0xB1	; 177
    2c60:	50 e4       	ldi	r21, 0x40	; 64
    2c62:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c66:	dc 01       	movw	r26, r24
    2c68:	cb 01       	movw	r24, r22
    2c6a:	bc 01       	movw	r22, r24
    2c6c:	cd 01       	movw	r24, r26
    2c6e:	20 e0       	ldi	r18, 0x00	; 0
    2c70:	30 e8       	ldi	r19, 0x80	; 128
    2c72:	4b eb       	ldi	r20, 0xBB	; 187
    2c74:	54 e4       	ldi	r21, 0x44	; 68
    2c76:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    2c7a:	dc 01       	movw	r26, r24
    2c7c:	cb 01       	movw	r24, r22
    2c7e:	bc 01       	movw	r22, r24
    2c80:	cd 01       	movw	r24, r26
    2c82:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
    2c86:	dc 01       	movw	r26, r24
    2c88:	cb 01       	movw	r24, r22
    2c8a:	0e 94 e7 2e 	call	0x5dce	; 0x5dce <TIMER_VidCTCTimer1Preload>
    2c8e:	80 e0       	ldi	r24, 0x00	; 0
    2c90:	90 e0       	ldi	r25, 0x00	; 0
    2c92:	a8 e4       	ldi	r26, 0x48	; 72
    2c94:	b2 e4       	ldi	r27, 0x42	; 66
    2c96:	89 8f       	std	Y+25, r24	; 0x19
    2c98:	9a 8f       	std	Y+26, r25	; 0x1a
    2c9a:	ab 8f       	std	Y+27, r26	; 0x1b
    2c9c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c9e:	69 8d       	ldd	r22, Y+25	; 0x19
    2ca0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2ca2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2ca4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2ca6:	20 e0       	ldi	r18, 0x00	; 0
    2ca8:	30 e0       	ldi	r19, 0x00	; 0
    2caa:	4a ef       	ldi	r20, 0xFA	; 250
    2cac:	54 e4       	ldi	r21, 0x44	; 68
    2cae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cb2:	dc 01       	movw	r26, r24
    2cb4:	cb 01       	movw	r24, r22
    2cb6:	8d 8b       	std	Y+21, r24	; 0x15
    2cb8:	9e 8b       	std	Y+22, r25	; 0x16
    2cba:	af 8b       	std	Y+23, r26	; 0x17
    2cbc:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2cbe:	6d 89       	ldd	r22, Y+21	; 0x15
    2cc0:	7e 89       	ldd	r23, Y+22	; 0x16
    2cc2:	8f 89       	ldd	r24, Y+23	; 0x17
    2cc4:	98 8d       	ldd	r25, Y+24	; 0x18
    2cc6:	20 e0       	ldi	r18, 0x00	; 0
    2cc8:	30 e0       	ldi	r19, 0x00	; 0
    2cca:	40 e8       	ldi	r20, 0x80	; 128
    2ccc:	5f e3       	ldi	r21, 0x3F	; 63
    2cce:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2cd2:	88 23       	and	r24, r24
    2cd4:	2c f4       	brge	.+10     	; 0x2ce0 <SERVO_U8SetServoAngle+0xd8>
		__ticks = 1;
    2cd6:	81 e0       	ldi	r24, 0x01	; 1
    2cd8:	90 e0       	ldi	r25, 0x00	; 0
    2cda:	9c 8b       	std	Y+20, r25	; 0x14
    2cdc:	8b 8b       	std	Y+19, r24	; 0x13
    2cde:	3f c0       	rjmp	.+126    	; 0x2d5e <SERVO_U8SetServoAngle+0x156>
	else if (__tmp > 65535)
    2ce0:	6d 89       	ldd	r22, Y+21	; 0x15
    2ce2:	7e 89       	ldd	r23, Y+22	; 0x16
    2ce4:	8f 89       	ldd	r24, Y+23	; 0x17
    2ce6:	98 8d       	ldd	r25, Y+24	; 0x18
    2ce8:	20 e0       	ldi	r18, 0x00	; 0
    2cea:	3f ef       	ldi	r19, 0xFF	; 255
    2cec:	4f e7       	ldi	r20, 0x7F	; 127
    2cee:	57 e4       	ldi	r21, 0x47	; 71
    2cf0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2cf4:	18 16       	cp	r1, r24
    2cf6:	4c f5       	brge	.+82     	; 0x2d4a <SERVO_U8SetServoAngle+0x142>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2cf8:	69 8d       	ldd	r22, Y+25	; 0x19
    2cfa:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2cfc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2cfe:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2d00:	20 e0       	ldi	r18, 0x00	; 0
    2d02:	30 e0       	ldi	r19, 0x00	; 0
    2d04:	40 e2       	ldi	r20, 0x20	; 32
    2d06:	51 e4       	ldi	r21, 0x41	; 65
    2d08:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d0c:	dc 01       	movw	r26, r24
    2d0e:	cb 01       	movw	r24, r22
    2d10:	bc 01       	movw	r22, r24
    2d12:	cd 01       	movw	r24, r26
    2d14:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d18:	dc 01       	movw	r26, r24
    2d1a:	cb 01       	movw	r24, r22
    2d1c:	9c 8b       	std	Y+20, r25	; 0x14
    2d1e:	8b 8b       	std	Y+19, r24	; 0x13
    2d20:	0f c0       	rjmp	.+30     	; 0x2d40 <SERVO_U8SetServoAngle+0x138>
    2d22:	88 ec       	ldi	r24, 0xC8	; 200
    2d24:	90 e0       	ldi	r25, 0x00	; 0
    2d26:	9a 8b       	std	Y+18, r25	; 0x12
    2d28:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2d2a:	89 89       	ldd	r24, Y+17	; 0x11
    2d2c:	9a 89       	ldd	r25, Y+18	; 0x12
    2d2e:	01 97       	sbiw	r24, 0x01	; 1
    2d30:	f1 f7       	brne	.-4      	; 0x2d2e <SERVO_U8SetServoAngle+0x126>
    2d32:	9a 8b       	std	Y+18, r25	; 0x12
    2d34:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d36:	8b 89       	ldd	r24, Y+19	; 0x13
    2d38:	9c 89       	ldd	r25, Y+20	; 0x14
    2d3a:	01 97       	sbiw	r24, 0x01	; 1
    2d3c:	9c 8b       	std	Y+20, r25	; 0x14
    2d3e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d40:	8b 89       	ldd	r24, Y+19	; 0x13
    2d42:	9c 89       	ldd	r25, Y+20	; 0x14
    2d44:	00 97       	sbiw	r24, 0x00	; 0
    2d46:	69 f7       	brne	.-38     	; 0x2d22 <SERVO_U8SetServoAngle+0x11a>
    2d48:	14 c0       	rjmp	.+40     	; 0x2d72 <SERVO_U8SetServoAngle+0x16a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d4a:	6d 89       	ldd	r22, Y+21	; 0x15
    2d4c:	7e 89       	ldd	r23, Y+22	; 0x16
    2d4e:	8f 89       	ldd	r24, Y+23	; 0x17
    2d50:	98 8d       	ldd	r25, Y+24	; 0x18
    2d52:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d56:	dc 01       	movw	r26, r24
    2d58:	cb 01       	movw	r24, r22
    2d5a:	9c 8b       	std	Y+20, r25	; 0x14
    2d5c:	8b 8b       	std	Y+19, r24	; 0x13
    2d5e:	8b 89       	ldd	r24, Y+19	; 0x13
    2d60:	9c 89       	ldd	r25, Y+20	; 0x14
    2d62:	98 8b       	std	Y+16, r25	; 0x10
    2d64:	8f 87       	std	Y+15, r24	; 0x0f
    2d66:	8f 85       	ldd	r24, Y+15	; 0x0f
    2d68:	98 89       	ldd	r25, Y+16	; 0x10
    2d6a:	01 97       	sbiw	r24, 0x01	; 1
    2d6c:	f1 f7       	brne	.-4      	; 0x2d6a <SERVO_U8SetServoAngle+0x162>
    2d6e:	98 8b       	std	Y+16, r25	; 0x10
    2d70:	8f 87       	std	Y+15, r24	; 0x0f

	if((Copy_S8Angle<= 90  )&&(Copy_S8Angle >= -90))
	{
		if(Copy_S8Angle >=0)
		{
			for(s8 local_S16Counter=0; local_S16Counter<=Copy_S8Angle;local_S16Counter++)
    2d72:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2d74:	8f 5f       	subi	r24, 0xFF	; 255
    2d76:	8e 8f       	std	Y+30, r24	; 0x1e
    2d78:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2d7a:	88 a1       	ldd	r24, Y+32	; 0x20
    2d7c:	89 17       	cp	r24, r25
    2d7e:	0c f0       	brlt	.+2      	; 0x2d82 <SERVO_U8SetServoAngle+0x17a>
    2d80:	5e cf       	rjmp	.-324    	; 0x2c3e <SERVO_U8SetServoAngle+0x36>
    2d82:	a6 c0       	rjmp	.+332    	; 0x2ed0 <SERVO_U8SetServoAngle+0x2c8>
					_delay_ms(50);
				}
		}
		else
		{
			for(s8 local_S16Counter=0; local_S16Counter >=Copy_S8Angle;local_S16Counter--) // for negative
    2d84:	1d 8e       	std	Y+29, r1	; 0x1d
    2d86:	9d c0       	rjmp	.+314    	; 0x2ec2 <SERVO_U8SetServoAngle+0x2ba>
				{
					TIMER_VidCTCTimer1Preload(5.569*local_S16Counter+1500);
    2d88:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2d8a:	99 27       	eor	r25, r25
    2d8c:	87 fd       	sbrc	r24, 7
    2d8e:	90 95       	com	r25
    2d90:	a9 2f       	mov	r26, r25
    2d92:	b9 2f       	mov	r27, r25
    2d94:	bc 01       	movw	r22, r24
    2d96:	cd 01       	movw	r24, r26
    2d98:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    2d9c:	dc 01       	movw	r26, r24
    2d9e:	cb 01       	movw	r24, r22
    2da0:	bc 01       	movw	r22, r24
    2da2:	cd 01       	movw	r24, r26
    2da4:	2f e3       	ldi	r18, 0x3F	; 63
    2da6:	35 e3       	ldi	r19, 0x35	; 53
    2da8:	42 eb       	ldi	r20, 0xB2	; 178
    2daa:	50 e4       	ldi	r21, 0x40	; 64
    2dac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2db0:	dc 01       	movw	r26, r24
    2db2:	cb 01       	movw	r24, r22
    2db4:	bc 01       	movw	r22, r24
    2db6:	cd 01       	movw	r24, r26
    2db8:	20 e0       	ldi	r18, 0x00	; 0
    2dba:	30 e8       	ldi	r19, 0x80	; 128
    2dbc:	4b eb       	ldi	r20, 0xBB	; 187
    2dbe:	54 e4       	ldi	r21, 0x44	; 68
    2dc0:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    2dc4:	dc 01       	movw	r26, r24
    2dc6:	cb 01       	movw	r24, r22
    2dc8:	bc 01       	movw	r22, r24
    2dca:	cd 01       	movw	r24, r26
    2dcc:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
    2dd0:	dc 01       	movw	r26, r24
    2dd2:	cb 01       	movw	r24, r22
    2dd4:	0e 94 e7 2e 	call	0x5dce	; 0x5dce <TIMER_VidCTCTimer1Preload>
    2dd8:	80 e0       	ldi	r24, 0x00	; 0
    2dda:	90 e0       	ldi	r25, 0x00	; 0
    2ddc:	a8 e4       	ldi	r26, 0x48	; 72
    2dde:	b2 e4       	ldi	r27, 0x42	; 66
    2de0:	8b 87       	std	Y+11, r24	; 0x0b
    2de2:	9c 87       	std	Y+12, r25	; 0x0c
    2de4:	ad 87       	std	Y+13, r26	; 0x0d
    2de6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2de8:	6b 85       	ldd	r22, Y+11	; 0x0b
    2dea:	7c 85       	ldd	r23, Y+12	; 0x0c
    2dec:	8d 85       	ldd	r24, Y+13	; 0x0d
    2dee:	9e 85       	ldd	r25, Y+14	; 0x0e
    2df0:	20 e0       	ldi	r18, 0x00	; 0
    2df2:	30 e0       	ldi	r19, 0x00	; 0
    2df4:	4a ef       	ldi	r20, 0xFA	; 250
    2df6:	54 e4       	ldi	r21, 0x44	; 68
    2df8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2dfc:	dc 01       	movw	r26, r24
    2dfe:	cb 01       	movw	r24, r22
    2e00:	8f 83       	std	Y+7, r24	; 0x07
    2e02:	98 87       	std	Y+8, r25	; 0x08
    2e04:	a9 87       	std	Y+9, r26	; 0x09
    2e06:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2e08:	6f 81       	ldd	r22, Y+7	; 0x07
    2e0a:	78 85       	ldd	r23, Y+8	; 0x08
    2e0c:	89 85       	ldd	r24, Y+9	; 0x09
    2e0e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e10:	20 e0       	ldi	r18, 0x00	; 0
    2e12:	30 e0       	ldi	r19, 0x00	; 0
    2e14:	40 e8       	ldi	r20, 0x80	; 128
    2e16:	5f e3       	ldi	r21, 0x3F	; 63
    2e18:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2e1c:	88 23       	and	r24, r24
    2e1e:	2c f4       	brge	.+10     	; 0x2e2a <SERVO_U8SetServoAngle+0x222>
		__ticks = 1;
    2e20:	81 e0       	ldi	r24, 0x01	; 1
    2e22:	90 e0       	ldi	r25, 0x00	; 0
    2e24:	9e 83       	std	Y+6, r25	; 0x06
    2e26:	8d 83       	std	Y+5, r24	; 0x05
    2e28:	3f c0       	rjmp	.+126    	; 0x2ea8 <SERVO_U8SetServoAngle+0x2a0>
	else if (__tmp > 65535)
    2e2a:	6f 81       	ldd	r22, Y+7	; 0x07
    2e2c:	78 85       	ldd	r23, Y+8	; 0x08
    2e2e:	89 85       	ldd	r24, Y+9	; 0x09
    2e30:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e32:	20 e0       	ldi	r18, 0x00	; 0
    2e34:	3f ef       	ldi	r19, 0xFF	; 255
    2e36:	4f e7       	ldi	r20, 0x7F	; 127
    2e38:	57 e4       	ldi	r21, 0x47	; 71
    2e3a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2e3e:	18 16       	cp	r1, r24
    2e40:	4c f5       	brge	.+82     	; 0x2e94 <SERVO_U8SetServoAngle+0x28c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e42:	6b 85       	ldd	r22, Y+11	; 0x0b
    2e44:	7c 85       	ldd	r23, Y+12	; 0x0c
    2e46:	8d 85       	ldd	r24, Y+13	; 0x0d
    2e48:	9e 85       	ldd	r25, Y+14	; 0x0e
    2e4a:	20 e0       	ldi	r18, 0x00	; 0
    2e4c:	30 e0       	ldi	r19, 0x00	; 0
    2e4e:	40 e2       	ldi	r20, 0x20	; 32
    2e50:	51 e4       	ldi	r21, 0x41	; 65
    2e52:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e56:	dc 01       	movw	r26, r24
    2e58:	cb 01       	movw	r24, r22
    2e5a:	bc 01       	movw	r22, r24
    2e5c:	cd 01       	movw	r24, r26
    2e5e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e62:	dc 01       	movw	r26, r24
    2e64:	cb 01       	movw	r24, r22
    2e66:	9e 83       	std	Y+6, r25	; 0x06
    2e68:	8d 83       	std	Y+5, r24	; 0x05
    2e6a:	0f c0       	rjmp	.+30     	; 0x2e8a <SERVO_U8SetServoAngle+0x282>
    2e6c:	88 ec       	ldi	r24, 0xC8	; 200
    2e6e:	90 e0       	ldi	r25, 0x00	; 0
    2e70:	9c 83       	std	Y+4, r25	; 0x04
    2e72:	8b 83       	std	Y+3, r24	; 0x03
    2e74:	8b 81       	ldd	r24, Y+3	; 0x03
    2e76:	9c 81       	ldd	r25, Y+4	; 0x04
    2e78:	01 97       	sbiw	r24, 0x01	; 1
    2e7a:	f1 f7       	brne	.-4      	; 0x2e78 <SERVO_U8SetServoAngle+0x270>
    2e7c:	9c 83       	std	Y+4, r25	; 0x04
    2e7e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e80:	8d 81       	ldd	r24, Y+5	; 0x05
    2e82:	9e 81       	ldd	r25, Y+6	; 0x06
    2e84:	01 97       	sbiw	r24, 0x01	; 1
    2e86:	9e 83       	std	Y+6, r25	; 0x06
    2e88:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e8a:	8d 81       	ldd	r24, Y+5	; 0x05
    2e8c:	9e 81       	ldd	r25, Y+6	; 0x06
    2e8e:	00 97       	sbiw	r24, 0x00	; 0
    2e90:	69 f7       	brne	.-38     	; 0x2e6c <SERVO_U8SetServoAngle+0x264>
    2e92:	14 c0       	rjmp	.+40     	; 0x2ebc <SERVO_U8SetServoAngle+0x2b4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e94:	6f 81       	ldd	r22, Y+7	; 0x07
    2e96:	78 85       	ldd	r23, Y+8	; 0x08
    2e98:	89 85       	ldd	r24, Y+9	; 0x09
    2e9a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e9c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ea0:	dc 01       	movw	r26, r24
    2ea2:	cb 01       	movw	r24, r22
    2ea4:	9e 83       	std	Y+6, r25	; 0x06
    2ea6:	8d 83       	std	Y+5, r24	; 0x05
    2ea8:	8d 81       	ldd	r24, Y+5	; 0x05
    2eaa:	9e 81       	ldd	r25, Y+6	; 0x06
    2eac:	9a 83       	std	Y+2, r25	; 0x02
    2eae:	89 83       	std	Y+1, r24	; 0x01
    2eb0:	89 81       	ldd	r24, Y+1	; 0x01
    2eb2:	9a 81       	ldd	r25, Y+2	; 0x02
    2eb4:	01 97       	sbiw	r24, 0x01	; 1
    2eb6:	f1 f7       	brne	.-4      	; 0x2eb4 <SERVO_U8SetServoAngle+0x2ac>
    2eb8:	9a 83       	std	Y+2, r25	; 0x02
    2eba:	89 83       	std	Y+1, r24	; 0x01
					_delay_ms(50);
				}
		}
		else
		{
			for(s8 local_S16Counter=0; local_S16Counter >=Copy_S8Angle;local_S16Counter--) // for negative
    2ebc:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2ebe:	81 50       	subi	r24, 0x01	; 1
    2ec0:	8d 8f       	std	Y+29, r24	; 0x1d
    2ec2:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2ec4:	88 a1       	ldd	r24, Y+32	; 0x20
    2ec6:	98 17       	cp	r25, r24
    2ec8:	0c f0       	brlt	.+2      	; 0x2ecc <SERVO_U8SetServoAngle+0x2c4>
    2eca:	5e cf       	rjmp	.-324    	; 0x2d88 <SERVO_U8SetServoAngle+0x180>
    2ecc:	01 c0       	rjmp	.+2      	; 0x2ed0 <SERVO_U8SetServoAngle+0x2c8>


	}
	else
	{
		Local_U8ErrorState = ERROR_STATE_NOK;
    2ece:	1f 8e       	std	Y+31, r1	; 0x1f
	}
	return Local_U8ErrorState;
    2ed0:	8f 8d       	ldd	r24, Y+31	; 0x1f
}
    2ed2:	a0 96       	adiw	r28, 0x20	; 32
    2ed4:	0f b6       	in	r0, 0x3f	; 63
    2ed6:	f8 94       	cli
    2ed8:	de bf       	out	0x3e, r29	; 62
    2eda:	0f be       	out	0x3f, r0	; 63
    2edc:	cd bf       	out	0x3d, r28	; 61
    2ede:	cf 91       	pop	r28
    2ee0:	df 91       	pop	r29
    2ee2:	08 95       	ret

00002ee4 <SM_VoidServo_APP>:


static s16 mine = 0;

void SM_VoidServo_APP(void)
{
    2ee4:	df 93       	push	r29
    2ee6:	cf 93       	push	r28
    2ee8:	cd b7       	in	r28, 0x3d	; 61
    2eea:	de b7       	in	r29, 0x3e	; 62
    2eec:	ea 97       	sbiw	r28, 0x3a	; 58
    2eee:	0f b6       	in	r0, 0x3f	; 63
    2ef0:	f8 94       	cli
    2ef2:	de bf       	out	0x3e, r29	; 62
    2ef4:	0f be       	out	0x3f, r0	; 63
    2ef6:	cd bf       	out	0x3d, r28	; 61
    static s8 isNegative = 1;
    u8 Pressed_Key;

    KPAD_U8GetPressedKey(&Pressed_Key);
    2ef8:	ce 01       	movw	r24, r28
    2efa:	ca 96       	adiw	r24, 0x3a	; 58
    2efc:	0e 94 45 0d 	call	0x1a8a	; 0x1a8a <KPAD_U8GetPressedKey>

    if ((Pressed_Key >= '0') && (Pressed_Key <= '9')) {
    2f00:	8a ad       	ldd	r24, Y+58	; 0x3a
    2f02:	80 33       	cpi	r24, 0x30	; 48
    2f04:	08 f1       	brcs	.+66     	; 0x2f48 <SM_VoidServo_APP+0x64>
    2f06:	8a ad       	ldd	r24, Y+58	; 0x3a
    2f08:	8a 33       	cpi	r24, 0x3A	; 58
    2f0a:	f0 f4       	brcc	.+60     	; 0x2f48 <SM_VoidServo_APP+0x64>
        LCD_VoidSendData(Pressed_Key);
    2f0c:	8a ad       	ldd	r24, Y+58	; 0x3a
    2f0e:	0e 94 6a 13 	call	0x26d4	; 0x26d4 <LCD_VoidSendData>
        u8 angle = Pressed_Key - '0';
    2f12:	8a ad       	ldd	r24, Y+58	; 0x3a
    2f14:	80 53       	subi	r24, 0x30	; 48
    2f16:	89 af       	std	Y+57, r24	; 0x39
        mine = mine * 10 + angle;
    2f18:	80 91 9a 02 	lds	r24, 0x029A
    2f1c:	90 91 9b 02 	lds	r25, 0x029B
    2f20:	9c 01       	movw	r18, r24
    2f22:	22 0f       	add	r18, r18
    2f24:	33 1f       	adc	r19, r19
    2f26:	c9 01       	movw	r24, r18
    2f28:	88 0f       	add	r24, r24
    2f2a:	99 1f       	adc	r25, r25
    2f2c:	88 0f       	add	r24, r24
    2f2e:	99 1f       	adc	r25, r25
    2f30:	28 0f       	add	r18, r24
    2f32:	39 1f       	adc	r19, r25
    2f34:	89 ad       	ldd	r24, Y+57	; 0x39
    2f36:	88 2f       	mov	r24, r24
    2f38:	90 e0       	ldi	r25, 0x00	; 0
    2f3a:	82 0f       	add	r24, r18
    2f3c:	93 1f       	adc	r25, r19
    2f3e:	90 93 9b 02 	sts	0x029B, r25
    2f42:	80 93 9a 02 	sts	0x029A, r24
    2f46:	30 c2       	rjmp	.+1120   	; 0x33a8 <SM_VoidServo_APP+0x4c4>
    }
    else if (Pressed_Key == '-')
    2f48:	8a ad       	ldd	r24, Y+58	; 0x3a
    2f4a:	8d 32       	cpi	r24, 0x2D	; 45
    2f4c:	39 f4       	brne	.+14     	; 0x2f5c <SM_VoidServo_APP+0x78>
     {
    	isNegative =-1;
    2f4e:	8f ef       	ldi	r24, 0xFF	; 255
    2f50:	80 93 7b 02 	sts	0x027B, r24
    	LCD_VoidSendData('-');
    2f54:	8d e2       	ldi	r24, 0x2D	; 45
    2f56:	0e 94 6a 13 	call	0x26d4	; 0x26d4 <LCD_VoidSendData>
    2f5a:	26 c2       	rjmp	.+1100   	; 0x33a8 <SM_VoidServo_APP+0x4c4>
     }
    else if (Pressed_Key == '=')
    2f5c:	8a ad       	ldd	r24, Y+58	; 0x3a
    2f5e:	8d 33       	cpi	r24, 0x3D	; 61
    2f60:	09 f0       	breq	.+2      	; 0x2f64 <SM_VoidServo_APP+0x80>
    2f62:	16 c2       	rjmp	.+1068   	; 0x3390 <SM_VoidServo_APP+0x4ac>
    {
        if(isNegative == -1)
    2f64:	80 91 7b 02 	lds	r24, 0x027B
    2f68:	8f 3f       	cpi	r24, 0xFF	; 255
    2f6a:	59 f4       	brne	.+22     	; 0x2f82 <SM_VoidServo_APP+0x9e>
        {
        	mine = -mine;
    2f6c:	80 91 9a 02 	lds	r24, 0x029A
    2f70:	90 91 9b 02 	lds	r25, 0x029B
    2f74:	90 95       	com	r25
    2f76:	81 95       	neg	r24
    2f78:	9f 4f       	sbci	r25, 0xFF	; 255
    2f7a:	90 93 9b 02 	sts	0x029B, r25
    2f7e:	80 93 9a 02 	sts	0x029A, r24
        }
        if((mine <=90) &&(mine >= -90))
    2f82:	80 91 9a 02 	lds	r24, 0x029A
    2f86:	90 91 9b 02 	lds	r25, 0x029B
    2f8a:	8b 35       	cpi	r24, 0x5B	; 91
    2f8c:	91 05       	cpc	r25, r1
    2f8e:	0c f0       	brlt	.+2      	; 0x2f92 <SM_VoidServo_APP+0xae>
    2f90:	0b c1       	rjmp	.+534    	; 0x31a8 <SM_VoidServo_APP+0x2c4>
    2f92:	80 91 9a 02 	lds	r24, 0x029A
    2f96:	90 91 9b 02 	lds	r25, 0x029B
    2f9a:	2f ef       	ldi	r18, 0xFF	; 255
    2f9c:	86 3a       	cpi	r24, 0xA6	; 166
    2f9e:	92 07       	cpc	r25, r18
    2fa0:	0c f4       	brge	.+2      	; 0x2fa4 <SM_VoidServo_APP+0xc0>
    2fa2:	02 c1       	rjmp	.+516    	; 0x31a8 <SM_VoidServo_APP+0x2c4>
        {
        LCD_VoidSendCommand(1);
    2fa4:	81 e0       	ldi	r24, 0x01	; 1
    2fa6:	0e 94 b0 11 	call	0x2360	; 0x2360 <LCD_VoidSendCommand>
    2faa:	80 e0       	ldi	r24, 0x00	; 0
    2fac:	90 e0       	ldi	r25, 0x00	; 0
    2fae:	af e2       	ldi	r26, 0x2F	; 47
    2fb0:	b4 e4       	ldi	r27, 0x44	; 68
    2fb2:	8d ab       	std	Y+53, r24	; 0x35
    2fb4:	9e ab       	std	Y+54, r25	; 0x36
    2fb6:	af ab       	std	Y+55, r26	; 0x37
    2fb8:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2fba:	6d a9       	ldd	r22, Y+53	; 0x35
    2fbc:	7e a9       	ldd	r23, Y+54	; 0x36
    2fbe:	8f a9       	ldd	r24, Y+55	; 0x37
    2fc0:	98 ad       	ldd	r25, Y+56	; 0x38
    2fc2:	20 e0       	ldi	r18, 0x00	; 0
    2fc4:	30 e0       	ldi	r19, 0x00	; 0
    2fc6:	4a ef       	ldi	r20, 0xFA	; 250
    2fc8:	54 e4       	ldi	r21, 0x44	; 68
    2fca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2fce:	dc 01       	movw	r26, r24
    2fd0:	cb 01       	movw	r24, r22
    2fd2:	89 ab       	std	Y+49, r24	; 0x31
    2fd4:	9a ab       	std	Y+50, r25	; 0x32
    2fd6:	ab ab       	std	Y+51, r26	; 0x33
    2fd8:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2fda:	69 a9       	ldd	r22, Y+49	; 0x31
    2fdc:	7a a9       	ldd	r23, Y+50	; 0x32
    2fde:	8b a9       	ldd	r24, Y+51	; 0x33
    2fe0:	9c a9       	ldd	r25, Y+52	; 0x34
    2fe2:	20 e0       	ldi	r18, 0x00	; 0
    2fe4:	30 e0       	ldi	r19, 0x00	; 0
    2fe6:	40 e8       	ldi	r20, 0x80	; 128
    2fe8:	5f e3       	ldi	r21, 0x3F	; 63
    2fea:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2fee:	88 23       	and	r24, r24
    2ff0:	2c f4       	brge	.+10     	; 0x2ffc <SM_VoidServo_APP+0x118>
		__ticks = 1;
    2ff2:	81 e0       	ldi	r24, 0x01	; 1
    2ff4:	90 e0       	ldi	r25, 0x00	; 0
    2ff6:	98 ab       	std	Y+48, r25	; 0x30
    2ff8:	8f a7       	std	Y+47, r24	; 0x2f
    2ffa:	3f c0       	rjmp	.+126    	; 0x307a <SM_VoidServo_APP+0x196>
	else if (__tmp > 65535)
    2ffc:	69 a9       	ldd	r22, Y+49	; 0x31
    2ffe:	7a a9       	ldd	r23, Y+50	; 0x32
    3000:	8b a9       	ldd	r24, Y+51	; 0x33
    3002:	9c a9       	ldd	r25, Y+52	; 0x34
    3004:	20 e0       	ldi	r18, 0x00	; 0
    3006:	3f ef       	ldi	r19, 0xFF	; 255
    3008:	4f e7       	ldi	r20, 0x7F	; 127
    300a:	57 e4       	ldi	r21, 0x47	; 71
    300c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3010:	18 16       	cp	r1, r24
    3012:	4c f5       	brge	.+82     	; 0x3066 <SM_VoidServo_APP+0x182>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3014:	6d a9       	ldd	r22, Y+53	; 0x35
    3016:	7e a9       	ldd	r23, Y+54	; 0x36
    3018:	8f a9       	ldd	r24, Y+55	; 0x37
    301a:	98 ad       	ldd	r25, Y+56	; 0x38
    301c:	20 e0       	ldi	r18, 0x00	; 0
    301e:	30 e0       	ldi	r19, 0x00	; 0
    3020:	40 e2       	ldi	r20, 0x20	; 32
    3022:	51 e4       	ldi	r21, 0x41	; 65
    3024:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3028:	dc 01       	movw	r26, r24
    302a:	cb 01       	movw	r24, r22
    302c:	bc 01       	movw	r22, r24
    302e:	cd 01       	movw	r24, r26
    3030:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3034:	dc 01       	movw	r26, r24
    3036:	cb 01       	movw	r24, r22
    3038:	98 ab       	std	Y+48, r25	; 0x30
    303a:	8f a7       	std	Y+47, r24	; 0x2f
    303c:	0f c0       	rjmp	.+30     	; 0x305c <SM_VoidServo_APP+0x178>
    303e:	88 ec       	ldi	r24, 0xC8	; 200
    3040:	90 e0       	ldi	r25, 0x00	; 0
    3042:	9e a7       	std	Y+46, r25	; 0x2e
    3044:	8d a7       	std	Y+45, r24	; 0x2d
    3046:	8d a5       	ldd	r24, Y+45	; 0x2d
    3048:	9e a5       	ldd	r25, Y+46	; 0x2e
    304a:	01 97       	sbiw	r24, 0x01	; 1
    304c:	f1 f7       	brne	.-4      	; 0x304a <SM_VoidServo_APP+0x166>
    304e:	9e a7       	std	Y+46, r25	; 0x2e
    3050:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3052:	8f a5       	ldd	r24, Y+47	; 0x2f
    3054:	98 a9       	ldd	r25, Y+48	; 0x30
    3056:	01 97       	sbiw	r24, 0x01	; 1
    3058:	98 ab       	std	Y+48, r25	; 0x30
    305a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    305c:	8f a5       	ldd	r24, Y+47	; 0x2f
    305e:	98 a9       	ldd	r25, Y+48	; 0x30
    3060:	00 97       	sbiw	r24, 0x00	; 0
    3062:	69 f7       	brne	.-38     	; 0x303e <SM_VoidServo_APP+0x15a>
    3064:	14 c0       	rjmp	.+40     	; 0x308e <SM_VoidServo_APP+0x1aa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3066:	69 a9       	ldd	r22, Y+49	; 0x31
    3068:	7a a9       	ldd	r23, Y+50	; 0x32
    306a:	8b a9       	ldd	r24, Y+51	; 0x33
    306c:	9c a9       	ldd	r25, Y+52	; 0x34
    306e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3072:	dc 01       	movw	r26, r24
    3074:	cb 01       	movw	r24, r22
    3076:	98 ab       	std	Y+48, r25	; 0x30
    3078:	8f a7       	std	Y+47, r24	; 0x2f
    307a:	8f a5       	ldd	r24, Y+47	; 0x2f
    307c:	98 a9       	ldd	r25, Y+48	; 0x30
    307e:	9c a7       	std	Y+44, r25	; 0x2c
    3080:	8b a7       	std	Y+43, r24	; 0x2b
    3082:	8b a5       	ldd	r24, Y+43	; 0x2b
    3084:	9c a5       	ldd	r25, Y+44	; 0x2c
    3086:	01 97       	sbiw	r24, 0x01	; 1
    3088:	f1 f7       	brne	.-4      	; 0x3086 <SM_VoidServo_APP+0x1a2>
    308a:	9c a7       	std	Y+44, r25	; 0x2c
    308c:	8b a7       	std	Y+43, r24	; 0x2b
        _delay_ms(700);
        LCD_u8WriteString("YOUR ANGLE= ");
    308e:	80 e6       	ldi	r24, 0x60	; 96
    3090:	90 e0       	ldi	r25, 0x00	; 0
    3092:	0e 94 dc 15 	call	0x2bb8	; 0x2bb8 <LCD_u8WriteString>

        LCD_VoidSendNumber(mine);
    3096:	80 91 9a 02 	lds	r24, 0x029A
    309a:	90 91 9b 02 	lds	r25, 0x029B
    309e:	aa 27       	eor	r26, r26
    30a0:	97 fd       	sbrc	r25, 7
    30a2:	a0 95       	com	r26
    30a4:	ba 2f       	mov	r27, r26
    30a6:	bc 01       	movw	r22, r24
    30a8:	cd 01       	movw	r24, r26
    30aa:	0e 94 4b 15 	call	0x2a96	; 0x2a96 <LCD_VoidSendNumber>
    30ae:	80 e0       	ldi	r24, 0x00	; 0
    30b0:	90 e0       	ldi	r25, 0x00	; 0
    30b2:	af e2       	ldi	r26, 0x2F	; 47
    30b4:	b4 e4       	ldi	r27, 0x44	; 68
    30b6:	8f a3       	std	Y+39, r24	; 0x27
    30b8:	98 a7       	std	Y+40, r25	; 0x28
    30ba:	a9 a7       	std	Y+41, r26	; 0x29
    30bc:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    30be:	6f a1       	ldd	r22, Y+39	; 0x27
    30c0:	78 a5       	ldd	r23, Y+40	; 0x28
    30c2:	89 a5       	ldd	r24, Y+41	; 0x29
    30c4:	9a a5       	ldd	r25, Y+42	; 0x2a
    30c6:	20 e0       	ldi	r18, 0x00	; 0
    30c8:	30 e0       	ldi	r19, 0x00	; 0
    30ca:	4a ef       	ldi	r20, 0xFA	; 250
    30cc:	54 e4       	ldi	r21, 0x44	; 68
    30ce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30d2:	dc 01       	movw	r26, r24
    30d4:	cb 01       	movw	r24, r22
    30d6:	8b a3       	std	Y+35, r24	; 0x23
    30d8:	9c a3       	std	Y+36, r25	; 0x24
    30da:	ad a3       	std	Y+37, r26	; 0x25
    30dc:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    30de:	6b a1       	ldd	r22, Y+35	; 0x23
    30e0:	7c a1       	ldd	r23, Y+36	; 0x24
    30e2:	8d a1       	ldd	r24, Y+37	; 0x25
    30e4:	9e a1       	ldd	r25, Y+38	; 0x26
    30e6:	20 e0       	ldi	r18, 0x00	; 0
    30e8:	30 e0       	ldi	r19, 0x00	; 0
    30ea:	40 e8       	ldi	r20, 0x80	; 128
    30ec:	5f e3       	ldi	r21, 0x3F	; 63
    30ee:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    30f2:	88 23       	and	r24, r24
    30f4:	2c f4       	brge	.+10     	; 0x3100 <SM_VoidServo_APP+0x21c>
		__ticks = 1;
    30f6:	81 e0       	ldi	r24, 0x01	; 1
    30f8:	90 e0       	ldi	r25, 0x00	; 0
    30fa:	9a a3       	std	Y+34, r25	; 0x22
    30fc:	89 a3       	std	Y+33, r24	; 0x21
    30fe:	3f c0       	rjmp	.+126    	; 0x317e <SM_VoidServo_APP+0x29a>
	else if (__tmp > 65535)
    3100:	6b a1       	ldd	r22, Y+35	; 0x23
    3102:	7c a1       	ldd	r23, Y+36	; 0x24
    3104:	8d a1       	ldd	r24, Y+37	; 0x25
    3106:	9e a1       	ldd	r25, Y+38	; 0x26
    3108:	20 e0       	ldi	r18, 0x00	; 0
    310a:	3f ef       	ldi	r19, 0xFF	; 255
    310c:	4f e7       	ldi	r20, 0x7F	; 127
    310e:	57 e4       	ldi	r21, 0x47	; 71
    3110:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3114:	18 16       	cp	r1, r24
    3116:	4c f5       	brge	.+82     	; 0x316a <SM_VoidServo_APP+0x286>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3118:	6f a1       	ldd	r22, Y+39	; 0x27
    311a:	78 a5       	ldd	r23, Y+40	; 0x28
    311c:	89 a5       	ldd	r24, Y+41	; 0x29
    311e:	9a a5       	ldd	r25, Y+42	; 0x2a
    3120:	20 e0       	ldi	r18, 0x00	; 0
    3122:	30 e0       	ldi	r19, 0x00	; 0
    3124:	40 e2       	ldi	r20, 0x20	; 32
    3126:	51 e4       	ldi	r21, 0x41	; 65
    3128:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    312c:	dc 01       	movw	r26, r24
    312e:	cb 01       	movw	r24, r22
    3130:	bc 01       	movw	r22, r24
    3132:	cd 01       	movw	r24, r26
    3134:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3138:	dc 01       	movw	r26, r24
    313a:	cb 01       	movw	r24, r22
    313c:	9a a3       	std	Y+34, r25	; 0x22
    313e:	89 a3       	std	Y+33, r24	; 0x21
    3140:	0f c0       	rjmp	.+30     	; 0x3160 <SM_VoidServo_APP+0x27c>
    3142:	88 ec       	ldi	r24, 0xC8	; 200
    3144:	90 e0       	ldi	r25, 0x00	; 0
    3146:	98 a3       	std	Y+32, r25	; 0x20
    3148:	8f 8f       	std	Y+31, r24	; 0x1f
    314a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    314c:	98 a1       	ldd	r25, Y+32	; 0x20
    314e:	01 97       	sbiw	r24, 0x01	; 1
    3150:	f1 f7       	brne	.-4      	; 0x314e <SM_VoidServo_APP+0x26a>
    3152:	98 a3       	std	Y+32, r25	; 0x20
    3154:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3156:	89 a1       	ldd	r24, Y+33	; 0x21
    3158:	9a a1       	ldd	r25, Y+34	; 0x22
    315a:	01 97       	sbiw	r24, 0x01	; 1
    315c:	9a a3       	std	Y+34, r25	; 0x22
    315e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3160:	89 a1       	ldd	r24, Y+33	; 0x21
    3162:	9a a1       	ldd	r25, Y+34	; 0x22
    3164:	00 97       	sbiw	r24, 0x00	; 0
    3166:	69 f7       	brne	.-38     	; 0x3142 <SM_VoidServo_APP+0x25e>
    3168:	14 c0       	rjmp	.+40     	; 0x3192 <SM_VoidServo_APP+0x2ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    316a:	6b a1       	ldd	r22, Y+35	; 0x23
    316c:	7c a1       	ldd	r23, Y+36	; 0x24
    316e:	8d a1       	ldd	r24, Y+37	; 0x25
    3170:	9e a1       	ldd	r25, Y+38	; 0x26
    3172:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3176:	dc 01       	movw	r26, r24
    3178:	cb 01       	movw	r24, r22
    317a:	9a a3       	std	Y+34, r25	; 0x22
    317c:	89 a3       	std	Y+33, r24	; 0x21
    317e:	89 a1       	ldd	r24, Y+33	; 0x21
    3180:	9a a1       	ldd	r25, Y+34	; 0x22
    3182:	9e 8f       	std	Y+30, r25	; 0x1e
    3184:	8d 8f       	std	Y+29, r24	; 0x1d
    3186:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3188:	9e 8d       	ldd	r25, Y+30	; 0x1e
    318a:	01 97       	sbiw	r24, 0x01	; 1
    318c:	f1 f7       	brne	.-4      	; 0x318a <SM_VoidServo_APP+0x2a6>
    318e:	9e 8f       	std	Y+30, r25	; 0x1e
    3190:	8d 8f       	std	Y+29, r24	; 0x1d
        _delay_ms(700);
        LCD_VoidGoToRowCol(1,1);
    3192:	81 e0       	ldi	r24, 0x01	; 1
    3194:	61 e0       	ldi	r22, 0x01	; 1
    3196:	0e 94 24 15 	call	0x2a48	; 0x2a48 <LCD_VoidGoToRowCol>
        SERVO_U8SetServoAngle(mine);
    319a:	80 91 9a 02 	lds	r24, 0x029A
    319e:	90 91 9b 02 	lds	r25, 0x029B
    31a2:	0e 94 04 16 	call	0x2c08	; 0x2c08 <SERVO_U8SetServoAngle>
    31a6:	00 c1       	rjmp	.+512    	; 0x33a8 <SM_VoidServo_APP+0x4c4>
        }
        else
        {                  // for range 90 : - 90
        	 LCD_VoidSendCommand(1);
    31a8:	81 e0       	ldi	r24, 0x01	; 1
    31aa:	0e 94 b0 11 	call	0x2360	; 0x2360 <LCD_VoidSendCommand>
    31ae:	80 e0       	ldi	r24, 0x00	; 0
    31b0:	90 e0       	ldi	r25, 0x00	; 0
    31b2:	af e2       	ldi	r26, 0x2F	; 47
    31b4:	b4 e4       	ldi	r27, 0x44	; 68
    31b6:	89 8f       	std	Y+25, r24	; 0x19
    31b8:	9a 8f       	std	Y+26, r25	; 0x1a
    31ba:	ab 8f       	std	Y+27, r26	; 0x1b
    31bc:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    31be:	69 8d       	ldd	r22, Y+25	; 0x19
    31c0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    31c2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    31c4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    31c6:	20 e0       	ldi	r18, 0x00	; 0
    31c8:	30 e0       	ldi	r19, 0x00	; 0
    31ca:	4a ef       	ldi	r20, 0xFA	; 250
    31cc:	54 e4       	ldi	r21, 0x44	; 68
    31ce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31d2:	dc 01       	movw	r26, r24
    31d4:	cb 01       	movw	r24, r22
    31d6:	8d 8b       	std	Y+21, r24	; 0x15
    31d8:	9e 8b       	std	Y+22, r25	; 0x16
    31da:	af 8b       	std	Y+23, r26	; 0x17
    31dc:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    31de:	6d 89       	ldd	r22, Y+21	; 0x15
    31e0:	7e 89       	ldd	r23, Y+22	; 0x16
    31e2:	8f 89       	ldd	r24, Y+23	; 0x17
    31e4:	98 8d       	ldd	r25, Y+24	; 0x18
    31e6:	20 e0       	ldi	r18, 0x00	; 0
    31e8:	30 e0       	ldi	r19, 0x00	; 0
    31ea:	40 e8       	ldi	r20, 0x80	; 128
    31ec:	5f e3       	ldi	r21, 0x3F	; 63
    31ee:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    31f2:	88 23       	and	r24, r24
    31f4:	2c f4       	brge	.+10     	; 0x3200 <SM_VoidServo_APP+0x31c>
		__ticks = 1;
    31f6:	81 e0       	ldi	r24, 0x01	; 1
    31f8:	90 e0       	ldi	r25, 0x00	; 0
    31fa:	9c 8b       	std	Y+20, r25	; 0x14
    31fc:	8b 8b       	std	Y+19, r24	; 0x13
    31fe:	3f c0       	rjmp	.+126    	; 0x327e <SM_VoidServo_APP+0x39a>
	else if (__tmp > 65535)
    3200:	6d 89       	ldd	r22, Y+21	; 0x15
    3202:	7e 89       	ldd	r23, Y+22	; 0x16
    3204:	8f 89       	ldd	r24, Y+23	; 0x17
    3206:	98 8d       	ldd	r25, Y+24	; 0x18
    3208:	20 e0       	ldi	r18, 0x00	; 0
    320a:	3f ef       	ldi	r19, 0xFF	; 255
    320c:	4f e7       	ldi	r20, 0x7F	; 127
    320e:	57 e4       	ldi	r21, 0x47	; 71
    3210:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3214:	18 16       	cp	r1, r24
    3216:	4c f5       	brge	.+82     	; 0x326a <SM_VoidServo_APP+0x386>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3218:	69 8d       	ldd	r22, Y+25	; 0x19
    321a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    321c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    321e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3220:	20 e0       	ldi	r18, 0x00	; 0
    3222:	30 e0       	ldi	r19, 0x00	; 0
    3224:	40 e2       	ldi	r20, 0x20	; 32
    3226:	51 e4       	ldi	r21, 0x41	; 65
    3228:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    322c:	dc 01       	movw	r26, r24
    322e:	cb 01       	movw	r24, r22
    3230:	bc 01       	movw	r22, r24
    3232:	cd 01       	movw	r24, r26
    3234:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3238:	dc 01       	movw	r26, r24
    323a:	cb 01       	movw	r24, r22
    323c:	9c 8b       	std	Y+20, r25	; 0x14
    323e:	8b 8b       	std	Y+19, r24	; 0x13
    3240:	0f c0       	rjmp	.+30     	; 0x3260 <SM_VoidServo_APP+0x37c>
    3242:	88 ec       	ldi	r24, 0xC8	; 200
    3244:	90 e0       	ldi	r25, 0x00	; 0
    3246:	9a 8b       	std	Y+18, r25	; 0x12
    3248:	89 8b       	std	Y+17, r24	; 0x11
    324a:	89 89       	ldd	r24, Y+17	; 0x11
    324c:	9a 89       	ldd	r25, Y+18	; 0x12
    324e:	01 97       	sbiw	r24, 0x01	; 1
    3250:	f1 f7       	brne	.-4      	; 0x324e <SM_VoidServo_APP+0x36a>
    3252:	9a 8b       	std	Y+18, r25	; 0x12
    3254:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3256:	8b 89       	ldd	r24, Y+19	; 0x13
    3258:	9c 89       	ldd	r25, Y+20	; 0x14
    325a:	01 97       	sbiw	r24, 0x01	; 1
    325c:	9c 8b       	std	Y+20, r25	; 0x14
    325e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3260:	8b 89       	ldd	r24, Y+19	; 0x13
    3262:	9c 89       	ldd	r25, Y+20	; 0x14
    3264:	00 97       	sbiw	r24, 0x00	; 0
    3266:	69 f7       	brne	.-38     	; 0x3242 <SM_VoidServo_APP+0x35e>
    3268:	14 c0       	rjmp	.+40     	; 0x3292 <SM_VoidServo_APP+0x3ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    326a:	6d 89       	ldd	r22, Y+21	; 0x15
    326c:	7e 89       	ldd	r23, Y+22	; 0x16
    326e:	8f 89       	ldd	r24, Y+23	; 0x17
    3270:	98 8d       	ldd	r25, Y+24	; 0x18
    3272:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3276:	dc 01       	movw	r26, r24
    3278:	cb 01       	movw	r24, r22
    327a:	9c 8b       	std	Y+20, r25	; 0x14
    327c:	8b 8b       	std	Y+19, r24	; 0x13
    327e:	8b 89       	ldd	r24, Y+19	; 0x13
    3280:	9c 89       	ldd	r25, Y+20	; 0x14
    3282:	98 8b       	std	Y+16, r25	; 0x10
    3284:	8f 87       	std	Y+15, r24	; 0x0f
    3286:	8f 85       	ldd	r24, Y+15	; 0x0f
    3288:	98 89       	ldd	r25, Y+16	; 0x10
    328a:	01 97       	sbiw	r24, 0x01	; 1
    328c:	f1 f7       	brne	.-4      	; 0x328a <SM_VoidServo_APP+0x3a6>
    328e:	98 8b       	std	Y+16, r25	; 0x10
    3290:	8f 87       	std	Y+15, r24	; 0x0f
        	  _delay_ms(700);
        	 LCD_u8WriteString("WRONG CHOICE");
    3292:	8d e6       	ldi	r24, 0x6D	; 109
    3294:	90 e0       	ldi	r25, 0x00	; 0
    3296:	0e 94 dc 15 	call	0x2bb8	; 0x2bb8 <LCD_u8WriteString>
    329a:	80 e0       	ldi	r24, 0x00	; 0
    329c:	90 e0       	ldi	r25, 0x00	; 0
    329e:	af e2       	ldi	r26, 0x2F	; 47
    32a0:	b4 e4       	ldi	r27, 0x44	; 68
    32a2:	8b 87       	std	Y+11, r24	; 0x0b
    32a4:	9c 87       	std	Y+12, r25	; 0x0c
    32a6:	ad 87       	std	Y+13, r26	; 0x0d
    32a8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    32aa:	6b 85       	ldd	r22, Y+11	; 0x0b
    32ac:	7c 85       	ldd	r23, Y+12	; 0x0c
    32ae:	8d 85       	ldd	r24, Y+13	; 0x0d
    32b0:	9e 85       	ldd	r25, Y+14	; 0x0e
    32b2:	20 e0       	ldi	r18, 0x00	; 0
    32b4:	30 e0       	ldi	r19, 0x00	; 0
    32b6:	4a ef       	ldi	r20, 0xFA	; 250
    32b8:	54 e4       	ldi	r21, 0x44	; 68
    32ba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    32be:	dc 01       	movw	r26, r24
    32c0:	cb 01       	movw	r24, r22
    32c2:	8f 83       	std	Y+7, r24	; 0x07
    32c4:	98 87       	std	Y+8, r25	; 0x08
    32c6:	a9 87       	std	Y+9, r26	; 0x09
    32c8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    32ca:	6f 81       	ldd	r22, Y+7	; 0x07
    32cc:	78 85       	ldd	r23, Y+8	; 0x08
    32ce:	89 85       	ldd	r24, Y+9	; 0x09
    32d0:	9a 85       	ldd	r25, Y+10	; 0x0a
    32d2:	20 e0       	ldi	r18, 0x00	; 0
    32d4:	30 e0       	ldi	r19, 0x00	; 0
    32d6:	40 e8       	ldi	r20, 0x80	; 128
    32d8:	5f e3       	ldi	r21, 0x3F	; 63
    32da:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    32de:	88 23       	and	r24, r24
    32e0:	2c f4       	brge	.+10     	; 0x32ec <SM_VoidServo_APP+0x408>
		__ticks = 1;
    32e2:	81 e0       	ldi	r24, 0x01	; 1
    32e4:	90 e0       	ldi	r25, 0x00	; 0
    32e6:	9e 83       	std	Y+6, r25	; 0x06
    32e8:	8d 83       	std	Y+5, r24	; 0x05
    32ea:	3f c0       	rjmp	.+126    	; 0x336a <SM_VoidServo_APP+0x486>
	else if (__tmp > 65535)
    32ec:	6f 81       	ldd	r22, Y+7	; 0x07
    32ee:	78 85       	ldd	r23, Y+8	; 0x08
    32f0:	89 85       	ldd	r24, Y+9	; 0x09
    32f2:	9a 85       	ldd	r25, Y+10	; 0x0a
    32f4:	20 e0       	ldi	r18, 0x00	; 0
    32f6:	3f ef       	ldi	r19, 0xFF	; 255
    32f8:	4f e7       	ldi	r20, 0x7F	; 127
    32fa:	57 e4       	ldi	r21, 0x47	; 71
    32fc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3300:	18 16       	cp	r1, r24
    3302:	4c f5       	brge	.+82     	; 0x3356 <SM_VoidServo_APP+0x472>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3304:	6b 85       	ldd	r22, Y+11	; 0x0b
    3306:	7c 85       	ldd	r23, Y+12	; 0x0c
    3308:	8d 85       	ldd	r24, Y+13	; 0x0d
    330a:	9e 85       	ldd	r25, Y+14	; 0x0e
    330c:	20 e0       	ldi	r18, 0x00	; 0
    330e:	30 e0       	ldi	r19, 0x00	; 0
    3310:	40 e2       	ldi	r20, 0x20	; 32
    3312:	51 e4       	ldi	r21, 0x41	; 65
    3314:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3318:	dc 01       	movw	r26, r24
    331a:	cb 01       	movw	r24, r22
    331c:	bc 01       	movw	r22, r24
    331e:	cd 01       	movw	r24, r26
    3320:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3324:	dc 01       	movw	r26, r24
    3326:	cb 01       	movw	r24, r22
    3328:	9e 83       	std	Y+6, r25	; 0x06
    332a:	8d 83       	std	Y+5, r24	; 0x05
    332c:	0f c0       	rjmp	.+30     	; 0x334c <SM_VoidServo_APP+0x468>
    332e:	88 ec       	ldi	r24, 0xC8	; 200
    3330:	90 e0       	ldi	r25, 0x00	; 0
    3332:	9c 83       	std	Y+4, r25	; 0x04
    3334:	8b 83       	std	Y+3, r24	; 0x03
    3336:	8b 81       	ldd	r24, Y+3	; 0x03
    3338:	9c 81       	ldd	r25, Y+4	; 0x04
    333a:	01 97       	sbiw	r24, 0x01	; 1
    333c:	f1 f7       	brne	.-4      	; 0x333a <SM_VoidServo_APP+0x456>
    333e:	9c 83       	std	Y+4, r25	; 0x04
    3340:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3342:	8d 81       	ldd	r24, Y+5	; 0x05
    3344:	9e 81       	ldd	r25, Y+6	; 0x06
    3346:	01 97       	sbiw	r24, 0x01	; 1
    3348:	9e 83       	std	Y+6, r25	; 0x06
    334a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    334c:	8d 81       	ldd	r24, Y+5	; 0x05
    334e:	9e 81       	ldd	r25, Y+6	; 0x06
    3350:	00 97       	sbiw	r24, 0x00	; 0
    3352:	69 f7       	brne	.-38     	; 0x332e <SM_VoidServo_APP+0x44a>
    3354:	14 c0       	rjmp	.+40     	; 0x337e <SM_VoidServo_APP+0x49a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3356:	6f 81       	ldd	r22, Y+7	; 0x07
    3358:	78 85       	ldd	r23, Y+8	; 0x08
    335a:	89 85       	ldd	r24, Y+9	; 0x09
    335c:	9a 85       	ldd	r25, Y+10	; 0x0a
    335e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3362:	dc 01       	movw	r26, r24
    3364:	cb 01       	movw	r24, r22
    3366:	9e 83       	std	Y+6, r25	; 0x06
    3368:	8d 83       	std	Y+5, r24	; 0x05
    336a:	8d 81       	ldd	r24, Y+5	; 0x05
    336c:	9e 81       	ldd	r25, Y+6	; 0x06
    336e:	9a 83       	std	Y+2, r25	; 0x02
    3370:	89 83       	std	Y+1, r24	; 0x01
    3372:	89 81       	ldd	r24, Y+1	; 0x01
    3374:	9a 81       	ldd	r25, Y+2	; 0x02
    3376:	01 97       	sbiw	r24, 0x01	; 1
    3378:	f1 f7       	brne	.-4      	; 0x3376 <SM_VoidServo_APP+0x492>
    337a:	9a 83       	std	Y+2, r25	; 0x02
    337c:	89 83       	std	Y+1, r24	; 0x01
        	 _delay_ms(700);
        	 LCD_VoidGoToRowCol(1,0);
    337e:	81 e0       	ldi	r24, 0x01	; 1
    3380:	60 e0       	ldi	r22, 0x00	; 0
    3382:	0e 94 24 15 	call	0x2a48	; 0x2a48 <LCD_VoidGoToRowCol>
        	 LCD_u8WriteString("RANGE -90:90");
    3386:	8a e7       	ldi	r24, 0x7A	; 122
    3388:	90 e0       	ldi	r25, 0x00	; 0
    338a:	0e 94 dc 15 	call	0x2bb8	; 0x2bb8 <LCD_u8WriteString>
    338e:	0c c0       	rjmp	.+24     	; 0x33a8 <SM_VoidServo_APP+0x4c4>

        }
    }
    else if (Pressed_Key == 'c')
    3390:	8a ad       	ldd	r24, Y+58	; 0x3a
    3392:	83 36       	cpi	r24, 0x63	; 99
    3394:	49 f4       	brne	.+18     	; 0x33a8 <SM_VoidServo_APP+0x4c4>
    {  // if clear
        LCD_VoidSendCommand(1);
    3396:	81 e0       	ldi	r24, 0x01	; 1
    3398:	0e 94 b0 11 	call	0x2360	; 0x2360 <LCD_VoidSendCommand>
        mine = 0;
    339c:	10 92 9b 02 	sts	0x029B, r1
    33a0:	10 92 9a 02 	sts	0x029A, r1
        isNegative = 0;
    33a4:	10 92 7b 02 	sts	0x027B, r1
    }

}
    33a8:	ea 96       	adiw	r28, 0x3a	; 58
    33aa:	0f b6       	in	r0, 0x3f	; 63
    33ac:	f8 94       	cli
    33ae:	de bf       	out	0x3e, r29	; 62
    33b0:	0f be       	out	0x3f, r0	; 63
    33b2:	cd bf       	out	0x3d, r28	; 61
    33b4:	cf 91       	pop	r28
    33b6:	df 91       	pop	r29
    33b8:	08 95       	ret

000033ba <SM_U8LoginSys>:

	static u8 Select=0;
	u8 SM_U8LoginSys(void)
	 {
    33ba:	0f 93       	push	r16
    33bc:	1f 93       	push	r17
    33be:	df 93       	push	r29
    33c0:	cf 93       	push	r28
    33c2:	cd b7       	in	r28, 0x3d	; 61
    33c4:	de b7       	in	r29, 0x3e	; 62
    33c6:	c8 5d       	subi	r28, 0xD8	; 216
    33c8:	d0 40       	sbci	r29, 0x00	; 0
    33ca:	0f b6       	in	r0, 0x3f	; 63
    33cc:	f8 94       	cli
    33ce:	de bf       	out	0x3e, r29	; 62
    33d0:	0f be       	out	0x3f, r0	; 63
    33d2:	cd bf       	out	0x3d, r28	; 61
		static u8 Local_U8ErrorState = ERROR_STATE_NOK;
		static u16 User_Pass=0;
	lable:	LCD_u8WriteString("USER NUMBER = ");
    33d4:	87 e8       	ldi	r24, 0x87	; 135
    33d6:	90 e0       	ldi	r25, 0x00	; 0
    33d8:	0e 94 dc 15 	call	0x2bb8	; 0x2bb8 <LCD_u8WriteString>
    33dc:	fe 01       	movw	r30, r28
    33de:	e1 53       	subi	r30, 0x31	; 49
    33e0:	ff 4f       	sbci	r31, 0xFF	; 255
    33e2:	80 e0       	ldi	r24, 0x00	; 0
    33e4:	90 e0       	ldi	r25, 0x00	; 0
    33e6:	af e2       	ldi	r26, 0x2F	; 47
    33e8:	b4 e4       	ldi	r27, 0x44	; 68
    33ea:	80 83       	st	Z, r24
    33ec:	91 83       	std	Z+1, r25	; 0x01
    33ee:	a2 83       	std	Z+2, r26	; 0x02
    33f0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    33f2:	8e 01       	movw	r16, r28
    33f4:	05 53       	subi	r16, 0x35	; 53
    33f6:	1f 4f       	sbci	r17, 0xFF	; 255
    33f8:	fe 01       	movw	r30, r28
    33fa:	e1 53       	subi	r30, 0x31	; 49
    33fc:	ff 4f       	sbci	r31, 0xFF	; 255
    33fe:	60 81       	ld	r22, Z
    3400:	71 81       	ldd	r23, Z+1	; 0x01
    3402:	82 81       	ldd	r24, Z+2	; 0x02
    3404:	93 81       	ldd	r25, Z+3	; 0x03
    3406:	20 e0       	ldi	r18, 0x00	; 0
    3408:	30 e0       	ldi	r19, 0x00	; 0
    340a:	4a ef       	ldi	r20, 0xFA	; 250
    340c:	54 e4       	ldi	r21, 0x44	; 68
    340e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3412:	dc 01       	movw	r26, r24
    3414:	cb 01       	movw	r24, r22
    3416:	f8 01       	movw	r30, r16
    3418:	80 83       	st	Z, r24
    341a:	91 83       	std	Z+1, r25	; 0x01
    341c:	a2 83       	std	Z+2, r26	; 0x02
    341e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3420:	fe 01       	movw	r30, r28
    3422:	e5 53       	subi	r30, 0x35	; 53
    3424:	ff 4f       	sbci	r31, 0xFF	; 255
    3426:	60 81       	ld	r22, Z
    3428:	71 81       	ldd	r23, Z+1	; 0x01
    342a:	82 81       	ldd	r24, Z+2	; 0x02
    342c:	93 81       	ldd	r25, Z+3	; 0x03
    342e:	20 e0       	ldi	r18, 0x00	; 0
    3430:	30 e0       	ldi	r19, 0x00	; 0
    3432:	40 e8       	ldi	r20, 0x80	; 128
    3434:	5f e3       	ldi	r21, 0x3F	; 63
    3436:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    343a:	88 23       	and	r24, r24
    343c:	44 f4       	brge	.+16     	; 0x344e <SM_U8LoginSys+0x94>
		__ticks = 1;
    343e:	fe 01       	movw	r30, r28
    3440:	e7 53       	subi	r30, 0x37	; 55
    3442:	ff 4f       	sbci	r31, 0xFF	; 255
    3444:	81 e0       	ldi	r24, 0x01	; 1
    3446:	90 e0       	ldi	r25, 0x00	; 0
    3448:	91 83       	std	Z+1, r25	; 0x01
    344a:	80 83       	st	Z, r24
    344c:	64 c0       	rjmp	.+200    	; 0x3516 <SM_U8LoginSys+0x15c>
	else if (__tmp > 65535)
    344e:	fe 01       	movw	r30, r28
    3450:	e5 53       	subi	r30, 0x35	; 53
    3452:	ff 4f       	sbci	r31, 0xFF	; 255
    3454:	60 81       	ld	r22, Z
    3456:	71 81       	ldd	r23, Z+1	; 0x01
    3458:	82 81       	ldd	r24, Z+2	; 0x02
    345a:	93 81       	ldd	r25, Z+3	; 0x03
    345c:	20 e0       	ldi	r18, 0x00	; 0
    345e:	3f ef       	ldi	r19, 0xFF	; 255
    3460:	4f e7       	ldi	r20, 0x7F	; 127
    3462:	57 e4       	ldi	r21, 0x47	; 71
    3464:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3468:	18 16       	cp	r1, r24
    346a:	0c f0       	brlt	.+2      	; 0x346e <SM_U8LoginSys+0xb4>
    346c:	43 c0       	rjmp	.+134    	; 0x34f4 <SM_U8LoginSys+0x13a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    346e:	fe 01       	movw	r30, r28
    3470:	e1 53       	subi	r30, 0x31	; 49
    3472:	ff 4f       	sbci	r31, 0xFF	; 255
    3474:	60 81       	ld	r22, Z
    3476:	71 81       	ldd	r23, Z+1	; 0x01
    3478:	82 81       	ldd	r24, Z+2	; 0x02
    347a:	93 81       	ldd	r25, Z+3	; 0x03
    347c:	20 e0       	ldi	r18, 0x00	; 0
    347e:	30 e0       	ldi	r19, 0x00	; 0
    3480:	40 e2       	ldi	r20, 0x20	; 32
    3482:	51 e4       	ldi	r21, 0x41	; 65
    3484:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3488:	dc 01       	movw	r26, r24
    348a:	cb 01       	movw	r24, r22
    348c:	8e 01       	movw	r16, r28
    348e:	07 53       	subi	r16, 0x37	; 55
    3490:	1f 4f       	sbci	r17, 0xFF	; 255
    3492:	bc 01       	movw	r22, r24
    3494:	cd 01       	movw	r24, r26
    3496:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    349a:	dc 01       	movw	r26, r24
    349c:	cb 01       	movw	r24, r22
    349e:	f8 01       	movw	r30, r16
    34a0:	91 83       	std	Z+1, r25	; 0x01
    34a2:	80 83       	st	Z, r24
    34a4:	1f c0       	rjmp	.+62     	; 0x34e4 <SM_U8LoginSys+0x12a>
    34a6:	fe 01       	movw	r30, r28
    34a8:	e9 53       	subi	r30, 0x39	; 57
    34aa:	ff 4f       	sbci	r31, 0xFF	; 255
    34ac:	88 ec       	ldi	r24, 0xC8	; 200
    34ae:	90 e0       	ldi	r25, 0x00	; 0
    34b0:	91 83       	std	Z+1, r25	; 0x01
    34b2:	80 83       	st	Z, r24
    34b4:	fe 01       	movw	r30, r28
    34b6:	e9 53       	subi	r30, 0x39	; 57
    34b8:	ff 4f       	sbci	r31, 0xFF	; 255
    34ba:	80 81       	ld	r24, Z
    34bc:	91 81       	ldd	r25, Z+1	; 0x01
    34be:	01 97       	sbiw	r24, 0x01	; 1
    34c0:	f1 f7       	brne	.-4      	; 0x34be <SM_U8LoginSys+0x104>
    34c2:	fe 01       	movw	r30, r28
    34c4:	e9 53       	subi	r30, 0x39	; 57
    34c6:	ff 4f       	sbci	r31, 0xFF	; 255
    34c8:	91 83       	std	Z+1, r25	; 0x01
    34ca:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    34cc:	de 01       	movw	r26, r28
    34ce:	a7 53       	subi	r26, 0x37	; 55
    34d0:	bf 4f       	sbci	r27, 0xFF	; 255
    34d2:	fe 01       	movw	r30, r28
    34d4:	e7 53       	subi	r30, 0x37	; 55
    34d6:	ff 4f       	sbci	r31, 0xFF	; 255
    34d8:	80 81       	ld	r24, Z
    34da:	91 81       	ldd	r25, Z+1	; 0x01
    34dc:	01 97       	sbiw	r24, 0x01	; 1
    34de:	11 96       	adiw	r26, 0x01	; 1
    34e0:	9c 93       	st	X, r25
    34e2:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    34e4:	fe 01       	movw	r30, r28
    34e6:	e7 53       	subi	r30, 0x37	; 55
    34e8:	ff 4f       	sbci	r31, 0xFF	; 255
    34ea:	80 81       	ld	r24, Z
    34ec:	91 81       	ldd	r25, Z+1	; 0x01
    34ee:	00 97       	sbiw	r24, 0x00	; 0
    34f0:	d1 f6       	brne	.-76     	; 0x34a6 <SM_U8LoginSys+0xec>
    34f2:	27 c0       	rjmp	.+78     	; 0x3542 <SM_U8LoginSys+0x188>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    34f4:	8e 01       	movw	r16, r28
    34f6:	07 53       	subi	r16, 0x37	; 55
    34f8:	1f 4f       	sbci	r17, 0xFF	; 255
    34fa:	fe 01       	movw	r30, r28
    34fc:	e5 53       	subi	r30, 0x35	; 53
    34fe:	ff 4f       	sbci	r31, 0xFF	; 255
    3500:	60 81       	ld	r22, Z
    3502:	71 81       	ldd	r23, Z+1	; 0x01
    3504:	82 81       	ldd	r24, Z+2	; 0x02
    3506:	93 81       	ldd	r25, Z+3	; 0x03
    3508:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    350c:	dc 01       	movw	r26, r24
    350e:	cb 01       	movw	r24, r22
    3510:	f8 01       	movw	r30, r16
    3512:	91 83       	std	Z+1, r25	; 0x01
    3514:	80 83       	st	Z, r24
    3516:	de 01       	movw	r26, r28
    3518:	ab 53       	subi	r26, 0x3B	; 59
    351a:	bf 4f       	sbci	r27, 0xFF	; 255
    351c:	fe 01       	movw	r30, r28
    351e:	e7 53       	subi	r30, 0x37	; 55
    3520:	ff 4f       	sbci	r31, 0xFF	; 255
    3522:	80 81       	ld	r24, Z
    3524:	91 81       	ldd	r25, Z+1	; 0x01
    3526:	8d 93       	st	X+, r24
    3528:	9c 93       	st	X, r25
    352a:	fe 01       	movw	r30, r28
    352c:	eb 53       	subi	r30, 0x3B	; 59
    352e:	ff 4f       	sbci	r31, 0xFF	; 255
    3530:	80 81       	ld	r24, Z
    3532:	91 81       	ldd	r25, Z+1	; 0x01
    3534:	01 97       	sbiw	r24, 0x01	; 1
    3536:	f1 f7       	brne	.-4      	; 0x3534 <SM_U8LoginSys+0x17a>
    3538:	fe 01       	movw	r30, r28
    353a:	eb 53       	subi	r30, 0x3B	; 59
    353c:	ff 4f       	sbci	r31, 0xFF	; 255
    353e:	91 83       	std	Z+1, r25	; 0x01
    3540:	80 83       	st	Z, r24
		_delay_ms(700);


		while(1)
		{
		KPAD_U8GetPressedKey(&Select);
    3542:	8c e9       	ldi	r24, 0x9C	; 156
    3544:	92 e0       	ldi	r25, 0x02	; 2
    3546:	0e 94 45 0d 	call	0x1a8a	; 0x1a8a <KPAD_U8GetPressedKey>

		if((Select !=255) &&(Select != '='))
    354a:	80 91 9c 02 	lds	r24, 0x029C
    354e:	8f 3f       	cpi	r24, 0xFF	; 255
    3550:	c1 f3       	breq	.-16     	; 0x3542 <SM_U8LoginSys+0x188>
    3552:	80 91 9c 02 	lds	r24, 0x029C
    3556:	8d 33       	cpi	r24, 0x3D	; 61
    3558:	a1 f3       	breq	.-24     	; 0x3542 <SM_U8LoginSys+0x188>
		{

			if((Select != 'c'))
    355a:	80 91 9c 02 	lds	r24, 0x029C
    355e:	83 36       	cpi	r24, 0x63	; 99
    3560:	21 f0       	breq	.+8      	; 0x356a <SM_U8LoginSys+0x1b0>
			{
				LCD_VoidSendData(Select);
    3562:	80 91 9c 02 	lds	r24, 0x029C
    3566:	0e 94 6a 13 	call	0x26d4	; 0x26d4 <LCD_VoidSendData>
			}


			switch(Select)
    356a:	80 91 9c 02 	lds	r24, 0x029C
    356e:	28 2f       	mov	r18, r24
    3570:	30 e0       	ldi	r19, 0x00	; 0
    3572:	c9 52       	subi	r28, 0x29	; 41
    3574:	df 4f       	sbci	r29, 0xFF	; 255
    3576:	39 83       	std	Y+1, r19	; 0x01
    3578:	28 83       	st	Y, r18
    357a:	c7 5d       	subi	r28, 0xD7	; 215
    357c:	d0 40       	sbci	r29, 0x00	; 0
    357e:	c9 52       	subi	r28, 0x29	; 41
    3580:	df 4f       	sbci	r29, 0xFF	; 255
    3582:	88 81       	ld	r24, Y
    3584:	99 81       	ldd	r25, Y+1	; 0x01
    3586:	c7 5d       	subi	r28, 0xD7	; 215
    3588:	d0 40       	sbci	r29, 0x00	; 0
    358a:	81 33       	cpi	r24, 0x31	; 49
    358c:	91 05       	cpc	r25, r1
    358e:	09 f4       	brne	.+2      	; 0x3592 <SM_U8LoginSys+0x1d8>
    3590:	75 c3       	rjmp	.+1770   	; 0x3c7c <SM_U8LoginSys+0x8c2>
    3592:	c9 52       	subi	r28, 0x29	; 41
    3594:	df 4f       	sbci	r29, 0xFF	; 255
    3596:	e8 81       	ld	r30, Y
    3598:	f9 81       	ldd	r31, Y+1	; 0x01
    359a:	c7 5d       	subi	r28, 0xD7	; 215
    359c:	d0 40       	sbci	r29, 0x00	; 0
    359e:	e2 33       	cpi	r30, 0x32	; 50
    35a0:	f1 05       	cpc	r31, r1
    35a2:	5c f4       	brge	.+22     	; 0x35ba <SM_U8LoginSys+0x200>
    35a4:	c9 52       	subi	r28, 0x29	; 41
    35a6:	df 4f       	sbci	r29, 0xFF	; 255
    35a8:	28 81       	ld	r18, Y
    35aa:	39 81       	ldd	r19, Y+1	; 0x01
    35ac:	c7 5d       	subi	r28, 0xD7	; 215
    35ae:	d0 40       	sbci	r29, 0x00	; 0
    35b0:	20 33       	cpi	r18, 0x30	; 48
    35b2:	31 05       	cpc	r19, r1
    35b4:	c9 f0       	breq	.+50     	; 0x35e8 <SM_U8LoginSys+0x22e>
    35b6:	0c 94 98 24 	jmp	0x4930	; 0x4930 <SM_U8LoginSys+0x1576>
    35ba:	c9 52       	subi	r28, 0x29	; 41
    35bc:	df 4f       	sbci	r29, 0xFF	; 255
    35be:	88 81       	ld	r24, Y
    35c0:	99 81       	ldd	r25, Y+1	; 0x01
    35c2:	c7 5d       	subi	r28, 0xD7	; 215
    35c4:	d0 40       	sbci	r29, 0x00	; 0
    35c6:	82 33       	cpi	r24, 0x32	; 50
    35c8:	91 05       	cpc	r25, r1
    35ca:	09 f4       	brne	.+2      	; 0x35ce <SM_U8LoginSys+0x214>
    35cc:	a0 c6       	rjmp	.+3392   	; 0x430e <SM_U8LoginSys+0xf54>
    35ce:	c9 52       	subi	r28, 0x29	; 41
    35d0:	df 4f       	sbci	r29, 0xFF	; 255
    35d2:	e8 81       	ld	r30, Y
    35d4:	f9 81       	ldd	r31, Y+1	; 0x01
    35d6:	c7 5d       	subi	r28, 0xD7	; 215
    35d8:	d0 40       	sbci	r29, 0x00	; 0
    35da:	e3 36       	cpi	r30, 0x63	; 99
    35dc:	f1 05       	cpc	r31, r1
    35de:	11 f4       	brne	.+4      	; 0x35e4 <SM_U8LoginSys+0x22a>
    35e0:	0c 94 21 24 	jmp	0x4842	; 0x4842 <SM_U8LoginSys+0x1488>
    35e4:	0c 94 98 24 	jmp	0x4930	; 0x4930 <SM_U8LoginSys+0x1576>
			{
				case '0':
				{
					LCD_VoidGoToRowCol(1,0);
    35e8:	81 e0       	ldi	r24, 0x01	; 1
    35ea:	60 e0       	ldi	r22, 0x00	; 0
    35ec:	0e 94 24 15 	call	0x2a48	; 0x2a48 <LCD_VoidGoToRowCol>
					LCD_u8WriteString("WELCOME USER_0");
    35f0:	86 e9       	ldi	r24, 0x96	; 150
    35f2:	90 e0       	ldi	r25, 0x00	; 0
    35f4:	0e 94 dc 15 	call	0x2bb8	; 0x2bb8 <LCD_u8WriteString>
    35f8:	fe 01       	movw	r30, r28
    35fa:	ef 53       	subi	r30, 0x3F	; 63
    35fc:	ff 4f       	sbci	r31, 0xFF	; 255
    35fe:	80 e0       	ldi	r24, 0x00	; 0
    3600:	90 e0       	ldi	r25, 0x00	; 0
    3602:	aa e7       	ldi	r26, 0x7A	; 122
    3604:	b4 e4       	ldi	r27, 0x44	; 68
    3606:	80 83       	st	Z, r24
    3608:	91 83       	std	Z+1, r25	; 0x01
    360a:	a2 83       	std	Z+2, r26	; 0x02
    360c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    360e:	8e 01       	movw	r16, r28
    3610:	03 54       	subi	r16, 0x43	; 67
    3612:	1f 4f       	sbci	r17, 0xFF	; 255
    3614:	fe 01       	movw	r30, r28
    3616:	ef 53       	subi	r30, 0x3F	; 63
    3618:	ff 4f       	sbci	r31, 0xFF	; 255
    361a:	60 81       	ld	r22, Z
    361c:	71 81       	ldd	r23, Z+1	; 0x01
    361e:	82 81       	ldd	r24, Z+2	; 0x02
    3620:	93 81       	ldd	r25, Z+3	; 0x03
    3622:	20 e0       	ldi	r18, 0x00	; 0
    3624:	30 e0       	ldi	r19, 0x00	; 0
    3626:	4a ef       	ldi	r20, 0xFA	; 250
    3628:	54 e4       	ldi	r21, 0x44	; 68
    362a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    362e:	dc 01       	movw	r26, r24
    3630:	cb 01       	movw	r24, r22
    3632:	f8 01       	movw	r30, r16
    3634:	80 83       	st	Z, r24
    3636:	91 83       	std	Z+1, r25	; 0x01
    3638:	a2 83       	std	Z+2, r26	; 0x02
    363a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    363c:	fe 01       	movw	r30, r28
    363e:	e3 54       	subi	r30, 0x43	; 67
    3640:	ff 4f       	sbci	r31, 0xFF	; 255
    3642:	60 81       	ld	r22, Z
    3644:	71 81       	ldd	r23, Z+1	; 0x01
    3646:	82 81       	ldd	r24, Z+2	; 0x02
    3648:	93 81       	ldd	r25, Z+3	; 0x03
    364a:	20 e0       	ldi	r18, 0x00	; 0
    364c:	30 e0       	ldi	r19, 0x00	; 0
    364e:	40 e8       	ldi	r20, 0x80	; 128
    3650:	5f e3       	ldi	r21, 0x3F	; 63
    3652:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3656:	88 23       	and	r24, r24
    3658:	44 f4       	brge	.+16     	; 0x366a <SM_U8LoginSys+0x2b0>
		__ticks = 1;
    365a:	fe 01       	movw	r30, r28
    365c:	e5 54       	subi	r30, 0x45	; 69
    365e:	ff 4f       	sbci	r31, 0xFF	; 255
    3660:	81 e0       	ldi	r24, 0x01	; 1
    3662:	90 e0       	ldi	r25, 0x00	; 0
    3664:	91 83       	std	Z+1, r25	; 0x01
    3666:	80 83       	st	Z, r24
    3668:	64 c0       	rjmp	.+200    	; 0x3732 <SM_U8LoginSys+0x378>
	else if (__tmp > 65535)
    366a:	fe 01       	movw	r30, r28
    366c:	e3 54       	subi	r30, 0x43	; 67
    366e:	ff 4f       	sbci	r31, 0xFF	; 255
    3670:	60 81       	ld	r22, Z
    3672:	71 81       	ldd	r23, Z+1	; 0x01
    3674:	82 81       	ldd	r24, Z+2	; 0x02
    3676:	93 81       	ldd	r25, Z+3	; 0x03
    3678:	20 e0       	ldi	r18, 0x00	; 0
    367a:	3f ef       	ldi	r19, 0xFF	; 255
    367c:	4f e7       	ldi	r20, 0x7F	; 127
    367e:	57 e4       	ldi	r21, 0x47	; 71
    3680:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3684:	18 16       	cp	r1, r24
    3686:	0c f0       	brlt	.+2      	; 0x368a <SM_U8LoginSys+0x2d0>
    3688:	43 c0       	rjmp	.+134    	; 0x3710 <SM_U8LoginSys+0x356>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    368a:	fe 01       	movw	r30, r28
    368c:	ef 53       	subi	r30, 0x3F	; 63
    368e:	ff 4f       	sbci	r31, 0xFF	; 255
    3690:	60 81       	ld	r22, Z
    3692:	71 81       	ldd	r23, Z+1	; 0x01
    3694:	82 81       	ldd	r24, Z+2	; 0x02
    3696:	93 81       	ldd	r25, Z+3	; 0x03
    3698:	20 e0       	ldi	r18, 0x00	; 0
    369a:	30 e0       	ldi	r19, 0x00	; 0
    369c:	40 e2       	ldi	r20, 0x20	; 32
    369e:	51 e4       	ldi	r21, 0x41	; 65
    36a0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    36a4:	dc 01       	movw	r26, r24
    36a6:	cb 01       	movw	r24, r22
    36a8:	8e 01       	movw	r16, r28
    36aa:	05 54       	subi	r16, 0x45	; 69
    36ac:	1f 4f       	sbci	r17, 0xFF	; 255
    36ae:	bc 01       	movw	r22, r24
    36b0:	cd 01       	movw	r24, r26
    36b2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    36b6:	dc 01       	movw	r26, r24
    36b8:	cb 01       	movw	r24, r22
    36ba:	f8 01       	movw	r30, r16
    36bc:	91 83       	std	Z+1, r25	; 0x01
    36be:	80 83       	st	Z, r24
    36c0:	1f c0       	rjmp	.+62     	; 0x3700 <SM_U8LoginSys+0x346>
    36c2:	fe 01       	movw	r30, r28
    36c4:	e7 54       	subi	r30, 0x47	; 71
    36c6:	ff 4f       	sbci	r31, 0xFF	; 255
    36c8:	88 ec       	ldi	r24, 0xC8	; 200
    36ca:	90 e0       	ldi	r25, 0x00	; 0
    36cc:	91 83       	std	Z+1, r25	; 0x01
    36ce:	80 83       	st	Z, r24
    36d0:	fe 01       	movw	r30, r28
    36d2:	e7 54       	subi	r30, 0x47	; 71
    36d4:	ff 4f       	sbci	r31, 0xFF	; 255
    36d6:	80 81       	ld	r24, Z
    36d8:	91 81       	ldd	r25, Z+1	; 0x01
    36da:	01 97       	sbiw	r24, 0x01	; 1
    36dc:	f1 f7       	brne	.-4      	; 0x36da <SM_U8LoginSys+0x320>
    36de:	fe 01       	movw	r30, r28
    36e0:	e7 54       	subi	r30, 0x47	; 71
    36e2:	ff 4f       	sbci	r31, 0xFF	; 255
    36e4:	91 83       	std	Z+1, r25	; 0x01
    36e6:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    36e8:	de 01       	movw	r26, r28
    36ea:	a5 54       	subi	r26, 0x45	; 69
    36ec:	bf 4f       	sbci	r27, 0xFF	; 255
    36ee:	fe 01       	movw	r30, r28
    36f0:	e5 54       	subi	r30, 0x45	; 69
    36f2:	ff 4f       	sbci	r31, 0xFF	; 255
    36f4:	80 81       	ld	r24, Z
    36f6:	91 81       	ldd	r25, Z+1	; 0x01
    36f8:	01 97       	sbiw	r24, 0x01	; 1
    36fa:	11 96       	adiw	r26, 0x01	; 1
    36fc:	9c 93       	st	X, r25
    36fe:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3700:	fe 01       	movw	r30, r28
    3702:	e5 54       	subi	r30, 0x45	; 69
    3704:	ff 4f       	sbci	r31, 0xFF	; 255
    3706:	80 81       	ld	r24, Z
    3708:	91 81       	ldd	r25, Z+1	; 0x01
    370a:	00 97       	sbiw	r24, 0x00	; 0
    370c:	d1 f6       	brne	.-76     	; 0x36c2 <SM_U8LoginSys+0x308>
    370e:	27 c0       	rjmp	.+78     	; 0x375e <SM_U8LoginSys+0x3a4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3710:	8e 01       	movw	r16, r28
    3712:	05 54       	subi	r16, 0x45	; 69
    3714:	1f 4f       	sbci	r17, 0xFF	; 255
    3716:	fe 01       	movw	r30, r28
    3718:	e3 54       	subi	r30, 0x43	; 67
    371a:	ff 4f       	sbci	r31, 0xFF	; 255
    371c:	60 81       	ld	r22, Z
    371e:	71 81       	ldd	r23, Z+1	; 0x01
    3720:	82 81       	ldd	r24, Z+2	; 0x02
    3722:	93 81       	ldd	r25, Z+3	; 0x03
    3724:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3728:	dc 01       	movw	r26, r24
    372a:	cb 01       	movw	r24, r22
    372c:	f8 01       	movw	r30, r16
    372e:	91 83       	std	Z+1, r25	; 0x01
    3730:	80 83       	st	Z, r24
    3732:	de 01       	movw	r26, r28
    3734:	a9 54       	subi	r26, 0x49	; 73
    3736:	bf 4f       	sbci	r27, 0xFF	; 255
    3738:	fe 01       	movw	r30, r28
    373a:	e5 54       	subi	r30, 0x45	; 69
    373c:	ff 4f       	sbci	r31, 0xFF	; 255
    373e:	80 81       	ld	r24, Z
    3740:	91 81       	ldd	r25, Z+1	; 0x01
    3742:	8d 93       	st	X+, r24
    3744:	9c 93       	st	X, r25
    3746:	fe 01       	movw	r30, r28
    3748:	e9 54       	subi	r30, 0x49	; 73
    374a:	ff 4f       	sbci	r31, 0xFF	; 255
    374c:	80 81       	ld	r24, Z
    374e:	91 81       	ldd	r25, Z+1	; 0x01
    3750:	01 97       	sbiw	r24, 0x01	; 1
    3752:	f1 f7       	brne	.-4      	; 0x3750 <SM_U8LoginSys+0x396>
    3754:	fe 01       	movw	r30, r28
    3756:	e9 54       	subi	r30, 0x49	; 73
    3758:	ff 4f       	sbci	r31, 0xFF	; 255
    375a:	91 83       	std	Z+1, r25	; 0x01
    375c:	80 83       	st	Z, r24

					_delay_ms(1000);
					LCD_VoidSendCommand(1);
    375e:	81 e0       	ldi	r24, 0x01	; 1
    3760:	0e 94 b0 11 	call	0x2360	; 0x2360 <LCD_VoidSendCommand>
						for(u8 i=0;i<3;i++)
    3764:	fe 01       	movw	r30, r28
    3766:	eb 52       	subi	r30, 0x2B	; 43
    3768:	ff 4f       	sbci	r31, 0xFF	; 255
    376a:	10 82       	st	Z, r1
    376c:	7f c2       	rjmp	.+1278   	; 0x3c6c <SM_U8LoginSys+0x8b2>
					{
						LCD_u8WriteString("ENTER YOUR PASS");
    376e:	85 ea       	ldi	r24, 0xA5	; 165
    3770:	90 e0       	ldi	r25, 0x00	; 0
    3772:	0e 94 dc 15 	call	0x2bb8	; 0x2bb8 <LCD_u8WriteString>
    3776:	fe 01       	movw	r30, r28
    3778:	ed 54       	subi	r30, 0x4D	; 77
    377a:	ff 4f       	sbci	r31, 0xFF	; 255
    377c:	80 e0       	ldi	r24, 0x00	; 0
    377e:	90 e0       	ldi	r25, 0x00	; 0
    3780:	af e2       	ldi	r26, 0x2F	; 47
    3782:	b4 e4       	ldi	r27, 0x44	; 68
    3784:	80 83       	st	Z, r24
    3786:	91 83       	std	Z+1, r25	; 0x01
    3788:	a2 83       	std	Z+2, r26	; 0x02
    378a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    378c:	8e 01       	movw	r16, r28
    378e:	01 55       	subi	r16, 0x51	; 81
    3790:	1f 4f       	sbci	r17, 0xFF	; 255
    3792:	fe 01       	movw	r30, r28
    3794:	ed 54       	subi	r30, 0x4D	; 77
    3796:	ff 4f       	sbci	r31, 0xFF	; 255
    3798:	60 81       	ld	r22, Z
    379a:	71 81       	ldd	r23, Z+1	; 0x01
    379c:	82 81       	ldd	r24, Z+2	; 0x02
    379e:	93 81       	ldd	r25, Z+3	; 0x03
    37a0:	20 e0       	ldi	r18, 0x00	; 0
    37a2:	30 e0       	ldi	r19, 0x00	; 0
    37a4:	4a ef       	ldi	r20, 0xFA	; 250
    37a6:	54 e4       	ldi	r21, 0x44	; 68
    37a8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    37ac:	dc 01       	movw	r26, r24
    37ae:	cb 01       	movw	r24, r22
    37b0:	f8 01       	movw	r30, r16
    37b2:	80 83       	st	Z, r24
    37b4:	91 83       	std	Z+1, r25	; 0x01
    37b6:	a2 83       	std	Z+2, r26	; 0x02
    37b8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    37ba:	fe 01       	movw	r30, r28
    37bc:	e1 55       	subi	r30, 0x51	; 81
    37be:	ff 4f       	sbci	r31, 0xFF	; 255
    37c0:	60 81       	ld	r22, Z
    37c2:	71 81       	ldd	r23, Z+1	; 0x01
    37c4:	82 81       	ldd	r24, Z+2	; 0x02
    37c6:	93 81       	ldd	r25, Z+3	; 0x03
    37c8:	20 e0       	ldi	r18, 0x00	; 0
    37ca:	30 e0       	ldi	r19, 0x00	; 0
    37cc:	40 e8       	ldi	r20, 0x80	; 128
    37ce:	5f e3       	ldi	r21, 0x3F	; 63
    37d0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    37d4:	88 23       	and	r24, r24
    37d6:	44 f4       	brge	.+16     	; 0x37e8 <SM_U8LoginSys+0x42e>
		__ticks = 1;
    37d8:	fe 01       	movw	r30, r28
    37da:	e3 55       	subi	r30, 0x53	; 83
    37dc:	ff 4f       	sbci	r31, 0xFF	; 255
    37de:	81 e0       	ldi	r24, 0x01	; 1
    37e0:	90 e0       	ldi	r25, 0x00	; 0
    37e2:	91 83       	std	Z+1, r25	; 0x01
    37e4:	80 83       	st	Z, r24
    37e6:	64 c0       	rjmp	.+200    	; 0x38b0 <SM_U8LoginSys+0x4f6>
	else if (__tmp > 65535)
    37e8:	fe 01       	movw	r30, r28
    37ea:	e1 55       	subi	r30, 0x51	; 81
    37ec:	ff 4f       	sbci	r31, 0xFF	; 255
    37ee:	60 81       	ld	r22, Z
    37f0:	71 81       	ldd	r23, Z+1	; 0x01
    37f2:	82 81       	ldd	r24, Z+2	; 0x02
    37f4:	93 81       	ldd	r25, Z+3	; 0x03
    37f6:	20 e0       	ldi	r18, 0x00	; 0
    37f8:	3f ef       	ldi	r19, 0xFF	; 255
    37fa:	4f e7       	ldi	r20, 0x7F	; 127
    37fc:	57 e4       	ldi	r21, 0x47	; 71
    37fe:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3802:	18 16       	cp	r1, r24
    3804:	0c f0       	brlt	.+2      	; 0x3808 <SM_U8LoginSys+0x44e>
    3806:	43 c0       	rjmp	.+134    	; 0x388e <SM_U8LoginSys+0x4d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3808:	fe 01       	movw	r30, r28
    380a:	ed 54       	subi	r30, 0x4D	; 77
    380c:	ff 4f       	sbci	r31, 0xFF	; 255
    380e:	60 81       	ld	r22, Z
    3810:	71 81       	ldd	r23, Z+1	; 0x01
    3812:	82 81       	ldd	r24, Z+2	; 0x02
    3814:	93 81       	ldd	r25, Z+3	; 0x03
    3816:	20 e0       	ldi	r18, 0x00	; 0
    3818:	30 e0       	ldi	r19, 0x00	; 0
    381a:	40 e2       	ldi	r20, 0x20	; 32
    381c:	51 e4       	ldi	r21, 0x41	; 65
    381e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3822:	dc 01       	movw	r26, r24
    3824:	cb 01       	movw	r24, r22
    3826:	8e 01       	movw	r16, r28
    3828:	03 55       	subi	r16, 0x53	; 83
    382a:	1f 4f       	sbci	r17, 0xFF	; 255
    382c:	bc 01       	movw	r22, r24
    382e:	cd 01       	movw	r24, r26
    3830:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3834:	dc 01       	movw	r26, r24
    3836:	cb 01       	movw	r24, r22
    3838:	f8 01       	movw	r30, r16
    383a:	91 83       	std	Z+1, r25	; 0x01
    383c:	80 83       	st	Z, r24
    383e:	1f c0       	rjmp	.+62     	; 0x387e <SM_U8LoginSys+0x4c4>
    3840:	fe 01       	movw	r30, r28
    3842:	e5 55       	subi	r30, 0x55	; 85
    3844:	ff 4f       	sbci	r31, 0xFF	; 255
    3846:	88 ec       	ldi	r24, 0xC8	; 200
    3848:	90 e0       	ldi	r25, 0x00	; 0
    384a:	91 83       	std	Z+1, r25	; 0x01
    384c:	80 83       	st	Z, r24
    384e:	fe 01       	movw	r30, r28
    3850:	e5 55       	subi	r30, 0x55	; 85
    3852:	ff 4f       	sbci	r31, 0xFF	; 255
    3854:	80 81       	ld	r24, Z
    3856:	91 81       	ldd	r25, Z+1	; 0x01
    3858:	01 97       	sbiw	r24, 0x01	; 1
    385a:	f1 f7       	brne	.-4      	; 0x3858 <SM_U8LoginSys+0x49e>
    385c:	fe 01       	movw	r30, r28
    385e:	e5 55       	subi	r30, 0x55	; 85
    3860:	ff 4f       	sbci	r31, 0xFF	; 255
    3862:	91 83       	std	Z+1, r25	; 0x01
    3864:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3866:	de 01       	movw	r26, r28
    3868:	a3 55       	subi	r26, 0x53	; 83
    386a:	bf 4f       	sbci	r27, 0xFF	; 255
    386c:	fe 01       	movw	r30, r28
    386e:	e3 55       	subi	r30, 0x53	; 83
    3870:	ff 4f       	sbci	r31, 0xFF	; 255
    3872:	80 81       	ld	r24, Z
    3874:	91 81       	ldd	r25, Z+1	; 0x01
    3876:	01 97       	sbiw	r24, 0x01	; 1
    3878:	11 96       	adiw	r26, 0x01	; 1
    387a:	9c 93       	st	X, r25
    387c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    387e:	fe 01       	movw	r30, r28
    3880:	e3 55       	subi	r30, 0x53	; 83
    3882:	ff 4f       	sbci	r31, 0xFF	; 255
    3884:	80 81       	ld	r24, Z
    3886:	91 81       	ldd	r25, Z+1	; 0x01
    3888:	00 97       	sbiw	r24, 0x00	; 0
    388a:	d1 f6       	brne	.-76     	; 0x3840 <SM_U8LoginSys+0x486>
    388c:	27 c0       	rjmp	.+78     	; 0x38dc <SM_U8LoginSys+0x522>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    388e:	8e 01       	movw	r16, r28
    3890:	03 55       	subi	r16, 0x53	; 83
    3892:	1f 4f       	sbci	r17, 0xFF	; 255
    3894:	fe 01       	movw	r30, r28
    3896:	e1 55       	subi	r30, 0x51	; 81
    3898:	ff 4f       	sbci	r31, 0xFF	; 255
    389a:	60 81       	ld	r22, Z
    389c:	71 81       	ldd	r23, Z+1	; 0x01
    389e:	82 81       	ldd	r24, Z+2	; 0x02
    38a0:	93 81       	ldd	r25, Z+3	; 0x03
    38a2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    38a6:	dc 01       	movw	r26, r24
    38a8:	cb 01       	movw	r24, r22
    38aa:	f8 01       	movw	r30, r16
    38ac:	91 83       	std	Z+1, r25	; 0x01
    38ae:	80 83       	st	Z, r24
    38b0:	de 01       	movw	r26, r28
    38b2:	a7 55       	subi	r26, 0x57	; 87
    38b4:	bf 4f       	sbci	r27, 0xFF	; 255
    38b6:	fe 01       	movw	r30, r28
    38b8:	e3 55       	subi	r30, 0x53	; 83
    38ba:	ff 4f       	sbci	r31, 0xFF	; 255
    38bc:	80 81       	ld	r24, Z
    38be:	91 81       	ldd	r25, Z+1	; 0x01
    38c0:	8d 93       	st	X+, r24
    38c2:	9c 93       	st	X, r25
    38c4:	fe 01       	movw	r30, r28
    38c6:	e7 55       	subi	r30, 0x57	; 87
    38c8:	ff 4f       	sbci	r31, 0xFF	; 255
    38ca:	80 81       	ld	r24, Z
    38cc:	91 81       	ldd	r25, Z+1	; 0x01
    38ce:	01 97       	sbiw	r24, 0x01	; 1
    38d0:	f1 f7       	brne	.-4      	; 0x38ce <SM_U8LoginSys+0x514>
    38d2:	fe 01       	movw	r30, r28
    38d4:	e7 55       	subi	r30, 0x57	; 87
    38d6:	ff 4f       	sbci	r31, 0xFF	; 255
    38d8:	91 83       	std	Z+1, r25	; 0x01
    38da:	80 83       	st	Z, r24
						_delay_ms(700);
						LCD_VoidGoToRowCol(1,0);
    38dc:	81 e0       	ldi	r24, 0x01	; 1
    38de:	60 e0       	ldi	r22, 0x00	; 0
    38e0:	0e 94 24 15 	call	0x2a48	; 0x2a48 <LCD_VoidGoToRowCol>
						User_Pass= SM_U16EnterPassword();
    38e4:	0e 94 27 25 	call	0x4a4e	; 0x4a4e <SM_U16EnterPassword>
    38e8:	90 93 9e 02 	sts	0x029E, r25
    38ec:	80 93 9d 02 	sts	0x029D, r24
						if(User_Pass ==1111)
    38f0:	80 91 9d 02 	lds	r24, 0x029D
    38f4:	90 91 9e 02 	lds	r25, 0x029E
    38f8:	f4 e0       	ldi	r31, 0x04	; 4
    38fa:	87 35       	cpi	r24, 0x57	; 87
    38fc:	9f 07       	cpc	r25, r31
    38fe:	81 f4       	brne	.+32     	; 0x3920 <SM_U8LoginSys+0x566>
						{

							LCD_u8WriteString("WELCOME ALI");
    3900:	85 eb       	ldi	r24, 0xB5	; 181
    3902:	90 e0       	ldi	r25, 0x00	; 0
    3904:	0e 94 dc 15 	call	0x2bb8	; 0x2bb8 <LCD_u8WriteString>
							Local_U8ErrorState = ERROR_STATE_OK;
    3908:	81 e0       	ldi	r24, 0x01	; 1
    390a:	80 93 9f 02 	sts	0x029F, r24
							 return Local_U8ErrorState;
    390e:	20 91 9f 02 	lds	r18, 0x029F
    3912:	ca 52       	subi	r28, 0x2A	; 42
    3914:	df 4f       	sbci	r29, 0xFF	; 255
    3916:	28 83       	st	Y, r18
    3918:	c6 5d       	subi	r28, 0xD6	; 214
    391a:	d0 40       	sbci	r29, 0x00	; 0
    391c:	0c 94 16 25 	jmp	0x4a2c	; 0x4a2c <SM_U8LoginSys+0x1672>
						}
						else
						{
							LCD_u8WriteString("INCORRECT PASS");
    3920:	81 ec       	ldi	r24, 0xC1	; 193
    3922:	90 e0       	ldi	r25, 0x00	; 0
    3924:	0e 94 dc 15 	call	0x2bb8	; 0x2bb8 <LCD_u8WriteString>
							LCD_VoidGoToRowCol(1,0);
    3928:	81 e0       	ldi	r24, 0x01	; 1
    392a:	60 e0       	ldi	r22, 0x00	; 0
    392c:	0e 94 24 15 	call	0x2a48	; 0x2a48 <LCD_VoidGoToRowCol>
							LCD_u8WriteString("TRY AGAIN");
    3930:	80 ed       	ldi	r24, 0xD0	; 208
    3932:	90 e0       	ldi	r25, 0x00	; 0
    3934:	0e 94 dc 15 	call	0x2bb8	; 0x2bb8 <LCD_u8WriteString>
    3938:	fe 01       	movw	r30, r28
    393a:	eb 55       	subi	r30, 0x5B	; 91
    393c:	ff 4f       	sbci	r31, 0xFF	; 255
    393e:	80 e0       	ldi	r24, 0x00	; 0
    3940:	90 e0       	ldi	r25, 0x00	; 0
    3942:	af e2       	ldi	r26, 0x2F	; 47
    3944:	b4 e4       	ldi	r27, 0x44	; 68
    3946:	80 83       	st	Z, r24
    3948:	91 83       	std	Z+1, r25	; 0x01
    394a:	a2 83       	std	Z+2, r26	; 0x02
    394c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    394e:	8e 01       	movw	r16, r28
    3950:	0f 55       	subi	r16, 0x5F	; 95
    3952:	1f 4f       	sbci	r17, 0xFF	; 255
    3954:	fe 01       	movw	r30, r28
    3956:	eb 55       	subi	r30, 0x5B	; 91
    3958:	ff 4f       	sbci	r31, 0xFF	; 255
    395a:	60 81       	ld	r22, Z
    395c:	71 81       	ldd	r23, Z+1	; 0x01
    395e:	82 81       	ldd	r24, Z+2	; 0x02
    3960:	93 81       	ldd	r25, Z+3	; 0x03
    3962:	20 e0       	ldi	r18, 0x00	; 0
    3964:	30 e0       	ldi	r19, 0x00	; 0
    3966:	4a ef       	ldi	r20, 0xFA	; 250
    3968:	54 e4       	ldi	r21, 0x44	; 68
    396a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    396e:	dc 01       	movw	r26, r24
    3970:	cb 01       	movw	r24, r22
    3972:	f8 01       	movw	r30, r16
    3974:	80 83       	st	Z, r24
    3976:	91 83       	std	Z+1, r25	; 0x01
    3978:	a2 83       	std	Z+2, r26	; 0x02
    397a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    397c:	fe 01       	movw	r30, r28
    397e:	ef 55       	subi	r30, 0x5F	; 95
    3980:	ff 4f       	sbci	r31, 0xFF	; 255
    3982:	60 81       	ld	r22, Z
    3984:	71 81       	ldd	r23, Z+1	; 0x01
    3986:	82 81       	ldd	r24, Z+2	; 0x02
    3988:	93 81       	ldd	r25, Z+3	; 0x03
    398a:	20 e0       	ldi	r18, 0x00	; 0
    398c:	30 e0       	ldi	r19, 0x00	; 0
    398e:	40 e8       	ldi	r20, 0x80	; 128
    3990:	5f e3       	ldi	r21, 0x3F	; 63
    3992:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3996:	88 23       	and	r24, r24
    3998:	44 f4       	brge	.+16     	; 0x39aa <SM_U8LoginSys+0x5f0>
		__ticks = 1;
    399a:	fe 01       	movw	r30, r28
    399c:	e1 56       	subi	r30, 0x61	; 97
    399e:	ff 4f       	sbci	r31, 0xFF	; 255
    39a0:	81 e0       	ldi	r24, 0x01	; 1
    39a2:	90 e0       	ldi	r25, 0x00	; 0
    39a4:	91 83       	std	Z+1, r25	; 0x01
    39a6:	80 83       	st	Z, r24
    39a8:	64 c0       	rjmp	.+200    	; 0x3a72 <SM_U8LoginSys+0x6b8>
	else if (__tmp > 65535)
    39aa:	fe 01       	movw	r30, r28
    39ac:	ef 55       	subi	r30, 0x5F	; 95
    39ae:	ff 4f       	sbci	r31, 0xFF	; 255
    39b0:	60 81       	ld	r22, Z
    39b2:	71 81       	ldd	r23, Z+1	; 0x01
    39b4:	82 81       	ldd	r24, Z+2	; 0x02
    39b6:	93 81       	ldd	r25, Z+3	; 0x03
    39b8:	20 e0       	ldi	r18, 0x00	; 0
    39ba:	3f ef       	ldi	r19, 0xFF	; 255
    39bc:	4f e7       	ldi	r20, 0x7F	; 127
    39be:	57 e4       	ldi	r21, 0x47	; 71
    39c0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    39c4:	18 16       	cp	r1, r24
    39c6:	0c f0       	brlt	.+2      	; 0x39ca <SM_U8LoginSys+0x610>
    39c8:	43 c0       	rjmp	.+134    	; 0x3a50 <SM_U8LoginSys+0x696>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    39ca:	fe 01       	movw	r30, r28
    39cc:	eb 55       	subi	r30, 0x5B	; 91
    39ce:	ff 4f       	sbci	r31, 0xFF	; 255
    39d0:	60 81       	ld	r22, Z
    39d2:	71 81       	ldd	r23, Z+1	; 0x01
    39d4:	82 81       	ldd	r24, Z+2	; 0x02
    39d6:	93 81       	ldd	r25, Z+3	; 0x03
    39d8:	20 e0       	ldi	r18, 0x00	; 0
    39da:	30 e0       	ldi	r19, 0x00	; 0
    39dc:	40 e2       	ldi	r20, 0x20	; 32
    39de:	51 e4       	ldi	r21, 0x41	; 65
    39e0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    39e4:	dc 01       	movw	r26, r24
    39e6:	cb 01       	movw	r24, r22
    39e8:	8e 01       	movw	r16, r28
    39ea:	01 56       	subi	r16, 0x61	; 97
    39ec:	1f 4f       	sbci	r17, 0xFF	; 255
    39ee:	bc 01       	movw	r22, r24
    39f0:	cd 01       	movw	r24, r26
    39f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    39f6:	dc 01       	movw	r26, r24
    39f8:	cb 01       	movw	r24, r22
    39fa:	f8 01       	movw	r30, r16
    39fc:	91 83       	std	Z+1, r25	; 0x01
    39fe:	80 83       	st	Z, r24
    3a00:	1f c0       	rjmp	.+62     	; 0x3a40 <SM_U8LoginSys+0x686>
    3a02:	fe 01       	movw	r30, r28
    3a04:	e3 56       	subi	r30, 0x63	; 99
    3a06:	ff 4f       	sbci	r31, 0xFF	; 255
    3a08:	88 ec       	ldi	r24, 0xC8	; 200
    3a0a:	90 e0       	ldi	r25, 0x00	; 0
    3a0c:	91 83       	std	Z+1, r25	; 0x01
    3a0e:	80 83       	st	Z, r24
    3a10:	fe 01       	movw	r30, r28
    3a12:	e3 56       	subi	r30, 0x63	; 99
    3a14:	ff 4f       	sbci	r31, 0xFF	; 255
    3a16:	80 81       	ld	r24, Z
    3a18:	91 81       	ldd	r25, Z+1	; 0x01
    3a1a:	01 97       	sbiw	r24, 0x01	; 1
    3a1c:	f1 f7       	brne	.-4      	; 0x3a1a <SM_U8LoginSys+0x660>
    3a1e:	fe 01       	movw	r30, r28
    3a20:	e3 56       	subi	r30, 0x63	; 99
    3a22:	ff 4f       	sbci	r31, 0xFF	; 255
    3a24:	91 83       	std	Z+1, r25	; 0x01
    3a26:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3a28:	de 01       	movw	r26, r28
    3a2a:	a1 56       	subi	r26, 0x61	; 97
    3a2c:	bf 4f       	sbci	r27, 0xFF	; 255
    3a2e:	fe 01       	movw	r30, r28
    3a30:	e1 56       	subi	r30, 0x61	; 97
    3a32:	ff 4f       	sbci	r31, 0xFF	; 255
    3a34:	80 81       	ld	r24, Z
    3a36:	91 81       	ldd	r25, Z+1	; 0x01
    3a38:	01 97       	sbiw	r24, 0x01	; 1
    3a3a:	11 96       	adiw	r26, 0x01	; 1
    3a3c:	9c 93       	st	X, r25
    3a3e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3a40:	fe 01       	movw	r30, r28
    3a42:	e1 56       	subi	r30, 0x61	; 97
    3a44:	ff 4f       	sbci	r31, 0xFF	; 255
    3a46:	80 81       	ld	r24, Z
    3a48:	91 81       	ldd	r25, Z+1	; 0x01
    3a4a:	00 97       	sbiw	r24, 0x00	; 0
    3a4c:	d1 f6       	brne	.-76     	; 0x3a02 <SM_U8LoginSys+0x648>
    3a4e:	27 c0       	rjmp	.+78     	; 0x3a9e <SM_U8LoginSys+0x6e4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3a50:	8e 01       	movw	r16, r28
    3a52:	01 56       	subi	r16, 0x61	; 97
    3a54:	1f 4f       	sbci	r17, 0xFF	; 255
    3a56:	fe 01       	movw	r30, r28
    3a58:	ef 55       	subi	r30, 0x5F	; 95
    3a5a:	ff 4f       	sbci	r31, 0xFF	; 255
    3a5c:	60 81       	ld	r22, Z
    3a5e:	71 81       	ldd	r23, Z+1	; 0x01
    3a60:	82 81       	ldd	r24, Z+2	; 0x02
    3a62:	93 81       	ldd	r25, Z+3	; 0x03
    3a64:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a68:	dc 01       	movw	r26, r24
    3a6a:	cb 01       	movw	r24, r22
    3a6c:	f8 01       	movw	r30, r16
    3a6e:	91 83       	std	Z+1, r25	; 0x01
    3a70:	80 83       	st	Z, r24
    3a72:	de 01       	movw	r26, r28
    3a74:	a5 56       	subi	r26, 0x65	; 101
    3a76:	bf 4f       	sbci	r27, 0xFF	; 255
    3a78:	fe 01       	movw	r30, r28
    3a7a:	e1 56       	subi	r30, 0x61	; 97
    3a7c:	ff 4f       	sbci	r31, 0xFF	; 255
    3a7e:	80 81       	ld	r24, Z
    3a80:	91 81       	ldd	r25, Z+1	; 0x01
    3a82:	8d 93       	st	X+, r24
    3a84:	9c 93       	st	X, r25
    3a86:	fe 01       	movw	r30, r28
    3a88:	e5 56       	subi	r30, 0x65	; 101
    3a8a:	ff 4f       	sbci	r31, 0xFF	; 255
    3a8c:	80 81       	ld	r24, Z
    3a8e:	91 81       	ldd	r25, Z+1	; 0x01
    3a90:	01 97       	sbiw	r24, 0x01	; 1
    3a92:	f1 f7       	brne	.-4      	; 0x3a90 <SM_U8LoginSys+0x6d6>
    3a94:	fe 01       	movw	r30, r28
    3a96:	e5 56       	subi	r30, 0x65	; 101
    3a98:	ff 4f       	sbci	r31, 0xFF	; 255
    3a9a:	91 83       	std	Z+1, r25	; 0x01
    3a9c:	80 83       	st	Z, r24
							_delay_ms(700);
							LCD_VoidSendCommand(1);
    3a9e:	81 e0       	ldi	r24, 0x01	; 1
    3aa0:	0e 94 b0 11 	call	0x2360	; 0x2360 <LCD_VoidSendCommand>
							if(i==2)
    3aa4:	fe 01       	movw	r30, r28
    3aa6:	eb 52       	subi	r30, 0x2B	; 43
    3aa8:	ff 4f       	sbci	r31, 0xFF	; 255
    3aaa:	80 81       	ld	r24, Z
    3aac:	82 30       	cpi	r24, 0x02	; 2
    3aae:	09 f0       	breq	.+2      	; 0x3ab2 <SM_U8LoginSys+0x6f8>
    3ab0:	d4 c0       	rjmp	.+424    	; 0x3c5a <SM_U8LoginSys+0x8a0>
							{
								LCD_VoidGoToRowCol(1,0);
    3ab2:	81 e0       	ldi	r24, 0x01	; 1
    3ab4:	60 e0       	ldi	r22, 0x00	; 0
    3ab6:	0e 94 24 15 	call	0x2a48	; 0x2a48 <LCD_VoidGoToRowCol>
								LCD_u8WriteString("U entered 3 times");
    3aba:	8a ed       	ldi	r24, 0xDA	; 218
    3abc:	90 e0       	ldi	r25, 0x00	; 0
    3abe:	0e 94 dc 15 	call	0x2bb8	; 0x2bb8 <LCD_u8WriteString>
								DIO_U8SetPinDirection(DIO_PORTC,DIO_PIN7,DIO_HIGH);
    3ac2:	82 e0       	ldi	r24, 0x02	; 2
    3ac4:	67 e0       	ldi	r22, 0x07	; 7
    3ac6:	41 e0       	ldi	r20, 0x01	; 1
    3ac8:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <DIO_U8SetPinDirection>
								DIO_U8SetPinValue(DIO_PORTC,DIO_PIN7,DIO_HIGH);
    3acc:	82 e0       	ldi	r24, 0x02	; 2
    3ace:	67 e0       	ldi	r22, 0x07	; 7
    3ad0:	41 e0       	ldi	r20, 0x01	; 1
    3ad2:	0e 94 15 08 	call	0x102a	; 0x102a <DIO_U8SetPinValue>
    3ad6:	fe 01       	movw	r30, r28
    3ad8:	e9 56       	subi	r30, 0x69	; 105
    3ada:	ff 4f       	sbci	r31, 0xFF	; 255
    3adc:	80 e0       	ldi	r24, 0x00	; 0
    3ade:	90 e0       	ldi	r25, 0x00	; 0
    3ae0:	aa ef       	ldi	r26, 0xFA	; 250
    3ae2:	b3 e4       	ldi	r27, 0x43	; 67
    3ae4:	80 83       	st	Z, r24
    3ae6:	91 83       	std	Z+1, r25	; 0x01
    3ae8:	a2 83       	std	Z+2, r26	; 0x02
    3aea:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3aec:	8e 01       	movw	r16, r28
    3aee:	0d 56       	subi	r16, 0x6D	; 109
    3af0:	1f 4f       	sbci	r17, 0xFF	; 255
    3af2:	fe 01       	movw	r30, r28
    3af4:	e9 56       	subi	r30, 0x69	; 105
    3af6:	ff 4f       	sbci	r31, 0xFF	; 255
    3af8:	60 81       	ld	r22, Z
    3afa:	71 81       	ldd	r23, Z+1	; 0x01
    3afc:	82 81       	ldd	r24, Z+2	; 0x02
    3afe:	93 81       	ldd	r25, Z+3	; 0x03
    3b00:	20 e0       	ldi	r18, 0x00	; 0
    3b02:	30 e0       	ldi	r19, 0x00	; 0
    3b04:	4a ef       	ldi	r20, 0xFA	; 250
    3b06:	54 e4       	ldi	r21, 0x44	; 68
    3b08:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b0c:	dc 01       	movw	r26, r24
    3b0e:	cb 01       	movw	r24, r22
    3b10:	f8 01       	movw	r30, r16
    3b12:	80 83       	st	Z, r24
    3b14:	91 83       	std	Z+1, r25	; 0x01
    3b16:	a2 83       	std	Z+2, r26	; 0x02
    3b18:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3b1a:	fe 01       	movw	r30, r28
    3b1c:	ed 56       	subi	r30, 0x6D	; 109
    3b1e:	ff 4f       	sbci	r31, 0xFF	; 255
    3b20:	60 81       	ld	r22, Z
    3b22:	71 81       	ldd	r23, Z+1	; 0x01
    3b24:	82 81       	ldd	r24, Z+2	; 0x02
    3b26:	93 81       	ldd	r25, Z+3	; 0x03
    3b28:	20 e0       	ldi	r18, 0x00	; 0
    3b2a:	30 e0       	ldi	r19, 0x00	; 0
    3b2c:	40 e8       	ldi	r20, 0x80	; 128
    3b2e:	5f e3       	ldi	r21, 0x3F	; 63
    3b30:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3b34:	88 23       	and	r24, r24
    3b36:	44 f4       	brge	.+16     	; 0x3b48 <SM_U8LoginSys+0x78e>
		__ticks = 1;
    3b38:	fe 01       	movw	r30, r28
    3b3a:	ef 56       	subi	r30, 0x6F	; 111
    3b3c:	ff 4f       	sbci	r31, 0xFF	; 255
    3b3e:	81 e0       	ldi	r24, 0x01	; 1
    3b40:	90 e0       	ldi	r25, 0x00	; 0
    3b42:	91 83       	std	Z+1, r25	; 0x01
    3b44:	80 83       	st	Z, r24
    3b46:	64 c0       	rjmp	.+200    	; 0x3c10 <SM_U8LoginSys+0x856>
	else if (__tmp > 65535)
    3b48:	fe 01       	movw	r30, r28
    3b4a:	ed 56       	subi	r30, 0x6D	; 109
    3b4c:	ff 4f       	sbci	r31, 0xFF	; 255
    3b4e:	60 81       	ld	r22, Z
    3b50:	71 81       	ldd	r23, Z+1	; 0x01
    3b52:	82 81       	ldd	r24, Z+2	; 0x02
    3b54:	93 81       	ldd	r25, Z+3	; 0x03
    3b56:	20 e0       	ldi	r18, 0x00	; 0
    3b58:	3f ef       	ldi	r19, 0xFF	; 255
    3b5a:	4f e7       	ldi	r20, 0x7F	; 127
    3b5c:	57 e4       	ldi	r21, 0x47	; 71
    3b5e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3b62:	18 16       	cp	r1, r24
    3b64:	0c f0       	brlt	.+2      	; 0x3b68 <SM_U8LoginSys+0x7ae>
    3b66:	43 c0       	rjmp	.+134    	; 0x3bee <SM_U8LoginSys+0x834>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3b68:	fe 01       	movw	r30, r28
    3b6a:	e9 56       	subi	r30, 0x69	; 105
    3b6c:	ff 4f       	sbci	r31, 0xFF	; 255
    3b6e:	60 81       	ld	r22, Z
    3b70:	71 81       	ldd	r23, Z+1	; 0x01
    3b72:	82 81       	ldd	r24, Z+2	; 0x02
    3b74:	93 81       	ldd	r25, Z+3	; 0x03
    3b76:	20 e0       	ldi	r18, 0x00	; 0
    3b78:	30 e0       	ldi	r19, 0x00	; 0
    3b7a:	40 e2       	ldi	r20, 0x20	; 32
    3b7c:	51 e4       	ldi	r21, 0x41	; 65
    3b7e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b82:	dc 01       	movw	r26, r24
    3b84:	cb 01       	movw	r24, r22
    3b86:	8e 01       	movw	r16, r28
    3b88:	0f 56       	subi	r16, 0x6F	; 111
    3b8a:	1f 4f       	sbci	r17, 0xFF	; 255
    3b8c:	bc 01       	movw	r22, r24
    3b8e:	cd 01       	movw	r24, r26
    3b90:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b94:	dc 01       	movw	r26, r24
    3b96:	cb 01       	movw	r24, r22
    3b98:	f8 01       	movw	r30, r16
    3b9a:	91 83       	std	Z+1, r25	; 0x01
    3b9c:	80 83       	st	Z, r24
    3b9e:	1f c0       	rjmp	.+62     	; 0x3bde <SM_U8LoginSys+0x824>
    3ba0:	fe 01       	movw	r30, r28
    3ba2:	e1 57       	subi	r30, 0x71	; 113
    3ba4:	ff 4f       	sbci	r31, 0xFF	; 255
    3ba6:	88 ec       	ldi	r24, 0xC8	; 200
    3ba8:	90 e0       	ldi	r25, 0x00	; 0
    3baa:	91 83       	std	Z+1, r25	; 0x01
    3bac:	80 83       	st	Z, r24
    3bae:	fe 01       	movw	r30, r28
    3bb0:	e1 57       	subi	r30, 0x71	; 113
    3bb2:	ff 4f       	sbci	r31, 0xFF	; 255
    3bb4:	80 81       	ld	r24, Z
    3bb6:	91 81       	ldd	r25, Z+1	; 0x01
    3bb8:	01 97       	sbiw	r24, 0x01	; 1
    3bba:	f1 f7       	brne	.-4      	; 0x3bb8 <SM_U8LoginSys+0x7fe>
    3bbc:	fe 01       	movw	r30, r28
    3bbe:	e1 57       	subi	r30, 0x71	; 113
    3bc0:	ff 4f       	sbci	r31, 0xFF	; 255
    3bc2:	91 83       	std	Z+1, r25	; 0x01
    3bc4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3bc6:	de 01       	movw	r26, r28
    3bc8:	af 56       	subi	r26, 0x6F	; 111
    3bca:	bf 4f       	sbci	r27, 0xFF	; 255
    3bcc:	fe 01       	movw	r30, r28
    3bce:	ef 56       	subi	r30, 0x6F	; 111
    3bd0:	ff 4f       	sbci	r31, 0xFF	; 255
    3bd2:	80 81       	ld	r24, Z
    3bd4:	91 81       	ldd	r25, Z+1	; 0x01
    3bd6:	01 97       	sbiw	r24, 0x01	; 1
    3bd8:	11 96       	adiw	r26, 0x01	; 1
    3bda:	9c 93       	st	X, r25
    3bdc:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3bde:	fe 01       	movw	r30, r28
    3be0:	ef 56       	subi	r30, 0x6F	; 111
    3be2:	ff 4f       	sbci	r31, 0xFF	; 255
    3be4:	80 81       	ld	r24, Z
    3be6:	91 81       	ldd	r25, Z+1	; 0x01
    3be8:	00 97       	sbiw	r24, 0x00	; 0
    3bea:	d1 f6       	brne	.-76     	; 0x3ba0 <SM_U8LoginSys+0x7e6>
    3bec:	27 c0       	rjmp	.+78     	; 0x3c3c <SM_U8LoginSys+0x882>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3bee:	8e 01       	movw	r16, r28
    3bf0:	0f 56       	subi	r16, 0x6F	; 111
    3bf2:	1f 4f       	sbci	r17, 0xFF	; 255
    3bf4:	fe 01       	movw	r30, r28
    3bf6:	ed 56       	subi	r30, 0x6D	; 109
    3bf8:	ff 4f       	sbci	r31, 0xFF	; 255
    3bfa:	60 81       	ld	r22, Z
    3bfc:	71 81       	ldd	r23, Z+1	; 0x01
    3bfe:	82 81       	ldd	r24, Z+2	; 0x02
    3c00:	93 81       	ldd	r25, Z+3	; 0x03
    3c02:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c06:	dc 01       	movw	r26, r24
    3c08:	cb 01       	movw	r24, r22
    3c0a:	f8 01       	movw	r30, r16
    3c0c:	91 83       	std	Z+1, r25	; 0x01
    3c0e:	80 83       	st	Z, r24
    3c10:	de 01       	movw	r26, r28
    3c12:	a3 57       	subi	r26, 0x73	; 115
    3c14:	bf 4f       	sbci	r27, 0xFF	; 255
    3c16:	fe 01       	movw	r30, r28
    3c18:	ef 56       	subi	r30, 0x6F	; 111
    3c1a:	ff 4f       	sbci	r31, 0xFF	; 255
    3c1c:	80 81       	ld	r24, Z
    3c1e:	91 81       	ldd	r25, Z+1	; 0x01
    3c20:	8d 93       	st	X+, r24
    3c22:	9c 93       	st	X, r25
    3c24:	fe 01       	movw	r30, r28
    3c26:	e3 57       	subi	r30, 0x73	; 115
    3c28:	ff 4f       	sbci	r31, 0xFF	; 255
    3c2a:	80 81       	ld	r24, Z
    3c2c:	91 81       	ldd	r25, Z+1	; 0x01
    3c2e:	01 97       	sbiw	r24, 0x01	; 1
    3c30:	f1 f7       	brne	.-4      	; 0x3c2e <SM_U8LoginSys+0x874>
    3c32:	fe 01       	movw	r30, r28
    3c34:	e3 57       	subi	r30, 0x73	; 115
    3c36:	ff 4f       	sbci	r31, 0xFF	; 255
    3c38:	91 83       	std	Z+1, r25	; 0x01
    3c3a:	80 83       	st	Z, r24
								_delay_ms(500);
								DIO_U8SetPinValue(DIO_PORTC,DIO_PIN7,DIO_LOW);
    3c3c:	82 e0       	ldi	r24, 0x02	; 2
    3c3e:	67 e0       	ldi	r22, 0x07	; 7
    3c40:	40 e0       	ldi	r20, 0x00	; 0
    3c42:	0e 94 15 08 	call	0x102a	; 0x102a <DIO_U8SetPinValue>
								Local_U8ErrorState = ERROR_STATE_NOK;
    3c46:	10 92 9f 02 	sts	0x029F, r1
								 return Local_U8ErrorState;
    3c4a:	f0 91 9f 02 	lds	r31, 0x029F
    3c4e:	ca 52       	subi	r28, 0x2A	; 42
    3c50:	df 4f       	sbci	r29, 0xFF	; 255
    3c52:	f8 83       	st	Y, r31
    3c54:	c6 5d       	subi	r28, 0xD6	; 214
    3c56:	d0 40       	sbci	r29, 0x00	; 0
    3c58:	e9 c6       	rjmp	.+3538   	; 0x4a2c <SM_U8LoginSys+0x1672>
					LCD_VoidGoToRowCol(1,0);
					LCD_u8WriteString("WELCOME USER_0");

					_delay_ms(1000);
					LCD_VoidSendCommand(1);
						for(u8 i=0;i<3;i++)
    3c5a:	de 01       	movw	r26, r28
    3c5c:	ab 52       	subi	r26, 0x2B	; 43
    3c5e:	bf 4f       	sbci	r27, 0xFF	; 255
    3c60:	fe 01       	movw	r30, r28
    3c62:	eb 52       	subi	r30, 0x2B	; 43
    3c64:	ff 4f       	sbci	r31, 0xFF	; 255
    3c66:	80 81       	ld	r24, Z
    3c68:	8f 5f       	subi	r24, 0xFF	; 255
    3c6a:	8c 93       	st	X, r24
    3c6c:	fe 01       	movw	r30, r28
    3c6e:	eb 52       	subi	r30, 0x2B	; 43
    3c70:	ff 4f       	sbci	r31, 0xFF	; 255
    3c72:	80 81       	ld	r24, Z
    3c74:	83 30       	cpi	r24, 0x03	; 3
    3c76:	08 f4       	brcc	.+2      	; 0x3c7a <SM_U8LoginSys+0x8c0>
    3c78:	7a cd       	rjmp	.-1292   	; 0x376e <SM_U8LoginSys+0x3b4>
    3c7a:	63 cc       	rjmp	.-1850   	; 0x3542 <SM_U8LoginSys+0x188>
						}
					}
				} break;
				case '1':
				{
					LCD_VoidGoToRowCol(1,0);
    3c7c:	81 e0       	ldi	r24, 0x01	; 1
    3c7e:	60 e0       	ldi	r22, 0x00	; 0
    3c80:	0e 94 24 15 	call	0x2a48	; 0x2a48 <LCD_VoidGoToRowCol>
					LCD_u8WriteString("WELCOME USER_1");
    3c84:	8c ee       	ldi	r24, 0xEC	; 236
    3c86:	90 e0       	ldi	r25, 0x00	; 0
    3c88:	0e 94 dc 15 	call	0x2bb8	; 0x2bb8 <LCD_u8WriteString>
    3c8c:	fe 01       	movw	r30, r28
    3c8e:	e7 57       	subi	r30, 0x77	; 119
    3c90:	ff 4f       	sbci	r31, 0xFF	; 255
    3c92:	80 e0       	ldi	r24, 0x00	; 0
    3c94:	90 e0       	ldi	r25, 0x00	; 0
    3c96:	aa e7       	ldi	r26, 0x7A	; 122
    3c98:	b4 e4       	ldi	r27, 0x44	; 68
    3c9a:	80 83       	st	Z, r24
    3c9c:	91 83       	std	Z+1, r25	; 0x01
    3c9e:	a2 83       	std	Z+2, r26	; 0x02
    3ca0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3ca2:	8e 01       	movw	r16, r28
    3ca4:	0b 57       	subi	r16, 0x7B	; 123
    3ca6:	1f 4f       	sbci	r17, 0xFF	; 255
    3ca8:	fe 01       	movw	r30, r28
    3caa:	e7 57       	subi	r30, 0x77	; 119
    3cac:	ff 4f       	sbci	r31, 0xFF	; 255
    3cae:	60 81       	ld	r22, Z
    3cb0:	71 81       	ldd	r23, Z+1	; 0x01
    3cb2:	82 81       	ldd	r24, Z+2	; 0x02
    3cb4:	93 81       	ldd	r25, Z+3	; 0x03
    3cb6:	20 e0       	ldi	r18, 0x00	; 0
    3cb8:	30 e0       	ldi	r19, 0x00	; 0
    3cba:	4a ef       	ldi	r20, 0xFA	; 250
    3cbc:	54 e4       	ldi	r21, 0x44	; 68
    3cbe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3cc2:	dc 01       	movw	r26, r24
    3cc4:	cb 01       	movw	r24, r22
    3cc6:	f8 01       	movw	r30, r16
    3cc8:	80 83       	st	Z, r24
    3cca:	91 83       	std	Z+1, r25	; 0x01
    3ccc:	a2 83       	std	Z+2, r26	; 0x02
    3cce:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3cd0:	fe 01       	movw	r30, r28
    3cd2:	eb 57       	subi	r30, 0x7B	; 123
    3cd4:	ff 4f       	sbci	r31, 0xFF	; 255
    3cd6:	60 81       	ld	r22, Z
    3cd8:	71 81       	ldd	r23, Z+1	; 0x01
    3cda:	82 81       	ldd	r24, Z+2	; 0x02
    3cdc:	93 81       	ldd	r25, Z+3	; 0x03
    3cde:	20 e0       	ldi	r18, 0x00	; 0
    3ce0:	30 e0       	ldi	r19, 0x00	; 0
    3ce2:	40 e8       	ldi	r20, 0x80	; 128
    3ce4:	5f e3       	ldi	r21, 0x3F	; 63
    3ce6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3cea:	88 23       	and	r24, r24
    3cec:	44 f4       	brge	.+16     	; 0x3cfe <SM_U8LoginSys+0x944>
		__ticks = 1;
    3cee:	fe 01       	movw	r30, r28
    3cf0:	ed 57       	subi	r30, 0x7D	; 125
    3cf2:	ff 4f       	sbci	r31, 0xFF	; 255
    3cf4:	81 e0       	ldi	r24, 0x01	; 1
    3cf6:	90 e0       	ldi	r25, 0x00	; 0
    3cf8:	91 83       	std	Z+1, r25	; 0x01
    3cfa:	80 83       	st	Z, r24
    3cfc:	64 c0       	rjmp	.+200    	; 0x3dc6 <SM_U8LoginSys+0xa0c>
	else if (__tmp > 65535)
    3cfe:	fe 01       	movw	r30, r28
    3d00:	eb 57       	subi	r30, 0x7B	; 123
    3d02:	ff 4f       	sbci	r31, 0xFF	; 255
    3d04:	60 81       	ld	r22, Z
    3d06:	71 81       	ldd	r23, Z+1	; 0x01
    3d08:	82 81       	ldd	r24, Z+2	; 0x02
    3d0a:	93 81       	ldd	r25, Z+3	; 0x03
    3d0c:	20 e0       	ldi	r18, 0x00	; 0
    3d0e:	3f ef       	ldi	r19, 0xFF	; 255
    3d10:	4f e7       	ldi	r20, 0x7F	; 127
    3d12:	57 e4       	ldi	r21, 0x47	; 71
    3d14:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3d18:	18 16       	cp	r1, r24
    3d1a:	0c f0       	brlt	.+2      	; 0x3d1e <SM_U8LoginSys+0x964>
    3d1c:	43 c0       	rjmp	.+134    	; 0x3da4 <SM_U8LoginSys+0x9ea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3d1e:	fe 01       	movw	r30, r28
    3d20:	e7 57       	subi	r30, 0x77	; 119
    3d22:	ff 4f       	sbci	r31, 0xFF	; 255
    3d24:	60 81       	ld	r22, Z
    3d26:	71 81       	ldd	r23, Z+1	; 0x01
    3d28:	82 81       	ldd	r24, Z+2	; 0x02
    3d2a:	93 81       	ldd	r25, Z+3	; 0x03
    3d2c:	20 e0       	ldi	r18, 0x00	; 0
    3d2e:	30 e0       	ldi	r19, 0x00	; 0
    3d30:	40 e2       	ldi	r20, 0x20	; 32
    3d32:	51 e4       	ldi	r21, 0x41	; 65
    3d34:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3d38:	dc 01       	movw	r26, r24
    3d3a:	cb 01       	movw	r24, r22
    3d3c:	8e 01       	movw	r16, r28
    3d3e:	0d 57       	subi	r16, 0x7D	; 125
    3d40:	1f 4f       	sbci	r17, 0xFF	; 255
    3d42:	bc 01       	movw	r22, r24
    3d44:	cd 01       	movw	r24, r26
    3d46:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3d4a:	dc 01       	movw	r26, r24
    3d4c:	cb 01       	movw	r24, r22
    3d4e:	f8 01       	movw	r30, r16
    3d50:	91 83       	std	Z+1, r25	; 0x01
    3d52:	80 83       	st	Z, r24
    3d54:	1f c0       	rjmp	.+62     	; 0x3d94 <SM_U8LoginSys+0x9da>
    3d56:	fe 01       	movw	r30, r28
    3d58:	ef 57       	subi	r30, 0x7F	; 127
    3d5a:	ff 4f       	sbci	r31, 0xFF	; 255
    3d5c:	88 ec       	ldi	r24, 0xC8	; 200
    3d5e:	90 e0       	ldi	r25, 0x00	; 0
    3d60:	91 83       	std	Z+1, r25	; 0x01
    3d62:	80 83       	st	Z, r24
    3d64:	fe 01       	movw	r30, r28
    3d66:	ef 57       	subi	r30, 0x7F	; 127
    3d68:	ff 4f       	sbci	r31, 0xFF	; 255
    3d6a:	80 81       	ld	r24, Z
    3d6c:	91 81       	ldd	r25, Z+1	; 0x01
    3d6e:	01 97       	sbiw	r24, 0x01	; 1
    3d70:	f1 f7       	brne	.-4      	; 0x3d6e <SM_U8LoginSys+0x9b4>
    3d72:	fe 01       	movw	r30, r28
    3d74:	ef 57       	subi	r30, 0x7F	; 127
    3d76:	ff 4f       	sbci	r31, 0xFF	; 255
    3d78:	91 83       	std	Z+1, r25	; 0x01
    3d7a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3d7c:	de 01       	movw	r26, r28
    3d7e:	ad 57       	subi	r26, 0x7D	; 125
    3d80:	bf 4f       	sbci	r27, 0xFF	; 255
    3d82:	fe 01       	movw	r30, r28
    3d84:	ed 57       	subi	r30, 0x7D	; 125
    3d86:	ff 4f       	sbci	r31, 0xFF	; 255
    3d88:	80 81       	ld	r24, Z
    3d8a:	91 81       	ldd	r25, Z+1	; 0x01
    3d8c:	01 97       	sbiw	r24, 0x01	; 1
    3d8e:	11 96       	adiw	r26, 0x01	; 1
    3d90:	9c 93       	st	X, r25
    3d92:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3d94:	fe 01       	movw	r30, r28
    3d96:	ed 57       	subi	r30, 0x7D	; 125
    3d98:	ff 4f       	sbci	r31, 0xFF	; 255
    3d9a:	80 81       	ld	r24, Z
    3d9c:	91 81       	ldd	r25, Z+1	; 0x01
    3d9e:	00 97       	sbiw	r24, 0x00	; 0
    3da0:	d1 f6       	brne	.-76     	; 0x3d56 <SM_U8LoginSys+0x99c>
    3da2:	27 c0       	rjmp	.+78     	; 0x3df2 <SM_U8LoginSys+0xa38>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3da4:	8e 01       	movw	r16, r28
    3da6:	0d 57       	subi	r16, 0x7D	; 125
    3da8:	1f 4f       	sbci	r17, 0xFF	; 255
    3daa:	fe 01       	movw	r30, r28
    3dac:	eb 57       	subi	r30, 0x7B	; 123
    3dae:	ff 4f       	sbci	r31, 0xFF	; 255
    3db0:	60 81       	ld	r22, Z
    3db2:	71 81       	ldd	r23, Z+1	; 0x01
    3db4:	82 81       	ldd	r24, Z+2	; 0x02
    3db6:	93 81       	ldd	r25, Z+3	; 0x03
    3db8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3dbc:	dc 01       	movw	r26, r24
    3dbe:	cb 01       	movw	r24, r22
    3dc0:	f8 01       	movw	r30, r16
    3dc2:	91 83       	std	Z+1, r25	; 0x01
    3dc4:	80 83       	st	Z, r24
    3dc6:	de 01       	movw	r26, r28
    3dc8:	a1 58       	subi	r26, 0x81	; 129
    3dca:	bf 4f       	sbci	r27, 0xFF	; 255
    3dcc:	fe 01       	movw	r30, r28
    3dce:	ed 57       	subi	r30, 0x7D	; 125
    3dd0:	ff 4f       	sbci	r31, 0xFF	; 255
    3dd2:	80 81       	ld	r24, Z
    3dd4:	91 81       	ldd	r25, Z+1	; 0x01
    3dd6:	8d 93       	st	X+, r24
    3dd8:	9c 93       	st	X, r25
    3dda:	fe 01       	movw	r30, r28
    3ddc:	e1 58       	subi	r30, 0x81	; 129
    3dde:	ff 4f       	sbci	r31, 0xFF	; 255
    3de0:	80 81       	ld	r24, Z
    3de2:	91 81       	ldd	r25, Z+1	; 0x01
    3de4:	01 97       	sbiw	r24, 0x01	; 1
    3de6:	f1 f7       	brne	.-4      	; 0x3de4 <SM_U8LoginSys+0xa2a>
    3de8:	fe 01       	movw	r30, r28
    3dea:	e1 58       	subi	r30, 0x81	; 129
    3dec:	ff 4f       	sbci	r31, 0xFF	; 255
    3dee:	91 83       	std	Z+1, r25	; 0x01
    3df0:	80 83       	st	Z, r24

					_delay_ms(1000);
					LCD_VoidSendCommand(1);
    3df2:	81 e0       	ldi	r24, 0x01	; 1
    3df4:	0e 94 b0 11 	call	0x2360	; 0x2360 <LCD_VoidSendCommand>
						for(u8 i=0;i<3;i++)
    3df8:	fe 01       	movw	r30, r28
    3dfa:	ec 52       	subi	r30, 0x2C	; 44
    3dfc:	ff 4f       	sbci	r31, 0xFF	; 255
    3dfe:	10 82       	st	Z, r1
    3e00:	7e c2       	rjmp	.+1276   	; 0x42fe <SM_U8LoginSys+0xf44>
					{

						LCD_u8WriteString("ENTER YOUR PASS");
    3e02:	85 ea       	ldi	r24, 0xA5	; 165
    3e04:	90 e0       	ldi	r25, 0x00	; 0
    3e06:	0e 94 dc 15 	call	0x2bb8	; 0x2bb8 <LCD_u8WriteString>
    3e0a:	fe 01       	movw	r30, r28
    3e0c:	e5 58       	subi	r30, 0x85	; 133
    3e0e:	ff 4f       	sbci	r31, 0xFF	; 255
    3e10:	80 e0       	ldi	r24, 0x00	; 0
    3e12:	90 e0       	ldi	r25, 0x00	; 0
    3e14:	af e2       	ldi	r26, 0x2F	; 47
    3e16:	b4 e4       	ldi	r27, 0x44	; 68
    3e18:	80 83       	st	Z, r24
    3e1a:	91 83       	std	Z+1, r25	; 0x01
    3e1c:	a2 83       	std	Z+2, r26	; 0x02
    3e1e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3e20:	8e 01       	movw	r16, r28
    3e22:	09 58       	subi	r16, 0x89	; 137
    3e24:	1f 4f       	sbci	r17, 0xFF	; 255
    3e26:	fe 01       	movw	r30, r28
    3e28:	e5 58       	subi	r30, 0x85	; 133
    3e2a:	ff 4f       	sbci	r31, 0xFF	; 255
    3e2c:	60 81       	ld	r22, Z
    3e2e:	71 81       	ldd	r23, Z+1	; 0x01
    3e30:	82 81       	ldd	r24, Z+2	; 0x02
    3e32:	93 81       	ldd	r25, Z+3	; 0x03
    3e34:	20 e0       	ldi	r18, 0x00	; 0
    3e36:	30 e0       	ldi	r19, 0x00	; 0
    3e38:	4a ef       	ldi	r20, 0xFA	; 250
    3e3a:	54 e4       	ldi	r21, 0x44	; 68
    3e3c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3e40:	dc 01       	movw	r26, r24
    3e42:	cb 01       	movw	r24, r22
    3e44:	f8 01       	movw	r30, r16
    3e46:	80 83       	st	Z, r24
    3e48:	91 83       	std	Z+1, r25	; 0x01
    3e4a:	a2 83       	std	Z+2, r26	; 0x02
    3e4c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3e4e:	fe 01       	movw	r30, r28
    3e50:	e9 58       	subi	r30, 0x89	; 137
    3e52:	ff 4f       	sbci	r31, 0xFF	; 255
    3e54:	60 81       	ld	r22, Z
    3e56:	71 81       	ldd	r23, Z+1	; 0x01
    3e58:	82 81       	ldd	r24, Z+2	; 0x02
    3e5a:	93 81       	ldd	r25, Z+3	; 0x03
    3e5c:	20 e0       	ldi	r18, 0x00	; 0
    3e5e:	30 e0       	ldi	r19, 0x00	; 0
    3e60:	40 e8       	ldi	r20, 0x80	; 128
    3e62:	5f e3       	ldi	r21, 0x3F	; 63
    3e64:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3e68:	88 23       	and	r24, r24
    3e6a:	44 f4       	brge	.+16     	; 0x3e7c <SM_U8LoginSys+0xac2>
		__ticks = 1;
    3e6c:	fe 01       	movw	r30, r28
    3e6e:	eb 58       	subi	r30, 0x8B	; 139
    3e70:	ff 4f       	sbci	r31, 0xFF	; 255
    3e72:	81 e0       	ldi	r24, 0x01	; 1
    3e74:	90 e0       	ldi	r25, 0x00	; 0
    3e76:	91 83       	std	Z+1, r25	; 0x01
    3e78:	80 83       	st	Z, r24
    3e7a:	64 c0       	rjmp	.+200    	; 0x3f44 <SM_U8LoginSys+0xb8a>
	else if (__tmp > 65535)
    3e7c:	fe 01       	movw	r30, r28
    3e7e:	e9 58       	subi	r30, 0x89	; 137
    3e80:	ff 4f       	sbci	r31, 0xFF	; 255
    3e82:	60 81       	ld	r22, Z
    3e84:	71 81       	ldd	r23, Z+1	; 0x01
    3e86:	82 81       	ldd	r24, Z+2	; 0x02
    3e88:	93 81       	ldd	r25, Z+3	; 0x03
    3e8a:	20 e0       	ldi	r18, 0x00	; 0
    3e8c:	3f ef       	ldi	r19, 0xFF	; 255
    3e8e:	4f e7       	ldi	r20, 0x7F	; 127
    3e90:	57 e4       	ldi	r21, 0x47	; 71
    3e92:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3e96:	18 16       	cp	r1, r24
    3e98:	0c f0       	brlt	.+2      	; 0x3e9c <SM_U8LoginSys+0xae2>
    3e9a:	43 c0       	rjmp	.+134    	; 0x3f22 <SM_U8LoginSys+0xb68>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3e9c:	fe 01       	movw	r30, r28
    3e9e:	e5 58       	subi	r30, 0x85	; 133
    3ea0:	ff 4f       	sbci	r31, 0xFF	; 255
    3ea2:	60 81       	ld	r22, Z
    3ea4:	71 81       	ldd	r23, Z+1	; 0x01
    3ea6:	82 81       	ldd	r24, Z+2	; 0x02
    3ea8:	93 81       	ldd	r25, Z+3	; 0x03
    3eaa:	20 e0       	ldi	r18, 0x00	; 0
    3eac:	30 e0       	ldi	r19, 0x00	; 0
    3eae:	40 e2       	ldi	r20, 0x20	; 32
    3eb0:	51 e4       	ldi	r21, 0x41	; 65
    3eb2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3eb6:	dc 01       	movw	r26, r24
    3eb8:	cb 01       	movw	r24, r22
    3eba:	8e 01       	movw	r16, r28
    3ebc:	0b 58       	subi	r16, 0x8B	; 139
    3ebe:	1f 4f       	sbci	r17, 0xFF	; 255
    3ec0:	bc 01       	movw	r22, r24
    3ec2:	cd 01       	movw	r24, r26
    3ec4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3ec8:	dc 01       	movw	r26, r24
    3eca:	cb 01       	movw	r24, r22
    3ecc:	f8 01       	movw	r30, r16
    3ece:	91 83       	std	Z+1, r25	; 0x01
    3ed0:	80 83       	st	Z, r24
    3ed2:	1f c0       	rjmp	.+62     	; 0x3f12 <SM_U8LoginSys+0xb58>
    3ed4:	fe 01       	movw	r30, r28
    3ed6:	ed 58       	subi	r30, 0x8D	; 141
    3ed8:	ff 4f       	sbci	r31, 0xFF	; 255
    3eda:	88 ec       	ldi	r24, 0xC8	; 200
    3edc:	90 e0       	ldi	r25, 0x00	; 0
    3ede:	91 83       	std	Z+1, r25	; 0x01
    3ee0:	80 83       	st	Z, r24
    3ee2:	fe 01       	movw	r30, r28
    3ee4:	ed 58       	subi	r30, 0x8D	; 141
    3ee6:	ff 4f       	sbci	r31, 0xFF	; 255
    3ee8:	80 81       	ld	r24, Z
    3eea:	91 81       	ldd	r25, Z+1	; 0x01
    3eec:	01 97       	sbiw	r24, 0x01	; 1
    3eee:	f1 f7       	brne	.-4      	; 0x3eec <SM_U8LoginSys+0xb32>
    3ef0:	fe 01       	movw	r30, r28
    3ef2:	ed 58       	subi	r30, 0x8D	; 141
    3ef4:	ff 4f       	sbci	r31, 0xFF	; 255
    3ef6:	91 83       	std	Z+1, r25	; 0x01
    3ef8:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3efa:	de 01       	movw	r26, r28
    3efc:	ab 58       	subi	r26, 0x8B	; 139
    3efe:	bf 4f       	sbci	r27, 0xFF	; 255
    3f00:	fe 01       	movw	r30, r28
    3f02:	eb 58       	subi	r30, 0x8B	; 139
    3f04:	ff 4f       	sbci	r31, 0xFF	; 255
    3f06:	80 81       	ld	r24, Z
    3f08:	91 81       	ldd	r25, Z+1	; 0x01
    3f0a:	01 97       	sbiw	r24, 0x01	; 1
    3f0c:	11 96       	adiw	r26, 0x01	; 1
    3f0e:	9c 93       	st	X, r25
    3f10:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3f12:	fe 01       	movw	r30, r28
    3f14:	eb 58       	subi	r30, 0x8B	; 139
    3f16:	ff 4f       	sbci	r31, 0xFF	; 255
    3f18:	80 81       	ld	r24, Z
    3f1a:	91 81       	ldd	r25, Z+1	; 0x01
    3f1c:	00 97       	sbiw	r24, 0x00	; 0
    3f1e:	d1 f6       	brne	.-76     	; 0x3ed4 <SM_U8LoginSys+0xb1a>
    3f20:	27 c0       	rjmp	.+78     	; 0x3f70 <SM_U8LoginSys+0xbb6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3f22:	8e 01       	movw	r16, r28
    3f24:	0b 58       	subi	r16, 0x8B	; 139
    3f26:	1f 4f       	sbci	r17, 0xFF	; 255
    3f28:	fe 01       	movw	r30, r28
    3f2a:	e9 58       	subi	r30, 0x89	; 137
    3f2c:	ff 4f       	sbci	r31, 0xFF	; 255
    3f2e:	60 81       	ld	r22, Z
    3f30:	71 81       	ldd	r23, Z+1	; 0x01
    3f32:	82 81       	ldd	r24, Z+2	; 0x02
    3f34:	93 81       	ldd	r25, Z+3	; 0x03
    3f36:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3f3a:	dc 01       	movw	r26, r24
    3f3c:	cb 01       	movw	r24, r22
    3f3e:	f8 01       	movw	r30, r16
    3f40:	91 83       	std	Z+1, r25	; 0x01
    3f42:	80 83       	st	Z, r24
    3f44:	de 01       	movw	r26, r28
    3f46:	af 58       	subi	r26, 0x8F	; 143
    3f48:	bf 4f       	sbci	r27, 0xFF	; 255
    3f4a:	fe 01       	movw	r30, r28
    3f4c:	eb 58       	subi	r30, 0x8B	; 139
    3f4e:	ff 4f       	sbci	r31, 0xFF	; 255
    3f50:	80 81       	ld	r24, Z
    3f52:	91 81       	ldd	r25, Z+1	; 0x01
    3f54:	8d 93       	st	X+, r24
    3f56:	9c 93       	st	X, r25
    3f58:	fe 01       	movw	r30, r28
    3f5a:	ef 58       	subi	r30, 0x8F	; 143
    3f5c:	ff 4f       	sbci	r31, 0xFF	; 255
    3f5e:	80 81       	ld	r24, Z
    3f60:	91 81       	ldd	r25, Z+1	; 0x01
    3f62:	01 97       	sbiw	r24, 0x01	; 1
    3f64:	f1 f7       	brne	.-4      	; 0x3f62 <SM_U8LoginSys+0xba8>
    3f66:	fe 01       	movw	r30, r28
    3f68:	ef 58       	subi	r30, 0x8F	; 143
    3f6a:	ff 4f       	sbci	r31, 0xFF	; 255
    3f6c:	91 83       	std	Z+1, r25	; 0x01
    3f6e:	80 83       	st	Z, r24
						_delay_ms(700);
						LCD_VoidGoToRowCol(1,0);
    3f70:	81 e0       	ldi	r24, 0x01	; 1
    3f72:	60 e0       	ldi	r22, 0x00	; 0
    3f74:	0e 94 24 15 	call	0x2a48	; 0x2a48 <LCD_VoidGoToRowCol>
						User_Pass= SM_U16EnterPassword();
    3f78:	0e 94 27 25 	call	0x4a4e	; 0x4a4e <SM_U16EnterPassword>
    3f7c:	90 93 9e 02 	sts	0x029E, r25
    3f80:	80 93 9d 02 	sts	0x029D, r24
						if(User_Pass ==2222)
    3f84:	80 91 9d 02 	lds	r24, 0x029D
    3f88:	90 91 9e 02 	lds	r25, 0x029E
    3f8c:	f8 e0       	ldi	r31, 0x08	; 8
    3f8e:	8e 3a       	cpi	r24, 0xAE	; 174
    3f90:	9f 07       	cpc	r25, r31
    3f92:	79 f4       	brne	.+30     	; 0x3fb2 <SM_U8LoginSys+0xbf8>
						{

							LCD_u8WriteString("WELCOME ALAA");
    3f94:	8b ef       	ldi	r24, 0xFB	; 251
    3f96:	90 e0       	ldi	r25, 0x00	; 0
    3f98:	0e 94 dc 15 	call	0x2bb8	; 0x2bb8 <LCD_u8WriteString>
							Local_U8ErrorState = ERROR_STATE_OK;
    3f9c:	81 e0       	ldi	r24, 0x01	; 1
    3f9e:	80 93 9f 02 	sts	0x029F, r24
							 return Local_U8ErrorState;
    3fa2:	20 91 9f 02 	lds	r18, 0x029F
    3fa6:	ca 52       	subi	r28, 0x2A	; 42
    3fa8:	df 4f       	sbci	r29, 0xFF	; 255
    3faa:	28 83       	st	Y, r18
    3fac:	c6 5d       	subi	r28, 0xD6	; 214
    3fae:	d0 40       	sbci	r29, 0x00	; 0
    3fb0:	3d c5       	rjmp	.+2682   	; 0x4a2c <SM_U8LoginSys+0x1672>
						}
						else
						{
							LCD_u8WriteString("INCORRECT PASS");
    3fb2:	81 ec       	ldi	r24, 0xC1	; 193
    3fb4:	90 e0       	ldi	r25, 0x00	; 0
    3fb6:	0e 94 dc 15 	call	0x2bb8	; 0x2bb8 <LCD_u8WriteString>
							LCD_VoidGoToRowCol(1,0);
    3fba:	81 e0       	ldi	r24, 0x01	; 1
    3fbc:	60 e0       	ldi	r22, 0x00	; 0
    3fbe:	0e 94 24 15 	call	0x2a48	; 0x2a48 <LCD_VoidGoToRowCol>
							LCD_u8WriteString("TRY AGAIN");
    3fc2:	80 ed       	ldi	r24, 0xD0	; 208
    3fc4:	90 e0       	ldi	r25, 0x00	; 0
    3fc6:	0e 94 dc 15 	call	0x2bb8	; 0x2bb8 <LCD_u8WriteString>
    3fca:	fe 01       	movw	r30, r28
    3fcc:	e3 59       	subi	r30, 0x93	; 147
    3fce:	ff 4f       	sbci	r31, 0xFF	; 255
    3fd0:	80 e0       	ldi	r24, 0x00	; 0
    3fd2:	90 e0       	ldi	r25, 0x00	; 0
    3fd4:	af e2       	ldi	r26, 0x2F	; 47
    3fd6:	b4 e4       	ldi	r27, 0x44	; 68
    3fd8:	80 83       	st	Z, r24
    3fda:	91 83       	std	Z+1, r25	; 0x01
    3fdc:	a2 83       	std	Z+2, r26	; 0x02
    3fde:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3fe0:	8e 01       	movw	r16, r28
    3fe2:	07 59       	subi	r16, 0x97	; 151
    3fe4:	1f 4f       	sbci	r17, 0xFF	; 255
    3fe6:	fe 01       	movw	r30, r28
    3fe8:	e3 59       	subi	r30, 0x93	; 147
    3fea:	ff 4f       	sbci	r31, 0xFF	; 255
    3fec:	60 81       	ld	r22, Z
    3fee:	71 81       	ldd	r23, Z+1	; 0x01
    3ff0:	82 81       	ldd	r24, Z+2	; 0x02
    3ff2:	93 81       	ldd	r25, Z+3	; 0x03
    3ff4:	20 e0       	ldi	r18, 0x00	; 0
    3ff6:	30 e0       	ldi	r19, 0x00	; 0
    3ff8:	4a ef       	ldi	r20, 0xFA	; 250
    3ffa:	54 e4       	ldi	r21, 0x44	; 68
    3ffc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4000:	dc 01       	movw	r26, r24
    4002:	cb 01       	movw	r24, r22
    4004:	f8 01       	movw	r30, r16
    4006:	80 83       	st	Z, r24
    4008:	91 83       	std	Z+1, r25	; 0x01
    400a:	a2 83       	std	Z+2, r26	; 0x02
    400c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    400e:	fe 01       	movw	r30, r28
    4010:	e7 59       	subi	r30, 0x97	; 151
    4012:	ff 4f       	sbci	r31, 0xFF	; 255
    4014:	60 81       	ld	r22, Z
    4016:	71 81       	ldd	r23, Z+1	; 0x01
    4018:	82 81       	ldd	r24, Z+2	; 0x02
    401a:	93 81       	ldd	r25, Z+3	; 0x03
    401c:	20 e0       	ldi	r18, 0x00	; 0
    401e:	30 e0       	ldi	r19, 0x00	; 0
    4020:	40 e8       	ldi	r20, 0x80	; 128
    4022:	5f e3       	ldi	r21, 0x3F	; 63
    4024:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4028:	88 23       	and	r24, r24
    402a:	44 f4       	brge	.+16     	; 0x403c <SM_U8LoginSys+0xc82>
		__ticks = 1;
    402c:	fe 01       	movw	r30, r28
    402e:	e9 59       	subi	r30, 0x99	; 153
    4030:	ff 4f       	sbci	r31, 0xFF	; 255
    4032:	81 e0       	ldi	r24, 0x01	; 1
    4034:	90 e0       	ldi	r25, 0x00	; 0
    4036:	91 83       	std	Z+1, r25	; 0x01
    4038:	80 83       	st	Z, r24
    403a:	64 c0       	rjmp	.+200    	; 0x4104 <SM_U8LoginSys+0xd4a>
	else if (__tmp > 65535)
    403c:	fe 01       	movw	r30, r28
    403e:	e7 59       	subi	r30, 0x97	; 151
    4040:	ff 4f       	sbci	r31, 0xFF	; 255
    4042:	60 81       	ld	r22, Z
    4044:	71 81       	ldd	r23, Z+1	; 0x01
    4046:	82 81       	ldd	r24, Z+2	; 0x02
    4048:	93 81       	ldd	r25, Z+3	; 0x03
    404a:	20 e0       	ldi	r18, 0x00	; 0
    404c:	3f ef       	ldi	r19, 0xFF	; 255
    404e:	4f e7       	ldi	r20, 0x7F	; 127
    4050:	57 e4       	ldi	r21, 0x47	; 71
    4052:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4056:	18 16       	cp	r1, r24
    4058:	0c f0       	brlt	.+2      	; 0x405c <SM_U8LoginSys+0xca2>
    405a:	43 c0       	rjmp	.+134    	; 0x40e2 <SM_U8LoginSys+0xd28>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    405c:	fe 01       	movw	r30, r28
    405e:	e3 59       	subi	r30, 0x93	; 147
    4060:	ff 4f       	sbci	r31, 0xFF	; 255
    4062:	60 81       	ld	r22, Z
    4064:	71 81       	ldd	r23, Z+1	; 0x01
    4066:	82 81       	ldd	r24, Z+2	; 0x02
    4068:	93 81       	ldd	r25, Z+3	; 0x03
    406a:	20 e0       	ldi	r18, 0x00	; 0
    406c:	30 e0       	ldi	r19, 0x00	; 0
    406e:	40 e2       	ldi	r20, 0x20	; 32
    4070:	51 e4       	ldi	r21, 0x41	; 65
    4072:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4076:	dc 01       	movw	r26, r24
    4078:	cb 01       	movw	r24, r22
    407a:	8e 01       	movw	r16, r28
    407c:	09 59       	subi	r16, 0x99	; 153
    407e:	1f 4f       	sbci	r17, 0xFF	; 255
    4080:	bc 01       	movw	r22, r24
    4082:	cd 01       	movw	r24, r26
    4084:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4088:	dc 01       	movw	r26, r24
    408a:	cb 01       	movw	r24, r22
    408c:	f8 01       	movw	r30, r16
    408e:	91 83       	std	Z+1, r25	; 0x01
    4090:	80 83       	st	Z, r24
    4092:	1f c0       	rjmp	.+62     	; 0x40d2 <SM_U8LoginSys+0xd18>
    4094:	fe 01       	movw	r30, r28
    4096:	eb 59       	subi	r30, 0x9B	; 155
    4098:	ff 4f       	sbci	r31, 0xFF	; 255
    409a:	88 ec       	ldi	r24, 0xC8	; 200
    409c:	90 e0       	ldi	r25, 0x00	; 0
    409e:	91 83       	std	Z+1, r25	; 0x01
    40a0:	80 83       	st	Z, r24
    40a2:	fe 01       	movw	r30, r28
    40a4:	eb 59       	subi	r30, 0x9B	; 155
    40a6:	ff 4f       	sbci	r31, 0xFF	; 255
    40a8:	80 81       	ld	r24, Z
    40aa:	91 81       	ldd	r25, Z+1	; 0x01
    40ac:	01 97       	sbiw	r24, 0x01	; 1
    40ae:	f1 f7       	brne	.-4      	; 0x40ac <SM_U8LoginSys+0xcf2>
    40b0:	fe 01       	movw	r30, r28
    40b2:	eb 59       	subi	r30, 0x9B	; 155
    40b4:	ff 4f       	sbci	r31, 0xFF	; 255
    40b6:	91 83       	std	Z+1, r25	; 0x01
    40b8:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    40ba:	de 01       	movw	r26, r28
    40bc:	a9 59       	subi	r26, 0x99	; 153
    40be:	bf 4f       	sbci	r27, 0xFF	; 255
    40c0:	fe 01       	movw	r30, r28
    40c2:	e9 59       	subi	r30, 0x99	; 153
    40c4:	ff 4f       	sbci	r31, 0xFF	; 255
    40c6:	80 81       	ld	r24, Z
    40c8:	91 81       	ldd	r25, Z+1	; 0x01
    40ca:	01 97       	sbiw	r24, 0x01	; 1
    40cc:	11 96       	adiw	r26, 0x01	; 1
    40ce:	9c 93       	st	X, r25
    40d0:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    40d2:	fe 01       	movw	r30, r28
    40d4:	e9 59       	subi	r30, 0x99	; 153
    40d6:	ff 4f       	sbci	r31, 0xFF	; 255
    40d8:	80 81       	ld	r24, Z
    40da:	91 81       	ldd	r25, Z+1	; 0x01
    40dc:	00 97       	sbiw	r24, 0x00	; 0
    40de:	d1 f6       	brne	.-76     	; 0x4094 <SM_U8LoginSys+0xcda>
    40e0:	27 c0       	rjmp	.+78     	; 0x4130 <SM_U8LoginSys+0xd76>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    40e2:	8e 01       	movw	r16, r28
    40e4:	09 59       	subi	r16, 0x99	; 153
    40e6:	1f 4f       	sbci	r17, 0xFF	; 255
    40e8:	fe 01       	movw	r30, r28
    40ea:	e7 59       	subi	r30, 0x97	; 151
    40ec:	ff 4f       	sbci	r31, 0xFF	; 255
    40ee:	60 81       	ld	r22, Z
    40f0:	71 81       	ldd	r23, Z+1	; 0x01
    40f2:	82 81       	ldd	r24, Z+2	; 0x02
    40f4:	93 81       	ldd	r25, Z+3	; 0x03
    40f6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    40fa:	dc 01       	movw	r26, r24
    40fc:	cb 01       	movw	r24, r22
    40fe:	f8 01       	movw	r30, r16
    4100:	91 83       	std	Z+1, r25	; 0x01
    4102:	80 83       	st	Z, r24
    4104:	de 01       	movw	r26, r28
    4106:	ad 59       	subi	r26, 0x9D	; 157
    4108:	bf 4f       	sbci	r27, 0xFF	; 255
    410a:	fe 01       	movw	r30, r28
    410c:	e9 59       	subi	r30, 0x99	; 153
    410e:	ff 4f       	sbci	r31, 0xFF	; 255
    4110:	80 81       	ld	r24, Z
    4112:	91 81       	ldd	r25, Z+1	; 0x01
    4114:	8d 93       	st	X+, r24
    4116:	9c 93       	st	X, r25
    4118:	fe 01       	movw	r30, r28
    411a:	ed 59       	subi	r30, 0x9D	; 157
    411c:	ff 4f       	sbci	r31, 0xFF	; 255
    411e:	80 81       	ld	r24, Z
    4120:	91 81       	ldd	r25, Z+1	; 0x01
    4122:	01 97       	sbiw	r24, 0x01	; 1
    4124:	f1 f7       	brne	.-4      	; 0x4122 <SM_U8LoginSys+0xd68>
    4126:	fe 01       	movw	r30, r28
    4128:	ed 59       	subi	r30, 0x9D	; 157
    412a:	ff 4f       	sbci	r31, 0xFF	; 255
    412c:	91 83       	std	Z+1, r25	; 0x01
    412e:	80 83       	st	Z, r24
							_delay_ms(700);
							LCD_VoidSendCommand(1);
    4130:	81 e0       	ldi	r24, 0x01	; 1
    4132:	0e 94 b0 11 	call	0x2360	; 0x2360 <LCD_VoidSendCommand>
							if(i==2)
    4136:	fe 01       	movw	r30, r28
    4138:	ec 52       	subi	r30, 0x2C	; 44
    413a:	ff 4f       	sbci	r31, 0xFF	; 255
    413c:	80 81       	ld	r24, Z
    413e:	82 30       	cpi	r24, 0x02	; 2
    4140:	09 f0       	breq	.+2      	; 0x4144 <SM_U8LoginSys+0xd8a>
    4142:	d4 c0       	rjmp	.+424    	; 0x42ec <SM_U8LoginSys+0xf32>
							{
								LCD_VoidGoToRowCol(1,0);
    4144:	81 e0       	ldi	r24, 0x01	; 1
    4146:	60 e0       	ldi	r22, 0x00	; 0
    4148:	0e 94 24 15 	call	0x2a48	; 0x2a48 <LCD_VoidGoToRowCol>
								LCD_u8WriteString("U entered 3 times");
    414c:	8a ed       	ldi	r24, 0xDA	; 218
    414e:	90 e0       	ldi	r25, 0x00	; 0
    4150:	0e 94 dc 15 	call	0x2bb8	; 0x2bb8 <LCD_u8WriteString>

								DIO_U8SetPinDirection(DIO_PORTC,DIO_PIN7,DIO_HIGH);
    4154:	82 e0       	ldi	r24, 0x02	; 2
    4156:	67 e0       	ldi	r22, 0x07	; 7
    4158:	41 e0       	ldi	r20, 0x01	; 1
    415a:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <DIO_U8SetPinDirection>
								DIO_U8SetPinValue(DIO_PORTC,DIO_PIN7,DIO_HIGH);
    415e:	82 e0       	ldi	r24, 0x02	; 2
    4160:	67 e0       	ldi	r22, 0x07	; 7
    4162:	41 e0       	ldi	r20, 0x01	; 1
    4164:	0e 94 15 08 	call	0x102a	; 0x102a <DIO_U8SetPinValue>
    4168:	fe 01       	movw	r30, r28
    416a:	e1 5a       	subi	r30, 0xA1	; 161
    416c:	ff 4f       	sbci	r31, 0xFF	; 255
    416e:	80 e0       	ldi	r24, 0x00	; 0
    4170:	90 e0       	ldi	r25, 0x00	; 0
    4172:	aa ef       	ldi	r26, 0xFA	; 250
    4174:	b3 e4       	ldi	r27, 0x43	; 67
    4176:	80 83       	st	Z, r24
    4178:	91 83       	std	Z+1, r25	; 0x01
    417a:	a2 83       	std	Z+2, r26	; 0x02
    417c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    417e:	8e 01       	movw	r16, r28
    4180:	05 5a       	subi	r16, 0xA5	; 165
    4182:	1f 4f       	sbci	r17, 0xFF	; 255
    4184:	fe 01       	movw	r30, r28
    4186:	e1 5a       	subi	r30, 0xA1	; 161
    4188:	ff 4f       	sbci	r31, 0xFF	; 255
    418a:	60 81       	ld	r22, Z
    418c:	71 81       	ldd	r23, Z+1	; 0x01
    418e:	82 81       	ldd	r24, Z+2	; 0x02
    4190:	93 81       	ldd	r25, Z+3	; 0x03
    4192:	20 e0       	ldi	r18, 0x00	; 0
    4194:	30 e0       	ldi	r19, 0x00	; 0
    4196:	4a ef       	ldi	r20, 0xFA	; 250
    4198:	54 e4       	ldi	r21, 0x44	; 68
    419a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    419e:	dc 01       	movw	r26, r24
    41a0:	cb 01       	movw	r24, r22
    41a2:	f8 01       	movw	r30, r16
    41a4:	80 83       	st	Z, r24
    41a6:	91 83       	std	Z+1, r25	; 0x01
    41a8:	a2 83       	std	Z+2, r26	; 0x02
    41aa:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    41ac:	fe 01       	movw	r30, r28
    41ae:	e5 5a       	subi	r30, 0xA5	; 165
    41b0:	ff 4f       	sbci	r31, 0xFF	; 255
    41b2:	60 81       	ld	r22, Z
    41b4:	71 81       	ldd	r23, Z+1	; 0x01
    41b6:	82 81       	ldd	r24, Z+2	; 0x02
    41b8:	93 81       	ldd	r25, Z+3	; 0x03
    41ba:	20 e0       	ldi	r18, 0x00	; 0
    41bc:	30 e0       	ldi	r19, 0x00	; 0
    41be:	40 e8       	ldi	r20, 0x80	; 128
    41c0:	5f e3       	ldi	r21, 0x3F	; 63
    41c2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    41c6:	88 23       	and	r24, r24
    41c8:	44 f4       	brge	.+16     	; 0x41da <SM_U8LoginSys+0xe20>
		__ticks = 1;
    41ca:	fe 01       	movw	r30, r28
    41cc:	e7 5a       	subi	r30, 0xA7	; 167
    41ce:	ff 4f       	sbci	r31, 0xFF	; 255
    41d0:	81 e0       	ldi	r24, 0x01	; 1
    41d2:	90 e0       	ldi	r25, 0x00	; 0
    41d4:	91 83       	std	Z+1, r25	; 0x01
    41d6:	80 83       	st	Z, r24
    41d8:	64 c0       	rjmp	.+200    	; 0x42a2 <SM_U8LoginSys+0xee8>
	else if (__tmp > 65535)
    41da:	fe 01       	movw	r30, r28
    41dc:	e5 5a       	subi	r30, 0xA5	; 165
    41de:	ff 4f       	sbci	r31, 0xFF	; 255
    41e0:	60 81       	ld	r22, Z
    41e2:	71 81       	ldd	r23, Z+1	; 0x01
    41e4:	82 81       	ldd	r24, Z+2	; 0x02
    41e6:	93 81       	ldd	r25, Z+3	; 0x03
    41e8:	20 e0       	ldi	r18, 0x00	; 0
    41ea:	3f ef       	ldi	r19, 0xFF	; 255
    41ec:	4f e7       	ldi	r20, 0x7F	; 127
    41ee:	57 e4       	ldi	r21, 0x47	; 71
    41f0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    41f4:	18 16       	cp	r1, r24
    41f6:	0c f0       	brlt	.+2      	; 0x41fa <SM_U8LoginSys+0xe40>
    41f8:	43 c0       	rjmp	.+134    	; 0x4280 <SM_U8LoginSys+0xec6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    41fa:	fe 01       	movw	r30, r28
    41fc:	e1 5a       	subi	r30, 0xA1	; 161
    41fe:	ff 4f       	sbci	r31, 0xFF	; 255
    4200:	60 81       	ld	r22, Z
    4202:	71 81       	ldd	r23, Z+1	; 0x01
    4204:	82 81       	ldd	r24, Z+2	; 0x02
    4206:	93 81       	ldd	r25, Z+3	; 0x03
    4208:	20 e0       	ldi	r18, 0x00	; 0
    420a:	30 e0       	ldi	r19, 0x00	; 0
    420c:	40 e2       	ldi	r20, 0x20	; 32
    420e:	51 e4       	ldi	r21, 0x41	; 65
    4210:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4214:	dc 01       	movw	r26, r24
    4216:	cb 01       	movw	r24, r22
    4218:	8e 01       	movw	r16, r28
    421a:	07 5a       	subi	r16, 0xA7	; 167
    421c:	1f 4f       	sbci	r17, 0xFF	; 255
    421e:	bc 01       	movw	r22, r24
    4220:	cd 01       	movw	r24, r26
    4222:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4226:	dc 01       	movw	r26, r24
    4228:	cb 01       	movw	r24, r22
    422a:	f8 01       	movw	r30, r16
    422c:	91 83       	std	Z+1, r25	; 0x01
    422e:	80 83       	st	Z, r24
    4230:	1f c0       	rjmp	.+62     	; 0x4270 <SM_U8LoginSys+0xeb6>
    4232:	fe 01       	movw	r30, r28
    4234:	e9 5a       	subi	r30, 0xA9	; 169
    4236:	ff 4f       	sbci	r31, 0xFF	; 255
    4238:	88 ec       	ldi	r24, 0xC8	; 200
    423a:	90 e0       	ldi	r25, 0x00	; 0
    423c:	91 83       	std	Z+1, r25	; 0x01
    423e:	80 83       	st	Z, r24
    4240:	fe 01       	movw	r30, r28
    4242:	e9 5a       	subi	r30, 0xA9	; 169
    4244:	ff 4f       	sbci	r31, 0xFF	; 255
    4246:	80 81       	ld	r24, Z
    4248:	91 81       	ldd	r25, Z+1	; 0x01
    424a:	01 97       	sbiw	r24, 0x01	; 1
    424c:	f1 f7       	brne	.-4      	; 0x424a <SM_U8LoginSys+0xe90>
    424e:	fe 01       	movw	r30, r28
    4250:	e9 5a       	subi	r30, 0xA9	; 169
    4252:	ff 4f       	sbci	r31, 0xFF	; 255
    4254:	91 83       	std	Z+1, r25	; 0x01
    4256:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4258:	de 01       	movw	r26, r28
    425a:	a7 5a       	subi	r26, 0xA7	; 167
    425c:	bf 4f       	sbci	r27, 0xFF	; 255
    425e:	fe 01       	movw	r30, r28
    4260:	e7 5a       	subi	r30, 0xA7	; 167
    4262:	ff 4f       	sbci	r31, 0xFF	; 255
    4264:	80 81       	ld	r24, Z
    4266:	91 81       	ldd	r25, Z+1	; 0x01
    4268:	01 97       	sbiw	r24, 0x01	; 1
    426a:	11 96       	adiw	r26, 0x01	; 1
    426c:	9c 93       	st	X, r25
    426e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4270:	fe 01       	movw	r30, r28
    4272:	e7 5a       	subi	r30, 0xA7	; 167
    4274:	ff 4f       	sbci	r31, 0xFF	; 255
    4276:	80 81       	ld	r24, Z
    4278:	91 81       	ldd	r25, Z+1	; 0x01
    427a:	00 97       	sbiw	r24, 0x00	; 0
    427c:	d1 f6       	brne	.-76     	; 0x4232 <SM_U8LoginSys+0xe78>
    427e:	27 c0       	rjmp	.+78     	; 0x42ce <SM_U8LoginSys+0xf14>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4280:	8e 01       	movw	r16, r28
    4282:	07 5a       	subi	r16, 0xA7	; 167
    4284:	1f 4f       	sbci	r17, 0xFF	; 255
    4286:	fe 01       	movw	r30, r28
    4288:	e5 5a       	subi	r30, 0xA5	; 165
    428a:	ff 4f       	sbci	r31, 0xFF	; 255
    428c:	60 81       	ld	r22, Z
    428e:	71 81       	ldd	r23, Z+1	; 0x01
    4290:	82 81       	ldd	r24, Z+2	; 0x02
    4292:	93 81       	ldd	r25, Z+3	; 0x03
    4294:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4298:	dc 01       	movw	r26, r24
    429a:	cb 01       	movw	r24, r22
    429c:	f8 01       	movw	r30, r16
    429e:	91 83       	std	Z+1, r25	; 0x01
    42a0:	80 83       	st	Z, r24
    42a2:	de 01       	movw	r26, r28
    42a4:	ab 5a       	subi	r26, 0xAB	; 171
    42a6:	bf 4f       	sbci	r27, 0xFF	; 255
    42a8:	fe 01       	movw	r30, r28
    42aa:	e7 5a       	subi	r30, 0xA7	; 167
    42ac:	ff 4f       	sbci	r31, 0xFF	; 255
    42ae:	80 81       	ld	r24, Z
    42b0:	91 81       	ldd	r25, Z+1	; 0x01
    42b2:	8d 93       	st	X+, r24
    42b4:	9c 93       	st	X, r25
    42b6:	fe 01       	movw	r30, r28
    42b8:	eb 5a       	subi	r30, 0xAB	; 171
    42ba:	ff 4f       	sbci	r31, 0xFF	; 255
    42bc:	80 81       	ld	r24, Z
    42be:	91 81       	ldd	r25, Z+1	; 0x01
    42c0:	01 97       	sbiw	r24, 0x01	; 1
    42c2:	f1 f7       	brne	.-4      	; 0x42c0 <SM_U8LoginSys+0xf06>
    42c4:	fe 01       	movw	r30, r28
    42c6:	eb 5a       	subi	r30, 0xAB	; 171
    42c8:	ff 4f       	sbci	r31, 0xFF	; 255
    42ca:	91 83       	std	Z+1, r25	; 0x01
    42cc:	80 83       	st	Z, r24
								_delay_ms(500);
								DIO_U8SetPinValue(DIO_PORTC,DIO_PIN7,DIO_LOW);
    42ce:	82 e0       	ldi	r24, 0x02	; 2
    42d0:	67 e0       	ldi	r22, 0x07	; 7
    42d2:	40 e0       	ldi	r20, 0x00	; 0
    42d4:	0e 94 15 08 	call	0x102a	; 0x102a <DIO_U8SetPinValue>
								Local_U8ErrorState = ERROR_STATE_NOK;
    42d8:	10 92 9f 02 	sts	0x029F, r1
								 return Local_U8ErrorState;
    42dc:	f0 91 9f 02 	lds	r31, 0x029F
    42e0:	ca 52       	subi	r28, 0x2A	; 42
    42e2:	df 4f       	sbci	r29, 0xFF	; 255
    42e4:	f8 83       	st	Y, r31
    42e6:	c6 5d       	subi	r28, 0xD6	; 214
    42e8:	d0 40       	sbci	r29, 0x00	; 0
    42ea:	a0 c3       	rjmp	.+1856   	; 0x4a2c <SM_U8LoginSys+0x1672>
					LCD_VoidGoToRowCol(1,0);
					LCD_u8WriteString("WELCOME USER_1");

					_delay_ms(1000);
					LCD_VoidSendCommand(1);
						for(u8 i=0;i<3;i++)
    42ec:	de 01       	movw	r26, r28
    42ee:	ac 52       	subi	r26, 0x2C	; 44
    42f0:	bf 4f       	sbci	r27, 0xFF	; 255
    42f2:	fe 01       	movw	r30, r28
    42f4:	ec 52       	subi	r30, 0x2C	; 44
    42f6:	ff 4f       	sbci	r31, 0xFF	; 255
    42f8:	80 81       	ld	r24, Z
    42fa:	8f 5f       	subi	r24, 0xFF	; 255
    42fc:	8c 93       	st	X, r24
    42fe:	fe 01       	movw	r30, r28
    4300:	ec 52       	subi	r30, 0x2C	; 44
    4302:	ff 4f       	sbci	r31, 0xFF	; 255
    4304:	80 81       	ld	r24, Z
    4306:	83 30       	cpi	r24, 0x03	; 3
    4308:	08 f4       	brcc	.+2      	; 0x430c <SM_U8LoginSys+0xf52>
    430a:	7b cd       	rjmp	.-1290   	; 0x3e02 <SM_U8LoginSys+0xa48>
    430c:	1a c9       	rjmp	.-3532   	; 0x3542 <SM_U8LoginSys+0x188>
						}
					}
				} break;
				case '2':
				{
					LCD_VoidGoToRowCol(1,0);
    430e:	81 e0       	ldi	r24, 0x01	; 1
    4310:	60 e0       	ldi	r22, 0x00	; 0
    4312:	0e 94 24 15 	call	0x2a48	; 0x2a48 <LCD_VoidGoToRowCol>
					LCD_u8WriteString("WELCOME USER_2");
    4316:	88 e0       	ldi	r24, 0x08	; 8
    4318:	91 e0       	ldi	r25, 0x01	; 1
    431a:	0e 94 dc 15 	call	0x2bb8	; 0x2bb8 <LCD_u8WriteString>
    431e:	fe 01       	movw	r30, r28
    4320:	ef 5a       	subi	r30, 0xAF	; 175
    4322:	ff 4f       	sbci	r31, 0xFF	; 255
    4324:	80 e0       	ldi	r24, 0x00	; 0
    4326:	90 e0       	ldi	r25, 0x00	; 0
    4328:	aa e7       	ldi	r26, 0x7A	; 122
    432a:	b4 e4       	ldi	r27, 0x44	; 68
    432c:	80 83       	st	Z, r24
    432e:	91 83       	std	Z+1, r25	; 0x01
    4330:	a2 83       	std	Z+2, r26	; 0x02
    4332:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4334:	8e 01       	movw	r16, r28
    4336:	03 5b       	subi	r16, 0xB3	; 179
    4338:	1f 4f       	sbci	r17, 0xFF	; 255
    433a:	fe 01       	movw	r30, r28
    433c:	ef 5a       	subi	r30, 0xAF	; 175
    433e:	ff 4f       	sbci	r31, 0xFF	; 255
    4340:	60 81       	ld	r22, Z
    4342:	71 81       	ldd	r23, Z+1	; 0x01
    4344:	82 81       	ldd	r24, Z+2	; 0x02
    4346:	93 81       	ldd	r25, Z+3	; 0x03
    4348:	20 e0       	ldi	r18, 0x00	; 0
    434a:	30 e0       	ldi	r19, 0x00	; 0
    434c:	4a ef       	ldi	r20, 0xFA	; 250
    434e:	54 e4       	ldi	r21, 0x44	; 68
    4350:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4354:	dc 01       	movw	r26, r24
    4356:	cb 01       	movw	r24, r22
    4358:	f8 01       	movw	r30, r16
    435a:	80 83       	st	Z, r24
    435c:	91 83       	std	Z+1, r25	; 0x01
    435e:	a2 83       	std	Z+2, r26	; 0x02
    4360:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4362:	fe 01       	movw	r30, r28
    4364:	e3 5b       	subi	r30, 0xB3	; 179
    4366:	ff 4f       	sbci	r31, 0xFF	; 255
    4368:	60 81       	ld	r22, Z
    436a:	71 81       	ldd	r23, Z+1	; 0x01
    436c:	82 81       	ldd	r24, Z+2	; 0x02
    436e:	93 81       	ldd	r25, Z+3	; 0x03
    4370:	20 e0       	ldi	r18, 0x00	; 0
    4372:	30 e0       	ldi	r19, 0x00	; 0
    4374:	40 e8       	ldi	r20, 0x80	; 128
    4376:	5f e3       	ldi	r21, 0x3F	; 63
    4378:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    437c:	88 23       	and	r24, r24
    437e:	44 f4       	brge	.+16     	; 0x4390 <SM_U8LoginSys+0xfd6>
		__ticks = 1;
    4380:	fe 01       	movw	r30, r28
    4382:	e5 5b       	subi	r30, 0xB5	; 181
    4384:	ff 4f       	sbci	r31, 0xFF	; 255
    4386:	81 e0       	ldi	r24, 0x01	; 1
    4388:	90 e0       	ldi	r25, 0x00	; 0
    438a:	91 83       	std	Z+1, r25	; 0x01
    438c:	80 83       	st	Z, r24
    438e:	64 c0       	rjmp	.+200    	; 0x4458 <SM_U8LoginSys+0x109e>
	else if (__tmp > 65535)
    4390:	fe 01       	movw	r30, r28
    4392:	e3 5b       	subi	r30, 0xB3	; 179
    4394:	ff 4f       	sbci	r31, 0xFF	; 255
    4396:	60 81       	ld	r22, Z
    4398:	71 81       	ldd	r23, Z+1	; 0x01
    439a:	82 81       	ldd	r24, Z+2	; 0x02
    439c:	93 81       	ldd	r25, Z+3	; 0x03
    439e:	20 e0       	ldi	r18, 0x00	; 0
    43a0:	3f ef       	ldi	r19, 0xFF	; 255
    43a2:	4f e7       	ldi	r20, 0x7F	; 127
    43a4:	57 e4       	ldi	r21, 0x47	; 71
    43a6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    43aa:	18 16       	cp	r1, r24
    43ac:	0c f0       	brlt	.+2      	; 0x43b0 <SM_U8LoginSys+0xff6>
    43ae:	43 c0       	rjmp	.+134    	; 0x4436 <SM_U8LoginSys+0x107c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    43b0:	fe 01       	movw	r30, r28
    43b2:	ef 5a       	subi	r30, 0xAF	; 175
    43b4:	ff 4f       	sbci	r31, 0xFF	; 255
    43b6:	60 81       	ld	r22, Z
    43b8:	71 81       	ldd	r23, Z+1	; 0x01
    43ba:	82 81       	ldd	r24, Z+2	; 0x02
    43bc:	93 81       	ldd	r25, Z+3	; 0x03
    43be:	20 e0       	ldi	r18, 0x00	; 0
    43c0:	30 e0       	ldi	r19, 0x00	; 0
    43c2:	40 e2       	ldi	r20, 0x20	; 32
    43c4:	51 e4       	ldi	r21, 0x41	; 65
    43c6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    43ca:	dc 01       	movw	r26, r24
    43cc:	cb 01       	movw	r24, r22
    43ce:	8e 01       	movw	r16, r28
    43d0:	05 5b       	subi	r16, 0xB5	; 181
    43d2:	1f 4f       	sbci	r17, 0xFF	; 255
    43d4:	bc 01       	movw	r22, r24
    43d6:	cd 01       	movw	r24, r26
    43d8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    43dc:	dc 01       	movw	r26, r24
    43de:	cb 01       	movw	r24, r22
    43e0:	f8 01       	movw	r30, r16
    43e2:	91 83       	std	Z+1, r25	; 0x01
    43e4:	80 83       	st	Z, r24
    43e6:	1f c0       	rjmp	.+62     	; 0x4426 <SM_U8LoginSys+0x106c>
    43e8:	fe 01       	movw	r30, r28
    43ea:	e7 5b       	subi	r30, 0xB7	; 183
    43ec:	ff 4f       	sbci	r31, 0xFF	; 255
    43ee:	88 ec       	ldi	r24, 0xC8	; 200
    43f0:	90 e0       	ldi	r25, 0x00	; 0
    43f2:	91 83       	std	Z+1, r25	; 0x01
    43f4:	80 83       	st	Z, r24
    43f6:	fe 01       	movw	r30, r28
    43f8:	e7 5b       	subi	r30, 0xB7	; 183
    43fa:	ff 4f       	sbci	r31, 0xFF	; 255
    43fc:	80 81       	ld	r24, Z
    43fe:	91 81       	ldd	r25, Z+1	; 0x01
    4400:	01 97       	sbiw	r24, 0x01	; 1
    4402:	f1 f7       	brne	.-4      	; 0x4400 <SM_U8LoginSys+0x1046>
    4404:	fe 01       	movw	r30, r28
    4406:	e7 5b       	subi	r30, 0xB7	; 183
    4408:	ff 4f       	sbci	r31, 0xFF	; 255
    440a:	91 83       	std	Z+1, r25	; 0x01
    440c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    440e:	de 01       	movw	r26, r28
    4410:	a5 5b       	subi	r26, 0xB5	; 181
    4412:	bf 4f       	sbci	r27, 0xFF	; 255
    4414:	fe 01       	movw	r30, r28
    4416:	e5 5b       	subi	r30, 0xB5	; 181
    4418:	ff 4f       	sbci	r31, 0xFF	; 255
    441a:	80 81       	ld	r24, Z
    441c:	91 81       	ldd	r25, Z+1	; 0x01
    441e:	01 97       	sbiw	r24, 0x01	; 1
    4420:	11 96       	adiw	r26, 0x01	; 1
    4422:	9c 93       	st	X, r25
    4424:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4426:	fe 01       	movw	r30, r28
    4428:	e5 5b       	subi	r30, 0xB5	; 181
    442a:	ff 4f       	sbci	r31, 0xFF	; 255
    442c:	80 81       	ld	r24, Z
    442e:	91 81       	ldd	r25, Z+1	; 0x01
    4430:	00 97       	sbiw	r24, 0x00	; 0
    4432:	d1 f6       	brne	.-76     	; 0x43e8 <SM_U8LoginSys+0x102e>
    4434:	27 c0       	rjmp	.+78     	; 0x4484 <SM_U8LoginSys+0x10ca>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4436:	8e 01       	movw	r16, r28
    4438:	05 5b       	subi	r16, 0xB5	; 181
    443a:	1f 4f       	sbci	r17, 0xFF	; 255
    443c:	fe 01       	movw	r30, r28
    443e:	e3 5b       	subi	r30, 0xB3	; 179
    4440:	ff 4f       	sbci	r31, 0xFF	; 255
    4442:	60 81       	ld	r22, Z
    4444:	71 81       	ldd	r23, Z+1	; 0x01
    4446:	82 81       	ldd	r24, Z+2	; 0x02
    4448:	93 81       	ldd	r25, Z+3	; 0x03
    444a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    444e:	dc 01       	movw	r26, r24
    4450:	cb 01       	movw	r24, r22
    4452:	f8 01       	movw	r30, r16
    4454:	91 83       	std	Z+1, r25	; 0x01
    4456:	80 83       	st	Z, r24
    4458:	de 01       	movw	r26, r28
    445a:	a9 5b       	subi	r26, 0xB9	; 185
    445c:	bf 4f       	sbci	r27, 0xFF	; 255
    445e:	fe 01       	movw	r30, r28
    4460:	e5 5b       	subi	r30, 0xB5	; 181
    4462:	ff 4f       	sbci	r31, 0xFF	; 255
    4464:	80 81       	ld	r24, Z
    4466:	91 81       	ldd	r25, Z+1	; 0x01
    4468:	8d 93       	st	X+, r24
    446a:	9c 93       	st	X, r25
    446c:	fe 01       	movw	r30, r28
    446e:	e9 5b       	subi	r30, 0xB9	; 185
    4470:	ff 4f       	sbci	r31, 0xFF	; 255
    4472:	80 81       	ld	r24, Z
    4474:	91 81       	ldd	r25, Z+1	; 0x01
    4476:	01 97       	sbiw	r24, 0x01	; 1
    4478:	f1 f7       	brne	.-4      	; 0x4476 <SM_U8LoginSys+0x10bc>
    447a:	fe 01       	movw	r30, r28
    447c:	e9 5b       	subi	r30, 0xB9	; 185
    447e:	ff 4f       	sbci	r31, 0xFF	; 255
    4480:	91 83       	std	Z+1, r25	; 0x01
    4482:	80 83       	st	Z, r24

					_delay_ms(1000);
					LCD_VoidSendCommand(1);
    4484:	81 e0       	ldi	r24, 0x01	; 1
    4486:	0e 94 b0 11 	call	0x2360	; 0x2360 <LCD_VoidSendCommand>
						for(u8 i=0;i<3;i++)
    448a:	fe 01       	movw	r30, r28
    448c:	ed 52       	subi	r30, 0x2D	; 45
    448e:	ff 4f       	sbci	r31, 0xFF	; 255
    4490:	10 82       	st	Z, r1
    4492:	ce c1       	rjmp	.+924    	; 0x4830 <SM_U8LoginSys+0x1476>
					{

						LCD_u8WriteString("ENTER YOUR PASS");
    4494:	85 ea       	ldi	r24, 0xA5	; 165
    4496:	90 e0       	ldi	r25, 0x00	; 0
    4498:	0e 94 dc 15 	call	0x2bb8	; 0x2bb8 <LCD_u8WriteString>
    449c:	fe 01       	movw	r30, r28
    449e:	ed 5b       	subi	r30, 0xBD	; 189
    44a0:	ff 4f       	sbci	r31, 0xFF	; 255
    44a2:	80 e0       	ldi	r24, 0x00	; 0
    44a4:	90 e0       	ldi	r25, 0x00	; 0
    44a6:	af e2       	ldi	r26, 0x2F	; 47
    44a8:	b4 e4       	ldi	r27, 0x44	; 68
    44aa:	80 83       	st	Z, r24
    44ac:	91 83       	std	Z+1, r25	; 0x01
    44ae:	a2 83       	std	Z+2, r26	; 0x02
    44b0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    44b2:	8e 01       	movw	r16, r28
    44b4:	01 5c       	subi	r16, 0xC1	; 193
    44b6:	1f 4f       	sbci	r17, 0xFF	; 255
    44b8:	fe 01       	movw	r30, r28
    44ba:	ed 5b       	subi	r30, 0xBD	; 189
    44bc:	ff 4f       	sbci	r31, 0xFF	; 255
    44be:	60 81       	ld	r22, Z
    44c0:	71 81       	ldd	r23, Z+1	; 0x01
    44c2:	82 81       	ldd	r24, Z+2	; 0x02
    44c4:	93 81       	ldd	r25, Z+3	; 0x03
    44c6:	20 e0       	ldi	r18, 0x00	; 0
    44c8:	30 e0       	ldi	r19, 0x00	; 0
    44ca:	4a ef       	ldi	r20, 0xFA	; 250
    44cc:	54 e4       	ldi	r21, 0x44	; 68
    44ce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    44d2:	dc 01       	movw	r26, r24
    44d4:	cb 01       	movw	r24, r22
    44d6:	f8 01       	movw	r30, r16
    44d8:	80 83       	st	Z, r24
    44da:	91 83       	std	Z+1, r25	; 0x01
    44dc:	a2 83       	std	Z+2, r26	; 0x02
    44de:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    44e0:	fe 01       	movw	r30, r28
    44e2:	ff 96       	adiw	r30, 0x3f	; 63
    44e4:	60 81       	ld	r22, Z
    44e6:	71 81       	ldd	r23, Z+1	; 0x01
    44e8:	82 81       	ldd	r24, Z+2	; 0x02
    44ea:	93 81       	ldd	r25, Z+3	; 0x03
    44ec:	20 e0       	ldi	r18, 0x00	; 0
    44ee:	30 e0       	ldi	r19, 0x00	; 0
    44f0:	40 e8       	ldi	r20, 0x80	; 128
    44f2:	5f e3       	ldi	r21, 0x3F	; 63
    44f4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    44f8:	88 23       	and	r24, r24
    44fa:	2c f4       	brge	.+10     	; 0x4506 <SM_U8LoginSys+0x114c>
		__ticks = 1;
    44fc:	81 e0       	ldi	r24, 0x01	; 1
    44fe:	90 e0       	ldi	r25, 0x00	; 0
    4500:	9e af       	std	Y+62, r25	; 0x3e
    4502:	8d af       	std	Y+61, r24	; 0x3d
    4504:	46 c0       	rjmp	.+140    	; 0x4592 <SM_U8LoginSys+0x11d8>
	else if (__tmp > 65535)
    4506:	fe 01       	movw	r30, r28
    4508:	ff 96       	adiw	r30, 0x3f	; 63
    450a:	60 81       	ld	r22, Z
    450c:	71 81       	ldd	r23, Z+1	; 0x01
    450e:	82 81       	ldd	r24, Z+2	; 0x02
    4510:	93 81       	ldd	r25, Z+3	; 0x03
    4512:	20 e0       	ldi	r18, 0x00	; 0
    4514:	3f ef       	ldi	r19, 0xFF	; 255
    4516:	4f e7       	ldi	r20, 0x7F	; 127
    4518:	57 e4       	ldi	r21, 0x47	; 71
    451a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    451e:	18 16       	cp	r1, r24
    4520:	64 f5       	brge	.+88     	; 0x457a <SM_U8LoginSys+0x11c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4522:	fe 01       	movw	r30, r28
    4524:	ed 5b       	subi	r30, 0xBD	; 189
    4526:	ff 4f       	sbci	r31, 0xFF	; 255
    4528:	60 81       	ld	r22, Z
    452a:	71 81       	ldd	r23, Z+1	; 0x01
    452c:	82 81       	ldd	r24, Z+2	; 0x02
    452e:	93 81       	ldd	r25, Z+3	; 0x03
    4530:	20 e0       	ldi	r18, 0x00	; 0
    4532:	30 e0       	ldi	r19, 0x00	; 0
    4534:	40 e2       	ldi	r20, 0x20	; 32
    4536:	51 e4       	ldi	r21, 0x41	; 65
    4538:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    453c:	dc 01       	movw	r26, r24
    453e:	cb 01       	movw	r24, r22
    4540:	bc 01       	movw	r22, r24
    4542:	cd 01       	movw	r24, r26
    4544:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4548:	dc 01       	movw	r26, r24
    454a:	cb 01       	movw	r24, r22
    454c:	9e af       	std	Y+62, r25	; 0x3e
    454e:	8d af       	std	Y+61, r24	; 0x3d
    4550:	0f c0       	rjmp	.+30     	; 0x4570 <SM_U8LoginSys+0x11b6>
    4552:	88 ec       	ldi	r24, 0xC8	; 200
    4554:	90 e0       	ldi	r25, 0x00	; 0
    4556:	9c af       	std	Y+60, r25	; 0x3c
    4558:	8b af       	std	Y+59, r24	; 0x3b
    455a:	8b ad       	ldd	r24, Y+59	; 0x3b
    455c:	9c ad       	ldd	r25, Y+60	; 0x3c
    455e:	01 97       	sbiw	r24, 0x01	; 1
    4560:	f1 f7       	brne	.-4      	; 0x455e <SM_U8LoginSys+0x11a4>
    4562:	9c af       	std	Y+60, r25	; 0x3c
    4564:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4566:	8d ad       	ldd	r24, Y+61	; 0x3d
    4568:	9e ad       	ldd	r25, Y+62	; 0x3e
    456a:	01 97       	sbiw	r24, 0x01	; 1
    456c:	9e af       	std	Y+62, r25	; 0x3e
    456e:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4570:	8d ad       	ldd	r24, Y+61	; 0x3d
    4572:	9e ad       	ldd	r25, Y+62	; 0x3e
    4574:	00 97       	sbiw	r24, 0x00	; 0
    4576:	69 f7       	brne	.-38     	; 0x4552 <SM_U8LoginSys+0x1198>
    4578:	16 c0       	rjmp	.+44     	; 0x45a6 <SM_U8LoginSys+0x11ec>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    457a:	fe 01       	movw	r30, r28
    457c:	ff 96       	adiw	r30, 0x3f	; 63
    457e:	60 81       	ld	r22, Z
    4580:	71 81       	ldd	r23, Z+1	; 0x01
    4582:	82 81       	ldd	r24, Z+2	; 0x02
    4584:	93 81       	ldd	r25, Z+3	; 0x03
    4586:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    458a:	dc 01       	movw	r26, r24
    458c:	cb 01       	movw	r24, r22
    458e:	9e af       	std	Y+62, r25	; 0x3e
    4590:	8d af       	std	Y+61, r24	; 0x3d
    4592:	8d ad       	ldd	r24, Y+61	; 0x3d
    4594:	9e ad       	ldd	r25, Y+62	; 0x3e
    4596:	9a af       	std	Y+58, r25	; 0x3a
    4598:	89 af       	std	Y+57, r24	; 0x39
    459a:	89 ad       	ldd	r24, Y+57	; 0x39
    459c:	9a ad       	ldd	r25, Y+58	; 0x3a
    459e:	01 97       	sbiw	r24, 0x01	; 1
    45a0:	f1 f7       	brne	.-4      	; 0x459e <SM_U8LoginSys+0x11e4>
    45a2:	9a af       	std	Y+58, r25	; 0x3a
    45a4:	89 af       	std	Y+57, r24	; 0x39
						_delay_ms(700);
						LCD_VoidGoToRowCol(1,0);
    45a6:	81 e0       	ldi	r24, 0x01	; 1
    45a8:	60 e0       	ldi	r22, 0x00	; 0
    45aa:	0e 94 24 15 	call	0x2a48	; 0x2a48 <LCD_VoidGoToRowCol>
						User_Pass= SM_U16EnterPassword();
    45ae:	0e 94 27 25 	call	0x4a4e	; 0x4a4e <SM_U16EnterPassword>
    45b2:	90 93 9e 02 	sts	0x029E, r25
    45b6:	80 93 9d 02 	sts	0x029D, r24
						if(User_Pass ==3333)
    45ba:	80 91 9d 02 	lds	r24, 0x029D
    45be:	90 91 9e 02 	lds	r25, 0x029E
    45c2:	fd e0       	ldi	r31, 0x0D	; 13
    45c4:	85 30       	cpi	r24, 0x05	; 5
    45c6:	9f 07       	cpc	r25, r31
    45c8:	79 f4       	brne	.+30     	; 0x45e8 <SM_U8LoginSys+0x122e>
						{

							LCD_u8WriteString("WELCOME MAI");
    45ca:	87 e1       	ldi	r24, 0x17	; 23
    45cc:	91 e0       	ldi	r25, 0x01	; 1
    45ce:	0e 94 dc 15 	call	0x2bb8	; 0x2bb8 <LCD_u8WriteString>

							Local_U8ErrorState = ERROR_STATE_OK;
    45d2:	81 e0       	ldi	r24, 0x01	; 1
    45d4:	80 93 9f 02 	sts	0x029F, r24
							 return Local_U8ErrorState;
    45d8:	20 91 9f 02 	lds	r18, 0x029F
    45dc:	ca 52       	subi	r28, 0x2A	; 42
    45de:	df 4f       	sbci	r29, 0xFF	; 255
    45e0:	28 83       	st	Y, r18
    45e2:	c6 5d       	subi	r28, 0xD6	; 214
    45e4:	d0 40       	sbci	r29, 0x00	; 0
    45e6:	22 c2       	rjmp	.+1092   	; 0x4a2c <SM_U8LoginSys+0x1672>

						}
						else
						{
							LCD_u8WriteString("INCORRECT PASS");
    45e8:	81 ec       	ldi	r24, 0xC1	; 193
    45ea:	90 e0       	ldi	r25, 0x00	; 0
    45ec:	0e 94 dc 15 	call	0x2bb8	; 0x2bb8 <LCD_u8WriteString>
							LCD_VoidGoToRowCol(1,0);
    45f0:	81 e0       	ldi	r24, 0x01	; 1
    45f2:	60 e0       	ldi	r22, 0x00	; 0
    45f4:	0e 94 24 15 	call	0x2a48	; 0x2a48 <LCD_VoidGoToRowCol>
							LCD_u8WriteString("TRY AGAIN");
    45f8:	80 ed       	ldi	r24, 0xD0	; 208
    45fa:	90 e0       	ldi	r25, 0x00	; 0
    45fc:	0e 94 dc 15 	call	0x2bb8	; 0x2bb8 <LCD_u8WriteString>
    4600:	80 e0       	ldi	r24, 0x00	; 0
    4602:	90 e0       	ldi	r25, 0x00	; 0
    4604:	af e2       	ldi	r26, 0x2F	; 47
    4606:	b4 e4       	ldi	r27, 0x44	; 68
    4608:	8d ab       	std	Y+53, r24	; 0x35
    460a:	9e ab       	std	Y+54, r25	; 0x36
    460c:	af ab       	std	Y+55, r26	; 0x37
    460e:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4610:	6d a9       	ldd	r22, Y+53	; 0x35
    4612:	7e a9       	ldd	r23, Y+54	; 0x36
    4614:	8f a9       	ldd	r24, Y+55	; 0x37
    4616:	98 ad       	ldd	r25, Y+56	; 0x38
    4618:	20 e0       	ldi	r18, 0x00	; 0
    461a:	30 e0       	ldi	r19, 0x00	; 0
    461c:	4a ef       	ldi	r20, 0xFA	; 250
    461e:	54 e4       	ldi	r21, 0x44	; 68
    4620:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4624:	dc 01       	movw	r26, r24
    4626:	cb 01       	movw	r24, r22
    4628:	89 ab       	std	Y+49, r24	; 0x31
    462a:	9a ab       	std	Y+50, r25	; 0x32
    462c:	ab ab       	std	Y+51, r26	; 0x33
    462e:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    4630:	69 a9       	ldd	r22, Y+49	; 0x31
    4632:	7a a9       	ldd	r23, Y+50	; 0x32
    4634:	8b a9       	ldd	r24, Y+51	; 0x33
    4636:	9c a9       	ldd	r25, Y+52	; 0x34
    4638:	20 e0       	ldi	r18, 0x00	; 0
    463a:	30 e0       	ldi	r19, 0x00	; 0
    463c:	40 e8       	ldi	r20, 0x80	; 128
    463e:	5f e3       	ldi	r21, 0x3F	; 63
    4640:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4644:	88 23       	and	r24, r24
    4646:	2c f4       	brge	.+10     	; 0x4652 <SM_U8LoginSys+0x1298>
		__ticks = 1;
    4648:	81 e0       	ldi	r24, 0x01	; 1
    464a:	90 e0       	ldi	r25, 0x00	; 0
    464c:	98 ab       	std	Y+48, r25	; 0x30
    464e:	8f a7       	std	Y+47, r24	; 0x2f
    4650:	3f c0       	rjmp	.+126    	; 0x46d0 <SM_U8LoginSys+0x1316>
	else if (__tmp > 65535)
    4652:	69 a9       	ldd	r22, Y+49	; 0x31
    4654:	7a a9       	ldd	r23, Y+50	; 0x32
    4656:	8b a9       	ldd	r24, Y+51	; 0x33
    4658:	9c a9       	ldd	r25, Y+52	; 0x34
    465a:	20 e0       	ldi	r18, 0x00	; 0
    465c:	3f ef       	ldi	r19, 0xFF	; 255
    465e:	4f e7       	ldi	r20, 0x7F	; 127
    4660:	57 e4       	ldi	r21, 0x47	; 71
    4662:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4666:	18 16       	cp	r1, r24
    4668:	4c f5       	brge	.+82     	; 0x46bc <SM_U8LoginSys+0x1302>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    466a:	6d a9       	ldd	r22, Y+53	; 0x35
    466c:	7e a9       	ldd	r23, Y+54	; 0x36
    466e:	8f a9       	ldd	r24, Y+55	; 0x37
    4670:	98 ad       	ldd	r25, Y+56	; 0x38
    4672:	20 e0       	ldi	r18, 0x00	; 0
    4674:	30 e0       	ldi	r19, 0x00	; 0
    4676:	40 e2       	ldi	r20, 0x20	; 32
    4678:	51 e4       	ldi	r21, 0x41	; 65
    467a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    467e:	dc 01       	movw	r26, r24
    4680:	cb 01       	movw	r24, r22
    4682:	bc 01       	movw	r22, r24
    4684:	cd 01       	movw	r24, r26
    4686:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    468a:	dc 01       	movw	r26, r24
    468c:	cb 01       	movw	r24, r22
    468e:	98 ab       	std	Y+48, r25	; 0x30
    4690:	8f a7       	std	Y+47, r24	; 0x2f
    4692:	0f c0       	rjmp	.+30     	; 0x46b2 <SM_U8LoginSys+0x12f8>
    4694:	88 ec       	ldi	r24, 0xC8	; 200
    4696:	90 e0       	ldi	r25, 0x00	; 0
    4698:	9e a7       	std	Y+46, r25	; 0x2e
    469a:	8d a7       	std	Y+45, r24	; 0x2d
    469c:	8d a5       	ldd	r24, Y+45	; 0x2d
    469e:	9e a5       	ldd	r25, Y+46	; 0x2e
    46a0:	01 97       	sbiw	r24, 0x01	; 1
    46a2:	f1 f7       	brne	.-4      	; 0x46a0 <SM_U8LoginSys+0x12e6>
    46a4:	9e a7       	std	Y+46, r25	; 0x2e
    46a6:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    46a8:	8f a5       	ldd	r24, Y+47	; 0x2f
    46aa:	98 a9       	ldd	r25, Y+48	; 0x30
    46ac:	01 97       	sbiw	r24, 0x01	; 1
    46ae:	98 ab       	std	Y+48, r25	; 0x30
    46b0:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    46b2:	8f a5       	ldd	r24, Y+47	; 0x2f
    46b4:	98 a9       	ldd	r25, Y+48	; 0x30
    46b6:	00 97       	sbiw	r24, 0x00	; 0
    46b8:	69 f7       	brne	.-38     	; 0x4694 <SM_U8LoginSys+0x12da>
    46ba:	14 c0       	rjmp	.+40     	; 0x46e4 <SM_U8LoginSys+0x132a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    46bc:	69 a9       	ldd	r22, Y+49	; 0x31
    46be:	7a a9       	ldd	r23, Y+50	; 0x32
    46c0:	8b a9       	ldd	r24, Y+51	; 0x33
    46c2:	9c a9       	ldd	r25, Y+52	; 0x34
    46c4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    46c8:	dc 01       	movw	r26, r24
    46ca:	cb 01       	movw	r24, r22
    46cc:	98 ab       	std	Y+48, r25	; 0x30
    46ce:	8f a7       	std	Y+47, r24	; 0x2f
    46d0:	8f a5       	ldd	r24, Y+47	; 0x2f
    46d2:	98 a9       	ldd	r25, Y+48	; 0x30
    46d4:	9c a7       	std	Y+44, r25	; 0x2c
    46d6:	8b a7       	std	Y+43, r24	; 0x2b
    46d8:	8b a5       	ldd	r24, Y+43	; 0x2b
    46da:	9c a5       	ldd	r25, Y+44	; 0x2c
    46dc:	01 97       	sbiw	r24, 0x01	; 1
    46de:	f1 f7       	brne	.-4      	; 0x46dc <SM_U8LoginSys+0x1322>
    46e0:	9c a7       	std	Y+44, r25	; 0x2c
    46e2:	8b a7       	std	Y+43, r24	; 0x2b
							_delay_ms(700);
							LCD_VoidSendCommand(1);
    46e4:	81 e0       	ldi	r24, 0x01	; 1
    46e6:	0e 94 b0 11 	call	0x2360	; 0x2360 <LCD_VoidSendCommand>
							if(i==2)
    46ea:	fe 01       	movw	r30, r28
    46ec:	ed 52       	subi	r30, 0x2D	; 45
    46ee:	ff 4f       	sbci	r31, 0xFF	; 255
    46f0:	80 81       	ld	r24, Z
    46f2:	82 30       	cpi	r24, 0x02	; 2
    46f4:	09 f0       	breq	.+2      	; 0x46f8 <SM_U8LoginSys+0x133e>
    46f6:	93 c0       	rjmp	.+294    	; 0x481e <SM_U8LoginSys+0x1464>
							{
								LCD_VoidGoToRowCol(1,0);
    46f8:	81 e0       	ldi	r24, 0x01	; 1
    46fa:	60 e0       	ldi	r22, 0x00	; 0
    46fc:	0e 94 24 15 	call	0x2a48	; 0x2a48 <LCD_VoidGoToRowCol>
								LCD_u8WriteString("U entered 3 times");
    4700:	8a ed       	ldi	r24, 0xDA	; 218
    4702:	90 e0       	ldi	r25, 0x00	; 0
    4704:	0e 94 dc 15 	call	0x2bb8	; 0x2bb8 <LCD_u8WriteString>
								DIO_U8SetPinDirection(DIO_PORTC,DIO_PIN7,DIO_HIGH);
    4708:	82 e0       	ldi	r24, 0x02	; 2
    470a:	67 e0       	ldi	r22, 0x07	; 7
    470c:	41 e0       	ldi	r20, 0x01	; 1
    470e:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <DIO_U8SetPinDirection>
								DIO_U8SetPinValue(DIO_PORTC,DIO_PIN7,DIO_HIGH);
    4712:	82 e0       	ldi	r24, 0x02	; 2
    4714:	67 e0       	ldi	r22, 0x07	; 7
    4716:	41 e0       	ldi	r20, 0x01	; 1
    4718:	0e 94 15 08 	call	0x102a	; 0x102a <DIO_U8SetPinValue>
    471c:	80 e0       	ldi	r24, 0x00	; 0
    471e:	90 e0       	ldi	r25, 0x00	; 0
    4720:	aa ef       	ldi	r26, 0xFA	; 250
    4722:	b3 e4       	ldi	r27, 0x43	; 67
    4724:	8f a3       	std	Y+39, r24	; 0x27
    4726:	98 a7       	std	Y+40, r25	; 0x28
    4728:	a9 a7       	std	Y+41, r26	; 0x29
    472a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    472c:	6f a1       	ldd	r22, Y+39	; 0x27
    472e:	78 a5       	ldd	r23, Y+40	; 0x28
    4730:	89 a5       	ldd	r24, Y+41	; 0x29
    4732:	9a a5       	ldd	r25, Y+42	; 0x2a
    4734:	20 e0       	ldi	r18, 0x00	; 0
    4736:	30 e0       	ldi	r19, 0x00	; 0
    4738:	4a ef       	ldi	r20, 0xFA	; 250
    473a:	54 e4       	ldi	r21, 0x44	; 68
    473c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4740:	dc 01       	movw	r26, r24
    4742:	cb 01       	movw	r24, r22
    4744:	8b a3       	std	Y+35, r24	; 0x23
    4746:	9c a3       	std	Y+36, r25	; 0x24
    4748:	ad a3       	std	Y+37, r26	; 0x25
    474a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    474c:	6b a1       	ldd	r22, Y+35	; 0x23
    474e:	7c a1       	ldd	r23, Y+36	; 0x24
    4750:	8d a1       	ldd	r24, Y+37	; 0x25
    4752:	9e a1       	ldd	r25, Y+38	; 0x26
    4754:	20 e0       	ldi	r18, 0x00	; 0
    4756:	30 e0       	ldi	r19, 0x00	; 0
    4758:	40 e8       	ldi	r20, 0x80	; 128
    475a:	5f e3       	ldi	r21, 0x3F	; 63
    475c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4760:	88 23       	and	r24, r24
    4762:	2c f4       	brge	.+10     	; 0x476e <SM_U8LoginSys+0x13b4>
		__ticks = 1;
    4764:	81 e0       	ldi	r24, 0x01	; 1
    4766:	90 e0       	ldi	r25, 0x00	; 0
    4768:	9a a3       	std	Y+34, r25	; 0x22
    476a:	89 a3       	std	Y+33, r24	; 0x21
    476c:	3f c0       	rjmp	.+126    	; 0x47ec <SM_U8LoginSys+0x1432>
	else if (__tmp > 65535)
    476e:	6b a1       	ldd	r22, Y+35	; 0x23
    4770:	7c a1       	ldd	r23, Y+36	; 0x24
    4772:	8d a1       	ldd	r24, Y+37	; 0x25
    4774:	9e a1       	ldd	r25, Y+38	; 0x26
    4776:	20 e0       	ldi	r18, 0x00	; 0
    4778:	3f ef       	ldi	r19, 0xFF	; 255
    477a:	4f e7       	ldi	r20, 0x7F	; 127
    477c:	57 e4       	ldi	r21, 0x47	; 71
    477e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4782:	18 16       	cp	r1, r24
    4784:	4c f5       	brge	.+82     	; 0x47d8 <SM_U8LoginSys+0x141e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4786:	6f a1       	ldd	r22, Y+39	; 0x27
    4788:	78 a5       	ldd	r23, Y+40	; 0x28
    478a:	89 a5       	ldd	r24, Y+41	; 0x29
    478c:	9a a5       	ldd	r25, Y+42	; 0x2a
    478e:	20 e0       	ldi	r18, 0x00	; 0
    4790:	30 e0       	ldi	r19, 0x00	; 0
    4792:	40 e2       	ldi	r20, 0x20	; 32
    4794:	51 e4       	ldi	r21, 0x41	; 65
    4796:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    479a:	dc 01       	movw	r26, r24
    479c:	cb 01       	movw	r24, r22
    479e:	bc 01       	movw	r22, r24
    47a0:	cd 01       	movw	r24, r26
    47a2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    47a6:	dc 01       	movw	r26, r24
    47a8:	cb 01       	movw	r24, r22
    47aa:	9a a3       	std	Y+34, r25	; 0x22
    47ac:	89 a3       	std	Y+33, r24	; 0x21
    47ae:	0f c0       	rjmp	.+30     	; 0x47ce <SM_U8LoginSys+0x1414>
    47b0:	88 ec       	ldi	r24, 0xC8	; 200
    47b2:	90 e0       	ldi	r25, 0x00	; 0
    47b4:	98 a3       	std	Y+32, r25	; 0x20
    47b6:	8f 8f       	std	Y+31, r24	; 0x1f
    47b8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    47ba:	98 a1       	ldd	r25, Y+32	; 0x20
    47bc:	01 97       	sbiw	r24, 0x01	; 1
    47be:	f1 f7       	brne	.-4      	; 0x47bc <SM_U8LoginSys+0x1402>
    47c0:	98 a3       	std	Y+32, r25	; 0x20
    47c2:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    47c4:	89 a1       	ldd	r24, Y+33	; 0x21
    47c6:	9a a1       	ldd	r25, Y+34	; 0x22
    47c8:	01 97       	sbiw	r24, 0x01	; 1
    47ca:	9a a3       	std	Y+34, r25	; 0x22
    47cc:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    47ce:	89 a1       	ldd	r24, Y+33	; 0x21
    47d0:	9a a1       	ldd	r25, Y+34	; 0x22
    47d2:	00 97       	sbiw	r24, 0x00	; 0
    47d4:	69 f7       	brne	.-38     	; 0x47b0 <SM_U8LoginSys+0x13f6>
    47d6:	14 c0       	rjmp	.+40     	; 0x4800 <SM_U8LoginSys+0x1446>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    47d8:	6b a1       	ldd	r22, Y+35	; 0x23
    47da:	7c a1       	ldd	r23, Y+36	; 0x24
    47dc:	8d a1       	ldd	r24, Y+37	; 0x25
    47de:	9e a1       	ldd	r25, Y+38	; 0x26
    47e0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    47e4:	dc 01       	movw	r26, r24
    47e6:	cb 01       	movw	r24, r22
    47e8:	9a a3       	std	Y+34, r25	; 0x22
    47ea:	89 a3       	std	Y+33, r24	; 0x21
    47ec:	89 a1       	ldd	r24, Y+33	; 0x21
    47ee:	9a a1       	ldd	r25, Y+34	; 0x22
    47f0:	9e 8f       	std	Y+30, r25	; 0x1e
    47f2:	8d 8f       	std	Y+29, r24	; 0x1d
    47f4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    47f6:	9e 8d       	ldd	r25, Y+30	; 0x1e
    47f8:	01 97       	sbiw	r24, 0x01	; 1
    47fa:	f1 f7       	brne	.-4      	; 0x47f8 <SM_U8LoginSys+0x143e>
    47fc:	9e 8f       	std	Y+30, r25	; 0x1e
    47fe:	8d 8f       	std	Y+29, r24	; 0x1d
								_delay_ms(500);
								DIO_U8SetPinValue(DIO_PORTC,DIO_PIN7,DIO_LOW);
    4800:	82 e0       	ldi	r24, 0x02	; 2
    4802:	67 e0       	ldi	r22, 0x07	; 7
    4804:	40 e0       	ldi	r20, 0x00	; 0
    4806:	0e 94 15 08 	call	0x102a	; 0x102a <DIO_U8SetPinValue>
								Local_U8ErrorState = ERROR_STATE_NOK;
    480a:	10 92 9f 02 	sts	0x029F, r1
								 return Local_U8ErrorState;
    480e:	30 91 9f 02 	lds	r19, 0x029F
    4812:	ca 52       	subi	r28, 0x2A	; 42
    4814:	df 4f       	sbci	r29, 0xFF	; 255
    4816:	38 83       	st	Y, r19
    4818:	c6 5d       	subi	r28, 0xD6	; 214
    481a:	d0 40       	sbci	r29, 0x00	; 0
    481c:	07 c1       	rjmp	.+526    	; 0x4a2c <SM_U8LoginSys+0x1672>
					LCD_VoidGoToRowCol(1,0);
					LCD_u8WriteString("WELCOME USER_2");

					_delay_ms(1000);
					LCD_VoidSendCommand(1);
						for(u8 i=0;i<3;i++)
    481e:	de 01       	movw	r26, r28
    4820:	ad 52       	subi	r26, 0x2D	; 45
    4822:	bf 4f       	sbci	r27, 0xFF	; 255
    4824:	fe 01       	movw	r30, r28
    4826:	ed 52       	subi	r30, 0x2D	; 45
    4828:	ff 4f       	sbci	r31, 0xFF	; 255
    482a:	80 81       	ld	r24, Z
    482c:	8f 5f       	subi	r24, 0xFF	; 255
    482e:	8c 93       	st	X, r24
    4830:	fe 01       	movw	r30, r28
    4832:	ed 52       	subi	r30, 0x2D	; 45
    4834:	ff 4f       	sbci	r31, 0xFF	; 255
    4836:	80 81       	ld	r24, Z
    4838:	83 30       	cpi	r24, 0x03	; 3
    483a:	08 f4       	brcc	.+2      	; 0x483e <SM_U8LoginSys+0x1484>
    483c:	2b ce       	rjmp	.-938    	; 0x4494 <SM_U8LoginSys+0x10da>
    483e:	0c 94 a1 1a 	jmp	0x3542	; 0x3542 <SM_U8LoginSys+0x188>
								Local_U8ErrorState = ERROR_STATE_NOK;
								 return Local_U8ErrorState;
							}
						}
					}
				} break;
    4842:	80 e0       	ldi	r24, 0x00	; 0
    4844:	90 e0       	ldi	r25, 0x00	; 0
    4846:	a8 e4       	ldi	r26, 0x48	; 72
    4848:	b2 e4       	ldi	r27, 0x42	; 66
    484a:	89 8f       	std	Y+25, r24	; 0x19
    484c:	9a 8f       	std	Y+26, r25	; 0x1a
    484e:	ab 8f       	std	Y+27, r26	; 0x1b
    4850:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4852:	69 8d       	ldd	r22, Y+25	; 0x19
    4854:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4856:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4858:	9c 8d       	ldd	r25, Y+28	; 0x1c
    485a:	20 e0       	ldi	r18, 0x00	; 0
    485c:	30 e0       	ldi	r19, 0x00	; 0
    485e:	4a ef       	ldi	r20, 0xFA	; 250
    4860:	54 e4       	ldi	r21, 0x44	; 68
    4862:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4866:	dc 01       	movw	r26, r24
    4868:	cb 01       	movw	r24, r22
    486a:	8d 8b       	std	Y+21, r24	; 0x15
    486c:	9e 8b       	std	Y+22, r25	; 0x16
    486e:	af 8b       	std	Y+23, r26	; 0x17
    4870:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    4872:	6d 89       	ldd	r22, Y+21	; 0x15
    4874:	7e 89       	ldd	r23, Y+22	; 0x16
    4876:	8f 89       	ldd	r24, Y+23	; 0x17
    4878:	98 8d       	ldd	r25, Y+24	; 0x18
    487a:	20 e0       	ldi	r18, 0x00	; 0
    487c:	30 e0       	ldi	r19, 0x00	; 0
    487e:	40 e8       	ldi	r20, 0x80	; 128
    4880:	5f e3       	ldi	r21, 0x3F	; 63
    4882:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4886:	88 23       	and	r24, r24
    4888:	2c f4       	brge	.+10     	; 0x4894 <SM_U8LoginSys+0x14da>
		__ticks = 1;
    488a:	81 e0       	ldi	r24, 0x01	; 1
    488c:	90 e0       	ldi	r25, 0x00	; 0
    488e:	9c 8b       	std	Y+20, r25	; 0x14
    4890:	8b 8b       	std	Y+19, r24	; 0x13
    4892:	3f c0       	rjmp	.+126    	; 0x4912 <SM_U8LoginSys+0x1558>
	else if (__tmp > 65535)
    4894:	6d 89       	ldd	r22, Y+21	; 0x15
    4896:	7e 89       	ldd	r23, Y+22	; 0x16
    4898:	8f 89       	ldd	r24, Y+23	; 0x17
    489a:	98 8d       	ldd	r25, Y+24	; 0x18
    489c:	20 e0       	ldi	r18, 0x00	; 0
    489e:	3f ef       	ldi	r19, 0xFF	; 255
    48a0:	4f e7       	ldi	r20, 0x7F	; 127
    48a2:	57 e4       	ldi	r21, 0x47	; 71
    48a4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    48a8:	18 16       	cp	r1, r24
    48aa:	4c f5       	brge	.+82     	; 0x48fe <SM_U8LoginSys+0x1544>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    48ac:	69 8d       	ldd	r22, Y+25	; 0x19
    48ae:	7a 8d       	ldd	r23, Y+26	; 0x1a
    48b0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    48b2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    48b4:	20 e0       	ldi	r18, 0x00	; 0
    48b6:	30 e0       	ldi	r19, 0x00	; 0
    48b8:	40 e2       	ldi	r20, 0x20	; 32
    48ba:	51 e4       	ldi	r21, 0x41	; 65
    48bc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    48c0:	dc 01       	movw	r26, r24
    48c2:	cb 01       	movw	r24, r22
    48c4:	bc 01       	movw	r22, r24
    48c6:	cd 01       	movw	r24, r26
    48c8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    48cc:	dc 01       	movw	r26, r24
    48ce:	cb 01       	movw	r24, r22
    48d0:	9c 8b       	std	Y+20, r25	; 0x14
    48d2:	8b 8b       	std	Y+19, r24	; 0x13
    48d4:	0f c0       	rjmp	.+30     	; 0x48f4 <SM_U8LoginSys+0x153a>
    48d6:	88 ec       	ldi	r24, 0xC8	; 200
    48d8:	90 e0       	ldi	r25, 0x00	; 0
    48da:	9a 8b       	std	Y+18, r25	; 0x12
    48dc:	89 8b       	std	Y+17, r24	; 0x11
    48de:	89 89       	ldd	r24, Y+17	; 0x11
    48e0:	9a 89       	ldd	r25, Y+18	; 0x12
    48e2:	01 97       	sbiw	r24, 0x01	; 1
    48e4:	f1 f7       	brne	.-4      	; 0x48e2 <SM_U8LoginSys+0x1528>
    48e6:	9a 8b       	std	Y+18, r25	; 0x12
    48e8:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    48ea:	8b 89       	ldd	r24, Y+19	; 0x13
    48ec:	9c 89       	ldd	r25, Y+20	; 0x14
    48ee:	01 97       	sbiw	r24, 0x01	; 1
    48f0:	9c 8b       	std	Y+20, r25	; 0x14
    48f2:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    48f4:	8b 89       	ldd	r24, Y+19	; 0x13
    48f6:	9c 89       	ldd	r25, Y+20	; 0x14
    48f8:	00 97       	sbiw	r24, 0x00	; 0
    48fa:	69 f7       	brne	.-38     	; 0x48d6 <SM_U8LoginSys+0x151c>
    48fc:	14 c0       	rjmp	.+40     	; 0x4926 <SM_U8LoginSys+0x156c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    48fe:	6d 89       	ldd	r22, Y+21	; 0x15
    4900:	7e 89       	ldd	r23, Y+22	; 0x16
    4902:	8f 89       	ldd	r24, Y+23	; 0x17
    4904:	98 8d       	ldd	r25, Y+24	; 0x18
    4906:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    490a:	dc 01       	movw	r26, r24
    490c:	cb 01       	movw	r24, r22
    490e:	9c 8b       	std	Y+20, r25	; 0x14
    4910:	8b 8b       	std	Y+19, r24	; 0x13
    4912:	8b 89       	ldd	r24, Y+19	; 0x13
    4914:	9c 89       	ldd	r25, Y+20	; 0x14
    4916:	98 8b       	std	Y+16, r25	; 0x10
    4918:	8f 87       	std	Y+15, r24	; 0x0f
    491a:	8f 85       	ldd	r24, Y+15	; 0x0f
    491c:	98 89       	ldd	r25, Y+16	; 0x10
    491e:	01 97       	sbiw	r24, 0x01	; 1
    4920:	f1 f7       	brne	.-4      	; 0x491e <SM_U8LoginSys+0x1564>
    4922:	98 8b       	std	Y+16, r25	; 0x10
    4924:	8f 87       	std	Y+15, r24	; 0x0f

				case 'c':
				{
					_delay_ms(50);
					LCD_VoidSendCommand(1);
    4926:	81 e0       	ldi	r24, 0x01	; 1
    4928:	0e 94 b0 11 	call	0x2360	; 0x2360 <LCD_VoidSendCommand>
    492c:	0c 94 a1 1a 	jmp	0x3542	; 0x3542 <SM_U8LoginSys+0x188>
				} break;
				default :
					LCD_VoidSendCommand(1);
    4930:	81 e0       	ldi	r24, 0x01	; 1
    4932:	0e 94 b0 11 	call	0x2360	; 0x2360 <LCD_VoidSendCommand>

					LCD_u8WriteString("INVALID USER");
    4936:	83 e2       	ldi	r24, 0x23	; 35
    4938:	91 e0       	ldi	r25, 0x01	; 1
    493a:	0e 94 dc 15 	call	0x2bb8	; 0x2bb8 <LCD_u8WriteString>
    493e:	80 e0       	ldi	r24, 0x00	; 0
    4940:	90 e0       	ldi	r25, 0x00	; 0
    4942:	af e2       	ldi	r26, 0x2F	; 47
    4944:	b4 e4       	ldi	r27, 0x44	; 68
    4946:	8b 87       	std	Y+11, r24	; 0x0b
    4948:	9c 87       	std	Y+12, r25	; 0x0c
    494a:	ad 87       	std	Y+13, r26	; 0x0d
    494c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    494e:	6b 85       	ldd	r22, Y+11	; 0x0b
    4950:	7c 85       	ldd	r23, Y+12	; 0x0c
    4952:	8d 85       	ldd	r24, Y+13	; 0x0d
    4954:	9e 85       	ldd	r25, Y+14	; 0x0e
    4956:	20 e0       	ldi	r18, 0x00	; 0
    4958:	30 e0       	ldi	r19, 0x00	; 0
    495a:	4a ef       	ldi	r20, 0xFA	; 250
    495c:	54 e4       	ldi	r21, 0x44	; 68
    495e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4962:	dc 01       	movw	r26, r24
    4964:	cb 01       	movw	r24, r22
    4966:	8f 83       	std	Y+7, r24	; 0x07
    4968:	98 87       	std	Y+8, r25	; 0x08
    496a:	a9 87       	std	Y+9, r26	; 0x09
    496c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    496e:	6f 81       	ldd	r22, Y+7	; 0x07
    4970:	78 85       	ldd	r23, Y+8	; 0x08
    4972:	89 85       	ldd	r24, Y+9	; 0x09
    4974:	9a 85       	ldd	r25, Y+10	; 0x0a
    4976:	20 e0       	ldi	r18, 0x00	; 0
    4978:	30 e0       	ldi	r19, 0x00	; 0
    497a:	40 e8       	ldi	r20, 0x80	; 128
    497c:	5f e3       	ldi	r21, 0x3F	; 63
    497e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4982:	88 23       	and	r24, r24
    4984:	2c f4       	brge	.+10     	; 0x4990 <SM_U8LoginSys+0x15d6>
		__ticks = 1;
    4986:	81 e0       	ldi	r24, 0x01	; 1
    4988:	90 e0       	ldi	r25, 0x00	; 0
    498a:	9e 83       	std	Y+6, r25	; 0x06
    498c:	8d 83       	std	Y+5, r24	; 0x05
    498e:	3f c0       	rjmp	.+126    	; 0x4a0e <SM_U8LoginSys+0x1654>
	else if (__tmp > 65535)
    4990:	6f 81       	ldd	r22, Y+7	; 0x07
    4992:	78 85       	ldd	r23, Y+8	; 0x08
    4994:	89 85       	ldd	r24, Y+9	; 0x09
    4996:	9a 85       	ldd	r25, Y+10	; 0x0a
    4998:	20 e0       	ldi	r18, 0x00	; 0
    499a:	3f ef       	ldi	r19, 0xFF	; 255
    499c:	4f e7       	ldi	r20, 0x7F	; 127
    499e:	57 e4       	ldi	r21, 0x47	; 71
    49a0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    49a4:	18 16       	cp	r1, r24
    49a6:	4c f5       	brge	.+82     	; 0x49fa <SM_U8LoginSys+0x1640>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    49a8:	6b 85       	ldd	r22, Y+11	; 0x0b
    49aa:	7c 85       	ldd	r23, Y+12	; 0x0c
    49ac:	8d 85       	ldd	r24, Y+13	; 0x0d
    49ae:	9e 85       	ldd	r25, Y+14	; 0x0e
    49b0:	20 e0       	ldi	r18, 0x00	; 0
    49b2:	30 e0       	ldi	r19, 0x00	; 0
    49b4:	40 e2       	ldi	r20, 0x20	; 32
    49b6:	51 e4       	ldi	r21, 0x41	; 65
    49b8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    49bc:	dc 01       	movw	r26, r24
    49be:	cb 01       	movw	r24, r22
    49c0:	bc 01       	movw	r22, r24
    49c2:	cd 01       	movw	r24, r26
    49c4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    49c8:	dc 01       	movw	r26, r24
    49ca:	cb 01       	movw	r24, r22
    49cc:	9e 83       	std	Y+6, r25	; 0x06
    49ce:	8d 83       	std	Y+5, r24	; 0x05
    49d0:	0f c0       	rjmp	.+30     	; 0x49f0 <SM_U8LoginSys+0x1636>
    49d2:	88 ec       	ldi	r24, 0xC8	; 200
    49d4:	90 e0       	ldi	r25, 0x00	; 0
    49d6:	9c 83       	std	Y+4, r25	; 0x04
    49d8:	8b 83       	std	Y+3, r24	; 0x03
    49da:	8b 81       	ldd	r24, Y+3	; 0x03
    49dc:	9c 81       	ldd	r25, Y+4	; 0x04
    49de:	01 97       	sbiw	r24, 0x01	; 1
    49e0:	f1 f7       	brne	.-4      	; 0x49de <SM_U8LoginSys+0x1624>
    49e2:	9c 83       	std	Y+4, r25	; 0x04
    49e4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    49e6:	8d 81       	ldd	r24, Y+5	; 0x05
    49e8:	9e 81       	ldd	r25, Y+6	; 0x06
    49ea:	01 97       	sbiw	r24, 0x01	; 1
    49ec:	9e 83       	std	Y+6, r25	; 0x06
    49ee:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    49f0:	8d 81       	ldd	r24, Y+5	; 0x05
    49f2:	9e 81       	ldd	r25, Y+6	; 0x06
    49f4:	00 97       	sbiw	r24, 0x00	; 0
    49f6:	69 f7       	brne	.-38     	; 0x49d2 <SM_U8LoginSys+0x1618>
    49f8:	14 c0       	rjmp	.+40     	; 0x4a22 <SM_U8LoginSys+0x1668>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    49fa:	6f 81       	ldd	r22, Y+7	; 0x07
    49fc:	78 85       	ldd	r23, Y+8	; 0x08
    49fe:	89 85       	ldd	r24, Y+9	; 0x09
    4a00:	9a 85       	ldd	r25, Y+10	; 0x0a
    4a02:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4a06:	dc 01       	movw	r26, r24
    4a08:	cb 01       	movw	r24, r22
    4a0a:	9e 83       	std	Y+6, r25	; 0x06
    4a0c:	8d 83       	std	Y+5, r24	; 0x05
    4a0e:	8d 81       	ldd	r24, Y+5	; 0x05
    4a10:	9e 81       	ldd	r25, Y+6	; 0x06
    4a12:	9a 83       	std	Y+2, r25	; 0x02
    4a14:	89 83       	std	Y+1, r24	; 0x01
    4a16:	89 81       	ldd	r24, Y+1	; 0x01
    4a18:	9a 81       	ldd	r25, Y+2	; 0x02
    4a1a:	01 97       	sbiw	r24, 0x01	; 1
    4a1c:	f1 f7       	brne	.-4      	; 0x4a1a <SM_U8LoginSys+0x1660>
    4a1e:	9a 83       	std	Y+2, r25	; 0x02
    4a20:	89 83       	std	Y+1, r24	; 0x01
					_delay_ms(700);
					LCD_VoidSendCommand(1);
    4a22:	81 e0       	ldi	r24, 0x01	; 1
    4a24:	0e 94 b0 11 	call	0x2360	; 0x2360 <LCD_VoidSendCommand>
    4a28:	0c 94 ea 19 	jmp	0x33d4	; 0x33d4 <SM_U8LoginSys+0x1a>
					goto lable;
					break;
			}
		}
		}
    4a2c:	ca 52       	subi	r28, 0x2A	; 42
    4a2e:	df 4f       	sbci	r29, 0xFF	; 255
    4a30:	88 81       	ld	r24, Y
    4a32:	c6 5d       	subi	r28, 0xD6	; 214
    4a34:	d0 40       	sbci	r29, 0x00	; 0

		  return Local_U8ErrorState;

	 }
    4a36:	c8 52       	subi	r28, 0x28	; 40
    4a38:	df 4f       	sbci	r29, 0xFF	; 255
    4a3a:	0f b6       	in	r0, 0x3f	; 63
    4a3c:	f8 94       	cli
    4a3e:	de bf       	out	0x3e, r29	; 62
    4a40:	0f be       	out	0x3f, r0	; 63
    4a42:	cd bf       	out	0x3d, r28	; 61
    4a44:	cf 91       	pop	r28
    4a46:	df 91       	pop	r29
    4a48:	1f 91       	pop	r17
    4a4a:	0f 91       	pop	r16
    4a4c:	08 95       	ret

00004a4e <SM_U16EnterPassword>:


	u16 SM_U16EnterPassword(void)
	 {
    4a4e:	df 93       	push	r29
    4a50:	cf 93       	push	r28
    4a52:	00 d0       	rcall	.+0      	; 0x4a54 <SM_U16EnterPassword+0x6>
    4a54:	0f 92       	push	r0
    4a56:	cd b7       	in	r28, 0x3d	; 61
    4a58:	de b7       	in	r29, 0x3e	; 62
		static u8 Local_U8EnteredPass =0;
		 u16 Returned_Password=0;
    4a5a:	1b 82       	std	Y+3, r1	; 0x03
    4a5c:	1a 82       	std	Y+2, r1	; 0x02
		while(1)
		{

		 KPAD_U8GetPressedKey(&Local_U8EnteredPass);
    4a5e:	80 ea       	ldi	r24, 0xA0	; 160
    4a60:	92 e0       	ldi	r25, 0x02	; 2
    4a62:	0e 94 45 0d 	call	0x1a8a	; 0x1a8a <KPAD_U8GetPressedKey>

			if ((Local_U8EnteredPass >= '0') && (Local_U8EnteredPass <= '9')) {
    4a66:	80 91 a0 02 	lds	r24, 0x02A0
    4a6a:	80 33       	cpi	r24, 0x30	; 48
    4a6c:	f8 f0       	brcs	.+62     	; 0x4aac <SM_U16EnterPassword+0x5e>
    4a6e:	80 91 a0 02 	lds	r24, 0x02A0
    4a72:	8a 33       	cpi	r24, 0x3A	; 58
    4a74:	d8 f4       	brcc	.+54     	; 0x4aac <SM_U16EnterPassword+0x5e>
				LCD_VoidSendData('*');
    4a76:	8a e2       	ldi	r24, 0x2A	; 42
    4a78:	0e 94 6a 13 	call	0x26d4	; 0x26d4 <LCD_VoidSendData>
				u8 pass = Local_U8EnteredPass - '0';
    4a7c:	80 91 a0 02 	lds	r24, 0x02A0
    4a80:	80 53       	subi	r24, 0x30	; 48
    4a82:	89 83       	std	Y+1, r24	; 0x01
				Returned_Password = Returned_Password * 10 + pass;
    4a84:	8a 81       	ldd	r24, Y+2	; 0x02
    4a86:	9b 81       	ldd	r25, Y+3	; 0x03
    4a88:	9c 01       	movw	r18, r24
    4a8a:	22 0f       	add	r18, r18
    4a8c:	33 1f       	adc	r19, r19
    4a8e:	c9 01       	movw	r24, r18
    4a90:	88 0f       	add	r24, r24
    4a92:	99 1f       	adc	r25, r25
    4a94:	88 0f       	add	r24, r24
    4a96:	99 1f       	adc	r25, r25
    4a98:	28 0f       	add	r18, r24
    4a9a:	39 1f       	adc	r19, r25
    4a9c:	89 81       	ldd	r24, Y+1	; 0x01
    4a9e:	88 2f       	mov	r24, r24
    4aa0:	90 e0       	ldi	r25, 0x00	; 0
    4aa2:	82 0f       	add	r24, r18
    4aa4:	93 1f       	adc	r25, r19
    4aa6:	9b 83       	std	Y+3, r25	; 0x03
    4aa8:	8a 83       	std	Y+2, r24	; 0x02
    4aaa:	d9 cf       	rjmp	.-78     	; 0x4a5e <SM_U16EnterPassword+0x10>
			}
			else if (Local_U8EnteredPass == '=')
    4aac:	80 91 a0 02 	lds	r24, 0x02A0
    4ab0:	8d 33       	cpi	r24, 0x3D	; 61
    4ab2:	59 f4       	brne	.+22     	; 0x4aca <SM_U16EnterPassword+0x7c>
			{
				LCD_VoidSendCommand(1);
    4ab4:	81 e0       	ldi	r24, 0x01	; 1
    4ab6:	0e 94 b0 11 	call	0x2360	; 0x2360 <LCD_VoidSendCommand>
				LCD_VoidSendCommand(1);
				Returned_Password=0;
			}
		}

		 return Returned_Password;
    4aba:	8a 81       	ldd	r24, Y+2	; 0x02
    4abc:	9b 81       	ldd	r25, Y+3	; 0x03
	 }
    4abe:	0f 90       	pop	r0
    4ac0:	0f 90       	pop	r0
    4ac2:	0f 90       	pop	r0
    4ac4:	cf 91       	pop	r28
    4ac6:	df 91       	pop	r29
    4ac8:	08 95       	ret
			{
				LCD_VoidSendCommand(1);
				break;

			}
			else if (Local_U8EnteredPass == 'c')
    4aca:	80 91 a0 02 	lds	r24, 0x02A0
    4ace:	83 36       	cpi	r24, 0x63	; 99
    4ad0:	31 f6       	brne	.-116    	; 0x4a5e <SM_U16EnterPassword+0x10>
			{
				LCD_VoidSendCommand(1);
    4ad2:	81 e0       	ldi	r24, 0x01	; 1
    4ad4:	0e 94 b0 11 	call	0x2360	; 0x2360 <LCD_VoidSendCommand>
				Returned_Password=0;
    4ad8:	1b 82       	std	Y+3, r1	; 0x03
    4ada:	1a 82       	std	Y+2, r1	; 0x02
    4adc:	c0 cf       	rjmp	.-128    	; 0x4a5e <SM_U16EnterPassword+0x10>

00004ade <SM_U8RoomSelect>:

		 return Returned_Password;
	 }

u8 SM_U8RoomSelect(void)
{
    4ade:	df 93       	push	r29
    4ae0:	cf 93       	push	r28
    4ae2:	cd b7       	in	r28, 0x3d	; 61
    4ae4:	de b7       	in	r29, 0x3e	; 62
    4ae6:	60 97       	sbiw	r28, 0x10	; 16
    4ae8:	0f b6       	in	r0, 0x3f	; 63
    4aea:	f8 94       	cli
    4aec:	de bf       	out	0x3e, r29	; 62
    4aee:	0f be       	out	0x3f, r0	; 63
    4af0:	cd bf       	out	0x3d, r28	; 61
	u8 Local_U8ErrorState=ERROR_STATE_NOK;
    4af2:	1f 86       	std	Y+15, r1	; 0x0f

	u8 Pressed=0;
    4af4:	18 8a       	std	Y+16, r1	; 0x10
	KPAD_U8GetPressedKey(&Pressed);
    4af6:	ce 01       	movw	r24, r28
    4af8:	40 96       	adiw	r24, 0x10	; 16
    4afa:	0e 94 45 0d 	call	0x1a8a	; 0x1a8a <KPAD_U8GetPressedKey>


	LCD_VoidGoToRowCol(1,0);
    4afe:	81 e0       	ldi	r24, 0x01	; 1
    4b00:	60 e0       	ldi	r22, 0x00	; 0
    4b02:	0e 94 24 15 	call	0x2a48	; 0x2a48 <LCD_VoidGoToRowCol>

	LCD_u8WriteString("Select Room");
    4b06:	80 e3       	ldi	r24, 0x30	; 48
    4b08:	91 e0       	ldi	r25, 0x01	; 1
    4b0a:	0e 94 dc 15 	call	0x2bb8	; 0x2bb8 <LCD_u8WriteString>
    4b0e:	80 e0       	ldi	r24, 0x00	; 0
    4b10:	90 e0       	ldi	r25, 0x00	; 0
    4b12:	af e2       	ldi	r26, 0x2F	; 47
    4b14:	b4 e4       	ldi	r27, 0x44	; 68
    4b16:	8b 87       	std	Y+11, r24	; 0x0b
    4b18:	9c 87       	std	Y+12, r25	; 0x0c
    4b1a:	ad 87       	std	Y+13, r26	; 0x0d
    4b1c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4b1e:	6b 85       	ldd	r22, Y+11	; 0x0b
    4b20:	7c 85       	ldd	r23, Y+12	; 0x0c
    4b22:	8d 85       	ldd	r24, Y+13	; 0x0d
    4b24:	9e 85       	ldd	r25, Y+14	; 0x0e
    4b26:	20 e0       	ldi	r18, 0x00	; 0
    4b28:	30 e0       	ldi	r19, 0x00	; 0
    4b2a:	4a ef       	ldi	r20, 0xFA	; 250
    4b2c:	54 e4       	ldi	r21, 0x44	; 68
    4b2e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4b32:	dc 01       	movw	r26, r24
    4b34:	cb 01       	movw	r24, r22
    4b36:	8f 83       	std	Y+7, r24	; 0x07
    4b38:	98 87       	std	Y+8, r25	; 0x08
    4b3a:	a9 87       	std	Y+9, r26	; 0x09
    4b3c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4b3e:	6f 81       	ldd	r22, Y+7	; 0x07
    4b40:	78 85       	ldd	r23, Y+8	; 0x08
    4b42:	89 85       	ldd	r24, Y+9	; 0x09
    4b44:	9a 85       	ldd	r25, Y+10	; 0x0a
    4b46:	20 e0       	ldi	r18, 0x00	; 0
    4b48:	30 e0       	ldi	r19, 0x00	; 0
    4b4a:	40 e8       	ldi	r20, 0x80	; 128
    4b4c:	5f e3       	ldi	r21, 0x3F	; 63
    4b4e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4b52:	88 23       	and	r24, r24
    4b54:	2c f4       	brge	.+10     	; 0x4b60 <SM_U8RoomSelect+0x82>
		__ticks = 1;
    4b56:	81 e0       	ldi	r24, 0x01	; 1
    4b58:	90 e0       	ldi	r25, 0x00	; 0
    4b5a:	9e 83       	std	Y+6, r25	; 0x06
    4b5c:	8d 83       	std	Y+5, r24	; 0x05
    4b5e:	3f c0       	rjmp	.+126    	; 0x4bde <SM_U8RoomSelect+0x100>
	else if (__tmp > 65535)
    4b60:	6f 81       	ldd	r22, Y+7	; 0x07
    4b62:	78 85       	ldd	r23, Y+8	; 0x08
    4b64:	89 85       	ldd	r24, Y+9	; 0x09
    4b66:	9a 85       	ldd	r25, Y+10	; 0x0a
    4b68:	20 e0       	ldi	r18, 0x00	; 0
    4b6a:	3f ef       	ldi	r19, 0xFF	; 255
    4b6c:	4f e7       	ldi	r20, 0x7F	; 127
    4b6e:	57 e4       	ldi	r21, 0x47	; 71
    4b70:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4b74:	18 16       	cp	r1, r24
    4b76:	4c f5       	brge	.+82     	; 0x4bca <SM_U8RoomSelect+0xec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4b78:	6b 85       	ldd	r22, Y+11	; 0x0b
    4b7a:	7c 85       	ldd	r23, Y+12	; 0x0c
    4b7c:	8d 85       	ldd	r24, Y+13	; 0x0d
    4b7e:	9e 85       	ldd	r25, Y+14	; 0x0e
    4b80:	20 e0       	ldi	r18, 0x00	; 0
    4b82:	30 e0       	ldi	r19, 0x00	; 0
    4b84:	40 e2       	ldi	r20, 0x20	; 32
    4b86:	51 e4       	ldi	r21, 0x41	; 65
    4b88:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4b8c:	dc 01       	movw	r26, r24
    4b8e:	cb 01       	movw	r24, r22
    4b90:	bc 01       	movw	r22, r24
    4b92:	cd 01       	movw	r24, r26
    4b94:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4b98:	dc 01       	movw	r26, r24
    4b9a:	cb 01       	movw	r24, r22
    4b9c:	9e 83       	std	Y+6, r25	; 0x06
    4b9e:	8d 83       	std	Y+5, r24	; 0x05
    4ba0:	0f c0       	rjmp	.+30     	; 0x4bc0 <SM_U8RoomSelect+0xe2>
    4ba2:	88 ec       	ldi	r24, 0xC8	; 200
    4ba4:	90 e0       	ldi	r25, 0x00	; 0
    4ba6:	9c 83       	std	Y+4, r25	; 0x04
    4ba8:	8b 83       	std	Y+3, r24	; 0x03
    4baa:	8b 81       	ldd	r24, Y+3	; 0x03
    4bac:	9c 81       	ldd	r25, Y+4	; 0x04
    4bae:	01 97       	sbiw	r24, 0x01	; 1
    4bb0:	f1 f7       	brne	.-4      	; 0x4bae <SM_U8RoomSelect+0xd0>
    4bb2:	9c 83       	std	Y+4, r25	; 0x04
    4bb4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4bb6:	8d 81       	ldd	r24, Y+5	; 0x05
    4bb8:	9e 81       	ldd	r25, Y+6	; 0x06
    4bba:	01 97       	sbiw	r24, 0x01	; 1
    4bbc:	9e 83       	std	Y+6, r25	; 0x06
    4bbe:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4bc0:	8d 81       	ldd	r24, Y+5	; 0x05
    4bc2:	9e 81       	ldd	r25, Y+6	; 0x06
    4bc4:	00 97       	sbiw	r24, 0x00	; 0
    4bc6:	69 f7       	brne	.-38     	; 0x4ba2 <SM_U8RoomSelect+0xc4>
    4bc8:	14 c0       	rjmp	.+40     	; 0x4bf2 <SM_U8RoomSelect+0x114>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4bca:	6f 81       	ldd	r22, Y+7	; 0x07
    4bcc:	78 85       	ldd	r23, Y+8	; 0x08
    4bce:	89 85       	ldd	r24, Y+9	; 0x09
    4bd0:	9a 85       	ldd	r25, Y+10	; 0x0a
    4bd2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4bd6:	dc 01       	movw	r26, r24
    4bd8:	cb 01       	movw	r24, r22
    4bda:	9e 83       	std	Y+6, r25	; 0x06
    4bdc:	8d 83       	std	Y+5, r24	; 0x05
    4bde:	8d 81       	ldd	r24, Y+5	; 0x05
    4be0:	9e 81       	ldd	r25, Y+6	; 0x06
    4be2:	9a 83       	std	Y+2, r25	; 0x02
    4be4:	89 83       	std	Y+1, r24	; 0x01
    4be6:	89 81       	ldd	r24, Y+1	; 0x01
    4be8:	9a 81       	ldd	r25, Y+2	; 0x02
    4bea:	01 97       	sbiw	r24, 0x01	; 1
    4bec:	f1 f7       	brne	.-4      	; 0x4bea <SM_U8RoomSelect+0x10c>
    4bee:	9a 83       	std	Y+2, r25	; 0x02
    4bf0:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(700);
	LCD_VoidSendCommand(1);
    4bf2:	81 e0       	ldi	r24, 0x01	; 1
    4bf4:	0e 94 b0 11 	call	0x2360	; 0x2360 <LCD_VoidSendCommand>

	LCD_u8WriteString("1-Servo 2-DC  3-led");
    4bf8:	8c e3       	ldi	r24, 0x3C	; 60
    4bfa:	91 e0       	ldi	r25, 0x01	; 1
    4bfc:	0e 94 dc 15 	call	0x2bb8	; 0x2bb8 <LCD_u8WriteString>
	LCD_VoidGoToRowCol(1,0);
    4c00:	81 e0       	ldi	r24, 0x01	; 1
    4c02:	60 e0       	ldi	r22, 0x00	; 0
    4c04:	0e 94 24 15 	call	0x2a48	; 0x2a48 <LCD_VoidGoToRowCol>
	LCD_u8WriteString("4-Calc  5-TL  6-SS");
    4c08:	80 e5       	ldi	r24, 0x50	; 80
    4c0a:	91 e0       	ldi	r25, 0x01	; 1
    4c0c:	0e 94 dc 15 	call	0x2bb8	; 0x2bb8 <LCD_u8WriteString>
	if((Pressed <='1') && (Pressed <='6'))
    4c10:	88 89       	ldd	r24, Y+16	; 0x10
    4c12:	82 33       	cpi	r24, 0x32	; 50
    4c14:	58 f4       	brcc	.+22     	; 0x4c2c <SM_U8RoomSelect+0x14e>
    4c16:	88 89       	ldd	r24, Y+16	; 0x10
    4c18:	87 33       	cpi	r24, 0x37	; 55
    4c1a:	40 f4       	brcc	.+16     	; 0x4c2c <SM_U8RoomSelect+0x14e>
	{
		switch(Pressed)
    4c1c:	88 89       	ldd	r24, Y+16	; 0x10
    4c1e:	88 2f       	mov	r24, r24
    4c20:	90 e0       	ldi	r25, 0x00	; 0
    4c22:	81 33       	cpi	r24, 0x31	; 49
    4c24:	91 05       	cpc	r25, r1
    4c26:	11 f4       	brne	.+4      	; 0x4c2c <SM_U8RoomSelect+0x14e>
		{
			case '1':SM_VoidServo_APP(); break;
    4c28:	0e 94 72 17 	call	0x2ee4	; 0x2ee4 <SM_VoidServo_APP>
		}
	}



	return Local_U8ErrorState;
    4c2c:	8f 85       	ldd	r24, Y+15	; 0x0f
}
    4c2e:	60 96       	adiw	r28, 0x10	; 16
    4c30:	0f b6       	in	r0, 0x3f	; 63
    4c32:	f8 94       	cli
    4c34:	de bf       	out	0x3e, r29	; 62
    4c36:	0f be       	out	0x3f, r0	; 63
    4c38:	cd bf       	out	0x3d, r28	; 61
    4c3a:	cf 91       	pop	r28
    4c3c:	df 91       	pop	r29
    4c3e:	08 95       	ret

00004c40 <SM_VoidCalc>:

void SM_VoidCalc(void)
{
    4c40:	ef 92       	push	r14
    4c42:	ff 92       	push	r15
    4c44:	0f 93       	push	r16
    4c46:	1f 93       	push	r17
    4c48:	df 93       	push	r29
    4c4a:	cf 93       	push	r28
    4c4c:	cd b7       	in	r28, 0x3d	; 61
    4c4e:	de b7       	in	r29, 0x3e	; 62
    4c50:	a1 97       	sbiw	r28, 0x21	; 33
    4c52:	0f b6       	in	r0, 0x3f	; 63
    4c54:	f8 94       	cli
    4c56:	de bf       	out	0x3e, r29	; 62
    4c58:	0f be       	out	0x3f, r0	; 63
    4c5a:	cd bf       	out	0x3d, r28	; 61
	KPAD_Void_INIT();
    4c5c:	0e 94 9d 0e 	call	0x1d3a	; 0x1d3a <KPAD_Void_INIT>
	u8 ch;



	LCD_VoidLCDInit();
    4c60:	0e 94 d4 0e 	call	0x1da8	; 0x1da8 <LCD_VoidLCDInit>

	LCD_u8WriteString("WELCOME In Calc");
    4c64:	83 e6       	ldi	r24, 0x63	; 99
    4c66:	91 e0       	ldi	r25, 0x01	; 1
    4c68:	0e 94 dc 15 	call	0x2bb8	; 0x2bb8 <LCD_u8WriteString>
    4c6c:	80 e0       	ldi	r24, 0x00	; 0
    4c6e:	90 e0       	ldi	r25, 0x00	; 0
    4c70:	aa ef       	ldi	r26, 0xFA	; 250
    4c72:	b3 e4       	ldi	r27, 0x43	; 67
    4c74:	8b 87       	std	Y+11, r24	; 0x0b
    4c76:	9c 87       	std	Y+12, r25	; 0x0c
    4c78:	ad 87       	std	Y+13, r26	; 0x0d
    4c7a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4c7c:	6b 85       	ldd	r22, Y+11	; 0x0b
    4c7e:	7c 85       	ldd	r23, Y+12	; 0x0c
    4c80:	8d 85       	ldd	r24, Y+13	; 0x0d
    4c82:	9e 85       	ldd	r25, Y+14	; 0x0e
    4c84:	20 e0       	ldi	r18, 0x00	; 0
    4c86:	30 e0       	ldi	r19, 0x00	; 0
    4c88:	4a ef       	ldi	r20, 0xFA	; 250
    4c8a:	54 e4       	ldi	r21, 0x44	; 68
    4c8c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4c90:	dc 01       	movw	r26, r24
    4c92:	cb 01       	movw	r24, r22
    4c94:	8f 83       	std	Y+7, r24	; 0x07
    4c96:	98 87       	std	Y+8, r25	; 0x08
    4c98:	a9 87       	std	Y+9, r26	; 0x09
    4c9a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4c9c:	6f 81       	ldd	r22, Y+7	; 0x07
    4c9e:	78 85       	ldd	r23, Y+8	; 0x08
    4ca0:	89 85       	ldd	r24, Y+9	; 0x09
    4ca2:	9a 85       	ldd	r25, Y+10	; 0x0a
    4ca4:	20 e0       	ldi	r18, 0x00	; 0
    4ca6:	30 e0       	ldi	r19, 0x00	; 0
    4ca8:	40 e8       	ldi	r20, 0x80	; 128
    4caa:	5f e3       	ldi	r21, 0x3F	; 63
    4cac:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4cb0:	88 23       	and	r24, r24
    4cb2:	2c f4       	brge	.+10     	; 0x4cbe <SM_VoidCalc+0x7e>
		__ticks = 1;
    4cb4:	81 e0       	ldi	r24, 0x01	; 1
    4cb6:	90 e0       	ldi	r25, 0x00	; 0
    4cb8:	9e 83       	std	Y+6, r25	; 0x06
    4cba:	8d 83       	std	Y+5, r24	; 0x05
    4cbc:	3f c0       	rjmp	.+126    	; 0x4d3c <SM_VoidCalc+0xfc>
	else if (__tmp > 65535)
    4cbe:	6f 81       	ldd	r22, Y+7	; 0x07
    4cc0:	78 85       	ldd	r23, Y+8	; 0x08
    4cc2:	89 85       	ldd	r24, Y+9	; 0x09
    4cc4:	9a 85       	ldd	r25, Y+10	; 0x0a
    4cc6:	20 e0       	ldi	r18, 0x00	; 0
    4cc8:	3f ef       	ldi	r19, 0xFF	; 255
    4cca:	4f e7       	ldi	r20, 0x7F	; 127
    4ccc:	57 e4       	ldi	r21, 0x47	; 71
    4cce:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4cd2:	18 16       	cp	r1, r24
    4cd4:	4c f5       	brge	.+82     	; 0x4d28 <SM_VoidCalc+0xe8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4cd6:	6b 85       	ldd	r22, Y+11	; 0x0b
    4cd8:	7c 85       	ldd	r23, Y+12	; 0x0c
    4cda:	8d 85       	ldd	r24, Y+13	; 0x0d
    4cdc:	9e 85       	ldd	r25, Y+14	; 0x0e
    4cde:	20 e0       	ldi	r18, 0x00	; 0
    4ce0:	30 e0       	ldi	r19, 0x00	; 0
    4ce2:	40 e2       	ldi	r20, 0x20	; 32
    4ce4:	51 e4       	ldi	r21, 0x41	; 65
    4ce6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4cea:	dc 01       	movw	r26, r24
    4cec:	cb 01       	movw	r24, r22
    4cee:	bc 01       	movw	r22, r24
    4cf0:	cd 01       	movw	r24, r26
    4cf2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4cf6:	dc 01       	movw	r26, r24
    4cf8:	cb 01       	movw	r24, r22
    4cfa:	9e 83       	std	Y+6, r25	; 0x06
    4cfc:	8d 83       	std	Y+5, r24	; 0x05
    4cfe:	0f c0       	rjmp	.+30     	; 0x4d1e <SM_VoidCalc+0xde>
    4d00:	88 ec       	ldi	r24, 0xC8	; 200
    4d02:	90 e0       	ldi	r25, 0x00	; 0
    4d04:	9c 83       	std	Y+4, r25	; 0x04
    4d06:	8b 83       	std	Y+3, r24	; 0x03
    4d08:	8b 81       	ldd	r24, Y+3	; 0x03
    4d0a:	9c 81       	ldd	r25, Y+4	; 0x04
    4d0c:	01 97       	sbiw	r24, 0x01	; 1
    4d0e:	f1 f7       	brne	.-4      	; 0x4d0c <SM_VoidCalc+0xcc>
    4d10:	9c 83       	std	Y+4, r25	; 0x04
    4d12:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4d14:	8d 81       	ldd	r24, Y+5	; 0x05
    4d16:	9e 81       	ldd	r25, Y+6	; 0x06
    4d18:	01 97       	sbiw	r24, 0x01	; 1
    4d1a:	9e 83       	std	Y+6, r25	; 0x06
    4d1c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4d1e:	8d 81       	ldd	r24, Y+5	; 0x05
    4d20:	9e 81       	ldd	r25, Y+6	; 0x06
    4d22:	00 97       	sbiw	r24, 0x00	; 0
    4d24:	69 f7       	brne	.-38     	; 0x4d00 <SM_VoidCalc+0xc0>
    4d26:	14 c0       	rjmp	.+40     	; 0x4d50 <SM_VoidCalc+0x110>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4d28:	6f 81       	ldd	r22, Y+7	; 0x07
    4d2a:	78 85       	ldd	r23, Y+8	; 0x08
    4d2c:	89 85       	ldd	r24, Y+9	; 0x09
    4d2e:	9a 85       	ldd	r25, Y+10	; 0x0a
    4d30:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4d34:	dc 01       	movw	r26, r24
    4d36:	cb 01       	movw	r24, r22
    4d38:	9e 83       	std	Y+6, r25	; 0x06
    4d3a:	8d 83       	std	Y+5, r24	; 0x05
    4d3c:	8d 81       	ldd	r24, Y+5	; 0x05
    4d3e:	9e 81       	ldd	r25, Y+6	; 0x06
    4d40:	9a 83       	std	Y+2, r25	; 0x02
    4d42:	89 83       	std	Y+1, r24	; 0x01
    4d44:	89 81       	ldd	r24, Y+1	; 0x01
    4d46:	9a 81       	ldd	r25, Y+2	; 0x02
    4d48:	01 97       	sbiw	r24, 0x01	; 1
    4d4a:	f1 f7       	brne	.-4      	; 0x4d48 <SM_VoidCalc+0x108>
    4d4c:	9a 83       	std	Y+2, r25	; 0x02
    4d4e:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(500);
		LCD_VoidSendCommand(1);
    4d50:	81 e0       	ldi	r24, 0x01	; 1
    4d52:	0e 94 b0 11 	call	0x2360	; 0x2360 <LCD_VoidSendCommand>

	//LCD_u8WriteString("Hello");
	f32 operand1=0.00, operand2=0.00,result=0.00;
    4d56:	80 e0       	ldi	r24, 0x00	; 0
    4d58:	90 e0       	ldi	r25, 0x00	; 0
    4d5a:	a0 e0       	ldi	r26, 0x00	; 0
    4d5c:	b0 e0       	ldi	r27, 0x00	; 0
    4d5e:	8b 8f       	std	Y+27, r24	; 0x1b
    4d60:	9c 8f       	std	Y+28, r25	; 0x1c
    4d62:	ad 8f       	std	Y+29, r26	; 0x1d
    4d64:	be 8f       	std	Y+30, r27	; 0x1e
    4d66:	80 e0       	ldi	r24, 0x00	; 0
    4d68:	90 e0       	ldi	r25, 0x00	; 0
    4d6a:	a0 e0       	ldi	r26, 0x00	; 0
    4d6c:	b0 e0       	ldi	r27, 0x00	; 0
    4d6e:	8f 8b       	std	Y+23, r24	; 0x17
    4d70:	98 8f       	std	Y+24, r25	; 0x18
    4d72:	a9 8f       	std	Y+25, r26	; 0x19
    4d74:	ba 8f       	std	Y+26, r27	; 0x1a
    4d76:	80 e0       	ldi	r24, 0x00	; 0
    4d78:	90 e0       	ldi	r25, 0x00	; 0
    4d7a:	a0 e0       	ldi	r26, 0x00	; 0
    4d7c:	b0 e0       	ldi	r27, 0x00	; 0
    4d7e:	8b 8b       	std	Y+19, r24	; 0x13
    4d80:	9c 8b       	std	Y+20, r25	; 0x14
    4d82:	ad 8b       	std	Y+21, r26	; 0x15
    4d84:	be 8b       	std	Y+22, r27	; 0x16
	u8 state=0, negative1=0,negative2=0,op;
    4d86:	1a 8a       	std	Y+18, r1	; 0x12
    4d88:	19 8a       	std	Y+17, r1	; 0x11
    4d8a:	18 8a       	std	Y+16, r1	; 0x10

	while(1){
	do { KPAD_U8GetPressedKey(&ch); } while(ch==0xff);
    4d8c:	ce 01       	movw	r24, r28
    4d8e:	4f 96       	adiw	r24, 0x1f	; 31
    4d90:	0e 94 45 0d 	call	0x1a8a	; 0x1a8a <KPAD_U8GetPressedKey>
    4d94:	8f 8d       	ldd	r24, Y+31	; 0x1f
    4d96:	8f 3f       	cpi	r24, 0xFF	; 255
    4d98:	c9 f3       	breq	.-14     	; 0x4d8c <SM_VoidCalc+0x14c>
	switch(ch)
    4d9a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    4d9c:	28 2f       	mov	r18, r24
    4d9e:	30 e0       	ldi	r19, 0x00	; 0
    4da0:	39 a3       	std	Y+33, r19	; 0x21
    4da2:	28 a3       	std	Y+32, r18	; 0x20
    4da4:	88 a1       	ldd	r24, Y+32	; 0x20
    4da6:	99 a1       	ldd	r25, Y+33	; 0x21
    4da8:	86 33       	cpi	r24, 0x36	; 54
    4daa:	91 05       	cpc	r25, r1
    4dac:	09 f4       	brne	.+2      	; 0x4db0 <SM_VoidCalc+0x170>
    4dae:	68 c3       	rjmp	.+1744   	; 0x5480 <SM_VoidCalc+0x840>
    4db0:	28 a1       	ldd	r18, Y+32	; 0x20
    4db2:	39 a1       	ldd	r19, Y+33	; 0x21
    4db4:	27 33       	cpi	r18, 0x37	; 55
    4db6:	31 05       	cpc	r19, r1
    4db8:	0c f0       	brlt	.+2      	; 0x4dbc <SM_VoidCalc+0x17c>
    4dba:	4f c0       	rjmp	.+158    	; 0x4e5a <SM_VoidCalc+0x21a>
    4dbc:	88 a1       	ldd	r24, Y+32	; 0x20
    4dbe:	99 a1       	ldd	r25, Y+33	; 0x21
    4dc0:	81 33       	cpi	r24, 0x31	; 49
    4dc2:	91 05       	cpc	r25, r1
    4dc4:	09 f4       	brne	.+2      	; 0x4dc8 <SM_VoidCalc+0x188>
    4dc6:	0e c1       	rjmp	.+540    	; 0x4fe4 <SM_VoidCalc+0x3a4>
    4dc8:	28 a1       	ldd	r18, Y+32	; 0x20
    4dca:	39 a1       	ldd	r19, Y+33	; 0x21
    4dcc:	22 33       	cpi	r18, 0x32	; 50
    4dce:	31 05       	cpc	r19, r1
    4dd0:	5c f5       	brge	.+86     	; 0x4e28 <SM_VoidCalc+0x1e8>
    4dd2:	88 a1       	ldd	r24, Y+32	; 0x20
    4dd4:	99 a1       	ldd	r25, Y+33	; 0x21
    4dd6:	8d 32       	cpi	r24, 0x2D	; 45
    4dd8:	91 05       	cpc	r25, r1
    4dda:	09 f4       	brne	.+2      	; 0x4dde <SM_VoidCalc+0x19e>
    4ddc:	68 c5       	rjmp	.+2768   	; 0x58ae <SM_VoidCalc+0xc6e>
    4dde:	28 a1       	ldd	r18, Y+32	; 0x20
    4de0:	39 a1       	ldd	r19, Y+33	; 0x21
    4de2:	2e 32       	cpi	r18, 0x2E	; 46
    4de4:	31 05       	cpc	r19, r1
    4de6:	9c f4       	brge	.+38     	; 0x4e0e <SM_VoidCalc+0x1ce>
    4de8:	88 a1       	ldd	r24, Y+32	; 0x20
    4dea:	99 a1       	ldd	r25, Y+33	; 0x21
    4dec:	8a 32       	cpi	r24, 0x2A	; 42
    4dee:	91 05       	cpc	r25, r1
    4df0:	09 f4       	brne	.+2      	; 0x4df4 <SM_VoidCalc+0x1b4>
    4df2:	3d c5       	rjmp	.+2682   	; 0x586e <SM_VoidCalc+0xc2e>
    4df4:	28 a1       	ldd	r18, Y+32	; 0x20
    4df6:	39 a1       	ldd	r19, Y+33	; 0x21
    4df8:	2b 32       	cpi	r18, 0x2B	; 43
    4dfa:	31 05       	cpc	r19, r1
    4dfc:	09 f4       	brne	.+2      	; 0x4e00 <SM_VoidCalc+0x1c0>
    4dfe:	72 c5       	rjmp	.+2788   	; 0x58e4 <SM_VoidCalc+0xca4>
    4e00:	88 a1       	ldd	r24, Y+32	; 0x20
    4e02:	99 a1       	ldd	r25, Y+33	; 0x21
    4e04:	85 32       	cpi	r24, 0x25	; 37
    4e06:	91 05       	cpc	r25, r1
    4e08:	09 f4       	brne	.+2      	; 0x4e0c <SM_VoidCalc+0x1cc>
    4e0a:	64 c5       	rjmp	.+2760   	; 0x58d4 <SM_VoidCalc+0xc94>
    4e0c:	eb c6       	rjmp	.+3542   	; 0x5be4 <SM_VoidCalc+0xfa4>
    4e0e:	28 a1       	ldd	r18, Y+32	; 0x20
    4e10:	39 a1       	ldd	r19, Y+33	; 0x21
    4e12:	2f 32       	cpi	r18, 0x2F	; 47
    4e14:	31 05       	cpc	r19, r1
    4e16:	09 f4       	brne	.+2      	; 0x4e1a <SM_VoidCalc+0x1da>
    4e18:	32 c5       	rjmp	.+2660   	; 0x587e <SM_VoidCalc+0xc3e>
    4e1a:	88 a1       	ldd	r24, Y+32	; 0x20
    4e1c:	99 a1       	ldd	r25, Y+33	; 0x21
    4e1e:	80 33       	cpi	r24, 0x30	; 48
    4e20:	91 05       	cpc	r25, r1
    4e22:	0c f0       	brlt	.+2      	; 0x4e26 <SM_VoidCalc+0x1e6>
    4e24:	69 c0       	rjmp	.+210    	; 0x4ef8 <SM_VoidCalc+0x2b8>
    4e26:	80 c5       	rjmp	.+2816   	; 0x5928 <SM_VoidCalc+0xce8>
    4e28:	28 a1       	ldd	r18, Y+32	; 0x20
    4e2a:	39 a1       	ldd	r19, Y+33	; 0x21
    4e2c:	23 33       	cpi	r18, 0x33	; 51
    4e2e:	31 05       	cpc	r19, r1
    4e30:	09 f4       	brne	.+2      	; 0x4e34 <SM_VoidCalc+0x1f4>
    4e32:	c4 c1       	rjmp	.+904    	; 0x51bc <SM_VoidCalc+0x57c>
    4e34:	88 a1       	ldd	r24, Y+32	; 0x20
    4e36:	99 a1       	ldd	r25, Y+33	; 0x21
    4e38:	83 33       	cpi	r24, 0x33	; 51
    4e3a:	91 05       	cpc	r25, r1
    4e3c:	0c f4       	brge	.+2      	; 0x4e40 <SM_VoidCalc+0x200>
    4e3e:	48 c1       	rjmp	.+656    	; 0x50d0 <SM_VoidCalc+0x490>
    4e40:	28 a1       	ldd	r18, Y+32	; 0x20
    4e42:	39 a1       	ldd	r19, Y+33	; 0x21
    4e44:	24 33       	cpi	r18, 0x34	; 52
    4e46:	31 05       	cpc	r19, r1
    4e48:	09 f4       	brne	.+2      	; 0x4e4c <SM_VoidCalc+0x20c>
    4e4a:	2e c2       	rjmp	.+1116   	; 0x52a8 <SM_VoidCalc+0x668>
    4e4c:	88 a1       	ldd	r24, Y+32	; 0x20
    4e4e:	99 a1       	ldd	r25, Y+33	; 0x21
    4e50:	85 33       	cpi	r24, 0x35	; 53
    4e52:	91 05       	cpc	r25, r1
    4e54:	09 f4       	brne	.+2      	; 0x4e58 <SM_VoidCalc+0x218>
    4e56:	9e c2       	rjmp	.+1340   	; 0x5394 <SM_VoidCalc+0x754>
    4e58:	c5 c6       	rjmp	.+3466   	; 0x5be4 <SM_VoidCalc+0xfa4>
    4e5a:	28 a1       	ldd	r18, Y+32	; 0x20
    4e5c:	39 a1       	ldd	r19, Y+33	; 0x21
    4e5e:	2d 34       	cpi	r18, 0x4D	; 77
    4e60:	31 05       	cpc	r19, r1
    4e62:	09 f4       	brne	.+2      	; 0x4e66 <SM_VoidCalc+0x226>
    4e64:	2c c5       	rjmp	.+2648   	; 0x58be <SM_VoidCalc+0xc7e>
    4e66:	88 a1       	ldd	r24, Y+32	; 0x20
    4e68:	99 a1       	ldd	r25, Y+33	; 0x21
    4e6a:	8e 34       	cpi	r24, 0x4E	; 78
    4e6c:	91 05       	cpc	r25, r1
    4e6e:	2c f5       	brge	.+74     	; 0x4eba <SM_VoidCalc+0x27a>
    4e70:	28 a1       	ldd	r18, Y+32	; 0x20
    4e72:	39 a1       	ldd	r19, Y+33	; 0x21
    4e74:	29 33       	cpi	r18, 0x39	; 57
    4e76:	31 05       	cpc	r19, r1
    4e78:	09 f4       	brne	.+2      	; 0x4e7c <SM_VoidCalc+0x23c>
    4e7a:	64 c4       	rjmp	.+2248   	; 0x5744 <SM_VoidCalc+0xb04>
    4e7c:	88 a1       	ldd	r24, Y+32	; 0x20
    4e7e:	99 a1       	ldd	r25, Y+33	; 0x21
    4e80:	8a 33       	cpi	r24, 0x3A	; 58
    4e82:	91 05       	cpc	r25, r1
    4e84:	6c f4       	brge	.+26     	; 0x4ea0 <SM_VoidCalc+0x260>
    4e86:	28 a1       	ldd	r18, Y+32	; 0x20
    4e88:	39 a1       	ldd	r19, Y+33	; 0x21
    4e8a:	27 33       	cpi	r18, 0x37	; 55
    4e8c:	31 05       	cpc	r19, r1
    4e8e:	09 f4       	brne	.+2      	; 0x4e92 <SM_VoidCalc+0x252>
    4e90:	6d c3       	rjmp	.+1754   	; 0x556c <SM_VoidCalc+0x92c>
    4e92:	88 a1       	ldd	r24, Y+32	; 0x20
    4e94:	99 a1       	ldd	r25, Y+33	; 0x21
    4e96:	88 33       	cpi	r24, 0x38	; 56
    4e98:	91 05       	cpc	r25, r1
    4e9a:	09 f4       	brne	.+2      	; 0x4e9e <SM_VoidCalc+0x25e>
    4e9c:	dd c3       	rjmp	.+1978   	; 0x5658 <SM_VoidCalc+0xa18>
    4e9e:	a2 c6       	rjmp	.+3396   	; 0x5be4 <SM_VoidCalc+0xfa4>
    4ea0:	28 a1       	ldd	r18, Y+32	; 0x20
    4ea2:	39 a1       	ldd	r19, Y+33	; 0x21
    4ea4:	2d 33       	cpi	r18, 0x3D	; 61
    4ea6:	31 05       	cpc	r19, r1
    4ea8:	09 f4       	brne	.+2      	; 0x4eac <SM_VoidCalc+0x26c>
    4eaa:	4d c5       	rjmp	.+2714   	; 0x5946 <SM_VoidCalc+0xd06>
    4eac:	88 a1       	ldd	r24, Y+32	; 0x20
    4eae:	99 a1       	ldd	r25, Y+33	; 0x21
    4eb0:	89 34       	cpi	r24, 0x49	; 73
    4eb2:	91 05       	cpc	r25, r1
    4eb4:	09 f4       	brne	.+2      	; 0x4eb8 <SM_VoidCalc+0x278>
    4eb6:	eb c4       	rjmp	.+2518   	; 0x588e <SM_VoidCalc+0xc4e>
    4eb8:	95 c6       	rjmp	.+3370   	; 0x5be4 <SM_VoidCalc+0xfa4>
    4eba:	28 a1       	ldd	r18, Y+32	; 0x20
    4ebc:	39 a1       	ldd	r19, Y+33	; 0x21
    4ebe:	20 35       	cpi	r18, 0x50	; 80
    4ec0:	31 05       	cpc	r19, r1
    4ec2:	09 f4       	brne	.+2      	; 0x4ec6 <SM_VoidCalc+0x286>
    4ec4:	36 c5       	rjmp	.+2668   	; 0x5932 <SM_VoidCalc+0xcf2>
    4ec6:	88 a1       	ldd	r24, Y+32	; 0x20
    4ec8:	99 a1       	ldd	r25, Y+33	; 0x21
    4eca:	81 35       	cpi	r24, 0x51	; 81
    4ecc:	91 05       	cpc	r25, r1
    4ece:	3c f4       	brge	.+14     	; 0x4ede <SM_VoidCalc+0x29e>
    4ed0:	28 a1       	ldd	r18, Y+32	; 0x20
    4ed2:	39 a1       	ldd	r19, Y+33	; 0x21
    4ed4:	2e 34       	cpi	r18, 0x4E	; 78
    4ed6:	31 05       	cpc	r19, r1
    4ed8:	09 f4       	brne	.+2      	; 0x4edc <SM_VoidCalc+0x29c>
    4eda:	0c c5       	rjmp	.+2584   	; 0x58f4 <SM_VoidCalc+0xcb4>
    4edc:	83 c6       	rjmp	.+3334   	; 0x5be4 <SM_VoidCalc+0xfa4>
    4ede:	88 a1       	ldd	r24, Y+32	; 0x20
    4ee0:	99 a1       	ldd	r25, Y+33	; 0x21
    4ee2:	83 35       	cpi	r24, 0x53	; 83
    4ee4:	91 05       	cpc	r25, r1
    4ee6:	09 f4       	brne	.+2      	; 0x4eea <SM_VoidCalc+0x2aa>
    4ee8:	0f c5       	rjmp	.+2590   	; 0x5908 <SM_VoidCalc+0xcc8>
    4eea:	28 a1       	ldd	r18, Y+32	; 0x20
    4eec:	39 a1       	ldd	r19, Y+33	; 0x21
    4eee:	23 36       	cpi	r18, 0x63	; 99
    4ef0:	31 05       	cpc	r19, r1
    4ef2:	09 f4       	brne	.+2      	; 0x4ef6 <SM_VoidCalc+0x2b6>
    4ef4:	9d c4       	rjmp	.+2362   	; 0x5830 <SM_VoidCalc+0xbf0>
    4ef6:	76 c6       	rjmp	.+3308   	; 0x5be4 <SM_VoidCalc+0xfa4>
	{
	case '0': LCD_VoidSendData(ch); if(state==0|| op==5 || op==8 || op==9|| op==10) {operand1 = ((operand1 * 10) + ch)-48;} else if(state==1){operand2 = ((operand2 * 10) + ch)-48; } break;
    4ef8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    4efa:	0e 94 6a 13 	call	0x26d4	; 0x26d4 <LCD_VoidSendData>
    4efe:	8a 89       	ldd	r24, Y+18	; 0x12
    4f00:	88 23       	and	r24, r24
    4f02:	61 f0       	breq	.+24     	; 0x4f1c <SM_VoidCalc+0x2dc>
    4f04:	8f 85       	ldd	r24, Y+15	; 0x0f
    4f06:	85 30       	cpi	r24, 0x05	; 5
    4f08:	49 f0       	breq	.+18     	; 0x4f1c <SM_VoidCalc+0x2dc>
    4f0a:	8f 85       	ldd	r24, Y+15	; 0x0f
    4f0c:	88 30       	cpi	r24, 0x08	; 8
    4f0e:	31 f0       	breq	.+12     	; 0x4f1c <SM_VoidCalc+0x2dc>
    4f10:	8f 85       	ldd	r24, Y+15	; 0x0f
    4f12:	89 30       	cpi	r24, 0x09	; 9
    4f14:	19 f0       	breq	.+6      	; 0x4f1c <SM_VoidCalc+0x2dc>
    4f16:	8f 85       	ldd	r24, Y+15	; 0x0f
    4f18:	8a 30       	cpi	r24, 0x0A	; 10
    4f1a:	81 f5       	brne	.+96     	; 0x4f7c <SM_VoidCalc+0x33c>
    4f1c:	6b 8d       	ldd	r22, Y+27	; 0x1b
    4f1e:	7c 8d       	ldd	r23, Y+28	; 0x1c
    4f20:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4f22:	9e 8d       	ldd	r25, Y+30	; 0x1e
    4f24:	20 e0       	ldi	r18, 0x00	; 0
    4f26:	30 e0       	ldi	r19, 0x00	; 0
    4f28:	40 e2       	ldi	r20, 0x20	; 32
    4f2a:	51 e4       	ldi	r21, 0x41	; 65
    4f2c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4f30:	dc 01       	movw	r26, r24
    4f32:	cb 01       	movw	r24, r22
    4f34:	7c 01       	movw	r14, r24
    4f36:	8d 01       	movw	r16, r26
    4f38:	8f 8d       	ldd	r24, Y+31	; 0x1f
    4f3a:	88 2f       	mov	r24, r24
    4f3c:	90 e0       	ldi	r25, 0x00	; 0
    4f3e:	aa 27       	eor	r26, r26
    4f40:	97 fd       	sbrc	r25, 7
    4f42:	a0 95       	com	r26
    4f44:	ba 2f       	mov	r27, r26
    4f46:	bc 01       	movw	r22, r24
    4f48:	cd 01       	movw	r24, r26
    4f4a:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    4f4e:	9b 01       	movw	r18, r22
    4f50:	ac 01       	movw	r20, r24
    4f52:	c8 01       	movw	r24, r16
    4f54:	b7 01       	movw	r22, r14
    4f56:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    4f5a:	dc 01       	movw	r26, r24
    4f5c:	cb 01       	movw	r24, r22
    4f5e:	bc 01       	movw	r22, r24
    4f60:	cd 01       	movw	r24, r26
    4f62:	20 e0       	ldi	r18, 0x00	; 0
    4f64:	30 e0       	ldi	r19, 0x00	; 0
    4f66:	40 e4       	ldi	r20, 0x40	; 64
    4f68:	52 e4       	ldi	r21, 0x42	; 66
    4f6a:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    4f6e:	dc 01       	movw	r26, r24
    4f70:	cb 01       	movw	r24, r22
    4f72:	8b 8f       	std	Y+27, r24	; 0x1b
    4f74:	9c 8f       	std	Y+28, r25	; 0x1c
    4f76:	ad 8f       	std	Y+29, r26	; 0x1d
    4f78:	be 8f       	std	Y+30, r27	; 0x1e
    4f7a:	08 cf       	rjmp	.-496    	; 0x4d8c <SM_VoidCalc+0x14c>
    4f7c:	8a 89       	ldd	r24, Y+18	; 0x12
    4f7e:	81 30       	cpi	r24, 0x01	; 1
    4f80:	09 f0       	breq	.+2      	; 0x4f84 <SM_VoidCalc+0x344>
    4f82:	04 cf       	rjmp	.-504    	; 0x4d8c <SM_VoidCalc+0x14c>
    4f84:	6f 89       	ldd	r22, Y+23	; 0x17
    4f86:	78 8d       	ldd	r23, Y+24	; 0x18
    4f88:	89 8d       	ldd	r24, Y+25	; 0x19
    4f8a:	9a 8d       	ldd	r25, Y+26	; 0x1a
    4f8c:	20 e0       	ldi	r18, 0x00	; 0
    4f8e:	30 e0       	ldi	r19, 0x00	; 0
    4f90:	40 e2       	ldi	r20, 0x20	; 32
    4f92:	51 e4       	ldi	r21, 0x41	; 65
    4f94:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4f98:	dc 01       	movw	r26, r24
    4f9a:	cb 01       	movw	r24, r22
    4f9c:	7c 01       	movw	r14, r24
    4f9e:	8d 01       	movw	r16, r26
    4fa0:	8f 8d       	ldd	r24, Y+31	; 0x1f
    4fa2:	88 2f       	mov	r24, r24
    4fa4:	90 e0       	ldi	r25, 0x00	; 0
    4fa6:	aa 27       	eor	r26, r26
    4fa8:	97 fd       	sbrc	r25, 7
    4faa:	a0 95       	com	r26
    4fac:	ba 2f       	mov	r27, r26
    4fae:	bc 01       	movw	r22, r24
    4fb0:	cd 01       	movw	r24, r26
    4fb2:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    4fb6:	9b 01       	movw	r18, r22
    4fb8:	ac 01       	movw	r20, r24
    4fba:	c8 01       	movw	r24, r16
    4fbc:	b7 01       	movw	r22, r14
    4fbe:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    4fc2:	dc 01       	movw	r26, r24
    4fc4:	cb 01       	movw	r24, r22
    4fc6:	bc 01       	movw	r22, r24
    4fc8:	cd 01       	movw	r24, r26
    4fca:	20 e0       	ldi	r18, 0x00	; 0
    4fcc:	30 e0       	ldi	r19, 0x00	; 0
    4fce:	40 e4       	ldi	r20, 0x40	; 64
    4fd0:	52 e4       	ldi	r21, 0x42	; 66
    4fd2:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    4fd6:	dc 01       	movw	r26, r24
    4fd8:	cb 01       	movw	r24, r22
    4fda:	8f 8b       	std	Y+23, r24	; 0x17
    4fdc:	98 8f       	std	Y+24, r25	; 0x18
    4fde:	a9 8f       	std	Y+25, r26	; 0x19
    4fe0:	ba 8f       	std	Y+26, r27	; 0x1a
    4fe2:	d4 ce       	rjmp	.-600    	; 0x4d8c <SM_VoidCalc+0x14c>
	case '1': LCD_VoidSendData(ch); if(state==0|| op==5 || op==8 || op==9|| op==10) {operand1 = ((operand1 * 10) + ch)-48;} else if(state==1){operand2 = ((operand2 * 10) + ch)-48; } break;
    4fe4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    4fe6:	0e 94 6a 13 	call	0x26d4	; 0x26d4 <LCD_VoidSendData>
    4fea:	8a 89       	ldd	r24, Y+18	; 0x12
    4fec:	88 23       	and	r24, r24
    4fee:	61 f0       	breq	.+24     	; 0x5008 <SM_VoidCalc+0x3c8>
    4ff0:	8f 85       	ldd	r24, Y+15	; 0x0f
    4ff2:	85 30       	cpi	r24, 0x05	; 5
    4ff4:	49 f0       	breq	.+18     	; 0x5008 <SM_VoidCalc+0x3c8>
    4ff6:	8f 85       	ldd	r24, Y+15	; 0x0f
    4ff8:	88 30       	cpi	r24, 0x08	; 8
    4ffa:	31 f0       	breq	.+12     	; 0x5008 <SM_VoidCalc+0x3c8>
    4ffc:	8f 85       	ldd	r24, Y+15	; 0x0f
    4ffe:	89 30       	cpi	r24, 0x09	; 9
    5000:	19 f0       	breq	.+6      	; 0x5008 <SM_VoidCalc+0x3c8>
    5002:	8f 85       	ldd	r24, Y+15	; 0x0f
    5004:	8a 30       	cpi	r24, 0x0A	; 10
    5006:	81 f5       	brne	.+96     	; 0x5068 <SM_VoidCalc+0x428>
    5008:	6b 8d       	ldd	r22, Y+27	; 0x1b
    500a:	7c 8d       	ldd	r23, Y+28	; 0x1c
    500c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    500e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    5010:	20 e0       	ldi	r18, 0x00	; 0
    5012:	30 e0       	ldi	r19, 0x00	; 0
    5014:	40 e2       	ldi	r20, 0x20	; 32
    5016:	51 e4       	ldi	r21, 0x41	; 65
    5018:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    501c:	dc 01       	movw	r26, r24
    501e:	cb 01       	movw	r24, r22
    5020:	7c 01       	movw	r14, r24
    5022:	8d 01       	movw	r16, r26
    5024:	8f 8d       	ldd	r24, Y+31	; 0x1f
    5026:	88 2f       	mov	r24, r24
    5028:	90 e0       	ldi	r25, 0x00	; 0
    502a:	aa 27       	eor	r26, r26
    502c:	97 fd       	sbrc	r25, 7
    502e:	a0 95       	com	r26
    5030:	ba 2f       	mov	r27, r26
    5032:	bc 01       	movw	r22, r24
    5034:	cd 01       	movw	r24, r26
    5036:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    503a:	9b 01       	movw	r18, r22
    503c:	ac 01       	movw	r20, r24
    503e:	c8 01       	movw	r24, r16
    5040:	b7 01       	movw	r22, r14
    5042:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    5046:	dc 01       	movw	r26, r24
    5048:	cb 01       	movw	r24, r22
    504a:	bc 01       	movw	r22, r24
    504c:	cd 01       	movw	r24, r26
    504e:	20 e0       	ldi	r18, 0x00	; 0
    5050:	30 e0       	ldi	r19, 0x00	; 0
    5052:	40 e4       	ldi	r20, 0x40	; 64
    5054:	52 e4       	ldi	r21, 0x42	; 66
    5056:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    505a:	dc 01       	movw	r26, r24
    505c:	cb 01       	movw	r24, r22
    505e:	8b 8f       	std	Y+27, r24	; 0x1b
    5060:	9c 8f       	std	Y+28, r25	; 0x1c
    5062:	ad 8f       	std	Y+29, r26	; 0x1d
    5064:	be 8f       	std	Y+30, r27	; 0x1e
    5066:	92 ce       	rjmp	.-732    	; 0x4d8c <SM_VoidCalc+0x14c>
    5068:	8a 89       	ldd	r24, Y+18	; 0x12
    506a:	81 30       	cpi	r24, 0x01	; 1
    506c:	09 f0       	breq	.+2      	; 0x5070 <SM_VoidCalc+0x430>
    506e:	8e ce       	rjmp	.-740    	; 0x4d8c <SM_VoidCalc+0x14c>
    5070:	6f 89       	ldd	r22, Y+23	; 0x17
    5072:	78 8d       	ldd	r23, Y+24	; 0x18
    5074:	89 8d       	ldd	r24, Y+25	; 0x19
    5076:	9a 8d       	ldd	r25, Y+26	; 0x1a
    5078:	20 e0       	ldi	r18, 0x00	; 0
    507a:	30 e0       	ldi	r19, 0x00	; 0
    507c:	40 e2       	ldi	r20, 0x20	; 32
    507e:	51 e4       	ldi	r21, 0x41	; 65
    5080:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5084:	dc 01       	movw	r26, r24
    5086:	cb 01       	movw	r24, r22
    5088:	7c 01       	movw	r14, r24
    508a:	8d 01       	movw	r16, r26
    508c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    508e:	88 2f       	mov	r24, r24
    5090:	90 e0       	ldi	r25, 0x00	; 0
    5092:	aa 27       	eor	r26, r26
    5094:	97 fd       	sbrc	r25, 7
    5096:	a0 95       	com	r26
    5098:	ba 2f       	mov	r27, r26
    509a:	bc 01       	movw	r22, r24
    509c:	cd 01       	movw	r24, r26
    509e:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    50a2:	9b 01       	movw	r18, r22
    50a4:	ac 01       	movw	r20, r24
    50a6:	c8 01       	movw	r24, r16
    50a8:	b7 01       	movw	r22, r14
    50aa:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    50ae:	dc 01       	movw	r26, r24
    50b0:	cb 01       	movw	r24, r22
    50b2:	bc 01       	movw	r22, r24
    50b4:	cd 01       	movw	r24, r26
    50b6:	20 e0       	ldi	r18, 0x00	; 0
    50b8:	30 e0       	ldi	r19, 0x00	; 0
    50ba:	40 e4       	ldi	r20, 0x40	; 64
    50bc:	52 e4       	ldi	r21, 0x42	; 66
    50be:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    50c2:	dc 01       	movw	r26, r24
    50c4:	cb 01       	movw	r24, r22
    50c6:	8f 8b       	std	Y+23, r24	; 0x17
    50c8:	98 8f       	std	Y+24, r25	; 0x18
    50ca:	a9 8f       	std	Y+25, r26	; 0x19
    50cc:	ba 8f       	std	Y+26, r27	; 0x1a
    50ce:	5e ce       	rjmp	.-836    	; 0x4d8c <SM_VoidCalc+0x14c>
	case '2': LCD_VoidSendData(ch); if(state==0|| op==5 || op==8 || op==9|| op==10) {operand1 = ((operand1 * 10) + ch)-48;} else if(state==1){operand2 = ((operand2 * 10) + ch)-48; } break;
    50d0:	8f 8d       	ldd	r24, Y+31	; 0x1f
    50d2:	0e 94 6a 13 	call	0x26d4	; 0x26d4 <LCD_VoidSendData>
    50d6:	8a 89       	ldd	r24, Y+18	; 0x12
    50d8:	88 23       	and	r24, r24
    50da:	61 f0       	breq	.+24     	; 0x50f4 <SM_VoidCalc+0x4b4>
    50dc:	8f 85       	ldd	r24, Y+15	; 0x0f
    50de:	85 30       	cpi	r24, 0x05	; 5
    50e0:	49 f0       	breq	.+18     	; 0x50f4 <SM_VoidCalc+0x4b4>
    50e2:	8f 85       	ldd	r24, Y+15	; 0x0f
    50e4:	88 30       	cpi	r24, 0x08	; 8
    50e6:	31 f0       	breq	.+12     	; 0x50f4 <SM_VoidCalc+0x4b4>
    50e8:	8f 85       	ldd	r24, Y+15	; 0x0f
    50ea:	89 30       	cpi	r24, 0x09	; 9
    50ec:	19 f0       	breq	.+6      	; 0x50f4 <SM_VoidCalc+0x4b4>
    50ee:	8f 85       	ldd	r24, Y+15	; 0x0f
    50f0:	8a 30       	cpi	r24, 0x0A	; 10
    50f2:	81 f5       	brne	.+96     	; 0x5154 <SM_VoidCalc+0x514>
    50f4:	6b 8d       	ldd	r22, Y+27	; 0x1b
    50f6:	7c 8d       	ldd	r23, Y+28	; 0x1c
    50f8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    50fa:	9e 8d       	ldd	r25, Y+30	; 0x1e
    50fc:	20 e0       	ldi	r18, 0x00	; 0
    50fe:	30 e0       	ldi	r19, 0x00	; 0
    5100:	40 e2       	ldi	r20, 0x20	; 32
    5102:	51 e4       	ldi	r21, 0x41	; 65
    5104:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5108:	dc 01       	movw	r26, r24
    510a:	cb 01       	movw	r24, r22
    510c:	7c 01       	movw	r14, r24
    510e:	8d 01       	movw	r16, r26
    5110:	8f 8d       	ldd	r24, Y+31	; 0x1f
    5112:	88 2f       	mov	r24, r24
    5114:	90 e0       	ldi	r25, 0x00	; 0
    5116:	aa 27       	eor	r26, r26
    5118:	97 fd       	sbrc	r25, 7
    511a:	a0 95       	com	r26
    511c:	ba 2f       	mov	r27, r26
    511e:	bc 01       	movw	r22, r24
    5120:	cd 01       	movw	r24, r26
    5122:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    5126:	9b 01       	movw	r18, r22
    5128:	ac 01       	movw	r20, r24
    512a:	c8 01       	movw	r24, r16
    512c:	b7 01       	movw	r22, r14
    512e:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    5132:	dc 01       	movw	r26, r24
    5134:	cb 01       	movw	r24, r22
    5136:	bc 01       	movw	r22, r24
    5138:	cd 01       	movw	r24, r26
    513a:	20 e0       	ldi	r18, 0x00	; 0
    513c:	30 e0       	ldi	r19, 0x00	; 0
    513e:	40 e4       	ldi	r20, 0x40	; 64
    5140:	52 e4       	ldi	r21, 0x42	; 66
    5142:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    5146:	dc 01       	movw	r26, r24
    5148:	cb 01       	movw	r24, r22
    514a:	8b 8f       	std	Y+27, r24	; 0x1b
    514c:	9c 8f       	std	Y+28, r25	; 0x1c
    514e:	ad 8f       	std	Y+29, r26	; 0x1d
    5150:	be 8f       	std	Y+30, r27	; 0x1e
    5152:	1c ce       	rjmp	.-968    	; 0x4d8c <SM_VoidCalc+0x14c>
    5154:	8a 89       	ldd	r24, Y+18	; 0x12
    5156:	81 30       	cpi	r24, 0x01	; 1
    5158:	09 f0       	breq	.+2      	; 0x515c <SM_VoidCalc+0x51c>
    515a:	18 ce       	rjmp	.-976    	; 0x4d8c <SM_VoidCalc+0x14c>
    515c:	6f 89       	ldd	r22, Y+23	; 0x17
    515e:	78 8d       	ldd	r23, Y+24	; 0x18
    5160:	89 8d       	ldd	r24, Y+25	; 0x19
    5162:	9a 8d       	ldd	r25, Y+26	; 0x1a
    5164:	20 e0       	ldi	r18, 0x00	; 0
    5166:	30 e0       	ldi	r19, 0x00	; 0
    5168:	40 e2       	ldi	r20, 0x20	; 32
    516a:	51 e4       	ldi	r21, 0x41	; 65
    516c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5170:	dc 01       	movw	r26, r24
    5172:	cb 01       	movw	r24, r22
    5174:	7c 01       	movw	r14, r24
    5176:	8d 01       	movw	r16, r26
    5178:	8f 8d       	ldd	r24, Y+31	; 0x1f
    517a:	88 2f       	mov	r24, r24
    517c:	90 e0       	ldi	r25, 0x00	; 0
    517e:	aa 27       	eor	r26, r26
    5180:	97 fd       	sbrc	r25, 7
    5182:	a0 95       	com	r26
    5184:	ba 2f       	mov	r27, r26
    5186:	bc 01       	movw	r22, r24
    5188:	cd 01       	movw	r24, r26
    518a:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    518e:	9b 01       	movw	r18, r22
    5190:	ac 01       	movw	r20, r24
    5192:	c8 01       	movw	r24, r16
    5194:	b7 01       	movw	r22, r14
    5196:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    519a:	dc 01       	movw	r26, r24
    519c:	cb 01       	movw	r24, r22
    519e:	bc 01       	movw	r22, r24
    51a0:	cd 01       	movw	r24, r26
    51a2:	20 e0       	ldi	r18, 0x00	; 0
    51a4:	30 e0       	ldi	r19, 0x00	; 0
    51a6:	40 e4       	ldi	r20, 0x40	; 64
    51a8:	52 e4       	ldi	r21, 0x42	; 66
    51aa:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    51ae:	dc 01       	movw	r26, r24
    51b0:	cb 01       	movw	r24, r22
    51b2:	8f 8b       	std	Y+23, r24	; 0x17
    51b4:	98 8f       	std	Y+24, r25	; 0x18
    51b6:	a9 8f       	std	Y+25, r26	; 0x19
    51b8:	ba 8f       	std	Y+26, r27	; 0x1a
    51ba:	e8 cd       	rjmp	.-1072   	; 0x4d8c <SM_VoidCalc+0x14c>
	case '3': LCD_VoidSendData(ch); if(state==0|| op==5 || op==8 || op==9|| op==10) {operand1 = ((operand1 * 10) + ch)-48;} else if(state==1){operand2 = ((operand2 * 10) + ch)-48; } break;
    51bc:	8f 8d       	ldd	r24, Y+31	; 0x1f
    51be:	0e 94 6a 13 	call	0x26d4	; 0x26d4 <LCD_VoidSendData>
    51c2:	8a 89       	ldd	r24, Y+18	; 0x12
    51c4:	88 23       	and	r24, r24
    51c6:	61 f0       	breq	.+24     	; 0x51e0 <SM_VoidCalc+0x5a0>
    51c8:	8f 85       	ldd	r24, Y+15	; 0x0f
    51ca:	85 30       	cpi	r24, 0x05	; 5
    51cc:	49 f0       	breq	.+18     	; 0x51e0 <SM_VoidCalc+0x5a0>
    51ce:	8f 85       	ldd	r24, Y+15	; 0x0f
    51d0:	88 30       	cpi	r24, 0x08	; 8
    51d2:	31 f0       	breq	.+12     	; 0x51e0 <SM_VoidCalc+0x5a0>
    51d4:	8f 85       	ldd	r24, Y+15	; 0x0f
    51d6:	89 30       	cpi	r24, 0x09	; 9
    51d8:	19 f0       	breq	.+6      	; 0x51e0 <SM_VoidCalc+0x5a0>
    51da:	8f 85       	ldd	r24, Y+15	; 0x0f
    51dc:	8a 30       	cpi	r24, 0x0A	; 10
    51de:	81 f5       	brne	.+96     	; 0x5240 <SM_VoidCalc+0x600>
    51e0:	6b 8d       	ldd	r22, Y+27	; 0x1b
    51e2:	7c 8d       	ldd	r23, Y+28	; 0x1c
    51e4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    51e6:	9e 8d       	ldd	r25, Y+30	; 0x1e
    51e8:	20 e0       	ldi	r18, 0x00	; 0
    51ea:	30 e0       	ldi	r19, 0x00	; 0
    51ec:	40 e2       	ldi	r20, 0x20	; 32
    51ee:	51 e4       	ldi	r21, 0x41	; 65
    51f0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    51f4:	dc 01       	movw	r26, r24
    51f6:	cb 01       	movw	r24, r22
    51f8:	7c 01       	movw	r14, r24
    51fa:	8d 01       	movw	r16, r26
    51fc:	8f 8d       	ldd	r24, Y+31	; 0x1f
    51fe:	88 2f       	mov	r24, r24
    5200:	90 e0       	ldi	r25, 0x00	; 0
    5202:	aa 27       	eor	r26, r26
    5204:	97 fd       	sbrc	r25, 7
    5206:	a0 95       	com	r26
    5208:	ba 2f       	mov	r27, r26
    520a:	bc 01       	movw	r22, r24
    520c:	cd 01       	movw	r24, r26
    520e:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    5212:	9b 01       	movw	r18, r22
    5214:	ac 01       	movw	r20, r24
    5216:	c8 01       	movw	r24, r16
    5218:	b7 01       	movw	r22, r14
    521a:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    521e:	dc 01       	movw	r26, r24
    5220:	cb 01       	movw	r24, r22
    5222:	bc 01       	movw	r22, r24
    5224:	cd 01       	movw	r24, r26
    5226:	20 e0       	ldi	r18, 0x00	; 0
    5228:	30 e0       	ldi	r19, 0x00	; 0
    522a:	40 e4       	ldi	r20, 0x40	; 64
    522c:	52 e4       	ldi	r21, 0x42	; 66
    522e:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    5232:	dc 01       	movw	r26, r24
    5234:	cb 01       	movw	r24, r22
    5236:	8b 8f       	std	Y+27, r24	; 0x1b
    5238:	9c 8f       	std	Y+28, r25	; 0x1c
    523a:	ad 8f       	std	Y+29, r26	; 0x1d
    523c:	be 8f       	std	Y+30, r27	; 0x1e
    523e:	a6 cd       	rjmp	.-1204   	; 0x4d8c <SM_VoidCalc+0x14c>
    5240:	8a 89       	ldd	r24, Y+18	; 0x12
    5242:	81 30       	cpi	r24, 0x01	; 1
    5244:	09 f0       	breq	.+2      	; 0x5248 <SM_VoidCalc+0x608>
    5246:	a2 cd       	rjmp	.-1212   	; 0x4d8c <SM_VoidCalc+0x14c>
    5248:	6f 89       	ldd	r22, Y+23	; 0x17
    524a:	78 8d       	ldd	r23, Y+24	; 0x18
    524c:	89 8d       	ldd	r24, Y+25	; 0x19
    524e:	9a 8d       	ldd	r25, Y+26	; 0x1a
    5250:	20 e0       	ldi	r18, 0x00	; 0
    5252:	30 e0       	ldi	r19, 0x00	; 0
    5254:	40 e2       	ldi	r20, 0x20	; 32
    5256:	51 e4       	ldi	r21, 0x41	; 65
    5258:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    525c:	dc 01       	movw	r26, r24
    525e:	cb 01       	movw	r24, r22
    5260:	7c 01       	movw	r14, r24
    5262:	8d 01       	movw	r16, r26
    5264:	8f 8d       	ldd	r24, Y+31	; 0x1f
    5266:	88 2f       	mov	r24, r24
    5268:	90 e0       	ldi	r25, 0x00	; 0
    526a:	aa 27       	eor	r26, r26
    526c:	97 fd       	sbrc	r25, 7
    526e:	a0 95       	com	r26
    5270:	ba 2f       	mov	r27, r26
    5272:	bc 01       	movw	r22, r24
    5274:	cd 01       	movw	r24, r26
    5276:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    527a:	9b 01       	movw	r18, r22
    527c:	ac 01       	movw	r20, r24
    527e:	c8 01       	movw	r24, r16
    5280:	b7 01       	movw	r22, r14
    5282:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    5286:	dc 01       	movw	r26, r24
    5288:	cb 01       	movw	r24, r22
    528a:	bc 01       	movw	r22, r24
    528c:	cd 01       	movw	r24, r26
    528e:	20 e0       	ldi	r18, 0x00	; 0
    5290:	30 e0       	ldi	r19, 0x00	; 0
    5292:	40 e4       	ldi	r20, 0x40	; 64
    5294:	52 e4       	ldi	r21, 0x42	; 66
    5296:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    529a:	dc 01       	movw	r26, r24
    529c:	cb 01       	movw	r24, r22
    529e:	8f 8b       	std	Y+23, r24	; 0x17
    52a0:	98 8f       	std	Y+24, r25	; 0x18
    52a2:	a9 8f       	std	Y+25, r26	; 0x19
    52a4:	ba 8f       	std	Y+26, r27	; 0x1a
    52a6:	72 cd       	rjmp	.-1308   	; 0x4d8c <SM_VoidCalc+0x14c>
	case '4': LCD_VoidSendData(ch); if(state==0|| op==5 || op==8 || op==9|| op==10) {operand1 = ((operand1 * 10) + ch)-48;} else if(state==1){operand2 = ((operand2 * 10) + ch)-48; } break;
    52a8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    52aa:	0e 94 6a 13 	call	0x26d4	; 0x26d4 <LCD_VoidSendData>
    52ae:	8a 89       	ldd	r24, Y+18	; 0x12
    52b0:	88 23       	and	r24, r24
    52b2:	61 f0       	breq	.+24     	; 0x52cc <SM_VoidCalc+0x68c>
    52b4:	8f 85       	ldd	r24, Y+15	; 0x0f
    52b6:	85 30       	cpi	r24, 0x05	; 5
    52b8:	49 f0       	breq	.+18     	; 0x52cc <SM_VoidCalc+0x68c>
    52ba:	8f 85       	ldd	r24, Y+15	; 0x0f
    52bc:	88 30       	cpi	r24, 0x08	; 8
    52be:	31 f0       	breq	.+12     	; 0x52cc <SM_VoidCalc+0x68c>
    52c0:	8f 85       	ldd	r24, Y+15	; 0x0f
    52c2:	89 30       	cpi	r24, 0x09	; 9
    52c4:	19 f0       	breq	.+6      	; 0x52cc <SM_VoidCalc+0x68c>
    52c6:	8f 85       	ldd	r24, Y+15	; 0x0f
    52c8:	8a 30       	cpi	r24, 0x0A	; 10
    52ca:	81 f5       	brne	.+96     	; 0x532c <SM_VoidCalc+0x6ec>
    52cc:	6b 8d       	ldd	r22, Y+27	; 0x1b
    52ce:	7c 8d       	ldd	r23, Y+28	; 0x1c
    52d0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    52d2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    52d4:	20 e0       	ldi	r18, 0x00	; 0
    52d6:	30 e0       	ldi	r19, 0x00	; 0
    52d8:	40 e2       	ldi	r20, 0x20	; 32
    52da:	51 e4       	ldi	r21, 0x41	; 65
    52dc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    52e0:	dc 01       	movw	r26, r24
    52e2:	cb 01       	movw	r24, r22
    52e4:	7c 01       	movw	r14, r24
    52e6:	8d 01       	movw	r16, r26
    52e8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    52ea:	88 2f       	mov	r24, r24
    52ec:	90 e0       	ldi	r25, 0x00	; 0
    52ee:	aa 27       	eor	r26, r26
    52f0:	97 fd       	sbrc	r25, 7
    52f2:	a0 95       	com	r26
    52f4:	ba 2f       	mov	r27, r26
    52f6:	bc 01       	movw	r22, r24
    52f8:	cd 01       	movw	r24, r26
    52fa:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    52fe:	9b 01       	movw	r18, r22
    5300:	ac 01       	movw	r20, r24
    5302:	c8 01       	movw	r24, r16
    5304:	b7 01       	movw	r22, r14
    5306:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    530a:	dc 01       	movw	r26, r24
    530c:	cb 01       	movw	r24, r22
    530e:	bc 01       	movw	r22, r24
    5310:	cd 01       	movw	r24, r26
    5312:	20 e0       	ldi	r18, 0x00	; 0
    5314:	30 e0       	ldi	r19, 0x00	; 0
    5316:	40 e4       	ldi	r20, 0x40	; 64
    5318:	52 e4       	ldi	r21, 0x42	; 66
    531a:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    531e:	dc 01       	movw	r26, r24
    5320:	cb 01       	movw	r24, r22
    5322:	8b 8f       	std	Y+27, r24	; 0x1b
    5324:	9c 8f       	std	Y+28, r25	; 0x1c
    5326:	ad 8f       	std	Y+29, r26	; 0x1d
    5328:	be 8f       	std	Y+30, r27	; 0x1e
    532a:	30 cd       	rjmp	.-1440   	; 0x4d8c <SM_VoidCalc+0x14c>
    532c:	8a 89       	ldd	r24, Y+18	; 0x12
    532e:	81 30       	cpi	r24, 0x01	; 1
    5330:	09 f0       	breq	.+2      	; 0x5334 <SM_VoidCalc+0x6f4>
    5332:	2c cd       	rjmp	.-1448   	; 0x4d8c <SM_VoidCalc+0x14c>
    5334:	6f 89       	ldd	r22, Y+23	; 0x17
    5336:	78 8d       	ldd	r23, Y+24	; 0x18
    5338:	89 8d       	ldd	r24, Y+25	; 0x19
    533a:	9a 8d       	ldd	r25, Y+26	; 0x1a
    533c:	20 e0       	ldi	r18, 0x00	; 0
    533e:	30 e0       	ldi	r19, 0x00	; 0
    5340:	40 e2       	ldi	r20, 0x20	; 32
    5342:	51 e4       	ldi	r21, 0x41	; 65
    5344:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5348:	dc 01       	movw	r26, r24
    534a:	cb 01       	movw	r24, r22
    534c:	7c 01       	movw	r14, r24
    534e:	8d 01       	movw	r16, r26
    5350:	8f 8d       	ldd	r24, Y+31	; 0x1f
    5352:	88 2f       	mov	r24, r24
    5354:	90 e0       	ldi	r25, 0x00	; 0
    5356:	aa 27       	eor	r26, r26
    5358:	97 fd       	sbrc	r25, 7
    535a:	a0 95       	com	r26
    535c:	ba 2f       	mov	r27, r26
    535e:	bc 01       	movw	r22, r24
    5360:	cd 01       	movw	r24, r26
    5362:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    5366:	9b 01       	movw	r18, r22
    5368:	ac 01       	movw	r20, r24
    536a:	c8 01       	movw	r24, r16
    536c:	b7 01       	movw	r22, r14
    536e:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    5372:	dc 01       	movw	r26, r24
    5374:	cb 01       	movw	r24, r22
    5376:	bc 01       	movw	r22, r24
    5378:	cd 01       	movw	r24, r26
    537a:	20 e0       	ldi	r18, 0x00	; 0
    537c:	30 e0       	ldi	r19, 0x00	; 0
    537e:	40 e4       	ldi	r20, 0x40	; 64
    5380:	52 e4       	ldi	r21, 0x42	; 66
    5382:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    5386:	dc 01       	movw	r26, r24
    5388:	cb 01       	movw	r24, r22
    538a:	8f 8b       	std	Y+23, r24	; 0x17
    538c:	98 8f       	std	Y+24, r25	; 0x18
    538e:	a9 8f       	std	Y+25, r26	; 0x19
    5390:	ba 8f       	std	Y+26, r27	; 0x1a
    5392:	fc cc       	rjmp	.-1544   	; 0x4d8c <SM_VoidCalc+0x14c>
	case '5': LCD_VoidSendData(ch); if(state==0|| op==5 || op==8 || op==9|| op==10) {operand1 = ((operand1 * 10) + ch)-48;} else if(state==1){operand2 = ((operand2 * 10) + ch)-48; } break;
    5394:	8f 8d       	ldd	r24, Y+31	; 0x1f
    5396:	0e 94 6a 13 	call	0x26d4	; 0x26d4 <LCD_VoidSendData>
    539a:	8a 89       	ldd	r24, Y+18	; 0x12
    539c:	88 23       	and	r24, r24
    539e:	61 f0       	breq	.+24     	; 0x53b8 <SM_VoidCalc+0x778>
    53a0:	8f 85       	ldd	r24, Y+15	; 0x0f
    53a2:	85 30       	cpi	r24, 0x05	; 5
    53a4:	49 f0       	breq	.+18     	; 0x53b8 <SM_VoidCalc+0x778>
    53a6:	8f 85       	ldd	r24, Y+15	; 0x0f
    53a8:	88 30       	cpi	r24, 0x08	; 8
    53aa:	31 f0       	breq	.+12     	; 0x53b8 <SM_VoidCalc+0x778>
    53ac:	8f 85       	ldd	r24, Y+15	; 0x0f
    53ae:	89 30       	cpi	r24, 0x09	; 9
    53b0:	19 f0       	breq	.+6      	; 0x53b8 <SM_VoidCalc+0x778>
    53b2:	8f 85       	ldd	r24, Y+15	; 0x0f
    53b4:	8a 30       	cpi	r24, 0x0A	; 10
    53b6:	81 f5       	brne	.+96     	; 0x5418 <SM_VoidCalc+0x7d8>
    53b8:	6b 8d       	ldd	r22, Y+27	; 0x1b
    53ba:	7c 8d       	ldd	r23, Y+28	; 0x1c
    53bc:	8d 8d       	ldd	r24, Y+29	; 0x1d
    53be:	9e 8d       	ldd	r25, Y+30	; 0x1e
    53c0:	20 e0       	ldi	r18, 0x00	; 0
    53c2:	30 e0       	ldi	r19, 0x00	; 0
    53c4:	40 e2       	ldi	r20, 0x20	; 32
    53c6:	51 e4       	ldi	r21, 0x41	; 65
    53c8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    53cc:	dc 01       	movw	r26, r24
    53ce:	cb 01       	movw	r24, r22
    53d0:	7c 01       	movw	r14, r24
    53d2:	8d 01       	movw	r16, r26
    53d4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    53d6:	88 2f       	mov	r24, r24
    53d8:	90 e0       	ldi	r25, 0x00	; 0
    53da:	aa 27       	eor	r26, r26
    53dc:	97 fd       	sbrc	r25, 7
    53de:	a0 95       	com	r26
    53e0:	ba 2f       	mov	r27, r26
    53e2:	bc 01       	movw	r22, r24
    53e4:	cd 01       	movw	r24, r26
    53e6:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    53ea:	9b 01       	movw	r18, r22
    53ec:	ac 01       	movw	r20, r24
    53ee:	c8 01       	movw	r24, r16
    53f0:	b7 01       	movw	r22, r14
    53f2:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    53f6:	dc 01       	movw	r26, r24
    53f8:	cb 01       	movw	r24, r22
    53fa:	bc 01       	movw	r22, r24
    53fc:	cd 01       	movw	r24, r26
    53fe:	20 e0       	ldi	r18, 0x00	; 0
    5400:	30 e0       	ldi	r19, 0x00	; 0
    5402:	40 e4       	ldi	r20, 0x40	; 64
    5404:	52 e4       	ldi	r21, 0x42	; 66
    5406:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    540a:	dc 01       	movw	r26, r24
    540c:	cb 01       	movw	r24, r22
    540e:	8b 8f       	std	Y+27, r24	; 0x1b
    5410:	9c 8f       	std	Y+28, r25	; 0x1c
    5412:	ad 8f       	std	Y+29, r26	; 0x1d
    5414:	be 8f       	std	Y+30, r27	; 0x1e
    5416:	ba cc       	rjmp	.-1676   	; 0x4d8c <SM_VoidCalc+0x14c>
    5418:	8a 89       	ldd	r24, Y+18	; 0x12
    541a:	81 30       	cpi	r24, 0x01	; 1
    541c:	09 f0       	breq	.+2      	; 0x5420 <SM_VoidCalc+0x7e0>
    541e:	b6 cc       	rjmp	.-1684   	; 0x4d8c <SM_VoidCalc+0x14c>
    5420:	6f 89       	ldd	r22, Y+23	; 0x17
    5422:	78 8d       	ldd	r23, Y+24	; 0x18
    5424:	89 8d       	ldd	r24, Y+25	; 0x19
    5426:	9a 8d       	ldd	r25, Y+26	; 0x1a
    5428:	20 e0       	ldi	r18, 0x00	; 0
    542a:	30 e0       	ldi	r19, 0x00	; 0
    542c:	40 e2       	ldi	r20, 0x20	; 32
    542e:	51 e4       	ldi	r21, 0x41	; 65
    5430:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5434:	dc 01       	movw	r26, r24
    5436:	cb 01       	movw	r24, r22
    5438:	7c 01       	movw	r14, r24
    543a:	8d 01       	movw	r16, r26
    543c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    543e:	88 2f       	mov	r24, r24
    5440:	90 e0       	ldi	r25, 0x00	; 0
    5442:	aa 27       	eor	r26, r26
    5444:	97 fd       	sbrc	r25, 7
    5446:	a0 95       	com	r26
    5448:	ba 2f       	mov	r27, r26
    544a:	bc 01       	movw	r22, r24
    544c:	cd 01       	movw	r24, r26
    544e:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    5452:	9b 01       	movw	r18, r22
    5454:	ac 01       	movw	r20, r24
    5456:	c8 01       	movw	r24, r16
    5458:	b7 01       	movw	r22, r14
    545a:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    545e:	dc 01       	movw	r26, r24
    5460:	cb 01       	movw	r24, r22
    5462:	bc 01       	movw	r22, r24
    5464:	cd 01       	movw	r24, r26
    5466:	20 e0       	ldi	r18, 0x00	; 0
    5468:	30 e0       	ldi	r19, 0x00	; 0
    546a:	40 e4       	ldi	r20, 0x40	; 64
    546c:	52 e4       	ldi	r21, 0x42	; 66
    546e:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    5472:	dc 01       	movw	r26, r24
    5474:	cb 01       	movw	r24, r22
    5476:	8f 8b       	std	Y+23, r24	; 0x17
    5478:	98 8f       	std	Y+24, r25	; 0x18
    547a:	a9 8f       	std	Y+25, r26	; 0x19
    547c:	ba 8f       	std	Y+26, r27	; 0x1a
    547e:	86 cc       	rjmp	.-1780   	; 0x4d8c <SM_VoidCalc+0x14c>
	case '6': LCD_VoidSendData(ch); if(state==0|| op==5 || op==8 || op==9|| op==10) {operand1 = ((operand1 * 10) + ch)-48;} else if(state==1){operand2 = ((operand2 * 10) + ch)-48; } break;
    5480:	8f 8d       	ldd	r24, Y+31	; 0x1f
    5482:	0e 94 6a 13 	call	0x26d4	; 0x26d4 <LCD_VoidSendData>
    5486:	8a 89       	ldd	r24, Y+18	; 0x12
    5488:	88 23       	and	r24, r24
    548a:	61 f0       	breq	.+24     	; 0x54a4 <SM_VoidCalc+0x864>
    548c:	8f 85       	ldd	r24, Y+15	; 0x0f
    548e:	85 30       	cpi	r24, 0x05	; 5
    5490:	49 f0       	breq	.+18     	; 0x54a4 <SM_VoidCalc+0x864>
    5492:	8f 85       	ldd	r24, Y+15	; 0x0f
    5494:	88 30       	cpi	r24, 0x08	; 8
    5496:	31 f0       	breq	.+12     	; 0x54a4 <SM_VoidCalc+0x864>
    5498:	8f 85       	ldd	r24, Y+15	; 0x0f
    549a:	89 30       	cpi	r24, 0x09	; 9
    549c:	19 f0       	breq	.+6      	; 0x54a4 <SM_VoidCalc+0x864>
    549e:	8f 85       	ldd	r24, Y+15	; 0x0f
    54a0:	8a 30       	cpi	r24, 0x0A	; 10
    54a2:	81 f5       	brne	.+96     	; 0x5504 <SM_VoidCalc+0x8c4>
    54a4:	6b 8d       	ldd	r22, Y+27	; 0x1b
    54a6:	7c 8d       	ldd	r23, Y+28	; 0x1c
    54a8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    54aa:	9e 8d       	ldd	r25, Y+30	; 0x1e
    54ac:	20 e0       	ldi	r18, 0x00	; 0
    54ae:	30 e0       	ldi	r19, 0x00	; 0
    54b0:	40 e2       	ldi	r20, 0x20	; 32
    54b2:	51 e4       	ldi	r21, 0x41	; 65
    54b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    54b8:	dc 01       	movw	r26, r24
    54ba:	cb 01       	movw	r24, r22
    54bc:	7c 01       	movw	r14, r24
    54be:	8d 01       	movw	r16, r26
    54c0:	8f 8d       	ldd	r24, Y+31	; 0x1f
    54c2:	88 2f       	mov	r24, r24
    54c4:	90 e0       	ldi	r25, 0x00	; 0
    54c6:	aa 27       	eor	r26, r26
    54c8:	97 fd       	sbrc	r25, 7
    54ca:	a0 95       	com	r26
    54cc:	ba 2f       	mov	r27, r26
    54ce:	bc 01       	movw	r22, r24
    54d0:	cd 01       	movw	r24, r26
    54d2:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    54d6:	9b 01       	movw	r18, r22
    54d8:	ac 01       	movw	r20, r24
    54da:	c8 01       	movw	r24, r16
    54dc:	b7 01       	movw	r22, r14
    54de:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    54e2:	dc 01       	movw	r26, r24
    54e4:	cb 01       	movw	r24, r22
    54e6:	bc 01       	movw	r22, r24
    54e8:	cd 01       	movw	r24, r26
    54ea:	20 e0       	ldi	r18, 0x00	; 0
    54ec:	30 e0       	ldi	r19, 0x00	; 0
    54ee:	40 e4       	ldi	r20, 0x40	; 64
    54f0:	52 e4       	ldi	r21, 0x42	; 66
    54f2:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    54f6:	dc 01       	movw	r26, r24
    54f8:	cb 01       	movw	r24, r22
    54fa:	8b 8f       	std	Y+27, r24	; 0x1b
    54fc:	9c 8f       	std	Y+28, r25	; 0x1c
    54fe:	ad 8f       	std	Y+29, r26	; 0x1d
    5500:	be 8f       	std	Y+30, r27	; 0x1e
    5502:	44 cc       	rjmp	.-1912   	; 0x4d8c <SM_VoidCalc+0x14c>
    5504:	8a 89       	ldd	r24, Y+18	; 0x12
    5506:	81 30       	cpi	r24, 0x01	; 1
    5508:	09 f0       	breq	.+2      	; 0x550c <SM_VoidCalc+0x8cc>
    550a:	40 cc       	rjmp	.-1920   	; 0x4d8c <SM_VoidCalc+0x14c>
    550c:	6f 89       	ldd	r22, Y+23	; 0x17
    550e:	78 8d       	ldd	r23, Y+24	; 0x18
    5510:	89 8d       	ldd	r24, Y+25	; 0x19
    5512:	9a 8d       	ldd	r25, Y+26	; 0x1a
    5514:	20 e0       	ldi	r18, 0x00	; 0
    5516:	30 e0       	ldi	r19, 0x00	; 0
    5518:	40 e2       	ldi	r20, 0x20	; 32
    551a:	51 e4       	ldi	r21, 0x41	; 65
    551c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5520:	dc 01       	movw	r26, r24
    5522:	cb 01       	movw	r24, r22
    5524:	7c 01       	movw	r14, r24
    5526:	8d 01       	movw	r16, r26
    5528:	8f 8d       	ldd	r24, Y+31	; 0x1f
    552a:	88 2f       	mov	r24, r24
    552c:	90 e0       	ldi	r25, 0x00	; 0
    552e:	aa 27       	eor	r26, r26
    5530:	97 fd       	sbrc	r25, 7
    5532:	a0 95       	com	r26
    5534:	ba 2f       	mov	r27, r26
    5536:	bc 01       	movw	r22, r24
    5538:	cd 01       	movw	r24, r26
    553a:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    553e:	9b 01       	movw	r18, r22
    5540:	ac 01       	movw	r20, r24
    5542:	c8 01       	movw	r24, r16
    5544:	b7 01       	movw	r22, r14
    5546:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    554a:	dc 01       	movw	r26, r24
    554c:	cb 01       	movw	r24, r22
    554e:	bc 01       	movw	r22, r24
    5550:	cd 01       	movw	r24, r26
    5552:	20 e0       	ldi	r18, 0x00	; 0
    5554:	30 e0       	ldi	r19, 0x00	; 0
    5556:	40 e4       	ldi	r20, 0x40	; 64
    5558:	52 e4       	ldi	r21, 0x42	; 66
    555a:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    555e:	dc 01       	movw	r26, r24
    5560:	cb 01       	movw	r24, r22
    5562:	8f 8b       	std	Y+23, r24	; 0x17
    5564:	98 8f       	std	Y+24, r25	; 0x18
    5566:	a9 8f       	std	Y+25, r26	; 0x19
    5568:	ba 8f       	std	Y+26, r27	; 0x1a
    556a:	10 cc       	rjmp	.-2016   	; 0x4d8c <SM_VoidCalc+0x14c>
	case '7': LCD_VoidSendData(ch); if(state==0|| op==5 || op==8 || op==9|| op==10) {operand1 = ((operand1 * 10) + ch)-48;} else if(state==1){operand2 = ((operand2 * 10) + ch)-48; } break;
    556c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    556e:	0e 94 6a 13 	call	0x26d4	; 0x26d4 <LCD_VoidSendData>
    5572:	8a 89       	ldd	r24, Y+18	; 0x12
    5574:	88 23       	and	r24, r24
    5576:	61 f0       	breq	.+24     	; 0x5590 <SM_VoidCalc+0x950>
    5578:	8f 85       	ldd	r24, Y+15	; 0x0f
    557a:	85 30       	cpi	r24, 0x05	; 5
    557c:	49 f0       	breq	.+18     	; 0x5590 <SM_VoidCalc+0x950>
    557e:	8f 85       	ldd	r24, Y+15	; 0x0f
    5580:	88 30       	cpi	r24, 0x08	; 8
    5582:	31 f0       	breq	.+12     	; 0x5590 <SM_VoidCalc+0x950>
    5584:	8f 85       	ldd	r24, Y+15	; 0x0f
    5586:	89 30       	cpi	r24, 0x09	; 9
    5588:	19 f0       	breq	.+6      	; 0x5590 <SM_VoidCalc+0x950>
    558a:	8f 85       	ldd	r24, Y+15	; 0x0f
    558c:	8a 30       	cpi	r24, 0x0A	; 10
    558e:	81 f5       	brne	.+96     	; 0x55f0 <SM_VoidCalc+0x9b0>
    5590:	6b 8d       	ldd	r22, Y+27	; 0x1b
    5592:	7c 8d       	ldd	r23, Y+28	; 0x1c
    5594:	8d 8d       	ldd	r24, Y+29	; 0x1d
    5596:	9e 8d       	ldd	r25, Y+30	; 0x1e
    5598:	20 e0       	ldi	r18, 0x00	; 0
    559a:	30 e0       	ldi	r19, 0x00	; 0
    559c:	40 e2       	ldi	r20, 0x20	; 32
    559e:	51 e4       	ldi	r21, 0x41	; 65
    55a0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    55a4:	dc 01       	movw	r26, r24
    55a6:	cb 01       	movw	r24, r22
    55a8:	7c 01       	movw	r14, r24
    55aa:	8d 01       	movw	r16, r26
    55ac:	8f 8d       	ldd	r24, Y+31	; 0x1f
    55ae:	88 2f       	mov	r24, r24
    55b0:	90 e0       	ldi	r25, 0x00	; 0
    55b2:	aa 27       	eor	r26, r26
    55b4:	97 fd       	sbrc	r25, 7
    55b6:	a0 95       	com	r26
    55b8:	ba 2f       	mov	r27, r26
    55ba:	bc 01       	movw	r22, r24
    55bc:	cd 01       	movw	r24, r26
    55be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    55c2:	9b 01       	movw	r18, r22
    55c4:	ac 01       	movw	r20, r24
    55c6:	c8 01       	movw	r24, r16
    55c8:	b7 01       	movw	r22, r14
    55ca:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    55ce:	dc 01       	movw	r26, r24
    55d0:	cb 01       	movw	r24, r22
    55d2:	bc 01       	movw	r22, r24
    55d4:	cd 01       	movw	r24, r26
    55d6:	20 e0       	ldi	r18, 0x00	; 0
    55d8:	30 e0       	ldi	r19, 0x00	; 0
    55da:	40 e4       	ldi	r20, 0x40	; 64
    55dc:	52 e4       	ldi	r21, 0x42	; 66
    55de:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    55e2:	dc 01       	movw	r26, r24
    55e4:	cb 01       	movw	r24, r22
    55e6:	8b 8f       	std	Y+27, r24	; 0x1b
    55e8:	9c 8f       	std	Y+28, r25	; 0x1c
    55ea:	ad 8f       	std	Y+29, r26	; 0x1d
    55ec:	be 8f       	std	Y+30, r27	; 0x1e
    55ee:	ce cb       	rjmp	.-2148   	; 0x4d8c <SM_VoidCalc+0x14c>
    55f0:	8a 89       	ldd	r24, Y+18	; 0x12
    55f2:	81 30       	cpi	r24, 0x01	; 1
    55f4:	09 f0       	breq	.+2      	; 0x55f8 <SM_VoidCalc+0x9b8>
    55f6:	ca cb       	rjmp	.-2156   	; 0x4d8c <SM_VoidCalc+0x14c>
    55f8:	6f 89       	ldd	r22, Y+23	; 0x17
    55fa:	78 8d       	ldd	r23, Y+24	; 0x18
    55fc:	89 8d       	ldd	r24, Y+25	; 0x19
    55fe:	9a 8d       	ldd	r25, Y+26	; 0x1a
    5600:	20 e0       	ldi	r18, 0x00	; 0
    5602:	30 e0       	ldi	r19, 0x00	; 0
    5604:	40 e2       	ldi	r20, 0x20	; 32
    5606:	51 e4       	ldi	r21, 0x41	; 65
    5608:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    560c:	dc 01       	movw	r26, r24
    560e:	cb 01       	movw	r24, r22
    5610:	7c 01       	movw	r14, r24
    5612:	8d 01       	movw	r16, r26
    5614:	8f 8d       	ldd	r24, Y+31	; 0x1f
    5616:	88 2f       	mov	r24, r24
    5618:	90 e0       	ldi	r25, 0x00	; 0
    561a:	aa 27       	eor	r26, r26
    561c:	97 fd       	sbrc	r25, 7
    561e:	a0 95       	com	r26
    5620:	ba 2f       	mov	r27, r26
    5622:	bc 01       	movw	r22, r24
    5624:	cd 01       	movw	r24, r26
    5626:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    562a:	9b 01       	movw	r18, r22
    562c:	ac 01       	movw	r20, r24
    562e:	c8 01       	movw	r24, r16
    5630:	b7 01       	movw	r22, r14
    5632:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    5636:	dc 01       	movw	r26, r24
    5638:	cb 01       	movw	r24, r22
    563a:	bc 01       	movw	r22, r24
    563c:	cd 01       	movw	r24, r26
    563e:	20 e0       	ldi	r18, 0x00	; 0
    5640:	30 e0       	ldi	r19, 0x00	; 0
    5642:	40 e4       	ldi	r20, 0x40	; 64
    5644:	52 e4       	ldi	r21, 0x42	; 66
    5646:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    564a:	dc 01       	movw	r26, r24
    564c:	cb 01       	movw	r24, r22
    564e:	8f 8b       	std	Y+23, r24	; 0x17
    5650:	98 8f       	std	Y+24, r25	; 0x18
    5652:	a9 8f       	std	Y+25, r26	; 0x19
    5654:	ba 8f       	std	Y+26, r27	; 0x1a
    5656:	9a cb       	rjmp	.-2252   	; 0x4d8c <SM_VoidCalc+0x14c>
	case '8': LCD_VoidSendData(ch); if(state==0|| op==5 || op==8 || op==9|| op==10) {operand1 = ((operand1 * 10) + ch)-48;} else if(state==1){operand2 = ((operand2 * 10) + ch)-48; } break;
    5658:	8f 8d       	ldd	r24, Y+31	; 0x1f
    565a:	0e 94 6a 13 	call	0x26d4	; 0x26d4 <LCD_VoidSendData>
    565e:	8a 89       	ldd	r24, Y+18	; 0x12
    5660:	88 23       	and	r24, r24
    5662:	61 f0       	breq	.+24     	; 0x567c <SM_VoidCalc+0xa3c>
    5664:	8f 85       	ldd	r24, Y+15	; 0x0f
    5666:	85 30       	cpi	r24, 0x05	; 5
    5668:	49 f0       	breq	.+18     	; 0x567c <SM_VoidCalc+0xa3c>
    566a:	8f 85       	ldd	r24, Y+15	; 0x0f
    566c:	88 30       	cpi	r24, 0x08	; 8
    566e:	31 f0       	breq	.+12     	; 0x567c <SM_VoidCalc+0xa3c>
    5670:	8f 85       	ldd	r24, Y+15	; 0x0f
    5672:	89 30       	cpi	r24, 0x09	; 9
    5674:	19 f0       	breq	.+6      	; 0x567c <SM_VoidCalc+0xa3c>
    5676:	8f 85       	ldd	r24, Y+15	; 0x0f
    5678:	8a 30       	cpi	r24, 0x0A	; 10
    567a:	81 f5       	brne	.+96     	; 0x56dc <SM_VoidCalc+0xa9c>
    567c:	6b 8d       	ldd	r22, Y+27	; 0x1b
    567e:	7c 8d       	ldd	r23, Y+28	; 0x1c
    5680:	8d 8d       	ldd	r24, Y+29	; 0x1d
    5682:	9e 8d       	ldd	r25, Y+30	; 0x1e
    5684:	20 e0       	ldi	r18, 0x00	; 0
    5686:	30 e0       	ldi	r19, 0x00	; 0
    5688:	40 e2       	ldi	r20, 0x20	; 32
    568a:	51 e4       	ldi	r21, 0x41	; 65
    568c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5690:	dc 01       	movw	r26, r24
    5692:	cb 01       	movw	r24, r22
    5694:	7c 01       	movw	r14, r24
    5696:	8d 01       	movw	r16, r26
    5698:	8f 8d       	ldd	r24, Y+31	; 0x1f
    569a:	88 2f       	mov	r24, r24
    569c:	90 e0       	ldi	r25, 0x00	; 0
    569e:	aa 27       	eor	r26, r26
    56a0:	97 fd       	sbrc	r25, 7
    56a2:	a0 95       	com	r26
    56a4:	ba 2f       	mov	r27, r26
    56a6:	bc 01       	movw	r22, r24
    56a8:	cd 01       	movw	r24, r26
    56aa:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    56ae:	9b 01       	movw	r18, r22
    56b0:	ac 01       	movw	r20, r24
    56b2:	c8 01       	movw	r24, r16
    56b4:	b7 01       	movw	r22, r14
    56b6:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    56ba:	dc 01       	movw	r26, r24
    56bc:	cb 01       	movw	r24, r22
    56be:	bc 01       	movw	r22, r24
    56c0:	cd 01       	movw	r24, r26
    56c2:	20 e0       	ldi	r18, 0x00	; 0
    56c4:	30 e0       	ldi	r19, 0x00	; 0
    56c6:	40 e4       	ldi	r20, 0x40	; 64
    56c8:	52 e4       	ldi	r21, 0x42	; 66
    56ca:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    56ce:	dc 01       	movw	r26, r24
    56d0:	cb 01       	movw	r24, r22
    56d2:	8b 8f       	std	Y+27, r24	; 0x1b
    56d4:	9c 8f       	std	Y+28, r25	; 0x1c
    56d6:	ad 8f       	std	Y+29, r26	; 0x1d
    56d8:	be 8f       	std	Y+30, r27	; 0x1e
    56da:	58 cb       	rjmp	.-2384   	; 0x4d8c <SM_VoidCalc+0x14c>
    56dc:	8a 89       	ldd	r24, Y+18	; 0x12
    56de:	81 30       	cpi	r24, 0x01	; 1
    56e0:	09 f0       	breq	.+2      	; 0x56e4 <SM_VoidCalc+0xaa4>
    56e2:	54 cb       	rjmp	.-2392   	; 0x4d8c <SM_VoidCalc+0x14c>
    56e4:	6f 89       	ldd	r22, Y+23	; 0x17
    56e6:	78 8d       	ldd	r23, Y+24	; 0x18
    56e8:	89 8d       	ldd	r24, Y+25	; 0x19
    56ea:	9a 8d       	ldd	r25, Y+26	; 0x1a
    56ec:	20 e0       	ldi	r18, 0x00	; 0
    56ee:	30 e0       	ldi	r19, 0x00	; 0
    56f0:	40 e2       	ldi	r20, 0x20	; 32
    56f2:	51 e4       	ldi	r21, 0x41	; 65
    56f4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    56f8:	dc 01       	movw	r26, r24
    56fa:	cb 01       	movw	r24, r22
    56fc:	7c 01       	movw	r14, r24
    56fe:	8d 01       	movw	r16, r26
    5700:	8f 8d       	ldd	r24, Y+31	; 0x1f
    5702:	88 2f       	mov	r24, r24
    5704:	90 e0       	ldi	r25, 0x00	; 0
    5706:	aa 27       	eor	r26, r26
    5708:	97 fd       	sbrc	r25, 7
    570a:	a0 95       	com	r26
    570c:	ba 2f       	mov	r27, r26
    570e:	bc 01       	movw	r22, r24
    5710:	cd 01       	movw	r24, r26
    5712:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    5716:	9b 01       	movw	r18, r22
    5718:	ac 01       	movw	r20, r24
    571a:	c8 01       	movw	r24, r16
    571c:	b7 01       	movw	r22, r14
    571e:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    5722:	dc 01       	movw	r26, r24
    5724:	cb 01       	movw	r24, r22
    5726:	bc 01       	movw	r22, r24
    5728:	cd 01       	movw	r24, r26
    572a:	20 e0       	ldi	r18, 0x00	; 0
    572c:	30 e0       	ldi	r19, 0x00	; 0
    572e:	40 e4       	ldi	r20, 0x40	; 64
    5730:	52 e4       	ldi	r21, 0x42	; 66
    5732:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    5736:	dc 01       	movw	r26, r24
    5738:	cb 01       	movw	r24, r22
    573a:	8f 8b       	std	Y+23, r24	; 0x17
    573c:	98 8f       	std	Y+24, r25	; 0x18
    573e:	a9 8f       	std	Y+25, r26	; 0x19
    5740:	ba 8f       	std	Y+26, r27	; 0x1a
    5742:	24 cb       	rjmp	.-2488   	; 0x4d8c <SM_VoidCalc+0x14c>
	case '9': LCD_VoidSendData(ch); if(state==0|| op==5 || op==8 || op==9|| op==10) {operand1 = ((operand1 * 10) + ch)-48;} else if(state==1){operand2 = ((operand2 * 10) + ch)-48; } break;
    5744:	8f 8d       	ldd	r24, Y+31	; 0x1f
    5746:	0e 94 6a 13 	call	0x26d4	; 0x26d4 <LCD_VoidSendData>
    574a:	8a 89       	ldd	r24, Y+18	; 0x12
    574c:	88 23       	and	r24, r24
    574e:	61 f0       	breq	.+24     	; 0x5768 <SM_VoidCalc+0xb28>
    5750:	8f 85       	ldd	r24, Y+15	; 0x0f
    5752:	85 30       	cpi	r24, 0x05	; 5
    5754:	49 f0       	breq	.+18     	; 0x5768 <SM_VoidCalc+0xb28>
    5756:	8f 85       	ldd	r24, Y+15	; 0x0f
    5758:	88 30       	cpi	r24, 0x08	; 8
    575a:	31 f0       	breq	.+12     	; 0x5768 <SM_VoidCalc+0xb28>
    575c:	8f 85       	ldd	r24, Y+15	; 0x0f
    575e:	89 30       	cpi	r24, 0x09	; 9
    5760:	19 f0       	breq	.+6      	; 0x5768 <SM_VoidCalc+0xb28>
    5762:	8f 85       	ldd	r24, Y+15	; 0x0f
    5764:	8a 30       	cpi	r24, 0x0A	; 10
    5766:	81 f5       	brne	.+96     	; 0x57c8 <SM_VoidCalc+0xb88>
    5768:	6b 8d       	ldd	r22, Y+27	; 0x1b
    576a:	7c 8d       	ldd	r23, Y+28	; 0x1c
    576c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    576e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    5770:	20 e0       	ldi	r18, 0x00	; 0
    5772:	30 e0       	ldi	r19, 0x00	; 0
    5774:	40 e2       	ldi	r20, 0x20	; 32
    5776:	51 e4       	ldi	r21, 0x41	; 65
    5778:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    577c:	dc 01       	movw	r26, r24
    577e:	cb 01       	movw	r24, r22
    5780:	7c 01       	movw	r14, r24
    5782:	8d 01       	movw	r16, r26
    5784:	8f 8d       	ldd	r24, Y+31	; 0x1f
    5786:	88 2f       	mov	r24, r24
    5788:	90 e0       	ldi	r25, 0x00	; 0
    578a:	aa 27       	eor	r26, r26
    578c:	97 fd       	sbrc	r25, 7
    578e:	a0 95       	com	r26
    5790:	ba 2f       	mov	r27, r26
    5792:	bc 01       	movw	r22, r24
    5794:	cd 01       	movw	r24, r26
    5796:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    579a:	9b 01       	movw	r18, r22
    579c:	ac 01       	movw	r20, r24
    579e:	c8 01       	movw	r24, r16
    57a0:	b7 01       	movw	r22, r14
    57a2:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    57a6:	dc 01       	movw	r26, r24
    57a8:	cb 01       	movw	r24, r22
    57aa:	bc 01       	movw	r22, r24
    57ac:	cd 01       	movw	r24, r26
    57ae:	20 e0       	ldi	r18, 0x00	; 0
    57b0:	30 e0       	ldi	r19, 0x00	; 0
    57b2:	40 e4       	ldi	r20, 0x40	; 64
    57b4:	52 e4       	ldi	r21, 0x42	; 66
    57b6:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    57ba:	dc 01       	movw	r26, r24
    57bc:	cb 01       	movw	r24, r22
    57be:	8b 8f       	std	Y+27, r24	; 0x1b
    57c0:	9c 8f       	std	Y+28, r25	; 0x1c
    57c2:	ad 8f       	std	Y+29, r26	; 0x1d
    57c4:	be 8f       	std	Y+30, r27	; 0x1e
    57c6:	e2 ca       	rjmp	.-2620   	; 0x4d8c <SM_VoidCalc+0x14c>
    57c8:	8a 89       	ldd	r24, Y+18	; 0x12
    57ca:	81 30       	cpi	r24, 0x01	; 1
    57cc:	09 f0       	breq	.+2      	; 0x57d0 <SM_VoidCalc+0xb90>
    57ce:	de ca       	rjmp	.-2628   	; 0x4d8c <SM_VoidCalc+0x14c>
    57d0:	6f 89       	ldd	r22, Y+23	; 0x17
    57d2:	78 8d       	ldd	r23, Y+24	; 0x18
    57d4:	89 8d       	ldd	r24, Y+25	; 0x19
    57d6:	9a 8d       	ldd	r25, Y+26	; 0x1a
    57d8:	20 e0       	ldi	r18, 0x00	; 0
    57da:	30 e0       	ldi	r19, 0x00	; 0
    57dc:	40 e2       	ldi	r20, 0x20	; 32
    57de:	51 e4       	ldi	r21, 0x41	; 65
    57e0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    57e4:	dc 01       	movw	r26, r24
    57e6:	cb 01       	movw	r24, r22
    57e8:	7c 01       	movw	r14, r24
    57ea:	8d 01       	movw	r16, r26
    57ec:	8f 8d       	ldd	r24, Y+31	; 0x1f
    57ee:	88 2f       	mov	r24, r24
    57f0:	90 e0       	ldi	r25, 0x00	; 0
    57f2:	aa 27       	eor	r26, r26
    57f4:	97 fd       	sbrc	r25, 7
    57f6:	a0 95       	com	r26
    57f8:	ba 2f       	mov	r27, r26
    57fa:	bc 01       	movw	r22, r24
    57fc:	cd 01       	movw	r24, r26
    57fe:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    5802:	9b 01       	movw	r18, r22
    5804:	ac 01       	movw	r20, r24
    5806:	c8 01       	movw	r24, r16
    5808:	b7 01       	movw	r22, r14
    580a:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    580e:	dc 01       	movw	r26, r24
    5810:	cb 01       	movw	r24, r22
    5812:	bc 01       	movw	r22, r24
    5814:	cd 01       	movw	r24, r26
    5816:	20 e0       	ldi	r18, 0x00	; 0
    5818:	30 e0       	ldi	r19, 0x00	; 0
    581a:	40 e4       	ldi	r20, 0x40	; 64
    581c:	52 e4       	ldi	r21, 0x42	; 66
    581e:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    5822:	dc 01       	movw	r26, r24
    5824:	cb 01       	movw	r24, r22
    5826:	8f 8b       	std	Y+23, r24	; 0x17
    5828:	98 8f       	std	Y+24, r25	; 0x18
    582a:	a9 8f       	std	Y+25, r26	; 0x19
    582c:	ba 8f       	std	Y+26, r27	; 0x1a
    582e:	ae ca       	rjmp	.-2724   	; 0x4d8c <SM_VoidCalc+0x14c>
	case 'c': LCD_VoidSendCommand(1); operand1=0; operand2=0;result=0;state=0;negative1=0;negative2=0;break;
    5830:	81 e0       	ldi	r24, 0x01	; 1
    5832:	0e 94 b0 11 	call	0x2360	; 0x2360 <LCD_VoidSendCommand>
    5836:	80 e0       	ldi	r24, 0x00	; 0
    5838:	90 e0       	ldi	r25, 0x00	; 0
    583a:	a0 e0       	ldi	r26, 0x00	; 0
    583c:	b0 e0       	ldi	r27, 0x00	; 0
    583e:	8b 8f       	std	Y+27, r24	; 0x1b
    5840:	9c 8f       	std	Y+28, r25	; 0x1c
    5842:	ad 8f       	std	Y+29, r26	; 0x1d
    5844:	be 8f       	std	Y+30, r27	; 0x1e
    5846:	80 e0       	ldi	r24, 0x00	; 0
    5848:	90 e0       	ldi	r25, 0x00	; 0
    584a:	a0 e0       	ldi	r26, 0x00	; 0
    584c:	b0 e0       	ldi	r27, 0x00	; 0
    584e:	8f 8b       	std	Y+23, r24	; 0x17
    5850:	98 8f       	std	Y+24, r25	; 0x18
    5852:	a9 8f       	std	Y+25, r26	; 0x19
    5854:	ba 8f       	std	Y+26, r27	; 0x1a
    5856:	80 e0       	ldi	r24, 0x00	; 0
    5858:	90 e0       	ldi	r25, 0x00	; 0
    585a:	a0 e0       	ldi	r26, 0x00	; 0
    585c:	b0 e0       	ldi	r27, 0x00	; 0
    585e:	8b 8b       	std	Y+19, r24	; 0x13
    5860:	9c 8b       	std	Y+20, r25	; 0x14
    5862:	ad 8b       	std	Y+21, r26	; 0x15
    5864:	be 8b       	std	Y+22, r27	; 0x16
    5866:	1a 8a       	std	Y+18, r1	; 0x12
    5868:	19 8a       	std	Y+17, r1	; 0x11
    586a:	18 8a       	std	Y+16, r1	; 0x10
    586c:	8f ca       	rjmp	.-2786   	; 0x4d8c <SM_VoidCalc+0x14c>
    case '*':op=1; LCD_VoidSendData(ch); state=1;break;
    586e:	81 e0       	ldi	r24, 0x01	; 1
    5870:	8f 87       	std	Y+15, r24	; 0x0f
    5872:	8f 8d       	ldd	r24, Y+31	; 0x1f
    5874:	0e 94 6a 13 	call	0x26d4	; 0x26d4 <LCD_VoidSendData>
    5878:	81 e0       	ldi	r24, 0x01	; 1
    587a:	8a 8b       	std	Y+18, r24	; 0x12
    587c:	87 ca       	rjmp	.-2802   	; 0x4d8c <SM_VoidCalc+0x14c>
    case '/':op=2; LCD_VoidSendData(ch); state=1;break;
    587e:	82 e0       	ldi	r24, 0x02	; 2
    5880:	8f 87       	std	Y+15, r24	; 0x0f
    5882:	8f 8d       	ldd	r24, Y+31	; 0x1f
    5884:	0e 94 6a 13 	call	0x26d4	; 0x26d4 <LCD_VoidSendData>
    5888:	81 e0       	ldi	r24, 0x01	; 1
    588a:	8a 8b       	std	Y+18, r24	; 0x12
    588c:	7f ca       	rjmp	.-2818   	; 0x4d8c <SM_VoidCalc+0x14c>
    case 'I':LCD_VoidSendData('-'); if (state==0){negative1=1;} else if(state==1){negative2=2;}break;
    588e:	8d e2       	ldi	r24, 0x2D	; 45
    5890:	0e 94 6a 13 	call	0x26d4	; 0x26d4 <LCD_VoidSendData>
    5894:	8a 89       	ldd	r24, Y+18	; 0x12
    5896:	88 23       	and	r24, r24
    5898:	19 f4       	brne	.+6      	; 0x58a0 <SM_VoidCalc+0xc60>
    589a:	81 e0       	ldi	r24, 0x01	; 1
    589c:	89 8b       	std	Y+17, r24	; 0x11
    589e:	76 ca       	rjmp	.-2836   	; 0x4d8c <SM_VoidCalc+0x14c>
    58a0:	8a 89       	ldd	r24, Y+18	; 0x12
    58a2:	81 30       	cpi	r24, 0x01	; 1
    58a4:	09 f0       	breq	.+2      	; 0x58a8 <SM_VoidCalc+0xc68>
    58a6:	72 ca       	rjmp	.-2844   	; 0x4d8c <SM_VoidCalc+0x14c>
    58a8:	82 e0       	ldi	r24, 0x02	; 2
    58aa:	88 8b       	std	Y+16, r24	; 0x10
    58ac:	6f ca       	rjmp	.-2850   	; 0x4d8c <SM_VoidCalc+0x14c>
    case '-':op=4; LCD_VoidSendData(ch); state=1;break;
    58ae:	84 e0       	ldi	r24, 0x04	; 4
    58b0:	8f 87       	std	Y+15, r24	; 0x0f
    58b2:	8f 8d       	ldd	r24, Y+31	; 0x1f
    58b4:	0e 94 6a 13 	call	0x26d4	; 0x26d4 <LCD_VoidSendData>
    58b8:	81 e0       	ldi	r24, 0x01	; 1
    58ba:	8a 8b       	std	Y+18, r24	; 0x12
    58bc:	67 ca       	rjmp	.-2866   	; 0x4d8c <SM_VoidCalc+0x14c>
    case 'M':op=5; LCD_VoidSendData('M');LCD_VoidSendData('C');state=1;break;
    58be:	85 e0       	ldi	r24, 0x05	; 5
    58c0:	8f 87       	std	Y+15, r24	; 0x0f
    58c2:	8d e4       	ldi	r24, 0x4D	; 77
    58c4:	0e 94 6a 13 	call	0x26d4	; 0x26d4 <LCD_VoidSendData>
    58c8:	83 e4       	ldi	r24, 0x43	; 67
    58ca:	0e 94 6a 13 	call	0x26d4	; 0x26d4 <LCD_VoidSendData>
    58ce:	81 e0       	ldi	r24, 0x01	; 1
    58d0:	8a 8b       	std	Y+18, r24	; 0x12
    58d2:	5c ca       	rjmp	.-2888   	; 0x4d8c <SM_VoidCalc+0x14c>
    case '%':op=6; LCD_VoidSendData(ch); state=1;break;
    58d4:	86 e0       	ldi	r24, 0x06	; 6
    58d6:	8f 87       	std	Y+15, r24	; 0x0f
    58d8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    58da:	0e 94 6a 13 	call	0x26d4	; 0x26d4 <LCD_VoidSendData>
    58de:	81 e0       	ldi	r24, 0x01	; 1
    58e0:	8a 8b       	std	Y+18, r24	; 0x12
    58e2:	54 ca       	rjmp	.-2904   	; 0x4d8c <SM_VoidCalc+0x14c>
    case '+':op=7; LCD_VoidSendData(ch); state=1;break;
    58e4:	87 e0       	ldi	r24, 0x07	; 7
    58e6:	8f 87       	std	Y+15, r24	; 0x0f
    58e8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    58ea:	0e 94 6a 13 	call	0x26d4	; 0x26d4 <LCD_VoidSendData>
    58ee:	81 e0       	ldi	r24, 0x01	; 1
    58f0:	8a 8b       	std	Y+18, r24	; 0x12
    58f2:	4c ca       	rjmp	.-2920   	; 0x4d8c <SM_VoidCalc+0x14c>
    case 'N':op=8; LCD_VoidSendData('M');LCD_VoidSendData('-');state=0;break;
    58f4:	88 e0       	ldi	r24, 0x08	; 8
    58f6:	8f 87       	std	Y+15, r24	; 0x0f
    58f8:	8d e4       	ldi	r24, 0x4D	; 77
    58fa:	0e 94 6a 13 	call	0x26d4	; 0x26d4 <LCD_VoidSendData>
    58fe:	8d e2       	ldi	r24, 0x2D	; 45
    5900:	0e 94 6a 13 	call	0x26d4	; 0x26d4 <LCD_VoidSendData>
    5904:	1a 8a       	std	Y+18, r1	; 0x12
    5906:	42 ca       	rjmp	.-2940   	; 0x4d8c <SM_VoidCalc+0x14c>
    case 'S':op=9; LCD_VoidSendData('S');LCD_VoidSendData('Q');LCD_VoidSendData('R');LCD_VoidSendData('T');state=0;break;
    5908:	89 e0       	ldi	r24, 0x09	; 9
    590a:	8f 87       	std	Y+15, r24	; 0x0f
    590c:	83 e5       	ldi	r24, 0x53	; 83
    590e:	0e 94 6a 13 	call	0x26d4	; 0x26d4 <LCD_VoidSendData>
    5912:	81 e5       	ldi	r24, 0x51	; 81
    5914:	0e 94 6a 13 	call	0x26d4	; 0x26d4 <LCD_VoidSendData>
    5918:	82 e5       	ldi	r24, 0x52	; 82
    591a:	0e 94 6a 13 	call	0x26d4	; 0x26d4 <LCD_VoidSendData>
    591e:	84 e5       	ldi	r24, 0x54	; 84
    5920:	0e 94 6a 13 	call	0x26d4	; 0x26d4 <LCD_VoidSendData>
    5924:	1a 8a       	std	Y+18, r1	; 0x12
    5926:	32 ca       	rjmp	.-2972   	; 0x4d8c <SM_VoidCalc+0x14c>
    case '.':LCD_VoidSendData(ch); state=0;break; //.fraction
    5928:	8f 8d       	ldd	r24, Y+31	; 0x1f
    592a:	0e 94 6a 13 	call	0x26d4	; 0x26d4 <LCD_VoidSendData>
    592e:	1a 8a       	std	Y+18, r1	; 0x12
    5930:	2d ca       	rjmp	.-2982   	; 0x4d8c <SM_VoidCalc+0x14c>
    case 'P':op=10;LCD_VoidSendData('M');LCD_VoidSendData('+'); state=0;break;
    5932:	8a e0       	ldi	r24, 0x0A	; 10
    5934:	8f 87       	std	Y+15, r24	; 0x0f
    5936:	8d e4       	ldi	r24, 0x4D	; 77
    5938:	0e 94 6a 13 	call	0x26d4	; 0x26d4 <LCD_VoidSendData>
    593c:	8b e2       	ldi	r24, 0x2B	; 43
    593e:	0e 94 6a 13 	call	0x26d4	; 0x26d4 <LCD_VoidSendData>
    5942:	1a 8a       	std	Y+18, r1	; 0x12
    5944:	23 ca       	rjmp	.-3002   	; 0x4d8c <SM_VoidCalc+0x14c>
    case '=': LCD_VoidSendData(ch); if (negative1==1){operand1=-operand1;} if (negative2==2){operand2=-operand2;}
    5946:	8f 8d       	ldd	r24, Y+31	; 0x1f
    5948:	0e 94 6a 13 	call	0x26d4	; 0x26d4 <LCD_VoidSendData>
    594c:	89 89       	ldd	r24, Y+17	; 0x11
    594e:	81 30       	cpi	r24, 0x01	; 1
    5950:	49 f4       	brne	.+18     	; 0x5964 <SM_VoidCalc+0xd24>
    5952:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5954:	9c 8d       	ldd	r25, Y+28	; 0x1c
    5956:	ad 8d       	ldd	r26, Y+29	; 0x1d
    5958:	be 8d       	ldd	r27, Y+30	; 0x1e
    595a:	b0 58       	subi	r27, 0x80	; 128
    595c:	8b 8f       	std	Y+27, r24	; 0x1b
    595e:	9c 8f       	std	Y+28, r25	; 0x1c
    5960:	ad 8f       	std	Y+29, r26	; 0x1d
    5962:	be 8f       	std	Y+30, r27	; 0x1e
    5964:	88 89       	ldd	r24, Y+16	; 0x10
    5966:	82 30       	cpi	r24, 0x02	; 2
    5968:	49 f4       	brne	.+18     	; 0x597c <SM_VoidCalc+0xd3c>
    596a:	8f 89       	ldd	r24, Y+23	; 0x17
    596c:	98 8d       	ldd	r25, Y+24	; 0x18
    596e:	a9 8d       	ldd	r26, Y+25	; 0x19
    5970:	ba 8d       	ldd	r27, Y+26	; 0x1a
    5972:	b0 58       	subi	r27, 0x80	; 128
    5974:	8f 8b       	std	Y+23, r24	; 0x17
    5976:	98 8f       	std	Y+24, r25	; 0x18
    5978:	a9 8f       	std	Y+25, r26	; 0x19
    597a:	ba 8f       	std	Y+26, r27	; 0x1a
    if(op==1){result = (operand1) * (operand2); LCD_VoidSendNumber(result);}
    597c:	8f 85       	ldd	r24, Y+15	; 0x0f
    597e:	81 30       	cpi	r24, 0x01	; 1
    5980:	e9 f4       	brne	.+58     	; 0x59bc <SM_VoidCalc+0xd7c>
    5982:	6b 8d       	ldd	r22, Y+27	; 0x1b
    5984:	7c 8d       	ldd	r23, Y+28	; 0x1c
    5986:	8d 8d       	ldd	r24, Y+29	; 0x1d
    5988:	9e 8d       	ldd	r25, Y+30	; 0x1e
    598a:	2f 89       	ldd	r18, Y+23	; 0x17
    598c:	38 8d       	ldd	r19, Y+24	; 0x18
    598e:	49 8d       	ldd	r20, Y+25	; 0x19
    5990:	5a 8d       	ldd	r21, Y+26	; 0x1a
    5992:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5996:	dc 01       	movw	r26, r24
    5998:	cb 01       	movw	r24, r22
    599a:	8b 8b       	std	Y+19, r24	; 0x13
    599c:	9c 8b       	std	Y+20, r25	; 0x14
    599e:	ad 8b       	std	Y+21, r26	; 0x15
    59a0:	be 8b       	std	Y+22, r27	; 0x16
    59a2:	6b 89       	ldd	r22, Y+19	; 0x13
    59a4:	7c 89       	ldd	r23, Y+20	; 0x14
    59a6:	8d 89       	ldd	r24, Y+21	; 0x15
    59a8:	9e 89       	ldd	r25, Y+22	; 0x16
    59aa:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
    59ae:	dc 01       	movw	r26, r24
    59b0:	cb 01       	movw	r24, r22
    59b2:	bc 01       	movw	r22, r24
    59b4:	cd 01       	movw	r24, r26
    59b6:	0e 94 4b 15 	call	0x2a96	; 0x2a96 <LCD_VoidSendNumber>
    59ba:	e8 c9       	rjmp	.-3120   	; 0x4d8c <SM_VoidCalc+0x14c>
    else if(op==2){result = (operand1) / (operand2); LCD_VoidSendNumber(result);}
    59bc:	8f 85       	ldd	r24, Y+15	; 0x0f
    59be:	82 30       	cpi	r24, 0x02	; 2
    59c0:	e9 f4       	brne	.+58     	; 0x59fc <SM_VoidCalc+0xdbc>
    59c2:	6b 8d       	ldd	r22, Y+27	; 0x1b
    59c4:	7c 8d       	ldd	r23, Y+28	; 0x1c
    59c6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    59c8:	9e 8d       	ldd	r25, Y+30	; 0x1e
    59ca:	2f 89       	ldd	r18, Y+23	; 0x17
    59cc:	38 8d       	ldd	r19, Y+24	; 0x18
    59ce:	49 8d       	ldd	r20, Y+25	; 0x19
    59d0:	5a 8d       	ldd	r21, Y+26	; 0x1a
    59d2:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    59d6:	dc 01       	movw	r26, r24
    59d8:	cb 01       	movw	r24, r22
    59da:	8b 8b       	std	Y+19, r24	; 0x13
    59dc:	9c 8b       	std	Y+20, r25	; 0x14
    59de:	ad 8b       	std	Y+21, r26	; 0x15
    59e0:	be 8b       	std	Y+22, r27	; 0x16
    59e2:	6b 89       	ldd	r22, Y+19	; 0x13
    59e4:	7c 89       	ldd	r23, Y+20	; 0x14
    59e6:	8d 89       	ldd	r24, Y+21	; 0x15
    59e8:	9e 89       	ldd	r25, Y+22	; 0x16
    59ea:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
    59ee:	dc 01       	movw	r26, r24
    59f0:	cb 01       	movw	r24, r22
    59f2:	bc 01       	movw	r22, r24
    59f4:	cd 01       	movw	r24, r26
    59f6:	0e 94 4b 15 	call	0x2a96	; 0x2a96 <LCD_VoidSendNumber>
    59fa:	c8 c9       	rjmp	.-3184   	; 0x4d8c <SM_VoidCalc+0x14c>
    else if(op==4 ){result = (operand1) - (operand2); LCD_VoidSendNumber(result);}
    59fc:	8f 85       	ldd	r24, Y+15	; 0x0f
    59fe:	84 30       	cpi	r24, 0x04	; 4
    5a00:	e9 f4       	brne	.+58     	; 0x5a3c <SM_VoidCalc+0xdfc>
    5a02:	6b 8d       	ldd	r22, Y+27	; 0x1b
    5a04:	7c 8d       	ldd	r23, Y+28	; 0x1c
    5a06:	8d 8d       	ldd	r24, Y+29	; 0x1d
    5a08:	9e 8d       	ldd	r25, Y+30	; 0x1e
    5a0a:	2f 89       	ldd	r18, Y+23	; 0x17
    5a0c:	38 8d       	ldd	r19, Y+24	; 0x18
    5a0e:	49 8d       	ldd	r20, Y+25	; 0x19
    5a10:	5a 8d       	ldd	r21, Y+26	; 0x1a
    5a12:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    5a16:	dc 01       	movw	r26, r24
    5a18:	cb 01       	movw	r24, r22
    5a1a:	8b 8b       	std	Y+19, r24	; 0x13
    5a1c:	9c 8b       	std	Y+20, r25	; 0x14
    5a1e:	ad 8b       	std	Y+21, r26	; 0x15
    5a20:	be 8b       	std	Y+22, r27	; 0x16
    5a22:	6b 89       	ldd	r22, Y+19	; 0x13
    5a24:	7c 89       	ldd	r23, Y+20	; 0x14
    5a26:	8d 89       	ldd	r24, Y+21	; 0x15
    5a28:	9e 89       	ldd	r25, Y+22	; 0x16
    5a2a:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
    5a2e:	dc 01       	movw	r26, r24
    5a30:	cb 01       	movw	r24, r22
    5a32:	bc 01       	movw	r22, r24
    5a34:	cd 01       	movw	r24, r26
    5a36:	0e 94 4b 15 	call	0x2a96	; 0x2a96 <LCD_VoidSendNumber>
    5a3a:	a8 c9       	rjmp	.-3248   	; 0x4d8c <SM_VoidCalc+0x14c>
    else if(op==5){LCD_VoidSendNumber(result);}
    5a3c:	8f 85       	ldd	r24, Y+15	; 0x0f
    5a3e:	85 30       	cpi	r24, 0x05	; 5
    5a40:	69 f4       	brne	.+26     	; 0x5a5c <SM_VoidCalc+0xe1c>
    5a42:	6b 89       	ldd	r22, Y+19	; 0x13
    5a44:	7c 89       	ldd	r23, Y+20	; 0x14
    5a46:	8d 89       	ldd	r24, Y+21	; 0x15
    5a48:	9e 89       	ldd	r25, Y+22	; 0x16
    5a4a:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
    5a4e:	dc 01       	movw	r26, r24
    5a50:	cb 01       	movw	r24, r22
    5a52:	bc 01       	movw	r22, r24
    5a54:	cd 01       	movw	r24, r26
    5a56:	0e 94 4b 15 	call	0x2a96	; 0x2a96 <LCD_VoidSendNumber>
    5a5a:	98 c9       	rjmp	.-3280   	; 0x4d8c <SM_VoidCalc+0x14c>
    else if(op==6){result = (operand1) - ((operand2) * (f32)((int)((operand1) / (operand2)))); LCD_VoidSendNumber(result);}
    5a5c:	8f 85       	ldd	r24, Y+15	; 0x0f
    5a5e:	86 30       	cpi	r24, 0x06	; 6
    5a60:	09 f0       	breq	.+2      	; 0x5a64 <SM_VoidCalc+0xe24>
    5a62:	41 c0       	rjmp	.+130    	; 0x5ae6 <SM_VoidCalc+0xea6>
    5a64:	6b 8d       	ldd	r22, Y+27	; 0x1b
    5a66:	7c 8d       	ldd	r23, Y+28	; 0x1c
    5a68:	8d 8d       	ldd	r24, Y+29	; 0x1d
    5a6a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    5a6c:	2f 89       	ldd	r18, Y+23	; 0x17
    5a6e:	38 8d       	ldd	r19, Y+24	; 0x18
    5a70:	49 8d       	ldd	r20, Y+25	; 0x19
    5a72:	5a 8d       	ldd	r21, Y+26	; 0x1a
    5a74:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    5a78:	dc 01       	movw	r26, r24
    5a7a:	cb 01       	movw	r24, r22
    5a7c:	bc 01       	movw	r22, r24
    5a7e:	cd 01       	movw	r24, r26
    5a80:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
    5a84:	dc 01       	movw	r26, r24
    5a86:	cb 01       	movw	r24, r22
    5a88:	aa 27       	eor	r26, r26
    5a8a:	97 fd       	sbrc	r25, 7
    5a8c:	a0 95       	com	r26
    5a8e:	ba 2f       	mov	r27, r26
    5a90:	bc 01       	movw	r22, r24
    5a92:	cd 01       	movw	r24, r26
    5a94:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    5a98:	dc 01       	movw	r26, r24
    5a9a:	cb 01       	movw	r24, r22
    5a9c:	bc 01       	movw	r22, r24
    5a9e:	cd 01       	movw	r24, r26
    5aa0:	2f 89       	ldd	r18, Y+23	; 0x17
    5aa2:	38 8d       	ldd	r19, Y+24	; 0x18
    5aa4:	49 8d       	ldd	r20, Y+25	; 0x19
    5aa6:	5a 8d       	ldd	r21, Y+26	; 0x1a
    5aa8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5aac:	dc 01       	movw	r26, r24
    5aae:	cb 01       	movw	r24, r22
    5ab0:	9c 01       	movw	r18, r24
    5ab2:	ad 01       	movw	r20, r26
    5ab4:	6b 8d       	ldd	r22, Y+27	; 0x1b
    5ab6:	7c 8d       	ldd	r23, Y+28	; 0x1c
    5ab8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    5aba:	9e 8d       	ldd	r25, Y+30	; 0x1e
    5abc:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    5ac0:	dc 01       	movw	r26, r24
    5ac2:	cb 01       	movw	r24, r22
    5ac4:	8b 8b       	std	Y+19, r24	; 0x13
    5ac6:	9c 8b       	std	Y+20, r25	; 0x14
    5ac8:	ad 8b       	std	Y+21, r26	; 0x15
    5aca:	be 8b       	std	Y+22, r27	; 0x16
    5acc:	6b 89       	ldd	r22, Y+19	; 0x13
    5ace:	7c 89       	ldd	r23, Y+20	; 0x14
    5ad0:	8d 89       	ldd	r24, Y+21	; 0x15
    5ad2:	9e 89       	ldd	r25, Y+22	; 0x16
    5ad4:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
    5ad8:	dc 01       	movw	r26, r24
    5ada:	cb 01       	movw	r24, r22
    5adc:	bc 01       	movw	r22, r24
    5ade:	cd 01       	movw	r24, r26
    5ae0:	0e 94 4b 15 	call	0x2a96	; 0x2a96 <LCD_VoidSendNumber>
    5ae4:	53 c9       	rjmp	.-3418   	; 0x4d8c <SM_VoidCalc+0x14c>
    else if(op==7){result = (operand1) + (operand2); LCD_VoidSendNumber(result);}
    5ae6:	8f 85       	ldd	r24, Y+15	; 0x0f
    5ae8:	87 30       	cpi	r24, 0x07	; 7
    5aea:	e9 f4       	brne	.+58     	; 0x5b26 <SM_VoidCalc+0xee6>
    5aec:	6b 8d       	ldd	r22, Y+27	; 0x1b
    5aee:	7c 8d       	ldd	r23, Y+28	; 0x1c
    5af0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    5af2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    5af4:	2f 89       	ldd	r18, Y+23	; 0x17
    5af6:	38 8d       	ldd	r19, Y+24	; 0x18
    5af8:	49 8d       	ldd	r20, Y+25	; 0x19
    5afa:	5a 8d       	ldd	r21, Y+26	; 0x1a
    5afc:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    5b00:	dc 01       	movw	r26, r24
    5b02:	cb 01       	movw	r24, r22
    5b04:	8b 8b       	std	Y+19, r24	; 0x13
    5b06:	9c 8b       	std	Y+20, r25	; 0x14
    5b08:	ad 8b       	std	Y+21, r26	; 0x15
    5b0a:	be 8b       	std	Y+22, r27	; 0x16
    5b0c:	6b 89       	ldd	r22, Y+19	; 0x13
    5b0e:	7c 89       	ldd	r23, Y+20	; 0x14
    5b10:	8d 89       	ldd	r24, Y+21	; 0x15
    5b12:	9e 89       	ldd	r25, Y+22	; 0x16
    5b14:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
    5b18:	dc 01       	movw	r26, r24
    5b1a:	cb 01       	movw	r24, r22
    5b1c:	bc 01       	movw	r22, r24
    5b1e:	cd 01       	movw	r24, r26
    5b20:	0e 94 4b 15 	call	0x2a96	; 0x2a96 <LCD_VoidSendNumber>
    5b24:	33 c9       	rjmp	.-3482   	; 0x4d8c <SM_VoidCalc+0x14c>
    else if(op==8){result = result-((operand1)); LCD_VoidSendNumber(result);}
    5b26:	8f 85       	ldd	r24, Y+15	; 0x0f
    5b28:	88 30       	cpi	r24, 0x08	; 8
    5b2a:	e9 f4       	brne	.+58     	; 0x5b66 <SM_VoidCalc+0xf26>
    5b2c:	6b 89       	ldd	r22, Y+19	; 0x13
    5b2e:	7c 89       	ldd	r23, Y+20	; 0x14
    5b30:	8d 89       	ldd	r24, Y+21	; 0x15
    5b32:	9e 89       	ldd	r25, Y+22	; 0x16
    5b34:	2b 8d       	ldd	r18, Y+27	; 0x1b
    5b36:	3c 8d       	ldd	r19, Y+28	; 0x1c
    5b38:	4d 8d       	ldd	r20, Y+29	; 0x1d
    5b3a:	5e 8d       	ldd	r21, Y+30	; 0x1e
    5b3c:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    5b40:	dc 01       	movw	r26, r24
    5b42:	cb 01       	movw	r24, r22
    5b44:	8b 8b       	std	Y+19, r24	; 0x13
    5b46:	9c 8b       	std	Y+20, r25	; 0x14
    5b48:	ad 8b       	std	Y+21, r26	; 0x15
    5b4a:	be 8b       	std	Y+22, r27	; 0x16
    5b4c:	6b 89       	ldd	r22, Y+19	; 0x13
    5b4e:	7c 89       	ldd	r23, Y+20	; 0x14
    5b50:	8d 89       	ldd	r24, Y+21	; 0x15
    5b52:	9e 89       	ldd	r25, Y+22	; 0x16
    5b54:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
    5b58:	dc 01       	movw	r26, r24
    5b5a:	cb 01       	movw	r24, r22
    5b5c:	bc 01       	movw	r22, r24
    5b5e:	cd 01       	movw	r24, r26
    5b60:	0e 94 4b 15 	call	0x2a96	; 0x2a96 <LCD_VoidSendNumber>
    5b64:	13 c9       	rjmp	.-3546   	; 0x4d8c <SM_VoidCalc+0x14c>
    else if(op==9){result = sqrt((operand1)) ;LCD_VoidSendNumber(result);}//fraction
    5b66:	8f 85       	ldd	r24, Y+15	; 0x0f
    5b68:	89 30       	cpi	r24, 0x09	; 9
    5b6a:	d9 f4       	brne	.+54     	; 0x5ba2 <SM_VoidCalc+0xf62>
    5b6c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5b6e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    5b70:	ad 8d       	ldd	r26, Y+29	; 0x1d
    5b72:	be 8d       	ldd	r27, Y+30	; 0x1e
    5b74:	bc 01       	movw	r22, r24
    5b76:	cd 01       	movw	r24, r26
    5b78:	0e 94 27 30 	call	0x604e	; 0x604e <sqrt>
    5b7c:	dc 01       	movw	r26, r24
    5b7e:	cb 01       	movw	r24, r22
    5b80:	8b 8b       	std	Y+19, r24	; 0x13
    5b82:	9c 8b       	std	Y+20, r25	; 0x14
    5b84:	ad 8b       	std	Y+21, r26	; 0x15
    5b86:	be 8b       	std	Y+22, r27	; 0x16
    5b88:	6b 89       	ldd	r22, Y+19	; 0x13
    5b8a:	7c 89       	ldd	r23, Y+20	; 0x14
    5b8c:	8d 89       	ldd	r24, Y+21	; 0x15
    5b8e:	9e 89       	ldd	r25, Y+22	; 0x16
    5b90:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
    5b94:	dc 01       	movw	r26, r24
    5b96:	cb 01       	movw	r24, r22
    5b98:	bc 01       	movw	r22, r24
    5b9a:	cd 01       	movw	r24, r26
    5b9c:	0e 94 4b 15 	call	0x2a96	; 0x2a96 <LCD_VoidSendNumber>
    5ba0:	f5 c8       	rjmp	.-3606   	; 0x4d8c <SM_VoidCalc+0x14c>
    else if(op==10){result = result+(operand1) ; LCD_VoidSendNumber(result);}
    5ba2:	8f 85       	ldd	r24, Y+15	; 0x0f
    5ba4:	8a 30       	cpi	r24, 0x0A	; 10
    5ba6:	09 f0       	breq	.+2      	; 0x5baa <SM_VoidCalc+0xf6a>
    5ba8:	f1 c8       	rjmp	.-3614   	; 0x4d8c <SM_VoidCalc+0x14c>
    5baa:	6b 89       	ldd	r22, Y+19	; 0x13
    5bac:	7c 89       	ldd	r23, Y+20	; 0x14
    5bae:	8d 89       	ldd	r24, Y+21	; 0x15
    5bb0:	9e 89       	ldd	r25, Y+22	; 0x16
    5bb2:	2b 8d       	ldd	r18, Y+27	; 0x1b
    5bb4:	3c 8d       	ldd	r19, Y+28	; 0x1c
    5bb6:	4d 8d       	ldd	r20, Y+29	; 0x1d
    5bb8:	5e 8d       	ldd	r21, Y+30	; 0x1e
    5bba:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    5bbe:	dc 01       	movw	r26, r24
    5bc0:	cb 01       	movw	r24, r22
    5bc2:	8b 8b       	std	Y+19, r24	; 0x13
    5bc4:	9c 8b       	std	Y+20, r25	; 0x14
    5bc6:	ad 8b       	std	Y+21, r26	; 0x15
    5bc8:	be 8b       	std	Y+22, r27	; 0x16
    5bca:	6b 89       	ldd	r22, Y+19	; 0x13
    5bcc:	7c 89       	ldd	r23, Y+20	; 0x14
    5bce:	8d 89       	ldd	r24, Y+21	; 0x15
    5bd0:	9e 89       	ldd	r25, Y+22	; 0x16
    5bd2:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
    5bd6:	dc 01       	movw	r26, r24
    5bd8:	cb 01       	movw	r24, r22
    5bda:	bc 01       	movw	r22, r24
    5bdc:	cd 01       	movw	r24, r26
    5bde:	0e 94 4b 15 	call	0x2a96	; 0x2a96 <LCD_VoidSendNumber>
    5be2:	d4 c8       	rjmp	.-3672   	; 0x4d8c <SM_VoidCalc+0x14c>
    break;
	default: LCD_u8WriteString("WRONG CHOICE"); break;
    5be4:	8d e6       	ldi	r24, 0x6D	; 109
    5be6:	90 e0       	ldi	r25, 0x00	; 0
    5be8:	0e 94 dc 15 	call	0x2bb8	; 0x2bb8 <LCD_u8WriteString>
    5bec:	cf c8       	rjmp	.-3682   	; 0x4d8c <SM_VoidCalc+0x14c>

00005bee <TIMER_VidOvfInit>:
#include "DIO_Interface.h"
#include <avr/io.h>
#include "Timer.h"

void TIMER_VidOvfInit(void)
{
    5bee:	df 93       	push	r29
    5bf0:	cf 93       	push	r28
    5bf2:	cd b7       	in	r28, 0x3d	; 61
    5bf4:	de b7       	in	r29, 0x3e	; 62
	//1- Set the Wave Generation mode as normal
	CLR_BIT(TCCR0, WGM00);
    5bf6:	a3 e5       	ldi	r26, 0x53	; 83
    5bf8:	b0 e0       	ldi	r27, 0x00	; 0
    5bfa:	e3 e5       	ldi	r30, 0x53	; 83
    5bfc:	f0 e0       	ldi	r31, 0x00	; 0
    5bfe:	80 81       	ld	r24, Z
    5c00:	8f 7b       	andi	r24, 0xBF	; 191
    5c02:	8c 93       	st	X, r24
	CLR_BIT(TCCR0, WGM01);
    5c04:	a3 e5       	ldi	r26, 0x53	; 83
    5c06:	b0 e0       	ldi	r27, 0x00	; 0
    5c08:	e3 e5       	ldi	r30, 0x53	; 83
    5c0a:	f0 e0       	ldi	r31, 0x00	; 0
    5c0c:	80 81       	ld	r24, Z
    5c0e:	87 7f       	andi	r24, 0xF7	; 247
    5c10:	8c 93       	st	X, r24

	//3- Enable Overflow Interrupt
	SET_BIT(TIMSK, 0);
    5c12:	a9 e5       	ldi	r26, 0x59	; 89
    5c14:	b0 e0       	ldi	r27, 0x00	; 0
    5c16:	e9 e5       	ldi	r30, 0x59	; 89
    5c18:	f0 e0       	ldi	r31, 0x00	; 0
    5c1a:	80 81       	ld	r24, Z
    5c1c:	81 60       	ori	r24, 0x01	; 1
    5c1e:	8c 93       	st	X, r24


	//2- Set the prescaler 8Mhz / 8 = 1Mhz --> Timer Freq
	CLR_BIT(TCCR0, CS00);
    5c20:	a3 e5       	ldi	r26, 0x53	; 83
    5c22:	b0 e0       	ldi	r27, 0x00	; 0
    5c24:	e3 e5       	ldi	r30, 0x53	; 83
    5c26:	f0 e0       	ldi	r31, 0x00	; 0
    5c28:	80 81       	ld	r24, Z
    5c2a:	8e 7f       	andi	r24, 0xFE	; 254
    5c2c:	8c 93       	st	X, r24
	SET_BIT(TCCR0, CS01);
    5c2e:	a3 e5       	ldi	r26, 0x53	; 83
    5c30:	b0 e0       	ldi	r27, 0x00	; 0
    5c32:	e3 e5       	ldi	r30, 0x53	; 83
    5c34:	f0 e0       	ldi	r31, 0x00	; 0
    5c36:	80 81       	ld	r24, Z
    5c38:	82 60       	ori	r24, 0x02	; 2
    5c3a:	8c 93       	st	X, r24
	CLR_BIT(TCCR0, CS02);
    5c3c:	a3 e5       	ldi	r26, 0x53	; 83
    5c3e:	b0 e0       	ldi	r27, 0x00	; 0
    5c40:	e3 e5       	ldi	r30, 0x53	; 83
    5c42:	f0 e0       	ldi	r31, 0x00	; 0
    5c44:	80 81       	ld	r24, Z
    5c46:	8b 7f       	andi	r24, 0xFB	; 251
    5c48:	8c 93       	st	X, r24


}
    5c4a:	cf 91       	pop	r28
    5c4c:	df 91       	pop	r29
    5c4e:	08 95       	ret

00005c50 <TIMER_VidCTCInit>:

void TIMER_VidCTCInit(void)
{
    5c50:	df 93       	push	r29
    5c52:	cf 93       	push	r28
    5c54:	cd b7       	in	r28, 0x3d	; 61
    5c56:	de b7       	in	r29, 0x3e	; 62
	//1- Set the Wave Generation mode as normal
	CLR_BIT(TCCR0, WGM00);
    5c58:	a3 e5       	ldi	r26, 0x53	; 83
    5c5a:	b0 e0       	ldi	r27, 0x00	; 0
    5c5c:	e3 e5       	ldi	r30, 0x53	; 83
    5c5e:	f0 e0       	ldi	r31, 0x00	; 0
    5c60:	80 81       	ld	r24, Z
    5c62:	8f 7b       	andi	r24, 0xBF	; 191
    5c64:	8c 93       	st	X, r24
	SET_BIT(TCCR0, WGM01);
    5c66:	a3 e5       	ldi	r26, 0x53	; 83
    5c68:	b0 e0       	ldi	r27, 0x00	; 0
    5c6a:	e3 e5       	ldi	r30, 0x53	; 83
    5c6c:	f0 e0       	ldi	r31, 0x00	; 0
    5c6e:	80 81       	ld	r24, Z
    5c70:	88 60       	ori	r24, 0x08	; 8
    5c72:	8c 93       	st	X, r24

	//3- Enable CTC Interrupt
	SET_BIT(TIMSK, 1);
    5c74:	a9 e5       	ldi	r26, 0x59	; 89
    5c76:	b0 e0       	ldi	r27, 0x00	; 0
    5c78:	e9 e5       	ldi	r30, 0x59	; 89
    5c7a:	f0 e0       	ldi	r31, 0x00	; 0
    5c7c:	80 81       	ld	r24, Z
    5c7e:	82 60       	ori	r24, 0x02	; 2
    5c80:	8c 93       	st	X, r24

	//2- Set the prescaler 8Mhz / 8 = 1Mhz --> Timer Freq
	SET_BIT(TCCR0, CS00);
    5c82:	a3 e5       	ldi	r26, 0x53	; 83
    5c84:	b0 e0       	ldi	r27, 0x00	; 0
    5c86:	e3 e5       	ldi	r30, 0x53	; 83
    5c88:	f0 e0       	ldi	r31, 0x00	; 0
    5c8a:	80 81       	ld	r24, Z
    5c8c:	81 60       	ori	r24, 0x01	; 1
    5c8e:	8c 93       	st	X, r24
	SET_BIT(TCCR0, CS01);
    5c90:	a3 e5       	ldi	r26, 0x53	; 83
    5c92:	b0 e0       	ldi	r27, 0x00	; 0
    5c94:	e3 e5       	ldi	r30, 0x53	; 83
    5c96:	f0 e0       	ldi	r31, 0x00	; 0
    5c98:	80 81       	ld	r24, Z
    5c9a:	82 60       	ori	r24, 0x02	; 2
    5c9c:	8c 93       	st	X, r24
	CLR_BIT(TCCR0, CS02);
    5c9e:	a3 e5       	ldi	r26, 0x53	; 83
    5ca0:	b0 e0       	ldi	r27, 0x00	; 0
    5ca2:	e3 e5       	ldi	r30, 0x53	; 83
    5ca4:	f0 e0       	ldi	r31, 0x00	; 0
    5ca6:	80 81       	ld	r24, Z
    5ca8:	8b 7f       	andi	r24, 0xFB	; 251
    5caa:	8c 93       	st	X, r24

}
    5cac:	cf 91       	pop	r28
    5cae:	df 91       	pop	r29
    5cb0:	08 95       	ret

00005cb2 <TIMER_VoidSetPreloadValue>:
void TIMER_VoidSetPreloadValue(u16 Copy_U16PreloadValue)
{
    5cb2:	df 93       	push	r29
    5cb4:	cf 93       	push	r28
    5cb6:	00 d0       	rcall	.+0      	; 0x5cb8 <TIMER_VoidSetPreloadValue+0x6>
    5cb8:	cd b7       	in	r28, 0x3d	; 61
    5cba:	de b7       	in	r29, 0x3e	; 62
    5cbc:	9a 83       	std	Y+2, r25	; 0x02
    5cbe:	89 83       	std	Y+1, r24	; 0x01
	#if TIMER0_MODE  == TIMER_OVERFLOW_MODE
	//4- Set the Preload Value
	TCNT0 =Copy_U16PreloadValue;
	#elif TIMER0_MODE  == TIMER_CTC_MODE
	// Set the OCR Value
	OCR0=Copy_U16PreloadValue;
    5cc0:	ec e5       	ldi	r30, 0x5C	; 92
    5cc2:	f0 e0       	ldi	r31, 0x00	; 0
    5cc4:	89 81       	ldd	r24, Y+1	; 0x01
    5cc6:	80 83       	st	Z, r24
	#endif

}
    5cc8:	0f 90       	pop	r0
    5cca:	0f 90       	pop	r0
    5ccc:	cf 91       	pop	r28
    5cce:	df 91       	pop	r29
    5cd0:	08 95       	ret

00005cd2 <TIMER_VoidPWMInit>:
void TIMER_VoidPWMInit(void)
{
    5cd2:	df 93       	push	r29
    5cd4:	cf 93       	push	r28
    5cd6:	cd b7       	in	r28, 0x3d	; 61
    5cd8:	de b7       	in	r29, 0x3e	; 62
	//1- Set the Wave Generation mode as PWM
		SET_BIT(TCCR0, WGM00);
    5cda:	a3 e5       	ldi	r26, 0x53	; 83
    5cdc:	b0 e0       	ldi	r27, 0x00	; 0
    5cde:	e3 e5       	ldi	r30, 0x53	; 83
    5ce0:	f0 e0       	ldi	r31, 0x00	; 0
    5ce2:	80 81       	ld	r24, Z
    5ce4:	80 64       	ori	r24, 0x40	; 64
    5ce6:	8c 93       	st	X, r24
		SET_BIT(TCCR0, WGM01);
    5ce8:	a3 e5       	ldi	r26, 0x53	; 83
    5cea:	b0 e0       	ldi	r27, 0x00	; 0
    5cec:	e3 e5       	ldi	r30, 0x53	; 83
    5cee:	f0 e0       	ldi	r31, 0x00	; 0
    5cf0:	80 81       	ld	r24, Z
    5cf2:	88 60       	ori	r24, 0x08	; 8
    5cf4:	8c 93       	st	X, r24

	#if FAST_PWM_MODE == INVERTED_PWM
		CLR_BIT( TCCR0,COM00);
    5cf6:	a3 e5       	ldi	r26, 0x53	; 83
    5cf8:	b0 e0       	ldi	r27, 0x00	; 0
    5cfa:	e3 e5       	ldi	r30, 0x53	; 83
    5cfc:	f0 e0       	ldi	r31, 0x00	; 0
    5cfe:	80 81       	ld	r24, Z
    5d00:	8f 7e       	andi	r24, 0xEF	; 239
    5d02:	8c 93       	st	X, r24
		SET_BIT( TCCR0,COM01);
    5d04:	a3 e5       	ldi	r26, 0x53	; 83
    5d06:	b0 e0       	ldi	r27, 0x00	; 0
    5d08:	e3 e5       	ldi	r30, 0x53	; 83
    5d0a:	f0 e0       	ldi	r31, 0x00	; 0
    5d0c:	80 81       	ld	r24, Z
    5d0e:	80 62       	ori	r24, 0x20	; 32
    5d10:	8c 93       	st	X, r24
	#elif FAST_PWM_MODE ==NONINVERTED_PWM
		SET_BIT( TCCR0,COM00);
		SET_BIT( TCCR0,COM01);
	#endif
	//2- Set the prescaler 8Mhz / 8 = 1Mhz --> Timer Freq
		CLR_BIT(TCCR0, CS00);
    5d12:	a3 e5       	ldi	r26, 0x53	; 83
    5d14:	b0 e0       	ldi	r27, 0x00	; 0
    5d16:	e3 e5       	ldi	r30, 0x53	; 83
    5d18:	f0 e0       	ldi	r31, 0x00	; 0
    5d1a:	80 81       	ld	r24, Z
    5d1c:	8e 7f       	andi	r24, 0xFE	; 254
    5d1e:	8c 93       	st	X, r24
		SET_BIT(TCCR0, CS01);
    5d20:	a3 e5       	ldi	r26, 0x53	; 83
    5d22:	b0 e0       	ldi	r27, 0x00	; 0
    5d24:	e3 e5       	ldi	r30, 0x53	; 83
    5d26:	f0 e0       	ldi	r31, 0x00	; 0
    5d28:	80 81       	ld	r24, Z
    5d2a:	82 60       	ori	r24, 0x02	; 2
    5d2c:	8c 93       	st	X, r24
		CLR_BIT(TCCR0, CS02);
    5d2e:	a3 e5       	ldi	r26, 0x53	; 83
    5d30:	b0 e0       	ldi	r27, 0x00	; 0
    5d32:	e3 e5       	ldi	r30, 0x53	; 83
    5d34:	f0 e0       	ldi	r31, 0x00	; 0
    5d36:	80 81       	ld	r24, Z
    5d38:	8b 7f       	andi	r24, 0xFB	; 251
    5d3a:	8c 93       	st	X, r24

}
    5d3c:	cf 91       	pop	r28
    5d3e:	df 91       	pop	r29
    5d40:	08 95       	ret

00005d42 <TIMER_VoidTimer1Init>:
void TIMER_VoidTimer1Init(void)
{
    5d42:	df 93       	push	r29
    5d44:	cf 93       	push	r28
    5d46:	cd b7       	in	r28, 0x3d	; 61
    5d48:	de b7       	in	r29, 0x3e	; 62
	/* Fast PWM Timer1 */
	CLR_BIT(TCCR1A,WGM10);
    5d4a:	af e4       	ldi	r26, 0x4F	; 79
    5d4c:	b0 e0       	ldi	r27, 0x00	; 0
    5d4e:	ef e4       	ldi	r30, 0x4F	; 79
    5d50:	f0 e0       	ldi	r31, 0x00	; 0
    5d52:	80 81       	ld	r24, Z
    5d54:	8e 7f       	andi	r24, 0xFE	; 254
    5d56:	8c 93       	st	X, r24
	SET_BIT(TCCR1A,WGM11);
    5d58:	af e4       	ldi	r26, 0x4F	; 79
    5d5a:	b0 e0       	ldi	r27, 0x00	; 0
    5d5c:	ef e4       	ldi	r30, 0x4F	; 79
    5d5e:	f0 e0       	ldi	r31, 0x00	; 0
    5d60:	80 81       	ld	r24, Z
    5d62:	82 60       	ori	r24, 0x02	; 2
    5d64:	8c 93       	st	X, r24
	SET_BIT(TCCR1B,WGM12);
    5d66:	ae e4       	ldi	r26, 0x4E	; 78
    5d68:	b0 e0       	ldi	r27, 0x00	; 0
    5d6a:	ee e4       	ldi	r30, 0x4E	; 78
    5d6c:	f0 e0       	ldi	r31, 0x00	; 0
    5d6e:	80 81       	ld	r24, Z
    5d70:	88 60       	ori	r24, 0x08	; 8
    5d72:	8c 93       	st	X, r24
	SET_BIT(TCCR1B,WGM13);
    5d74:	ae e4       	ldi	r26, 0x4E	; 78
    5d76:	b0 e0       	ldi	r27, 0x00	; 0
    5d78:	ee e4       	ldi	r30, 0x4E	; 78
    5d7a:	f0 e0       	ldi	r31, 0x00	; 0
    5d7c:	80 81       	ld	r24, Z
    5d7e:	80 61       	ori	r24, 0x10	; 16
    5d80:	8c 93       	st	X, r24

	/* NonInverted Timer1 Mode */
	CLR_BIT(TCCR1A,COM1A0);
    5d82:	af e4       	ldi	r26, 0x4F	; 79
    5d84:	b0 e0       	ldi	r27, 0x00	; 0
    5d86:	ef e4       	ldi	r30, 0x4F	; 79
    5d88:	f0 e0       	ldi	r31, 0x00	; 0
    5d8a:	80 81       	ld	r24, Z
    5d8c:	8f 7b       	andi	r24, 0xBF	; 191
    5d8e:	8c 93       	st	X, r24
	SET_BIT(TCCR1A,COM1A1);
    5d90:	af e4       	ldi	r26, 0x4F	; 79
    5d92:	b0 e0       	ldi	r27, 0x00	; 0
    5d94:	ef e4       	ldi	r30, 0x4F	; 79
    5d96:	f0 e0       	ldi	r31, 0x00	; 0
    5d98:	80 81       	ld	r24, Z
    5d9a:	80 68       	ori	r24, 0x80	; 128
    5d9c:	8c 93       	st	X, r24

	//2- Set the prescaller 8Mhz / 8 = 1Mhz --> Timer Freq
	CLR_BIT(TCCR1B, CS10);
    5d9e:	ae e4       	ldi	r26, 0x4E	; 78
    5da0:	b0 e0       	ldi	r27, 0x00	; 0
    5da2:	ee e4       	ldi	r30, 0x4E	; 78
    5da4:	f0 e0       	ldi	r31, 0x00	; 0
    5da6:	80 81       	ld	r24, Z
    5da8:	8e 7f       	andi	r24, 0xFE	; 254
    5daa:	8c 93       	st	X, r24
	SET_BIT(TCCR1B, CS11);
    5dac:	ae e4       	ldi	r26, 0x4E	; 78
    5dae:	b0 e0       	ldi	r27, 0x00	; 0
    5db0:	ee e4       	ldi	r30, 0x4E	; 78
    5db2:	f0 e0       	ldi	r31, 0x00	; 0
    5db4:	80 81       	ld	r24, Z
    5db6:	82 60       	ori	r24, 0x02	; 2
    5db8:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B, CS12);
    5dba:	ae e4       	ldi	r26, 0x4E	; 78
    5dbc:	b0 e0       	ldi	r27, 0x00	; 0
    5dbe:	ee e4       	ldi	r30, 0x4E	; 78
    5dc0:	f0 e0       	ldi	r31, 0x00	; 0
    5dc2:	80 81       	ld	r24, Z
    5dc4:	8b 7f       	andi	r24, 0xFB	; 251
    5dc6:	8c 93       	st	X, r24

}
    5dc8:	cf 91       	pop	r28
    5dca:	df 91       	pop	r29
    5dcc:	08 95       	ret

00005dce <TIMER_VidCTCTimer1Preload>:
void TIMER_VidCTCTimer1Preload(s16 Copy_U16PreloadValue)
{
    5dce:	df 93       	push	r29
    5dd0:	cf 93       	push	r28
    5dd2:	00 d0       	rcall	.+0      	; 0x5dd4 <TIMER_VidCTCTimer1Preload+0x6>
    5dd4:	cd b7       	in	r28, 0x3d	; 61
    5dd6:	de b7       	in	r29, 0x3e	; 62
    5dd8:	9a 83       	std	Y+2, r25	; 0x02
    5dda:	89 83       	std	Y+1, r24	; 0x01
	OCR1A=Copy_U16PreloadValue;
    5ddc:	ea e4       	ldi	r30, 0x4A	; 74
    5dde:	f0 e0       	ldi	r31, 0x00	; 0
    5de0:	89 81       	ldd	r24, Y+1	; 0x01
    5de2:	9a 81       	ldd	r25, Y+2	; 0x02
    5de4:	91 83       	std	Z+1, r25	; 0x01
    5de6:	80 83       	st	Z, r24
}
    5de8:	0f 90       	pop	r0
    5dea:	0f 90       	pop	r0
    5dec:	cf 91       	pop	r28
    5dee:	df 91       	pop	r29
    5df0:	08 95       	ret

00005df2 <TIMER_VidSetTimer1Preload>:
void TIMER_VidSetTimer1Preload(u16 Copy_U16PreloadValue)
{
    5df2:	df 93       	push	r29
    5df4:	cf 93       	push	r28
    5df6:	00 d0       	rcall	.+0      	; 0x5df8 <TIMER_VidSetTimer1Preload+0x6>
    5df8:	cd b7       	in	r28, 0x3d	; 61
    5dfa:	de b7       	in	r29, 0x3e	; 62
    5dfc:	9a 83       	std	Y+2, r25	; 0x02
    5dfe:	89 83       	std	Y+1, r24	; 0x01
	ICR1=Copy_U16PreloadValue;
    5e00:	e6 e4       	ldi	r30, 0x46	; 70
    5e02:	f0 e0       	ldi	r31, 0x00	; 0
    5e04:	89 81       	ldd	r24, Y+1	; 0x01
    5e06:	9a 81       	ldd	r25, Y+2	; 0x02
    5e08:	91 83       	std	Z+1, r25	; 0x01
    5e0a:	80 83       	st	Z, r24
}
    5e0c:	0f 90       	pop	r0
    5e0e:	0f 90       	pop	r0
    5e10:	cf 91       	pop	r28
    5e12:	df 91       	pop	r29
    5e14:	08 95       	ret

00005e16 <__vector_10>:
//		DIO_VidTogglePinValue(PORTA_U8_INDEX, PIN0_U8_INDEX);
//	}
//}

void __vector_10(void)
{
    5e16:	1f 92       	push	r1
    5e18:	0f 92       	push	r0
    5e1a:	0f b6       	in	r0, 0x3f	; 63
    5e1c:	0f 92       	push	r0
    5e1e:	11 24       	eor	r1, r1
    5e20:	2f 93       	push	r18
    5e22:	3f 93       	push	r19
    5e24:	4f 93       	push	r20
    5e26:	5f 93       	push	r21
    5e28:	6f 93       	push	r22
    5e2a:	7f 93       	push	r23
    5e2c:	8f 93       	push	r24
    5e2e:	9f 93       	push	r25
    5e30:	af 93       	push	r26
    5e32:	bf 93       	push	r27
    5e34:	ef 93       	push	r30
    5e36:	ff 93       	push	r31
    5e38:	df 93       	push	r29
    5e3a:	cf 93       	push	r28
    5e3c:	cd b7       	in	r28, 0x3d	; 61
    5e3e:	de b7       	in	r29, 0x3e	; 62

	static u16 counter = 0;
	counter++;
    5e40:	80 91 a1 02 	lds	r24, 0x02A1
    5e44:	90 91 a2 02 	lds	r25, 0x02A2
    5e48:	01 96       	adiw	r24, 0x01	; 1
    5e4a:	90 93 a2 02 	sts	0x02A2, r25
    5e4e:	80 93 a1 02 	sts	0x02A1, r24
	if(counter == 5)
    5e52:	80 91 a1 02 	lds	r24, 0x02A1
    5e56:	90 91 a2 02 	lds	r25, 0x02A2
    5e5a:	85 30       	cpi	r24, 0x05	; 5
    5e5c:	91 05       	cpc	r25, r1
    5e5e:	31 f4       	brne	.+12     	; 0x5e6c <__vector_10+0x56>
	{
		//Do Action every 1s
		DIO_U8SetPinValue(DIO_PORTA,DIO_PIN0,1);
    5e60:	80 e0       	ldi	r24, 0x00	; 0
    5e62:	60 e0       	ldi	r22, 0x00	; 0
    5e64:	41 e0       	ldi	r20, 0x01	; 1
    5e66:	0e 94 15 08 	call	0x102a	; 0x102a <DIO_U8SetPinValue>
    5e6a:	10 c0       	rjmp	.+32     	; 0x5e8c <__vector_10+0x76>
	}
	else if(counter == 20)
    5e6c:	80 91 a1 02 	lds	r24, 0x02A1
    5e70:	90 91 a2 02 	lds	r25, 0x02A2
    5e74:	84 31       	cpi	r24, 0x14	; 20
    5e76:	91 05       	cpc	r25, r1
    5e78:	49 f4       	brne	.+18     	; 0x5e8c <__vector_10+0x76>
	{
		counter = 0;
    5e7a:	10 92 a2 02 	sts	0x02A2, r1
    5e7e:	10 92 a1 02 	sts	0x02A1, r1
		DIO_U8SetPinValue(DIO_PORTA, DIO_PIN0,0);
    5e82:	80 e0       	ldi	r24, 0x00	; 0
    5e84:	60 e0       	ldi	r22, 0x00	; 0
    5e86:	40 e0       	ldi	r20, 0x00	; 0
    5e88:	0e 94 15 08 	call	0x102a	; 0x102a <DIO_U8SetPinValue>

	}
}
    5e8c:	cf 91       	pop	r28
    5e8e:	df 91       	pop	r29
    5e90:	ff 91       	pop	r31
    5e92:	ef 91       	pop	r30
    5e94:	bf 91       	pop	r27
    5e96:	af 91       	pop	r26
    5e98:	9f 91       	pop	r25
    5e9a:	8f 91       	pop	r24
    5e9c:	7f 91       	pop	r23
    5e9e:	6f 91       	pop	r22
    5ea0:	5f 91       	pop	r21
    5ea2:	4f 91       	pop	r20
    5ea4:	3f 91       	pop	r19
    5ea6:	2f 91       	pop	r18
    5ea8:	0f 90       	pop	r0
    5eaa:	0f be       	out	0x3f, r0	; 63
    5eac:	0f 90       	pop	r0
    5eae:	1f 90       	pop	r1
    5eb0:	18 95       	reti

00005eb2 <__vector_11>:


void __vector_11(void)
{
    5eb2:	1f 92       	push	r1
    5eb4:	0f 92       	push	r0
    5eb6:	0f b6       	in	r0, 0x3f	; 63
    5eb8:	0f 92       	push	r0
    5eba:	11 24       	eor	r1, r1
    5ebc:	2f 93       	push	r18
    5ebe:	3f 93       	push	r19
    5ec0:	4f 93       	push	r20
    5ec2:	5f 93       	push	r21
    5ec4:	6f 93       	push	r22
    5ec6:	7f 93       	push	r23
    5ec8:	8f 93       	push	r24
    5eca:	9f 93       	push	r25
    5ecc:	af 93       	push	r26
    5ece:	bf 93       	push	r27
    5ed0:	ef 93       	push	r30
    5ed2:	ff 93       	push	r31
    5ed4:	df 93       	push	r29
    5ed6:	cf 93       	push	r28
    5ed8:	cd b7       	in	r28, 0x3d	; 61
    5eda:	de b7       	in	r29, 0x3e	; 62
	//3906.25
	static u16 counter = 0;
	counter++;
    5edc:	80 91 a3 02 	lds	r24, 0x02A3
    5ee0:	90 91 a4 02 	lds	r25, 0x02A4
    5ee4:	01 96       	adiw	r24, 0x01	; 1
    5ee6:	90 93 a4 02 	sts	0x02A4, r25
    5eea:	80 93 a3 02 	sts	0x02A3, r24
	if(counter == 3907)
    5eee:	80 91 a3 02 	lds	r24, 0x02A3
    5ef2:	90 91 a4 02 	lds	r25, 0x02A4
    5ef6:	2f e0       	ldi	r18, 0x0F	; 15
    5ef8:	83 34       	cpi	r24, 0x43	; 67
    5efa:	92 07       	cpc	r25, r18
    5efc:	61 f4       	brne	.+24     	; 0x5f16 <__vector_11+0x64>
	{
		counter = 0;
    5efe:	10 92 a4 02 	sts	0x02A4, r1
    5f02:	10 92 a3 02 	sts	0x02A3, r1
		TCNT0 = 192;
    5f06:	e2 e5       	ldi	r30, 0x52	; 82
    5f08:	f0 e0       	ldi	r31, 0x00	; 0
    5f0a:	80 ec       	ldi	r24, 0xC0	; 192
    5f0c:	80 83       	st	Z, r24
		//Do Action every 1s
		DIO_U8TogglePin(DIO_PORTA,DIO_PIN0);
    5f0e:	80 e0       	ldi	r24, 0x00	; 0
    5f10:	60 e0       	ldi	r22, 0x00	; 0
    5f12:	0e 94 c8 09 	call	0x1390	; 0x1390 <DIO_U8TogglePin>
	}
}
    5f16:	cf 91       	pop	r28
    5f18:	df 91       	pop	r29
    5f1a:	ff 91       	pop	r31
    5f1c:	ef 91       	pop	r30
    5f1e:	bf 91       	pop	r27
    5f20:	af 91       	pop	r26
    5f22:	9f 91       	pop	r25
    5f24:	8f 91       	pop	r24
    5f26:	7f 91       	pop	r23
    5f28:	6f 91       	pop	r22
    5f2a:	5f 91       	pop	r21
    5f2c:	4f 91       	pop	r20
    5f2e:	3f 91       	pop	r19
    5f30:	2f 91       	pop	r18
    5f32:	0f 90       	pop	r0
    5f34:	0f be       	out	0x3f, r0	; 63
    5f36:	0f 90       	pop	r0
    5f38:	1f 90       	pop	r1
    5f3a:	18 95       	reti

00005f3c <main>:
#include "KPAD_Config.h"



int main()
{
    5f3c:	df 93       	push	r29
    5f3e:	cf 93       	push	r28
    5f40:	0f 92       	push	r0
    5f42:	cd b7       	in	r28, 0x3d	; 61
    5f44:	de b7       	in	r29, 0x3e	; 62


		u8 Local_u8Data;
		I2C_VidSlaveInit(3);
    5f46:	83 e0       	ldi	r24, 0x03	; 3
    5f48:	0e 94 52 0c 	call	0x18a4	; 0x18a4 <I2C_VidSlaveInit>
		while(1)
		{
			Local_u8Data=I2C_VidSlaveRecieveData();
    5f4c:	0e 94 20 0d 	call	0x1a40	; 0x1a40 <I2C_VidSlaveRecieveData>
    5f50:	89 83       	std	Y+1, r24	; 0x01
			if(Local_u8Data=='1')
    5f52:	89 81       	ldd	r24, Y+1	; 0x01
    5f54:	81 33       	cpi	r24, 0x31	; 49
    5f56:	d1 f7       	brne	.-12     	; 0x5f4c <main+0x10>
			{
				while(1)
				{
					SM_VoidCalc();
    5f58:	0e 94 20 26 	call	0x4c40	; 0x4c40 <SM_VoidCalc>
    5f5c:	fd cf       	rjmp	.-6      	; 0x5f58 <main+0x1c>

00005f5e <__divmodsi4>:
    5f5e:	97 fb       	bst	r25, 7
    5f60:	09 2e       	mov	r0, r25
    5f62:	05 26       	eor	r0, r21
    5f64:	0e d0       	rcall	.+28     	; 0x5f82 <__divmodsi4_neg1>
    5f66:	57 fd       	sbrc	r21, 7
    5f68:	04 d0       	rcall	.+8      	; 0x5f72 <__divmodsi4_neg2>
    5f6a:	14 d0       	rcall	.+40     	; 0x5f94 <__udivmodsi4>
    5f6c:	0a d0       	rcall	.+20     	; 0x5f82 <__divmodsi4_neg1>
    5f6e:	00 1c       	adc	r0, r0
    5f70:	38 f4       	brcc	.+14     	; 0x5f80 <__divmodsi4_exit>

00005f72 <__divmodsi4_neg2>:
    5f72:	50 95       	com	r21
    5f74:	40 95       	com	r20
    5f76:	30 95       	com	r19
    5f78:	21 95       	neg	r18
    5f7a:	3f 4f       	sbci	r19, 0xFF	; 255
    5f7c:	4f 4f       	sbci	r20, 0xFF	; 255
    5f7e:	5f 4f       	sbci	r21, 0xFF	; 255

00005f80 <__divmodsi4_exit>:
    5f80:	08 95       	ret

00005f82 <__divmodsi4_neg1>:
    5f82:	f6 f7       	brtc	.-4      	; 0x5f80 <__divmodsi4_exit>
    5f84:	90 95       	com	r25
    5f86:	80 95       	com	r24
    5f88:	70 95       	com	r23
    5f8a:	61 95       	neg	r22
    5f8c:	7f 4f       	sbci	r23, 0xFF	; 255
    5f8e:	8f 4f       	sbci	r24, 0xFF	; 255
    5f90:	9f 4f       	sbci	r25, 0xFF	; 255
    5f92:	08 95       	ret

00005f94 <__udivmodsi4>:
    5f94:	a1 e2       	ldi	r26, 0x21	; 33
    5f96:	1a 2e       	mov	r1, r26
    5f98:	aa 1b       	sub	r26, r26
    5f9a:	bb 1b       	sub	r27, r27
    5f9c:	fd 01       	movw	r30, r26
    5f9e:	0d c0       	rjmp	.+26     	; 0x5fba <__udivmodsi4_ep>

00005fa0 <__udivmodsi4_loop>:
    5fa0:	aa 1f       	adc	r26, r26
    5fa2:	bb 1f       	adc	r27, r27
    5fa4:	ee 1f       	adc	r30, r30
    5fa6:	ff 1f       	adc	r31, r31
    5fa8:	a2 17       	cp	r26, r18
    5faa:	b3 07       	cpc	r27, r19
    5fac:	e4 07       	cpc	r30, r20
    5fae:	f5 07       	cpc	r31, r21
    5fb0:	20 f0       	brcs	.+8      	; 0x5fba <__udivmodsi4_ep>
    5fb2:	a2 1b       	sub	r26, r18
    5fb4:	b3 0b       	sbc	r27, r19
    5fb6:	e4 0b       	sbc	r30, r20
    5fb8:	f5 0b       	sbc	r31, r21

00005fba <__udivmodsi4_ep>:
    5fba:	66 1f       	adc	r22, r22
    5fbc:	77 1f       	adc	r23, r23
    5fbe:	88 1f       	adc	r24, r24
    5fc0:	99 1f       	adc	r25, r25
    5fc2:	1a 94       	dec	r1
    5fc4:	69 f7       	brne	.-38     	; 0x5fa0 <__udivmodsi4_loop>
    5fc6:	60 95       	com	r22
    5fc8:	70 95       	com	r23
    5fca:	80 95       	com	r24
    5fcc:	90 95       	com	r25
    5fce:	9b 01       	movw	r18, r22
    5fd0:	ac 01       	movw	r20, r24
    5fd2:	bd 01       	movw	r22, r26
    5fd4:	cf 01       	movw	r24, r30
    5fd6:	08 95       	ret

00005fd8 <__prologue_saves__>:
    5fd8:	2f 92       	push	r2
    5fda:	3f 92       	push	r3
    5fdc:	4f 92       	push	r4
    5fde:	5f 92       	push	r5
    5fe0:	6f 92       	push	r6
    5fe2:	7f 92       	push	r7
    5fe4:	8f 92       	push	r8
    5fe6:	9f 92       	push	r9
    5fe8:	af 92       	push	r10
    5fea:	bf 92       	push	r11
    5fec:	cf 92       	push	r12
    5fee:	df 92       	push	r13
    5ff0:	ef 92       	push	r14
    5ff2:	ff 92       	push	r15
    5ff4:	0f 93       	push	r16
    5ff6:	1f 93       	push	r17
    5ff8:	cf 93       	push	r28
    5ffa:	df 93       	push	r29
    5ffc:	cd b7       	in	r28, 0x3d	; 61
    5ffe:	de b7       	in	r29, 0x3e	; 62
    6000:	ca 1b       	sub	r28, r26
    6002:	db 0b       	sbc	r29, r27
    6004:	0f b6       	in	r0, 0x3f	; 63
    6006:	f8 94       	cli
    6008:	de bf       	out	0x3e, r29	; 62
    600a:	0f be       	out	0x3f, r0	; 63
    600c:	cd bf       	out	0x3d, r28	; 61
    600e:	09 94       	ijmp

00006010 <__epilogue_restores__>:
    6010:	2a 88       	ldd	r2, Y+18	; 0x12
    6012:	39 88       	ldd	r3, Y+17	; 0x11
    6014:	48 88       	ldd	r4, Y+16	; 0x10
    6016:	5f 84       	ldd	r5, Y+15	; 0x0f
    6018:	6e 84       	ldd	r6, Y+14	; 0x0e
    601a:	7d 84       	ldd	r7, Y+13	; 0x0d
    601c:	8c 84       	ldd	r8, Y+12	; 0x0c
    601e:	9b 84       	ldd	r9, Y+11	; 0x0b
    6020:	aa 84       	ldd	r10, Y+10	; 0x0a
    6022:	b9 84       	ldd	r11, Y+9	; 0x09
    6024:	c8 84       	ldd	r12, Y+8	; 0x08
    6026:	df 80       	ldd	r13, Y+7	; 0x07
    6028:	ee 80       	ldd	r14, Y+6	; 0x06
    602a:	fd 80       	ldd	r15, Y+5	; 0x05
    602c:	0c 81       	ldd	r16, Y+4	; 0x04
    602e:	1b 81       	ldd	r17, Y+3	; 0x03
    6030:	aa 81       	ldd	r26, Y+2	; 0x02
    6032:	b9 81       	ldd	r27, Y+1	; 0x01
    6034:	ce 0f       	add	r28, r30
    6036:	d1 1d       	adc	r29, r1
    6038:	0f b6       	in	r0, 0x3f	; 63
    603a:	f8 94       	cli
    603c:	de bf       	out	0x3e, r29	; 62
    603e:	0f be       	out	0x3f, r0	; 63
    6040:	cd bf       	out	0x3d, r28	; 61
    6042:	ed 01       	movw	r28, r26
    6044:	08 95       	ret
    6046:	11 f4       	brne	.+4      	; 0x604c <__epilogue_restores__+0x3c>
    6048:	0e f4       	brtc	.+2      	; 0x604c <__epilogue_restores__+0x3c>
    604a:	4d c0       	rjmp	.+154    	; 0x60e6 <__fp_nan>
    604c:	3e c0       	rjmp	.+124    	; 0x60ca <__fp_mpack>

0000604e <sqrt>:
    604e:	5d d0       	rcall	.+186    	; 0x610a <__fp_splitA>
    6050:	d0 f3       	brcs	.-12     	; 0x6046 <__epilogue_restores__+0x36>
    6052:	99 23       	and	r25, r25
    6054:	d9 f3       	breq	.-10     	; 0x604c <__epilogue_restores__+0x3c>
    6056:	ce f3       	brts	.-14     	; 0x604a <__epilogue_restores__+0x3a>
    6058:	9f 57       	subi	r25, 0x7F	; 127
    605a:	55 0b       	sbc	r21, r21
    605c:	87 ff       	sbrs	r24, 7
    605e:	46 d0       	rcall	.+140    	; 0x60ec <__fp_norm2>
    6060:	00 24       	eor	r0, r0
    6062:	a0 e6       	ldi	r26, 0x60	; 96
    6064:	40 ea       	ldi	r20, 0xA0	; 160
    6066:	90 01       	movw	r18, r0
    6068:	80 58       	subi	r24, 0x80	; 128
    606a:	56 95       	lsr	r21
    606c:	97 95       	ror	r25
    606e:	28 f4       	brcc	.+10     	; 0x607a <sqrt+0x2c>
    6070:	80 5c       	subi	r24, 0xC0	; 192
    6072:	66 0f       	add	r22, r22
    6074:	77 1f       	adc	r23, r23
    6076:	88 1f       	adc	r24, r24
    6078:	20 f0       	brcs	.+8      	; 0x6082 <sqrt+0x34>
    607a:	26 17       	cp	r18, r22
    607c:	37 07       	cpc	r19, r23
    607e:	48 07       	cpc	r20, r24
    6080:	30 f4       	brcc	.+12     	; 0x608e <sqrt+0x40>
    6082:	62 1b       	sub	r22, r18
    6084:	73 0b       	sbc	r23, r19
    6086:	84 0b       	sbc	r24, r20
    6088:	20 29       	or	r18, r0
    608a:	31 29       	or	r19, r1
    608c:	4a 2b       	or	r20, r26
    608e:	a6 95       	lsr	r26
    6090:	17 94       	ror	r1
    6092:	07 94       	ror	r0
    6094:	20 25       	eor	r18, r0
    6096:	31 25       	eor	r19, r1
    6098:	4a 27       	eor	r20, r26
    609a:	58 f7       	brcc	.-42     	; 0x6072 <sqrt+0x24>
    609c:	66 0f       	add	r22, r22
    609e:	77 1f       	adc	r23, r23
    60a0:	88 1f       	adc	r24, r24
    60a2:	20 f0       	brcs	.+8      	; 0x60ac <sqrt+0x5e>
    60a4:	26 17       	cp	r18, r22
    60a6:	37 07       	cpc	r19, r23
    60a8:	48 07       	cpc	r20, r24
    60aa:	30 f4       	brcc	.+12     	; 0x60b8 <sqrt+0x6a>
    60ac:	62 0b       	sbc	r22, r18
    60ae:	73 0b       	sbc	r23, r19
    60b0:	84 0b       	sbc	r24, r20
    60b2:	20 0d       	add	r18, r0
    60b4:	31 1d       	adc	r19, r1
    60b6:	41 1d       	adc	r20, r1
    60b8:	a0 95       	com	r26
    60ba:	81 f7       	brne	.-32     	; 0x609c <sqrt+0x4e>
    60bc:	b9 01       	movw	r22, r18
    60be:	84 2f       	mov	r24, r20
    60c0:	91 58       	subi	r25, 0x81	; 129
    60c2:	88 0f       	add	r24, r24
    60c4:	96 95       	lsr	r25
    60c6:	87 95       	ror	r24
    60c8:	08 95       	ret

000060ca <__fp_mpack>:
    60ca:	9f 3f       	cpi	r25, 0xFF	; 255
    60cc:	31 f0       	breq	.+12     	; 0x60da <__fp_mpack_finite+0xc>

000060ce <__fp_mpack_finite>:
    60ce:	91 50       	subi	r25, 0x01	; 1
    60d0:	20 f4       	brcc	.+8      	; 0x60da <__fp_mpack_finite+0xc>
    60d2:	87 95       	ror	r24
    60d4:	77 95       	ror	r23
    60d6:	67 95       	ror	r22
    60d8:	b7 95       	ror	r27
    60da:	88 0f       	add	r24, r24
    60dc:	91 1d       	adc	r25, r1
    60de:	96 95       	lsr	r25
    60e0:	87 95       	ror	r24
    60e2:	97 f9       	bld	r25, 7
    60e4:	08 95       	ret

000060e6 <__fp_nan>:
    60e6:	9f ef       	ldi	r25, 0xFF	; 255
    60e8:	80 ec       	ldi	r24, 0xC0	; 192
    60ea:	08 95       	ret

000060ec <__fp_norm2>:
    60ec:	91 50       	subi	r25, 0x01	; 1
    60ee:	50 40       	sbci	r21, 0x00	; 0
    60f0:	66 0f       	add	r22, r22
    60f2:	77 1f       	adc	r23, r23
    60f4:	88 1f       	adc	r24, r24
    60f6:	d2 f7       	brpl	.-12     	; 0x60ec <__fp_norm2>
    60f8:	08 95       	ret

000060fa <__fp_split3>:
    60fa:	57 fd       	sbrc	r21, 7
    60fc:	90 58       	subi	r25, 0x80	; 128
    60fe:	44 0f       	add	r20, r20
    6100:	55 1f       	adc	r21, r21
    6102:	59 f0       	breq	.+22     	; 0x611a <__fp_splitA+0x10>
    6104:	5f 3f       	cpi	r21, 0xFF	; 255
    6106:	71 f0       	breq	.+28     	; 0x6124 <__fp_splitA+0x1a>
    6108:	47 95       	ror	r20

0000610a <__fp_splitA>:
    610a:	88 0f       	add	r24, r24
    610c:	97 fb       	bst	r25, 7
    610e:	99 1f       	adc	r25, r25
    6110:	61 f0       	breq	.+24     	; 0x612a <__fp_splitA+0x20>
    6112:	9f 3f       	cpi	r25, 0xFF	; 255
    6114:	79 f0       	breq	.+30     	; 0x6134 <__fp_splitA+0x2a>
    6116:	87 95       	ror	r24
    6118:	08 95       	ret
    611a:	12 16       	cp	r1, r18
    611c:	13 06       	cpc	r1, r19
    611e:	14 06       	cpc	r1, r20
    6120:	55 1f       	adc	r21, r21
    6122:	f2 cf       	rjmp	.-28     	; 0x6108 <__fp_split3+0xe>
    6124:	46 95       	lsr	r20
    6126:	f1 df       	rcall	.-30     	; 0x610a <__fp_splitA>
    6128:	08 c0       	rjmp	.+16     	; 0x613a <__fp_splitA+0x30>
    612a:	16 16       	cp	r1, r22
    612c:	17 06       	cpc	r1, r23
    612e:	18 06       	cpc	r1, r24
    6130:	99 1f       	adc	r25, r25
    6132:	f1 cf       	rjmp	.-30     	; 0x6116 <__fp_splitA+0xc>
    6134:	86 95       	lsr	r24
    6136:	71 05       	cpc	r23, r1
    6138:	61 05       	cpc	r22, r1
    613a:	08 94       	sec
    613c:	08 95       	ret

0000613e <_exit>:
    613e:	f8 94       	cli

00006140 <__stop_program>:
    6140:	ff cf       	rjmp	.-2      	; 0x6140 <__stop_program>
