
SM_Master.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00006cde  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000334  00800060  00006cde  00006d72  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000d  00800394  00800394  000070a6  2**0
                  ALLOC
  3 .stab         00005a18  00000000  00000000  000070a8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000012e1  00000000  00000000  0000cac0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  0000dda1  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f0  00000000  00000000  0000df41  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240c  00000000  00000000  0000e131  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001377  00000000  00000000  0001053d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d8  00000000  00000000  000118b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  00012a8c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f3  00000000  00000000  00012c4c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000009ce  00000000  00000000  00012f3f  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0001390d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 c1 32 	jmp	0x6582	; 0x6582 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	13 e0       	ldi	r17, 0x03	; 3
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee ed       	ldi	r30, 0xDE	; 222
      68:	fc e6       	ldi	r31, 0x6C	; 108
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a4 39       	cpi	r26, 0x94	; 148
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	13 e0       	ldi	r17, 0x03	; 3
      78:	a4 e9       	ldi	r26, 0x94	; 148
      7a:	b3 e0       	ldi	r27, 0x03	; 3
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a1 3a       	cpi	r26, 0xA1	; 161
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 4f 35 	call	0x6a9e	; 0x6a9e <main>
      8a:	0c 94 6d 36 	jmp	0x6cda	; 0x6cda <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 36 36 	jmp	0x6c6c	; 0x6c6c <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	ab e7       	ldi	r26, 0x7B	; 123
     128:	b2 e0       	ldi	r27, 0x02	; 2
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 52 36 	jmp	0x6ca4	; 0x6ca4 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 42 36 	jmp	0x6c84	; 0x6c84 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 56 05 	call	0xaac	; 0xaac <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 5e 36 	jmp	0x6cbc	; 0x6cbc <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 42 36 	jmp	0x6c84	; 0x6c84 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 56 05 	call	0xaac	; 0xaac <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 5e 36 	jmp	0x6cbc	; 0x6cbc <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 36 36 	jmp	0x6c6c	; 0x6c6c <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8b e7       	ldi	r24, 0x7B	; 123
     496:	92 e0       	ldi	r25, 0x02	; 2
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 56 05 	call	0xaac	; 0xaac <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 52 36 	jmp	0x6ca4	; 0x6ca4 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 3e 36 	jmp	0x6c7c	; 0x6c7c <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	6b e7       	ldi	r22, 0x7B	; 123
     69c:	72 e0       	ldi	r23, 0x02	; 2
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 56 05 	call	0xaac	; 0xaac <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 5a 36 	jmp	0x6cb4	; 0x6cb4 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 42 36 	jmp	0x6c84	; 0x6c84 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 a3 06 	call	0xd46	; 0xd46 <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 5e 36 	jmp	0x6cbc	; 0x6cbc <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 42 36 	jmp	0x6c84	; 0x6c84 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 a3 06 	call	0xd46	; 0xd46 <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 5e 36 	jmp	0x6cbc	; 0x6cbc <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 42 36 	jmp	0x6c84	; 0x6c84 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 a3 06 	call	0xd46	; 0xd46 <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 5e 36 	jmp	0x6cbc	; 0x6cbc <__epilogue_restores__+0x18>

000008aa <__floatsisf>:
     8aa:	a8 e0       	ldi	r26, 0x08	; 8
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 3f 36 	jmp	0x6c7e	; 0x6c7e <__prologue_saves__+0x12>
     8b6:	9b 01       	movw	r18, r22
     8b8:	ac 01       	movw	r20, r24
     8ba:	83 e0       	ldi	r24, 0x03	; 3
     8bc:	89 83       	std	Y+1, r24	; 0x01
     8be:	da 01       	movw	r26, r20
     8c0:	c9 01       	movw	r24, r18
     8c2:	88 27       	eor	r24, r24
     8c4:	b7 fd       	sbrc	r27, 7
     8c6:	83 95       	inc	r24
     8c8:	99 27       	eor	r25, r25
     8ca:	aa 27       	eor	r26, r26
     8cc:	bb 27       	eor	r27, r27
     8ce:	b8 2e       	mov	r11, r24
     8d0:	21 15       	cp	r18, r1
     8d2:	31 05       	cpc	r19, r1
     8d4:	41 05       	cpc	r20, r1
     8d6:	51 05       	cpc	r21, r1
     8d8:	19 f4       	brne	.+6      	; 0x8e0 <__floatsisf+0x36>
     8da:	82 e0       	ldi	r24, 0x02	; 2
     8dc:	89 83       	std	Y+1, r24	; 0x01
     8de:	3a c0       	rjmp	.+116    	; 0x954 <__floatsisf+0xaa>
     8e0:	88 23       	and	r24, r24
     8e2:	a9 f0       	breq	.+42     	; 0x90e <__floatsisf+0x64>
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	80 e0       	ldi	r24, 0x00	; 0
     8e8:	38 07       	cpc	r19, r24
     8ea:	80 e0       	ldi	r24, 0x00	; 0
     8ec:	48 07       	cpc	r20, r24
     8ee:	80 e8       	ldi	r24, 0x80	; 128
     8f0:	58 07       	cpc	r21, r24
     8f2:	29 f4       	brne	.+10     	; 0x8fe <__floatsisf+0x54>
     8f4:	60 e0       	ldi	r22, 0x00	; 0
     8f6:	70 e0       	ldi	r23, 0x00	; 0
     8f8:	80 e0       	ldi	r24, 0x00	; 0
     8fa:	9f ec       	ldi	r25, 0xCF	; 207
     8fc:	30 c0       	rjmp	.+96     	; 0x95e <__floatsisf+0xb4>
     8fe:	ee 24       	eor	r14, r14
     900:	ff 24       	eor	r15, r15
     902:	87 01       	movw	r16, r14
     904:	e2 1a       	sub	r14, r18
     906:	f3 0a       	sbc	r15, r19
     908:	04 0b       	sbc	r16, r20
     90a:	15 0b       	sbc	r17, r21
     90c:	02 c0       	rjmp	.+4      	; 0x912 <__floatsisf+0x68>
     90e:	79 01       	movw	r14, r18
     910:	8a 01       	movw	r16, r20
     912:	8e e1       	ldi	r24, 0x1E	; 30
     914:	c8 2e       	mov	r12, r24
     916:	d1 2c       	mov	r13, r1
     918:	dc 82       	std	Y+4, r13	; 0x04
     91a:	cb 82       	std	Y+3, r12	; 0x03
     91c:	ed 82       	std	Y+5, r14	; 0x05
     91e:	fe 82       	std	Y+6, r15	; 0x06
     920:	0f 83       	std	Y+7, r16	; 0x07
     922:	18 87       	std	Y+8, r17	; 0x08
     924:	c8 01       	movw	r24, r16
     926:	b7 01       	movw	r22, r14
     928:	0e 94 07 05 	call	0xa0e	; 0xa0e <__clzsi2>
     92c:	01 97       	sbiw	r24, 0x01	; 1
     92e:	18 16       	cp	r1, r24
     930:	19 06       	cpc	r1, r25
     932:	84 f4       	brge	.+32     	; 0x954 <__floatsisf+0xaa>
     934:	08 2e       	mov	r0, r24
     936:	04 c0       	rjmp	.+8      	; 0x940 <__floatsisf+0x96>
     938:	ee 0c       	add	r14, r14
     93a:	ff 1c       	adc	r15, r15
     93c:	00 1f       	adc	r16, r16
     93e:	11 1f       	adc	r17, r17
     940:	0a 94       	dec	r0
     942:	d2 f7       	brpl	.-12     	; 0x938 <__floatsisf+0x8e>
     944:	ed 82       	std	Y+5, r14	; 0x05
     946:	fe 82       	std	Y+6, r15	; 0x06
     948:	0f 83       	std	Y+7, r16	; 0x07
     94a:	18 87       	std	Y+8, r17	; 0x08
     94c:	c8 1a       	sub	r12, r24
     94e:	d9 0a       	sbc	r13, r25
     950:	dc 82       	std	Y+4, r13	; 0x04
     952:	cb 82       	std	Y+3, r12	; 0x03
     954:	ba 82       	std	Y+2, r11	; 0x02
     956:	ce 01       	movw	r24, r28
     958:	01 96       	adiw	r24, 0x01	; 1
     95a:	0e 94 56 05 	call	0xaac	; 0xaac <__pack_f>
     95e:	28 96       	adiw	r28, 0x08	; 8
     960:	e9 e0       	ldi	r30, 0x09	; 9
     962:	0c 94 5b 36 	jmp	0x6cb6	; 0x6cb6 <__epilogue_restores__+0x12>

00000966 <__fixsfsi>:
     966:	ac e0       	ldi	r26, 0x0C	; 12
     968:	b0 e0       	ldi	r27, 0x00	; 0
     96a:	e9 eb       	ldi	r30, 0xB9	; 185
     96c:	f4 e0       	ldi	r31, 0x04	; 4
     96e:	0c 94 46 36 	jmp	0x6c8c	; 0x6c8c <__prologue_saves__+0x20>
     972:	69 83       	std	Y+1, r22	; 0x01
     974:	7a 83       	std	Y+2, r23	; 0x02
     976:	8b 83       	std	Y+3, r24	; 0x03
     978:	9c 83       	std	Y+4, r25	; 0x04
     97a:	ce 01       	movw	r24, r28
     97c:	01 96       	adiw	r24, 0x01	; 1
     97e:	be 01       	movw	r22, r28
     980:	6b 5f       	subi	r22, 0xFB	; 251
     982:	7f 4f       	sbci	r23, 0xFF	; 255
     984:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     988:	8d 81       	ldd	r24, Y+5	; 0x05
     98a:	82 30       	cpi	r24, 0x02	; 2
     98c:	61 f1       	breq	.+88     	; 0x9e6 <__fixsfsi+0x80>
     98e:	82 30       	cpi	r24, 0x02	; 2
     990:	50 f1       	brcs	.+84     	; 0x9e6 <__fixsfsi+0x80>
     992:	84 30       	cpi	r24, 0x04	; 4
     994:	21 f4       	brne	.+8      	; 0x99e <__fixsfsi+0x38>
     996:	8e 81       	ldd	r24, Y+6	; 0x06
     998:	88 23       	and	r24, r24
     99a:	51 f1       	breq	.+84     	; 0x9f0 <__fixsfsi+0x8a>
     99c:	2e c0       	rjmp	.+92     	; 0x9fa <__fixsfsi+0x94>
     99e:	2f 81       	ldd	r18, Y+7	; 0x07
     9a0:	38 85       	ldd	r19, Y+8	; 0x08
     9a2:	37 fd       	sbrc	r19, 7
     9a4:	20 c0       	rjmp	.+64     	; 0x9e6 <__fixsfsi+0x80>
     9a6:	6e 81       	ldd	r22, Y+6	; 0x06
     9a8:	2f 31       	cpi	r18, 0x1F	; 31
     9aa:	31 05       	cpc	r19, r1
     9ac:	1c f0       	brlt	.+6      	; 0x9b4 <__fixsfsi+0x4e>
     9ae:	66 23       	and	r22, r22
     9b0:	f9 f0       	breq	.+62     	; 0x9f0 <__fixsfsi+0x8a>
     9b2:	23 c0       	rjmp	.+70     	; 0x9fa <__fixsfsi+0x94>
     9b4:	8e e1       	ldi	r24, 0x1E	; 30
     9b6:	90 e0       	ldi	r25, 0x00	; 0
     9b8:	82 1b       	sub	r24, r18
     9ba:	93 0b       	sbc	r25, r19
     9bc:	29 85       	ldd	r18, Y+9	; 0x09
     9be:	3a 85       	ldd	r19, Y+10	; 0x0a
     9c0:	4b 85       	ldd	r20, Y+11	; 0x0b
     9c2:	5c 85       	ldd	r21, Y+12	; 0x0c
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__fixsfsi+0x68>
     9c6:	56 95       	lsr	r21
     9c8:	47 95       	ror	r20
     9ca:	37 95       	ror	r19
     9cc:	27 95       	ror	r18
     9ce:	8a 95       	dec	r24
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__fixsfsi+0x60>
     9d2:	66 23       	and	r22, r22
     9d4:	b1 f0       	breq	.+44     	; 0xa02 <__fixsfsi+0x9c>
     9d6:	50 95       	com	r21
     9d8:	40 95       	com	r20
     9da:	30 95       	com	r19
     9dc:	21 95       	neg	r18
     9de:	3f 4f       	sbci	r19, 0xFF	; 255
     9e0:	4f 4f       	sbci	r20, 0xFF	; 255
     9e2:	5f 4f       	sbci	r21, 0xFF	; 255
     9e4:	0e c0       	rjmp	.+28     	; 0xa02 <__fixsfsi+0x9c>
     9e6:	20 e0       	ldi	r18, 0x00	; 0
     9e8:	30 e0       	ldi	r19, 0x00	; 0
     9ea:	40 e0       	ldi	r20, 0x00	; 0
     9ec:	50 e0       	ldi	r21, 0x00	; 0
     9ee:	09 c0       	rjmp	.+18     	; 0xa02 <__fixsfsi+0x9c>
     9f0:	2f ef       	ldi	r18, 0xFF	; 255
     9f2:	3f ef       	ldi	r19, 0xFF	; 255
     9f4:	4f ef       	ldi	r20, 0xFF	; 255
     9f6:	5f e7       	ldi	r21, 0x7F	; 127
     9f8:	04 c0       	rjmp	.+8      	; 0xa02 <__fixsfsi+0x9c>
     9fa:	20 e0       	ldi	r18, 0x00	; 0
     9fc:	30 e0       	ldi	r19, 0x00	; 0
     9fe:	40 e0       	ldi	r20, 0x00	; 0
     a00:	50 e8       	ldi	r21, 0x80	; 128
     a02:	b9 01       	movw	r22, r18
     a04:	ca 01       	movw	r24, r20
     a06:	2c 96       	adiw	r28, 0x0c	; 12
     a08:	e2 e0       	ldi	r30, 0x02	; 2
     a0a:	0c 94 62 36 	jmp	0x6cc4	; 0x6cc4 <__epilogue_restores__+0x20>

00000a0e <__clzsi2>:
     a0e:	ef 92       	push	r14
     a10:	ff 92       	push	r15
     a12:	0f 93       	push	r16
     a14:	1f 93       	push	r17
     a16:	7b 01       	movw	r14, r22
     a18:	8c 01       	movw	r16, r24
     a1a:	80 e0       	ldi	r24, 0x00	; 0
     a1c:	e8 16       	cp	r14, r24
     a1e:	80 e0       	ldi	r24, 0x00	; 0
     a20:	f8 06       	cpc	r15, r24
     a22:	81 e0       	ldi	r24, 0x01	; 1
     a24:	08 07       	cpc	r16, r24
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	18 07       	cpc	r17, r24
     a2a:	88 f4       	brcc	.+34     	; 0xa4e <__clzsi2+0x40>
     a2c:	8f ef       	ldi	r24, 0xFF	; 255
     a2e:	e8 16       	cp	r14, r24
     a30:	f1 04       	cpc	r15, r1
     a32:	01 05       	cpc	r16, r1
     a34:	11 05       	cpc	r17, r1
     a36:	31 f0       	breq	.+12     	; 0xa44 <__clzsi2+0x36>
     a38:	28 f0       	brcs	.+10     	; 0xa44 <__clzsi2+0x36>
     a3a:	88 e0       	ldi	r24, 0x08	; 8
     a3c:	90 e0       	ldi	r25, 0x00	; 0
     a3e:	a0 e0       	ldi	r26, 0x00	; 0
     a40:	b0 e0       	ldi	r27, 0x00	; 0
     a42:	17 c0       	rjmp	.+46     	; 0xa72 <__clzsi2+0x64>
     a44:	80 e0       	ldi	r24, 0x00	; 0
     a46:	90 e0       	ldi	r25, 0x00	; 0
     a48:	a0 e0       	ldi	r26, 0x00	; 0
     a4a:	b0 e0       	ldi	r27, 0x00	; 0
     a4c:	12 c0       	rjmp	.+36     	; 0xa72 <__clzsi2+0x64>
     a4e:	80 e0       	ldi	r24, 0x00	; 0
     a50:	e8 16       	cp	r14, r24
     a52:	80 e0       	ldi	r24, 0x00	; 0
     a54:	f8 06       	cpc	r15, r24
     a56:	80 e0       	ldi	r24, 0x00	; 0
     a58:	08 07       	cpc	r16, r24
     a5a:	81 e0       	ldi	r24, 0x01	; 1
     a5c:	18 07       	cpc	r17, r24
     a5e:	28 f0       	brcs	.+10     	; 0xa6a <__clzsi2+0x5c>
     a60:	88 e1       	ldi	r24, 0x18	; 24
     a62:	90 e0       	ldi	r25, 0x00	; 0
     a64:	a0 e0       	ldi	r26, 0x00	; 0
     a66:	b0 e0       	ldi	r27, 0x00	; 0
     a68:	04 c0       	rjmp	.+8      	; 0xa72 <__clzsi2+0x64>
     a6a:	80 e1       	ldi	r24, 0x10	; 16
     a6c:	90 e0       	ldi	r25, 0x00	; 0
     a6e:	a0 e0       	ldi	r26, 0x00	; 0
     a70:	b0 e0       	ldi	r27, 0x00	; 0
     a72:	20 e2       	ldi	r18, 0x20	; 32
     a74:	30 e0       	ldi	r19, 0x00	; 0
     a76:	40 e0       	ldi	r20, 0x00	; 0
     a78:	50 e0       	ldi	r21, 0x00	; 0
     a7a:	28 1b       	sub	r18, r24
     a7c:	39 0b       	sbc	r19, r25
     a7e:	4a 0b       	sbc	r20, r26
     a80:	5b 0b       	sbc	r21, r27
     a82:	04 c0       	rjmp	.+8      	; 0xa8c <__clzsi2+0x7e>
     a84:	16 95       	lsr	r17
     a86:	07 95       	ror	r16
     a88:	f7 94       	ror	r15
     a8a:	e7 94       	ror	r14
     a8c:	8a 95       	dec	r24
     a8e:	d2 f7       	brpl	.-12     	; 0xa84 <__clzsi2+0x76>
     a90:	f7 01       	movw	r30, r14
     a92:	ed 57       	subi	r30, 0x7D	; 125
     a94:	fd 4f       	sbci	r31, 0xFD	; 253
     a96:	80 81       	ld	r24, Z
     a98:	28 1b       	sub	r18, r24
     a9a:	31 09       	sbc	r19, r1
     a9c:	41 09       	sbc	r20, r1
     a9e:	51 09       	sbc	r21, r1
     aa0:	c9 01       	movw	r24, r18
     aa2:	1f 91       	pop	r17
     aa4:	0f 91       	pop	r16
     aa6:	ff 90       	pop	r15
     aa8:	ef 90       	pop	r14
     aaa:	08 95       	ret

00000aac <__pack_f>:
     aac:	df 92       	push	r13
     aae:	ef 92       	push	r14
     ab0:	ff 92       	push	r15
     ab2:	0f 93       	push	r16
     ab4:	1f 93       	push	r17
     ab6:	fc 01       	movw	r30, r24
     ab8:	e4 80       	ldd	r14, Z+4	; 0x04
     aba:	f5 80       	ldd	r15, Z+5	; 0x05
     abc:	06 81       	ldd	r16, Z+6	; 0x06
     abe:	17 81       	ldd	r17, Z+7	; 0x07
     ac0:	d1 80       	ldd	r13, Z+1	; 0x01
     ac2:	80 81       	ld	r24, Z
     ac4:	82 30       	cpi	r24, 0x02	; 2
     ac6:	48 f4       	brcc	.+18     	; 0xada <__pack_f+0x2e>
     ac8:	80 e0       	ldi	r24, 0x00	; 0
     aca:	90 e0       	ldi	r25, 0x00	; 0
     acc:	a0 e1       	ldi	r26, 0x10	; 16
     ace:	b0 e0       	ldi	r27, 0x00	; 0
     ad0:	e8 2a       	or	r14, r24
     ad2:	f9 2a       	or	r15, r25
     ad4:	0a 2b       	or	r16, r26
     ad6:	1b 2b       	or	r17, r27
     ad8:	a5 c0       	rjmp	.+330    	; 0xc24 <__pack_f+0x178>
     ada:	84 30       	cpi	r24, 0x04	; 4
     adc:	09 f4       	brne	.+2      	; 0xae0 <__pack_f+0x34>
     ade:	9f c0       	rjmp	.+318    	; 0xc1e <__pack_f+0x172>
     ae0:	82 30       	cpi	r24, 0x02	; 2
     ae2:	21 f4       	brne	.+8      	; 0xaec <__pack_f+0x40>
     ae4:	ee 24       	eor	r14, r14
     ae6:	ff 24       	eor	r15, r15
     ae8:	87 01       	movw	r16, r14
     aea:	05 c0       	rjmp	.+10     	; 0xaf6 <__pack_f+0x4a>
     aec:	e1 14       	cp	r14, r1
     aee:	f1 04       	cpc	r15, r1
     af0:	01 05       	cpc	r16, r1
     af2:	11 05       	cpc	r17, r1
     af4:	19 f4       	brne	.+6      	; 0xafc <__pack_f+0x50>
     af6:	e0 e0       	ldi	r30, 0x00	; 0
     af8:	f0 e0       	ldi	r31, 0x00	; 0
     afa:	96 c0       	rjmp	.+300    	; 0xc28 <__pack_f+0x17c>
     afc:	62 81       	ldd	r22, Z+2	; 0x02
     afe:	73 81       	ldd	r23, Z+3	; 0x03
     b00:	9f ef       	ldi	r25, 0xFF	; 255
     b02:	62 38       	cpi	r22, 0x82	; 130
     b04:	79 07       	cpc	r23, r25
     b06:	0c f0       	brlt	.+2      	; 0xb0a <__pack_f+0x5e>
     b08:	5b c0       	rjmp	.+182    	; 0xbc0 <__pack_f+0x114>
     b0a:	22 e8       	ldi	r18, 0x82	; 130
     b0c:	3f ef       	ldi	r19, 0xFF	; 255
     b0e:	26 1b       	sub	r18, r22
     b10:	37 0b       	sbc	r19, r23
     b12:	2a 31       	cpi	r18, 0x1A	; 26
     b14:	31 05       	cpc	r19, r1
     b16:	2c f0       	brlt	.+10     	; 0xb22 <__pack_f+0x76>
     b18:	20 e0       	ldi	r18, 0x00	; 0
     b1a:	30 e0       	ldi	r19, 0x00	; 0
     b1c:	40 e0       	ldi	r20, 0x00	; 0
     b1e:	50 e0       	ldi	r21, 0x00	; 0
     b20:	2a c0       	rjmp	.+84     	; 0xb76 <__pack_f+0xca>
     b22:	b8 01       	movw	r22, r16
     b24:	a7 01       	movw	r20, r14
     b26:	02 2e       	mov	r0, r18
     b28:	04 c0       	rjmp	.+8      	; 0xb32 <__pack_f+0x86>
     b2a:	76 95       	lsr	r23
     b2c:	67 95       	ror	r22
     b2e:	57 95       	ror	r21
     b30:	47 95       	ror	r20
     b32:	0a 94       	dec	r0
     b34:	d2 f7       	brpl	.-12     	; 0xb2a <__pack_f+0x7e>
     b36:	81 e0       	ldi	r24, 0x01	; 1
     b38:	90 e0       	ldi	r25, 0x00	; 0
     b3a:	a0 e0       	ldi	r26, 0x00	; 0
     b3c:	b0 e0       	ldi	r27, 0x00	; 0
     b3e:	04 c0       	rjmp	.+8      	; 0xb48 <__pack_f+0x9c>
     b40:	88 0f       	add	r24, r24
     b42:	99 1f       	adc	r25, r25
     b44:	aa 1f       	adc	r26, r26
     b46:	bb 1f       	adc	r27, r27
     b48:	2a 95       	dec	r18
     b4a:	d2 f7       	brpl	.-12     	; 0xb40 <__pack_f+0x94>
     b4c:	01 97       	sbiw	r24, 0x01	; 1
     b4e:	a1 09       	sbc	r26, r1
     b50:	b1 09       	sbc	r27, r1
     b52:	8e 21       	and	r24, r14
     b54:	9f 21       	and	r25, r15
     b56:	a0 23       	and	r26, r16
     b58:	b1 23       	and	r27, r17
     b5a:	00 97       	sbiw	r24, 0x00	; 0
     b5c:	a1 05       	cpc	r26, r1
     b5e:	b1 05       	cpc	r27, r1
     b60:	21 f0       	breq	.+8      	; 0xb6a <__pack_f+0xbe>
     b62:	81 e0       	ldi	r24, 0x01	; 1
     b64:	90 e0       	ldi	r25, 0x00	; 0
     b66:	a0 e0       	ldi	r26, 0x00	; 0
     b68:	b0 e0       	ldi	r27, 0x00	; 0
     b6a:	9a 01       	movw	r18, r20
     b6c:	ab 01       	movw	r20, r22
     b6e:	28 2b       	or	r18, r24
     b70:	39 2b       	or	r19, r25
     b72:	4a 2b       	or	r20, r26
     b74:	5b 2b       	or	r21, r27
     b76:	da 01       	movw	r26, r20
     b78:	c9 01       	movw	r24, r18
     b7a:	8f 77       	andi	r24, 0x7F	; 127
     b7c:	90 70       	andi	r25, 0x00	; 0
     b7e:	a0 70       	andi	r26, 0x00	; 0
     b80:	b0 70       	andi	r27, 0x00	; 0
     b82:	80 34       	cpi	r24, 0x40	; 64
     b84:	91 05       	cpc	r25, r1
     b86:	a1 05       	cpc	r26, r1
     b88:	b1 05       	cpc	r27, r1
     b8a:	39 f4       	brne	.+14     	; 0xb9a <__pack_f+0xee>
     b8c:	27 ff       	sbrs	r18, 7
     b8e:	09 c0       	rjmp	.+18     	; 0xba2 <__pack_f+0xf6>
     b90:	20 5c       	subi	r18, 0xC0	; 192
     b92:	3f 4f       	sbci	r19, 0xFF	; 255
     b94:	4f 4f       	sbci	r20, 0xFF	; 255
     b96:	5f 4f       	sbci	r21, 0xFF	; 255
     b98:	04 c0       	rjmp	.+8      	; 0xba2 <__pack_f+0xf6>
     b9a:	21 5c       	subi	r18, 0xC1	; 193
     b9c:	3f 4f       	sbci	r19, 0xFF	; 255
     b9e:	4f 4f       	sbci	r20, 0xFF	; 255
     ba0:	5f 4f       	sbci	r21, 0xFF	; 255
     ba2:	e0 e0       	ldi	r30, 0x00	; 0
     ba4:	f0 e0       	ldi	r31, 0x00	; 0
     ba6:	20 30       	cpi	r18, 0x00	; 0
     ba8:	a0 e0       	ldi	r26, 0x00	; 0
     baa:	3a 07       	cpc	r19, r26
     bac:	a0 e0       	ldi	r26, 0x00	; 0
     bae:	4a 07       	cpc	r20, r26
     bb0:	a0 e4       	ldi	r26, 0x40	; 64
     bb2:	5a 07       	cpc	r21, r26
     bb4:	10 f0       	brcs	.+4      	; 0xbba <__pack_f+0x10e>
     bb6:	e1 e0       	ldi	r30, 0x01	; 1
     bb8:	f0 e0       	ldi	r31, 0x00	; 0
     bba:	79 01       	movw	r14, r18
     bbc:	8a 01       	movw	r16, r20
     bbe:	27 c0       	rjmp	.+78     	; 0xc0e <__pack_f+0x162>
     bc0:	60 38       	cpi	r22, 0x80	; 128
     bc2:	71 05       	cpc	r23, r1
     bc4:	64 f5       	brge	.+88     	; 0xc1e <__pack_f+0x172>
     bc6:	fb 01       	movw	r30, r22
     bc8:	e1 58       	subi	r30, 0x81	; 129
     bca:	ff 4f       	sbci	r31, 0xFF	; 255
     bcc:	d8 01       	movw	r26, r16
     bce:	c7 01       	movw	r24, r14
     bd0:	8f 77       	andi	r24, 0x7F	; 127
     bd2:	90 70       	andi	r25, 0x00	; 0
     bd4:	a0 70       	andi	r26, 0x00	; 0
     bd6:	b0 70       	andi	r27, 0x00	; 0
     bd8:	80 34       	cpi	r24, 0x40	; 64
     bda:	91 05       	cpc	r25, r1
     bdc:	a1 05       	cpc	r26, r1
     bde:	b1 05       	cpc	r27, r1
     be0:	39 f4       	brne	.+14     	; 0xbf0 <__pack_f+0x144>
     be2:	e7 fe       	sbrs	r14, 7
     be4:	0d c0       	rjmp	.+26     	; 0xc00 <__pack_f+0x154>
     be6:	80 e4       	ldi	r24, 0x40	; 64
     be8:	90 e0       	ldi	r25, 0x00	; 0
     bea:	a0 e0       	ldi	r26, 0x00	; 0
     bec:	b0 e0       	ldi	r27, 0x00	; 0
     bee:	04 c0       	rjmp	.+8      	; 0xbf8 <__pack_f+0x14c>
     bf0:	8f e3       	ldi	r24, 0x3F	; 63
     bf2:	90 e0       	ldi	r25, 0x00	; 0
     bf4:	a0 e0       	ldi	r26, 0x00	; 0
     bf6:	b0 e0       	ldi	r27, 0x00	; 0
     bf8:	e8 0e       	add	r14, r24
     bfa:	f9 1e       	adc	r15, r25
     bfc:	0a 1f       	adc	r16, r26
     bfe:	1b 1f       	adc	r17, r27
     c00:	17 ff       	sbrs	r17, 7
     c02:	05 c0       	rjmp	.+10     	; 0xc0e <__pack_f+0x162>
     c04:	16 95       	lsr	r17
     c06:	07 95       	ror	r16
     c08:	f7 94       	ror	r15
     c0a:	e7 94       	ror	r14
     c0c:	31 96       	adiw	r30, 0x01	; 1
     c0e:	87 e0       	ldi	r24, 0x07	; 7
     c10:	16 95       	lsr	r17
     c12:	07 95       	ror	r16
     c14:	f7 94       	ror	r15
     c16:	e7 94       	ror	r14
     c18:	8a 95       	dec	r24
     c1a:	d1 f7       	brne	.-12     	; 0xc10 <__pack_f+0x164>
     c1c:	05 c0       	rjmp	.+10     	; 0xc28 <__pack_f+0x17c>
     c1e:	ee 24       	eor	r14, r14
     c20:	ff 24       	eor	r15, r15
     c22:	87 01       	movw	r16, r14
     c24:	ef ef       	ldi	r30, 0xFF	; 255
     c26:	f0 e0       	ldi	r31, 0x00	; 0
     c28:	6e 2f       	mov	r22, r30
     c2a:	67 95       	ror	r22
     c2c:	66 27       	eor	r22, r22
     c2e:	67 95       	ror	r22
     c30:	90 2f       	mov	r25, r16
     c32:	9f 77       	andi	r25, 0x7F	; 127
     c34:	d7 94       	ror	r13
     c36:	dd 24       	eor	r13, r13
     c38:	d7 94       	ror	r13
     c3a:	8e 2f       	mov	r24, r30
     c3c:	86 95       	lsr	r24
     c3e:	49 2f       	mov	r20, r25
     c40:	46 2b       	or	r20, r22
     c42:	58 2f       	mov	r21, r24
     c44:	5d 29       	or	r21, r13
     c46:	b7 01       	movw	r22, r14
     c48:	ca 01       	movw	r24, r20
     c4a:	1f 91       	pop	r17
     c4c:	0f 91       	pop	r16
     c4e:	ff 90       	pop	r15
     c50:	ef 90       	pop	r14
     c52:	df 90       	pop	r13
     c54:	08 95       	ret

00000c56 <__unpack_f>:
     c56:	fc 01       	movw	r30, r24
     c58:	db 01       	movw	r26, r22
     c5a:	40 81       	ld	r20, Z
     c5c:	51 81       	ldd	r21, Z+1	; 0x01
     c5e:	22 81       	ldd	r18, Z+2	; 0x02
     c60:	62 2f       	mov	r22, r18
     c62:	6f 77       	andi	r22, 0x7F	; 127
     c64:	70 e0       	ldi	r23, 0x00	; 0
     c66:	22 1f       	adc	r18, r18
     c68:	22 27       	eor	r18, r18
     c6a:	22 1f       	adc	r18, r18
     c6c:	93 81       	ldd	r25, Z+3	; 0x03
     c6e:	89 2f       	mov	r24, r25
     c70:	88 0f       	add	r24, r24
     c72:	82 2b       	or	r24, r18
     c74:	28 2f       	mov	r18, r24
     c76:	30 e0       	ldi	r19, 0x00	; 0
     c78:	99 1f       	adc	r25, r25
     c7a:	99 27       	eor	r25, r25
     c7c:	99 1f       	adc	r25, r25
     c7e:	11 96       	adiw	r26, 0x01	; 1
     c80:	9c 93       	st	X, r25
     c82:	11 97       	sbiw	r26, 0x01	; 1
     c84:	21 15       	cp	r18, r1
     c86:	31 05       	cpc	r19, r1
     c88:	a9 f5       	brne	.+106    	; 0xcf4 <__unpack_f+0x9e>
     c8a:	41 15       	cp	r20, r1
     c8c:	51 05       	cpc	r21, r1
     c8e:	61 05       	cpc	r22, r1
     c90:	71 05       	cpc	r23, r1
     c92:	11 f4       	brne	.+4      	; 0xc98 <__unpack_f+0x42>
     c94:	82 e0       	ldi	r24, 0x02	; 2
     c96:	37 c0       	rjmp	.+110    	; 0xd06 <__unpack_f+0xb0>
     c98:	82 e8       	ldi	r24, 0x82	; 130
     c9a:	9f ef       	ldi	r25, 0xFF	; 255
     c9c:	13 96       	adiw	r26, 0x03	; 3
     c9e:	9c 93       	st	X, r25
     ca0:	8e 93       	st	-X, r24
     ca2:	12 97       	sbiw	r26, 0x02	; 2
     ca4:	9a 01       	movw	r18, r20
     ca6:	ab 01       	movw	r20, r22
     ca8:	67 e0       	ldi	r22, 0x07	; 7
     caa:	22 0f       	add	r18, r18
     cac:	33 1f       	adc	r19, r19
     cae:	44 1f       	adc	r20, r20
     cb0:	55 1f       	adc	r21, r21
     cb2:	6a 95       	dec	r22
     cb4:	d1 f7       	brne	.-12     	; 0xcaa <__unpack_f+0x54>
     cb6:	83 e0       	ldi	r24, 0x03	; 3
     cb8:	8c 93       	st	X, r24
     cba:	0d c0       	rjmp	.+26     	; 0xcd6 <__unpack_f+0x80>
     cbc:	22 0f       	add	r18, r18
     cbe:	33 1f       	adc	r19, r19
     cc0:	44 1f       	adc	r20, r20
     cc2:	55 1f       	adc	r21, r21
     cc4:	12 96       	adiw	r26, 0x02	; 2
     cc6:	8d 91       	ld	r24, X+
     cc8:	9c 91       	ld	r25, X
     cca:	13 97       	sbiw	r26, 0x03	; 3
     ccc:	01 97       	sbiw	r24, 0x01	; 1
     cce:	13 96       	adiw	r26, 0x03	; 3
     cd0:	9c 93       	st	X, r25
     cd2:	8e 93       	st	-X, r24
     cd4:	12 97       	sbiw	r26, 0x02	; 2
     cd6:	20 30       	cpi	r18, 0x00	; 0
     cd8:	80 e0       	ldi	r24, 0x00	; 0
     cda:	38 07       	cpc	r19, r24
     cdc:	80 e0       	ldi	r24, 0x00	; 0
     cde:	48 07       	cpc	r20, r24
     ce0:	80 e4       	ldi	r24, 0x40	; 64
     ce2:	58 07       	cpc	r21, r24
     ce4:	58 f3       	brcs	.-42     	; 0xcbc <__unpack_f+0x66>
     ce6:	14 96       	adiw	r26, 0x04	; 4
     ce8:	2d 93       	st	X+, r18
     cea:	3d 93       	st	X+, r19
     cec:	4d 93       	st	X+, r20
     cee:	5c 93       	st	X, r21
     cf0:	17 97       	sbiw	r26, 0x07	; 7
     cf2:	08 95       	ret
     cf4:	2f 3f       	cpi	r18, 0xFF	; 255
     cf6:	31 05       	cpc	r19, r1
     cf8:	79 f4       	brne	.+30     	; 0xd18 <__unpack_f+0xc2>
     cfa:	41 15       	cp	r20, r1
     cfc:	51 05       	cpc	r21, r1
     cfe:	61 05       	cpc	r22, r1
     d00:	71 05       	cpc	r23, r1
     d02:	19 f4       	brne	.+6      	; 0xd0a <__unpack_f+0xb4>
     d04:	84 e0       	ldi	r24, 0x04	; 4
     d06:	8c 93       	st	X, r24
     d08:	08 95       	ret
     d0a:	64 ff       	sbrs	r22, 4
     d0c:	03 c0       	rjmp	.+6      	; 0xd14 <__unpack_f+0xbe>
     d0e:	81 e0       	ldi	r24, 0x01	; 1
     d10:	8c 93       	st	X, r24
     d12:	12 c0       	rjmp	.+36     	; 0xd38 <__unpack_f+0xe2>
     d14:	1c 92       	st	X, r1
     d16:	10 c0       	rjmp	.+32     	; 0xd38 <__unpack_f+0xe2>
     d18:	2f 57       	subi	r18, 0x7F	; 127
     d1a:	30 40       	sbci	r19, 0x00	; 0
     d1c:	13 96       	adiw	r26, 0x03	; 3
     d1e:	3c 93       	st	X, r19
     d20:	2e 93       	st	-X, r18
     d22:	12 97       	sbiw	r26, 0x02	; 2
     d24:	83 e0       	ldi	r24, 0x03	; 3
     d26:	8c 93       	st	X, r24
     d28:	87 e0       	ldi	r24, 0x07	; 7
     d2a:	44 0f       	add	r20, r20
     d2c:	55 1f       	adc	r21, r21
     d2e:	66 1f       	adc	r22, r22
     d30:	77 1f       	adc	r23, r23
     d32:	8a 95       	dec	r24
     d34:	d1 f7       	brne	.-12     	; 0xd2a <__unpack_f+0xd4>
     d36:	70 64       	ori	r23, 0x40	; 64
     d38:	14 96       	adiw	r26, 0x04	; 4
     d3a:	4d 93       	st	X+, r20
     d3c:	5d 93       	st	X+, r21
     d3e:	6d 93       	st	X+, r22
     d40:	7c 93       	st	X, r23
     d42:	17 97       	sbiw	r26, 0x07	; 7
     d44:	08 95       	ret

00000d46 <__fpcmp_parts_f>:
     d46:	1f 93       	push	r17
     d48:	dc 01       	movw	r26, r24
     d4a:	fb 01       	movw	r30, r22
     d4c:	9c 91       	ld	r25, X
     d4e:	92 30       	cpi	r25, 0x02	; 2
     d50:	08 f4       	brcc	.+2      	; 0xd54 <__fpcmp_parts_f+0xe>
     d52:	47 c0       	rjmp	.+142    	; 0xde2 <__fpcmp_parts_f+0x9c>
     d54:	80 81       	ld	r24, Z
     d56:	82 30       	cpi	r24, 0x02	; 2
     d58:	08 f4       	brcc	.+2      	; 0xd5c <__fpcmp_parts_f+0x16>
     d5a:	43 c0       	rjmp	.+134    	; 0xde2 <__fpcmp_parts_f+0x9c>
     d5c:	94 30       	cpi	r25, 0x04	; 4
     d5e:	51 f4       	brne	.+20     	; 0xd74 <__fpcmp_parts_f+0x2e>
     d60:	11 96       	adiw	r26, 0x01	; 1
     d62:	1c 91       	ld	r17, X
     d64:	84 30       	cpi	r24, 0x04	; 4
     d66:	99 f5       	brne	.+102    	; 0xdce <__fpcmp_parts_f+0x88>
     d68:	81 81       	ldd	r24, Z+1	; 0x01
     d6a:	68 2f       	mov	r22, r24
     d6c:	70 e0       	ldi	r23, 0x00	; 0
     d6e:	61 1b       	sub	r22, r17
     d70:	71 09       	sbc	r23, r1
     d72:	3f c0       	rjmp	.+126    	; 0xdf2 <__fpcmp_parts_f+0xac>
     d74:	84 30       	cpi	r24, 0x04	; 4
     d76:	21 f0       	breq	.+8      	; 0xd80 <__fpcmp_parts_f+0x3a>
     d78:	92 30       	cpi	r25, 0x02	; 2
     d7a:	31 f4       	brne	.+12     	; 0xd88 <__fpcmp_parts_f+0x42>
     d7c:	82 30       	cpi	r24, 0x02	; 2
     d7e:	b9 f1       	breq	.+110    	; 0xdee <__fpcmp_parts_f+0xa8>
     d80:	81 81       	ldd	r24, Z+1	; 0x01
     d82:	88 23       	and	r24, r24
     d84:	89 f1       	breq	.+98     	; 0xde8 <__fpcmp_parts_f+0xa2>
     d86:	2d c0       	rjmp	.+90     	; 0xde2 <__fpcmp_parts_f+0x9c>
     d88:	11 96       	adiw	r26, 0x01	; 1
     d8a:	1c 91       	ld	r17, X
     d8c:	11 97       	sbiw	r26, 0x01	; 1
     d8e:	82 30       	cpi	r24, 0x02	; 2
     d90:	f1 f0       	breq	.+60     	; 0xdce <__fpcmp_parts_f+0x88>
     d92:	81 81       	ldd	r24, Z+1	; 0x01
     d94:	18 17       	cp	r17, r24
     d96:	d9 f4       	brne	.+54     	; 0xdce <__fpcmp_parts_f+0x88>
     d98:	12 96       	adiw	r26, 0x02	; 2
     d9a:	2d 91       	ld	r18, X+
     d9c:	3c 91       	ld	r19, X
     d9e:	13 97       	sbiw	r26, 0x03	; 3
     da0:	82 81       	ldd	r24, Z+2	; 0x02
     da2:	93 81       	ldd	r25, Z+3	; 0x03
     da4:	82 17       	cp	r24, r18
     da6:	93 07       	cpc	r25, r19
     da8:	94 f0       	brlt	.+36     	; 0xdce <__fpcmp_parts_f+0x88>
     daa:	28 17       	cp	r18, r24
     dac:	39 07       	cpc	r19, r25
     dae:	bc f0       	brlt	.+46     	; 0xdde <__fpcmp_parts_f+0x98>
     db0:	14 96       	adiw	r26, 0x04	; 4
     db2:	8d 91       	ld	r24, X+
     db4:	9d 91       	ld	r25, X+
     db6:	0d 90       	ld	r0, X+
     db8:	bc 91       	ld	r27, X
     dba:	a0 2d       	mov	r26, r0
     dbc:	24 81       	ldd	r18, Z+4	; 0x04
     dbe:	35 81       	ldd	r19, Z+5	; 0x05
     dc0:	46 81       	ldd	r20, Z+6	; 0x06
     dc2:	57 81       	ldd	r21, Z+7	; 0x07
     dc4:	28 17       	cp	r18, r24
     dc6:	39 07       	cpc	r19, r25
     dc8:	4a 07       	cpc	r20, r26
     dca:	5b 07       	cpc	r21, r27
     dcc:	18 f4       	brcc	.+6      	; 0xdd4 <__fpcmp_parts_f+0x8e>
     dce:	11 23       	and	r17, r17
     dd0:	41 f0       	breq	.+16     	; 0xde2 <__fpcmp_parts_f+0x9c>
     dd2:	0a c0       	rjmp	.+20     	; 0xde8 <__fpcmp_parts_f+0xa2>
     dd4:	82 17       	cp	r24, r18
     dd6:	93 07       	cpc	r25, r19
     dd8:	a4 07       	cpc	r26, r20
     dda:	b5 07       	cpc	r27, r21
     ddc:	40 f4       	brcc	.+16     	; 0xdee <__fpcmp_parts_f+0xa8>
     dde:	11 23       	and	r17, r17
     de0:	19 f0       	breq	.+6      	; 0xde8 <__fpcmp_parts_f+0xa2>
     de2:	61 e0       	ldi	r22, 0x01	; 1
     de4:	70 e0       	ldi	r23, 0x00	; 0
     de6:	05 c0       	rjmp	.+10     	; 0xdf2 <__fpcmp_parts_f+0xac>
     de8:	6f ef       	ldi	r22, 0xFF	; 255
     dea:	7f ef       	ldi	r23, 0xFF	; 255
     dec:	02 c0       	rjmp	.+4      	; 0xdf2 <__fpcmp_parts_f+0xac>
     dee:	60 e0       	ldi	r22, 0x00	; 0
     df0:	70 e0       	ldi	r23, 0x00	; 0
     df2:	cb 01       	movw	r24, r22
     df4:	1f 91       	pop	r17
     df6:	08 95       	ret

00000df8 <DIO_U8SetPinDirection>:
#include "DIO_Interface.h"
#include "DIO_Private.h"
#include "DIO_Config.h"

u8 DIO_U8SetPinDirection(u8 Copy_U8PortNumb,u8 Copy_U8PinNumb,u8 Copy_U8Directon)
{
     df8:	df 93       	push	r29
     dfa:	cf 93       	push	r28
     dfc:	cd b7       	in	r28, 0x3d	; 61
     dfe:	de b7       	in	r29, 0x3e	; 62
     e00:	2a 97       	sbiw	r28, 0x0a	; 10
     e02:	0f b6       	in	r0, 0x3f	; 63
     e04:	f8 94       	cli
     e06:	de bf       	out	0x3e, r29	; 62
     e08:	0f be       	out	0x3f, r0	; 63
     e0a:	cd bf       	out	0x3d, r28	; 61
     e0c:	8a 83       	std	Y+2, r24	; 0x02
     e0e:	6b 83       	std	Y+3, r22	; 0x03
     e10:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_U8ErrorState=ERROR_STATE_NOK;
     e12:	19 82       	std	Y+1, r1	; 0x01
	if((Copy_U8PortNumb <= DIO_PORTD) && (Copy_U8PinNumb <= DIO_PIN7) &&(Copy_U8Directon <= DIO_PIN_OUT))
     e14:	8a 81       	ldd	r24, Y+2	; 0x02
     e16:	84 30       	cpi	r24, 0x04	; 4
     e18:	08 f0       	brcs	.+2      	; 0xe1c <DIO_U8SetPinDirection+0x24>
     e1a:	fb c0       	rjmp	.+502    	; 0x1012 <DIO_U8SetPinDirection+0x21a>
     e1c:	8b 81       	ldd	r24, Y+3	; 0x03
     e1e:	88 30       	cpi	r24, 0x08	; 8
     e20:	08 f0       	brcs	.+2      	; 0xe24 <DIO_U8SetPinDirection+0x2c>
     e22:	f7 c0       	rjmp	.+494    	; 0x1012 <DIO_U8SetPinDirection+0x21a>
     e24:	8c 81       	ldd	r24, Y+4	; 0x04
     e26:	82 30       	cpi	r24, 0x02	; 2
     e28:	08 f0       	brcs	.+2      	; 0xe2c <DIO_U8SetPinDirection+0x34>
     e2a:	f3 c0       	rjmp	.+486    	; 0x1012 <DIO_U8SetPinDirection+0x21a>
	{
		switch(Copy_U8Directon)
     e2c:	8c 81       	ldd	r24, Y+4	; 0x04
     e2e:	28 2f       	mov	r18, r24
     e30:	30 e0       	ldi	r19, 0x00	; 0
     e32:	3a 87       	std	Y+10, r19	; 0x0a
     e34:	29 87       	std	Y+9, r18	; 0x09
     e36:	89 85       	ldd	r24, Y+9	; 0x09
     e38:	9a 85       	ldd	r25, Y+10	; 0x0a
     e3a:	00 97       	sbiw	r24, 0x00	; 0
     e3c:	09 f4       	brne	.+2      	; 0xe40 <DIO_U8SetPinDirection+0x48>
     e3e:	75 c0       	rjmp	.+234    	; 0xf2a <DIO_U8SetPinDirection+0x132>
     e40:	29 85       	ldd	r18, Y+9	; 0x09
     e42:	3a 85       	ldd	r19, Y+10	; 0x0a
     e44:	21 30       	cpi	r18, 0x01	; 1
     e46:	31 05       	cpc	r19, r1
     e48:	09 f0       	breq	.+2      	; 0xe4c <DIO_U8SetPinDirection+0x54>
     e4a:	e5 c0       	rjmp	.+458    	; 0x1016 <DIO_U8SetPinDirection+0x21e>
		{
			case DIO_PIN_OUT:
			switch(Copy_U8PortNumb)
     e4c:	8a 81       	ldd	r24, Y+2	; 0x02
     e4e:	28 2f       	mov	r18, r24
     e50:	30 e0       	ldi	r19, 0x00	; 0
     e52:	38 87       	std	Y+8, r19	; 0x08
     e54:	2f 83       	std	Y+7, r18	; 0x07
     e56:	8f 81       	ldd	r24, Y+7	; 0x07
     e58:	98 85       	ldd	r25, Y+8	; 0x08
     e5a:	81 30       	cpi	r24, 0x01	; 1
     e5c:	91 05       	cpc	r25, r1
     e5e:	49 f1       	breq	.+82     	; 0xeb2 <DIO_U8SetPinDirection+0xba>
     e60:	2f 81       	ldd	r18, Y+7	; 0x07
     e62:	38 85       	ldd	r19, Y+8	; 0x08
     e64:	22 30       	cpi	r18, 0x02	; 2
     e66:	31 05       	cpc	r19, r1
     e68:	2c f4       	brge	.+10     	; 0xe74 <DIO_U8SetPinDirection+0x7c>
     e6a:	8f 81       	ldd	r24, Y+7	; 0x07
     e6c:	98 85       	ldd	r25, Y+8	; 0x08
     e6e:	00 97       	sbiw	r24, 0x00	; 0
     e70:	61 f0       	breq	.+24     	; 0xe8a <DIO_U8SetPinDirection+0x92>
     e72:	d1 c0       	rjmp	.+418    	; 0x1016 <DIO_U8SetPinDirection+0x21e>
     e74:	2f 81       	ldd	r18, Y+7	; 0x07
     e76:	38 85       	ldd	r19, Y+8	; 0x08
     e78:	22 30       	cpi	r18, 0x02	; 2
     e7a:	31 05       	cpc	r19, r1
     e7c:	71 f1       	breq	.+92     	; 0xeda <DIO_U8SetPinDirection+0xe2>
     e7e:	8f 81       	ldd	r24, Y+7	; 0x07
     e80:	98 85       	ldd	r25, Y+8	; 0x08
     e82:	83 30       	cpi	r24, 0x03	; 3
     e84:	91 05       	cpc	r25, r1
     e86:	e9 f1       	breq	.+122    	; 0xf02 <DIO_U8SetPinDirection+0x10a>
     e88:	c6 c0       	rjmp	.+396    	; 0x1016 <DIO_U8SetPinDirection+0x21e>
			{
				case DIO_PORTA: SET_BIT(DDRA,Copy_U8PinNumb);break;
     e8a:	aa e3       	ldi	r26, 0x3A	; 58
     e8c:	b0 e0       	ldi	r27, 0x00	; 0
     e8e:	ea e3       	ldi	r30, 0x3A	; 58
     e90:	f0 e0       	ldi	r31, 0x00	; 0
     e92:	80 81       	ld	r24, Z
     e94:	48 2f       	mov	r20, r24
     e96:	8b 81       	ldd	r24, Y+3	; 0x03
     e98:	28 2f       	mov	r18, r24
     e9a:	30 e0       	ldi	r19, 0x00	; 0
     e9c:	81 e0       	ldi	r24, 0x01	; 1
     e9e:	90 e0       	ldi	r25, 0x00	; 0
     ea0:	02 2e       	mov	r0, r18
     ea2:	02 c0       	rjmp	.+4      	; 0xea8 <DIO_U8SetPinDirection+0xb0>
     ea4:	88 0f       	add	r24, r24
     ea6:	99 1f       	adc	r25, r25
     ea8:	0a 94       	dec	r0
     eaa:	e2 f7       	brpl	.-8      	; 0xea4 <DIO_U8SetPinDirection+0xac>
     eac:	84 2b       	or	r24, r20
     eae:	8c 93       	st	X, r24
     eb0:	b2 c0       	rjmp	.+356    	; 0x1016 <DIO_U8SetPinDirection+0x21e>
				case DIO_PORTB: SET_BIT(DDRB,Copy_U8PinNumb);break;
     eb2:	a7 e3       	ldi	r26, 0x37	; 55
     eb4:	b0 e0       	ldi	r27, 0x00	; 0
     eb6:	e7 e3       	ldi	r30, 0x37	; 55
     eb8:	f0 e0       	ldi	r31, 0x00	; 0
     eba:	80 81       	ld	r24, Z
     ebc:	48 2f       	mov	r20, r24
     ebe:	8b 81       	ldd	r24, Y+3	; 0x03
     ec0:	28 2f       	mov	r18, r24
     ec2:	30 e0       	ldi	r19, 0x00	; 0
     ec4:	81 e0       	ldi	r24, 0x01	; 1
     ec6:	90 e0       	ldi	r25, 0x00	; 0
     ec8:	02 2e       	mov	r0, r18
     eca:	02 c0       	rjmp	.+4      	; 0xed0 <DIO_U8SetPinDirection+0xd8>
     ecc:	88 0f       	add	r24, r24
     ece:	99 1f       	adc	r25, r25
     ed0:	0a 94       	dec	r0
     ed2:	e2 f7       	brpl	.-8      	; 0xecc <DIO_U8SetPinDirection+0xd4>
     ed4:	84 2b       	or	r24, r20
     ed6:	8c 93       	st	X, r24
     ed8:	9e c0       	rjmp	.+316    	; 0x1016 <DIO_U8SetPinDirection+0x21e>
				case DIO_PORTC: SET_BIT(DDRC,Copy_U8PinNumb);break;
     eda:	a4 e3       	ldi	r26, 0x34	; 52
     edc:	b0 e0       	ldi	r27, 0x00	; 0
     ede:	e4 e3       	ldi	r30, 0x34	; 52
     ee0:	f0 e0       	ldi	r31, 0x00	; 0
     ee2:	80 81       	ld	r24, Z
     ee4:	48 2f       	mov	r20, r24
     ee6:	8b 81       	ldd	r24, Y+3	; 0x03
     ee8:	28 2f       	mov	r18, r24
     eea:	30 e0       	ldi	r19, 0x00	; 0
     eec:	81 e0       	ldi	r24, 0x01	; 1
     eee:	90 e0       	ldi	r25, 0x00	; 0
     ef0:	02 2e       	mov	r0, r18
     ef2:	02 c0       	rjmp	.+4      	; 0xef8 <DIO_U8SetPinDirection+0x100>
     ef4:	88 0f       	add	r24, r24
     ef6:	99 1f       	adc	r25, r25
     ef8:	0a 94       	dec	r0
     efa:	e2 f7       	brpl	.-8      	; 0xef4 <DIO_U8SetPinDirection+0xfc>
     efc:	84 2b       	or	r24, r20
     efe:	8c 93       	st	X, r24
     f00:	8a c0       	rjmp	.+276    	; 0x1016 <DIO_U8SetPinDirection+0x21e>
				case DIO_PORTD: SET_BIT(DDRD,Copy_U8PinNumb);break;
     f02:	a1 e3       	ldi	r26, 0x31	; 49
     f04:	b0 e0       	ldi	r27, 0x00	; 0
     f06:	e1 e3       	ldi	r30, 0x31	; 49
     f08:	f0 e0       	ldi	r31, 0x00	; 0
     f0a:	80 81       	ld	r24, Z
     f0c:	48 2f       	mov	r20, r24
     f0e:	8b 81       	ldd	r24, Y+3	; 0x03
     f10:	28 2f       	mov	r18, r24
     f12:	30 e0       	ldi	r19, 0x00	; 0
     f14:	81 e0       	ldi	r24, 0x01	; 1
     f16:	90 e0       	ldi	r25, 0x00	; 0
     f18:	02 2e       	mov	r0, r18
     f1a:	02 c0       	rjmp	.+4      	; 0xf20 <DIO_U8SetPinDirection+0x128>
     f1c:	88 0f       	add	r24, r24
     f1e:	99 1f       	adc	r25, r25
     f20:	0a 94       	dec	r0
     f22:	e2 f7       	brpl	.-8      	; 0xf1c <DIO_U8SetPinDirection+0x124>
     f24:	84 2b       	or	r24, r20
     f26:	8c 93       	st	X, r24
     f28:	76 c0       	rjmp	.+236    	; 0x1016 <DIO_U8SetPinDirection+0x21e>
			}
			break;
			case DIO_PIN_IN:
			switch(Copy_U8PortNumb)
     f2a:	8a 81       	ldd	r24, Y+2	; 0x02
     f2c:	28 2f       	mov	r18, r24
     f2e:	30 e0       	ldi	r19, 0x00	; 0
     f30:	3e 83       	std	Y+6, r19	; 0x06
     f32:	2d 83       	std	Y+5, r18	; 0x05
     f34:	8d 81       	ldd	r24, Y+5	; 0x05
     f36:	9e 81       	ldd	r25, Y+6	; 0x06
     f38:	81 30       	cpi	r24, 0x01	; 1
     f3a:	91 05       	cpc	r25, r1
     f3c:	59 f1       	breq	.+86     	; 0xf94 <DIO_U8SetPinDirection+0x19c>
     f3e:	2d 81       	ldd	r18, Y+5	; 0x05
     f40:	3e 81       	ldd	r19, Y+6	; 0x06
     f42:	22 30       	cpi	r18, 0x02	; 2
     f44:	31 05       	cpc	r19, r1
     f46:	2c f4       	brge	.+10     	; 0xf52 <DIO_U8SetPinDirection+0x15a>
     f48:	8d 81       	ldd	r24, Y+5	; 0x05
     f4a:	9e 81       	ldd	r25, Y+6	; 0x06
     f4c:	00 97       	sbiw	r24, 0x00	; 0
     f4e:	69 f0       	breq	.+26     	; 0xf6a <DIO_U8SetPinDirection+0x172>
     f50:	62 c0       	rjmp	.+196    	; 0x1016 <DIO_U8SetPinDirection+0x21e>
     f52:	2d 81       	ldd	r18, Y+5	; 0x05
     f54:	3e 81       	ldd	r19, Y+6	; 0x06
     f56:	22 30       	cpi	r18, 0x02	; 2
     f58:	31 05       	cpc	r19, r1
     f5a:	89 f1       	breq	.+98     	; 0xfbe <DIO_U8SetPinDirection+0x1c6>
     f5c:	8d 81       	ldd	r24, Y+5	; 0x05
     f5e:	9e 81       	ldd	r25, Y+6	; 0x06
     f60:	83 30       	cpi	r24, 0x03	; 3
     f62:	91 05       	cpc	r25, r1
     f64:	09 f4       	brne	.+2      	; 0xf68 <DIO_U8SetPinDirection+0x170>
     f66:	40 c0       	rjmp	.+128    	; 0xfe8 <DIO_U8SetPinDirection+0x1f0>
     f68:	56 c0       	rjmp	.+172    	; 0x1016 <DIO_U8SetPinDirection+0x21e>
			{
				case DIO_PORTA: CLR_BIT(DDRA,Copy_U8PinNumb);break;
     f6a:	aa e3       	ldi	r26, 0x3A	; 58
     f6c:	b0 e0       	ldi	r27, 0x00	; 0
     f6e:	ea e3       	ldi	r30, 0x3A	; 58
     f70:	f0 e0       	ldi	r31, 0x00	; 0
     f72:	80 81       	ld	r24, Z
     f74:	48 2f       	mov	r20, r24
     f76:	8b 81       	ldd	r24, Y+3	; 0x03
     f78:	28 2f       	mov	r18, r24
     f7a:	30 e0       	ldi	r19, 0x00	; 0
     f7c:	81 e0       	ldi	r24, 0x01	; 1
     f7e:	90 e0       	ldi	r25, 0x00	; 0
     f80:	02 2e       	mov	r0, r18
     f82:	02 c0       	rjmp	.+4      	; 0xf88 <DIO_U8SetPinDirection+0x190>
     f84:	88 0f       	add	r24, r24
     f86:	99 1f       	adc	r25, r25
     f88:	0a 94       	dec	r0
     f8a:	e2 f7       	brpl	.-8      	; 0xf84 <DIO_U8SetPinDirection+0x18c>
     f8c:	80 95       	com	r24
     f8e:	84 23       	and	r24, r20
     f90:	8c 93       	st	X, r24
     f92:	41 c0       	rjmp	.+130    	; 0x1016 <DIO_U8SetPinDirection+0x21e>
				case DIO_PORTB: CLR_BIT(DDRB,Copy_U8PinNumb);break;
     f94:	a7 e3       	ldi	r26, 0x37	; 55
     f96:	b0 e0       	ldi	r27, 0x00	; 0
     f98:	e7 e3       	ldi	r30, 0x37	; 55
     f9a:	f0 e0       	ldi	r31, 0x00	; 0
     f9c:	80 81       	ld	r24, Z
     f9e:	48 2f       	mov	r20, r24
     fa0:	8b 81       	ldd	r24, Y+3	; 0x03
     fa2:	28 2f       	mov	r18, r24
     fa4:	30 e0       	ldi	r19, 0x00	; 0
     fa6:	81 e0       	ldi	r24, 0x01	; 1
     fa8:	90 e0       	ldi	r25, 0x00	; 0
     faa:	02 2e       	mov	r0, r18
     fac:	02 c0       	rjmp	.+4      	; 0xfb2 <DIO_U8SetPinDirection+0x1ba>
     fae:	88 0f       	add	r24, r24
     fb0:	99 1f       	adc	r25, r25
     fb2:	0a 94       	dec	r0
     fb4:	e2 f7       	brpl	.-8      	; 0xfae <DIO_U8SetPinDirection+0x1b6>
     fb6:	80 95       	com	r24
     fb8:	84 23       	and	r24, r20
     fba:	8c 93       	st	X, r24
     fbc:	2c c0       	rjmp	.+88     	; 0x1016 <DIO_U8SetPinDirection+0x21e>
				case DIO_PORTC: CLR_BIT(DDRC,Copy_U8PinNumb);break;
     fbe:	a4 e3       	ldi	r26, 0x34	; 52
     fc0:	b0 e0       	ldi	r27, 0x00	; 0
     fc2:	e4 e3       	ldi	r30, 0x34	; 52
     fc4:	f0 e0       	ldi	r31, 0x00	; 0
     fc6:	80 81       	ld	r24, Z
     fc8:	48 2f       	mov	r20, r24
     fca:	8b 81       	ldd	r24, Y+3	; 0x03
     fcc:	28 2f       	mov	r18, r24
     fce:	30 e0       	ldi	r19, 0x00	; 0
     fd0:	81 e0       	ldi	r24, 0x01	; 1
     fd2:	90 e0       	ldi	r25, 0x00	; 0
     fd4:	02 2e       	mov	r0, r18
     fd6:	02 c0       	rjmp	.+4      	; 0xfdc <DIO_U8SetPinDirection+0x1e4>
     fd8:	88 0f       	add	r24, r24
     fda:	99 1f       	adc	r25, r25
     fdc:	0a 94       	dec	r0
     fde:	e2 f7       	brpl	.-8      	; 0xfd8 <DIO_U8SetPinDirection+0x1e0>
     fe0:	80 95       	com	r24
     fe2:	84 23       	and	r24, r20
     fe4:	8c 93       	st	X, r24
     fe6:	17 c0       	rjmp	.+46     	; 0x1016 <DIO_U8SetPinDirection+0x21e>
				case DIO_PORTD: CLR_BIT(DDRD,Copy_U8PinNumb);break;
     fe8:	a1 e3       	ldi	r26, 0x31	; 49
     fea:	b0 e0       	ldi	r27, 0x00	; 0
     fec:	e1 e3       	ldi	r30, 0x31	; 49
     fee:	f0 e0       	ldi	r31, 0x00	; 0
     ff0:	80 81       	ld	r24, Z
     ff2:	48 2f       	mov	r20, r24
     ff4:	8b 81       	ldd	r24, Y+3	; 0x03
     ff6:	28 2f       	mov	r18, r24
     ff8:	30 e0       	ldi	r19, 0x00	; 0
     ffa:	81 e0       	ldi	r24, 0x01	; 1
     ffc:	90 e0       	ldi	r25, 0x00	; 0
     ffe:	02 2e       	mov	r0, r18
    1000:	02 c0       	rjmp	.+4      	; 0x1006 <DIO_U8SetPinDirection+0x20e>
    1002:	88 0f       	add	r24, r24
    1004:	99 1f       	adc	r25, r25
    1006:	0a 94       	dec	r0
    1008:	e2 f7       	brpl	.-8      	; 0x1002 <DIO_U8SetPinDirection+0x20a>
    100a:	80 95       	com	r24
    100c:	84 23       	and	r24, r20
    100e:	8c 93       	st	X, r24
    1010:	02 c0       	rjmp	.+4      	; 0x1016 <DIO_U8SetPinDirection+0x21e>
			
		}
	}
	else
	{
		 Local_U8ErrorState=ERROR_STATE_OK;
    1012:	81 e0       	ldi	r24, 0x01	; 1
    1014:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_U8ErrorState;
    1016:	89 81       	ldd	r24, Y+1	; 0x01
}
    1018:	2a 96       	adiw	r28, 0x0a	; 10
    101a:	0f b6       	in	r0, 0x3f	; 63
    101c:	f8 94       	cli
    101e:	de bf       	out	0x3e, r29	; 62
    1020:	0f be       	out	0x3f, r0	; 63
    1022:	cd bf       	out	0x3d, r28	; 61
    1024:	cf 91       	pop	r28
    1026:	df 91       	pop	r29
    1028:	08 95       	ret

0000102a <DIO_U8SetPinValue>:

u8 DIO_U8SetPinValue(u8 Copy_U8PortNumb,u8 Copy_U8PinNumb,u8 Copy_U8Value)
{
    102a:	df 93       	push	r29
    102c:	cf 93       	push	r28
    102e:	cd b7       	in	r28, 0x3d	; 61
    1030:	de b7       	in	r29, 0x3e	; 62
    1032:	2a 97       	sbiw	r28, 0x0a	; 10
    1034:	0f b6       	in	r0, 0x3f	; 63
    1036:	f8 94       	cli
    1038:	de bf       	out	0x3e, r29	; 62
    103a:	0f be       	out	0x3f, r0	; 63
    103c:	cd bf       	out	0x3d, r28	; 61
    103e:	8a 83       	std	Y+2, r24	; 0x02
    1040:	6b 83       	std	Y+3, r22	; 0x03
    1042:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_U8ErrorState=ERROR_STATE_NOK;
    1044:	19 82       	std	Y+1, r1	; 0x01
	if((Copy_U8PortNumb <= DIO_PORTD) && (Copy_U8PinNumb <= DIO_PIN7) &&(Copy_U8Value <= DIO_HIGH))
    1046:	8a 81       	ldd	r24, Y+2	; 0x02
    1048:	84 30       	cpi	r24, 0x04	; 4
    104a:	08 f0       	brcs	.+2      	; 0x104e <DIO_U8SetPinValue+0x24>
    104c:	fe c0       	rjmp	.+508    	; 0x124a <DIO_U8SetPinValue+0x220>
    104e:	8b 81       	ldd	r24, Y+3	; 0x03
    1050:	88 30       	cpi	r24, 0x08	; 8
    1052:	08 f0       	brcs	.+2      	; 0x1056 <DIO_U8SetPinValue+0x2c>
    1054:	fa c0       	rjmp	.+500    	; 0x124a <DIO_U8SetPinValue+0x220>
    1056:	8c 81       	ldd	r24, Y+4	; 0x04
    1058:	82 30       	cpi	r24, 0x02	; 2
    105a:	08 f0       	brcs	.+2      	; 0x105e <DIO_U8SetPinValue+0x34>
    105c:	f6 c0       	rjmp	.+492    	; 0x124a <DIO_U8SetPinValue+0x220>
	{
		switch(Copy_U8Value)
    105e:	8c 81       	ldd	r24, Y+4	; 0x04
    1060:	28 2f       	mov	r18, r24
    1062:	30 e0       	ldi	r19, 0x00	; 0
    1064:	3a 87       	std	Y+10, r19	; 0x0a
    1066:	29 87       	std	Y+9, r18	; 0x09
    1068:	89 85       	ldd	r24, Y+9	; 0x09
    106a:	9a 85       	ldd	r25, Y+10	; 0x0a
    106c:	00 97       	sbiw	r24, 0x00	; 0
    106e:	09 f4       	brne	.+2      	; 0x1072 <DIO_U8SetPinValue+0x48>
    1070:	75 c0       	rjmp	.+234    	; 0x115c <DIO_U8SetPinValue+0x132>
    1072:	29 85       	ldd	r18, Y+9	; 0x09
    1074:	3a 85       	ldd	r19, Y+10	; 0x0a
    1076:	21 30       	cpi	r18, 0x01	; 1
    1078:	31 05       	cpc	r19, r1
    107a:	09 f0       	breq	.+2      	; 0x107e <DIO_U8SetPinValue+0x54>
    107c:	e3 c0       	rjmp	.+454    	; 0x1244 <DIO_U8SetPinValue+0x21a>
		{
			case DIO_HIGH:
			switch(Copy_U8PortNumb)
    107e:	8a 81       	ldd	r24, Y+2	; 0x02
    1080:	28 2f       	mov	r18, r24
    1082:	30 e0       	ldi	r19, 0x00	; 0
    1084:	38 87       	std	Y+8, r19	; 0x08
    1086:	2f 83       	std	Y+7, r18	; 0x07
    1088:	8f 81       	ldd	r24, Y+7	; 0x07
    108a:	98 85       	ldd	r25, Y+8	; 0x08
    108c:	81 30       	cpi	r24, 0x01	; 1
    108e:	91 05       	cpc	r25, r1
    1090:	49 f1       	breq	.+82     	; 0x10e4 <DIO_U8SetPinValue+0xba>
    1092:	2f 81       	ldd	r18, Y+7	; 0x07
    1094:	38 85       	ldd	r19, Y+8	; 0x08
    1096:	22 30       	cpi	r18, 0x02	; 2
    1098:	31 05       	cpc	r19, r1
    109a:	2c f4       	brge	.+10     	; 0x10a6 <DIO_U8SetPinValue+0x7c>
    109c:	8f 81       	ldd	r24, Y+7	; 0x07
    109e:	98 85       	ldd	r25, Y+8	; 0x08
    10a0:	00 97       	sbiw	r24, 0x00	; 0
    10a2:	61 f0       	breq	.+24     	; 0x10bc <DIO_U8SetPinValue+0x92>
    10a4:	d4 c0       	rjmp	.+424    	; 0x124e <DIO_U8SetPinValue+0x224>
    10a6:	2f 81       	ldd	r18, Y+7	; 0x07
    10a8:	38 85       	ldd	r19, Y+8	; 0x08
    10aa:	22 30       	cpi	r18, 0x02	; 2
    10ac:	31 05       	cpc	r19, r1
    10ae:	71 f1       	breq	.+92     	; 0x110c <DIO_U8SetPinValue+0xe2>
    10b0:	8f 81       	ldd	r24, Y+7	; 0x07
    10b2:	98 85       	ldd	r25, Y+8	; 0x08
    10b4:	83 30       	cpi	r24, 0x03	; 3
    10b6:	91 05       	cpc	r25, r1
    10b8:	e9 f1       	breq	.+122    	; 0x1134 <DIO_U8SetPinValue+0x10a>
    10ba:	c9 c0       	rjmp	.+402    	; 0x124e <DIO_U8SetPinValue+0x224>
			{
				case DIO_PORTA: SET_BIT(PORTA,Copy_U8PinNumb);break;
    10bc:	ab e3       	ldi	r26, 0x3B	; 59
    10be:	b0 e0       	ldi	r27, 0x00	; 0
    10c0:	eb e3       	ldi	r30, 0x3B	; 59
    10c2:	f0 e0       	ldi	r31, 0x00	; 0
    10c4:	80 81       	ld	r24, Z
    10c6:	48 2f       	mov	r20, r24
    10c8:	8b 81       	ldd	r24, Y+3	; 0x03
    10ca:	28 2f       	mov	r18, r24
    10cc:	30 e0       	ldi	r19, 0x00	; 0
    10ce:	81 e0       	ldi	r24, 0x01	; 1
    10d0:	90 e0       	ldi	r25, 0x00	; 0
    10d2:	02 2e       	mov	r0, r18
    10d4:	02 c0       	rjmp	.+4      	; 0x10da <DIO_U8SetPinValue+0xb0>
    10d6:	88 0f       	add	r24, r24
    10d8:	99 1f       	adc	r25, r25
    10da:	0a 94       	dec	r0
    10dc:	e2 f7       	brpl	.-8      	; 0x10d6 <DIO_U8SetPinValue+0xac>
    10de:	84 2b       	or	r24, r20
    10e0:	8c 93       	st	X, r24
    10e2:	b5 c0       	rjmp	.+362    	; 0x124e <DIO_U8SetPinValue+0x224>
				case DIO_PORTB: SET_BIT(PORTB,Copy_U8PinNumb);break;
    10e4:	a8 e3       	ldi	r26, 0x38	; 56
    10e6:	b0 e0       	ldi	r27, 0x00	; 0
    10e8:	e8 e3       	ldi	r30, 0x38	; 56
    10ea:	f0 e0       	ldi	r31, 0x00	; 0
    10ec:	80 81       	ld	r24, Z
    10ee:	48 2f       	mov	r20, r24
    10f0:	8b 81       	ldd	r24, Y+3	; 0x03
    10f2:	28 2f       	mov	r18, r24
    10f4:	30 e0       	ldi	r19, 0x00	; 0
    10f6:	81 e0       	ldi	r24, 0x01	; 1
    10f8:	90 e0       	ldi	r25, 0x00	; 0
    10fa:	02 2e       	mov	r0, r18
    10fc:	02 c0       	rjmp	.+4      	; 0x1102 <DIO_U8SetPinValue+0xd8>
    10fe:	88 0f       	add	r24, r24
    1100:	99 1f       	adc	r25, r25
    1102:	0a 94       	dec	r0
    1104:	e2 f7       	brpl	.-8      	; 0x10fe <DIO_U8SetPinValue+0xd4>
    1106:	84 2b       	or	r24, r20
    1108:	8c 93       	st	X, r24
    110a:	a1 c0       	rjmp	.+322    	; 0x124e <DIO_U8SetPinValue+0x224>
				case DIO_PORTC: SET_BIT(PORTC,Copy_U8PinNumb);break;
    110c:	a5 e3       	ldi	r26, 0x35	; 53
    110e:	b0 e0       	ldi	r27, 0x00	; 0
    1110:	e5 e3       	ldi	r30, 0x35	; 53
    1112:	f0 e0       	ldi	r31, 0x00	; 0
    1114:	80 81       	ld	r24, Z
    1116:	48 2f       	mov	r20, r24
    1118:	8b 81       	ldd	r24, Y+3	; 0x03
    111a:	28 2f       	mov	r18, r24
    111c:	30 e0       	ldi	r19, 0x00	; 0
    111e:	81 e0       	ldi	r24, 0x01	; 1
    1120:	90 e0       	ldi	r25, 0x00	; 0
    1122:	02 2e       	mov	r0, r18
    1124:	02 c0       	rjmp	.+4      	; 0x112a <DIO_U8SetPinValue+0x100>
    1126:	88 0f       	add	r24, r24
    1128:	99 1f       	adc	r25, r25
    112a:	0a 94       	dec	r0
    112c:	e2 f7       	brpl	.-8      	; 0x1126 <DIO_U8SetPinValue+0xfc>
    112e:	84 2b       	or	r24, r20
    1130:	8c 93       	st	X, r24
    1132:	8d c0       	rjmp	.+282    	; 0x124e <DIO_U8SetPinValue+0x224>
				case DIO_PORTD: SET_BIT(PORTD,Copy_U8PinNumb);break;
    1134:	a2 e3       	ldi	r26, 0x32	; 50
    1136:	b0 e0       	ldi	r27, 0x00	; 0
    1138:	e2 e3       	ldi	r30, 0x32	; 50
    113a:	f0 e0       	ldi	r31, 0x00	; 0
    113c:	80 81       	ld	r24, Z
    113e:	48 2f       	mov	r20, r24
    1140:	8b 81       	ldd	r24, Y+3	; 0x03
    1142:	28 2f       	mov	r18, r24
    1144:	30 e0       	ldi	r19, 0x00	; 0
    1146:	81 e0       	ldi	r24, 0x01	; 1
    1148:	90 e0       	ldi	r25, 0x00	; 0
    114a:	02 2e       	mov	r0, r18
    114c:	02 c0       	rjmp	.+4      	; 0x1152 <DIO_U8SetPinValue+0x128>
    114e:	88 0f       	add	r24, r24
    1150:	99 1f       	adc	r25, r25
    1152:	0a 94       	dec	r0
    1154:	e2 f7       	brpl	.-8      	; 0x114e <DIO_U8SetPinValue+0x124>
    1156:	84 2b       	or	r24, r20
    1158:	8c 93       	st	X, r24
    115a:	79 c0       	rjmp	.+242    	; 0x124e <DIO_U8SetPinValue+0x224>
			}
			break;
			case DIO_LOW:
			switch(Copy_U8PortNumb)
    115c:	8a 81       	ldd	r24, Y+2	; 0x02
    115e:	28 2f       	mov	r18, r24
    1160:	30 e0       	ldi	r19, 0x00	; 0
    1162:	3e 83       	std	Y+6, r19	; 0x06
    1164:	2d 83       	std	Y+5, r18	; 0x05
    1166:	8d 81       	ldd	r24, Y+5	; 0x05
    1168:	9e 81       	ldd	r25, Y+6	; 0x06
    116a:	81 30       	cpi	r24, 0x01	; 1
    116c:	91 05       	cpc	r25, r1
    116e:	59 f1       	breq	.+86     	; 0x11c6 <DIO_U8SetPinValue+0x19c>
    1170:	2d 81       	ldd	r18, Y+5	; 0x05
    1172:	3e 81       	ldd	r19, Y+6	; 0x06
    1174:	22 30       	cpi	r18, 0x02	; 2
    1176:	31 05       	cpc	r19, r1
    1178:	2c f4       	brge	.+10     	; 0x1184 <DIO_U8SetPinValue+0x15a>
    117a:	8d 81       	ldd	r24, Y+5	; 0x05
    117c:	9e 81       	ldd	r25, Y+6	; 0x06
    117e:	00 97       	sbiw	r24, 0x00	; 0
    1180:	69 f0       	breq	.+26     	; 0x119c <DIO_U8SetPinValue+0x172>
    1182:	65 c0       	rjmp	.+202    	; 0x124e <DIO_U8SetPinValue+0x224>
    1184:	2d 81       	ldd	r18, Y+5	; 0x05
    1186:	3e 81       	ldd	r19, Y+6	; 0x06
    1188:	22 30       	cpi	r18, 0x02	; 2
    118a:	31 05       	cpc	r19, r1
    118c:	89 f1       	breq	.+98     	; 0x11f0 <DIO_U8SetPinValue+0x1c6>
    118e:	8d 81       	ldd	r24, Y+5	; 0x05
    1190:	9e 81       	ldd	r25, Y+6	; 0x06
    1192:	83 30       	cpi	r24, 0x03	; 3
    1194:	91 05       	cpc	r25, r1
    1196:	09 f4       	brne	.+2      	; 0x119a <DIO_U8SetPinValue+0x170>
    1198:	40 c0       	rjmp	.+128    	; 0x121a <DIO_U8SetPinValue+0x1f0>
    119a:	59 c0       	rjmp	.+178    	; 0x124e <DIO_U8SetPinValue+0x224>
			{
				case DIO_PORTA: CLR_BIT(PORTA,Copy_U8PinNumb);break;
    119c:	ab e3       	ldi	r26, 0x3B	; 59
    119e:	b0 e0       	ldi	r27, 0x00	; 0
    11a0:	eb e3       	ldi	r30, 0x3B	; 59
    11a2:	f0 e0       	ldi	r31, 0x00	; 0
    11a4:	80 81       	ld	r24, Z
    11a6:	48 2f       	mov	r20, r24
    11a8:	8b 81       	ldd	r24, Y+3	; 0x03
    11aa:	28 2f       	mov	r18, r24
    11ac:	30 e0       	ldi	r19, 0x00	; 0
    11ae:	81 e0       	ldi	r24, 0x01	; 1
    11b0:	90 e0       	ldi	r25, 0x00	; 0
    11b2:	02 2e       	mov	r0, r18
    11b4:	02 c0       	rjmp	.+4      	; 0x11ba <DIO_U8SetPinValue+0x190>
    11b6:	88 0f       	add	r24, r24
    11b8:	99 1f       	adc	r25, r25
    11ba:	0a 94       	dec	r0
    11bc:	e2 f7       	brpl	.-8      	; 0x11b6 <DIO_U8SetPinValue+0x18c>
    11be:	80 95       	com	r24
    11c0:	84 23       	and	r24, r20
    11c2:	8c 93       	st	X, r24
    11c4:	44 c0       	rjmp	.+136    	; 0x124e <DIO_U8SetPinValue+0x224>
				case DIO_PORTB: CLR_BIT(PORTB,Copy_U8PinNumb);break;
    11c6:	a8 e3       	ldi	r26, 0x38	; 56
    11c8:	b0 e0       	ldi	r27, 0x00	; 0
    11ca:	e8 e3       	ldi	r30, 0x38	; 56
    11cc:	f0 e0       	ldi	r31, 0x00	; 0
    11ce:	80 81       	ld	r24, Z
    11d0:	48 2f       	mov	r20, r24
    11d2:	8b 81       	ldd	r24, Y+3	; 0x03
    11d4:	28 2f       	mov	r18, r24
    11d6:	30 e0       	ldi	r19, 0x00	; 0
    11d8:	81 e0       	ldi	r24, 0x01	; 1
    11da:	90 e0       	ldi	r25, 0x00	; 0
    11dc:	02 2e       	mov	r0, r18
    11de:	02 c0       	rjmp	.+4      	; 0x11e4 <DIO_U8SetPinValue+0x1ba>
    11e0:	88 0f       	add	r24, r24
    11e2:	99 1f       	adc	r25, r25
    11e4:	0a 94       	dec	r0
    11e6:	e2 f7       	brpl	.-8      	; 0x11e0 <DIO_U8SetPinValue+0x1b6>
    11e8:	80 95       	com	r24
    11ea:	84 23       	and	r24, r20
    11ec:	8c 93       	st	X, r24
    11ee:	2f c0       	rjmp	.+94     	; 0x124e <DIO_U8SetPinValue+0x224>
				case DIO_PORTC: CLR_BIT(PORTC,Copy_U8PinNumb);break;
    11f0:	a5 e3       	ldi	r26, 0x35	; 53
    11f2:	b0 e0       	ldi	r27, 0x00	; 0
    11f4:	e5 e3       	ldi	r30, 0x35	; 53
    11f6:	f0 e0       	ldi	r31, 0x00	; 0
    11f8:	80 81       	ld	r24, Z
    11fa:	48 2f       	mov	r20, r24
    11fc:	8b 81       	ldd	r24, Y+3	; 0x03
    11fe:	28 2f       	mov	r18, r24
    1200:	30 e0       	ldi	r19, 0x00	; 0
    1202:	81 e0       	ldi	r24, 0x01	; 1
    1204:	90 e0       	ldi	r25, 0x00	; 0
    1206:	02 2e       	mov	r0, r18
    1208:	02 c0       	rjmp	.+4      	; 0x120e <DIO_U8SetPinValue+0x1e4>
    120a:	88 0f       	add	r24, r24
    120c:	99 1f       	adc	r25, r25
    120e:	0a 94       	dec	r0
    1210:	e2 f7       	brpl	.-8      	; 0x120a <DIO_U8SetPinValue+0x1e0>
    1212:	80 95       	com	r24
    1214:	84 23       	and	r24, r20
    1216:	8c 93       	st	X, r24
    1218:	1a c0       	rjmp	.+52     	; 0x124e <DIO_U8SetPinValue+0x224>
				case DIO_PORTD: CLR_BIT(PORTD,Copy_U8PinNumb);break;
    121a:	a2 e3       	ldi	r26, 0x32	; 50
    121c:	b0 e0       	ldi	r27, 0x00	; 0
    121e:	e2 e3       	ldi	r30, 0x32	; 50
    1220:	f0 e0       	ldi	r31, 0x00	; 0
    1222:	80 81       	ld	r24, Z
    1224:	48 2f       	mov	r20, r24
    1226:	8b 81       	ldd	r24, Y+3	; 0x03
    1228:	28 2f       	mov	r18, r24
    122a:	30 e0       	ldi	r19, 0x00	; 0
    122c:	81 e0       	ldi	r24, 0x01	; 1
    122e:	90 e0       	ldi	r25, 0x00	; 0
    1230:	02 2e       	mov	r0, r18
    1232:	02 c0       	rjmp	.+4      	; 0x1238 <DIO_U8SetPinValue+0x20e>
    1234:	88 0f       	add	r24, r24
    1236:	99 1f       	adc	r25, r25
    1238:	0a 94       	dec	r0
    123a:	e2 f7       	brpl	.-8      	; 0x1234 <DIO_U8SetPinValue+0x20a>
    123c:	80 95       	com	r24
    123e:	84 23       	and	r24, r20
    1240:	8c 93       	st	X, r24
    1242:	05 c0       	rjmp	.+10     	; 0x124e <DIO_U8SetPinValue+0x224>
			}
			break;
			default:
			Local_U8ErrorState=ERROR_STATE_OK;
    1244:	81 e0       	ldi	r24, 0x01	; 1
    1246:	89 83       	std	Y+1, r24	; 0x01
    1248:	02 c0       	rjmp	.+4      	; 0x124e <DIO_U8SetPinValue+0x224>
			break;	
		}
	}
	else
	{
		 Local_U8ErrorState=ERROR_STATE_OK;
    124a:	81 e0       	ldi	r24, 0x01	; 1
    124c:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_U8ErrorState;
    124e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1250:	2a 96       	adiw	r28, 0x0a	; 10
    1252:	0f b6       	in	r0, 0x3f	; 63
    1254:	f8 94       	cli
    1256:	de bf       	out	0x3e, r29	; 62
    1258:	0f be       	out	0x3f, r0	; 63
    125a:	cd bf       	out	0x3d, r28	; 61
    125c:	cf 91       	pop	r28
    125e:	df 91       	pop	r29
    1260:	08 95       	ret

00001262 <DIO_U8GetPinValue>:

u8 DIO_U8GetPinValue(u8 Copy_U8PortNumb,u8 Copy_U8PinNumb,u8 *Copy_U8Value)
{
    1262:	df 93       	push	r29
    1264:	cf 93       	push	r28
    1266:	cd b7       	in	r28, 0x3d	; 61
    1268:	de b7       	in	r29, 0x3e	; 62
    126a:	27 97       	sbiw	r28, 0x07	; 7
    126c:	0f b6       	in	r0, 0x3f	; 63
    126e:	f8 94       	cli
    1270:	de bf       	out	0x3e, r29	; 62
    1272:	0f be       	out	0x3f, r0	; 63
    1274:	cd bf       	out	0x3d, r28	; 61
    1276:	8a 83       	std	Y+2, r24	; 0x02
    1278:	6b 83       	std	Y+3, r22	; 0x03
    127a:	5d 83       	std	Y+5, r21	; 0x05
    127c:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_U8ErrorState=ERROR_STATE_NOK;
    127e:	19 82       	std	Y+1, r1	; 0x01
	if((Copy_U8PortNumb <= DIO_PORTD) && (Copy_U8PinNumb <= DIO_PIN7))
    1280:	8a 81       	ldd	r24, Y+2	; 0x02
    1282:	84 30       	cpi	r24, 0x04	; 4
    1284:	08 f0       	brcs	.+2      	; 0x1288 <DIO_U8GetPinValue+0x26>
    1286:	78 c0       	rjmp	.+240    	; 0x1378 <DIO_U8GetPinValue+0x116>
    1288:	8b 81       	ldd	r24, Y+3	; 0x03
    128a:	88 30       	cpi	r24, 0x08	; 8
    128c:	08 f0       	brcs	.+2      	; 0x1290 <DIO_U8GetPinValue+0x2e>
    128e:	74 c0       	rjmp	.+232    	; 0x1378 <DIO_U8GetPinValue+0x116>
	{
		switch(Copy_U8PortNumb)
    1290:	8a 81       	ldd	r24, Y+2	; 0x02
    1292:	28 2f       	mov	r18, r24
    1294:	30 e0       	ldi	r19, 0x00	; 0
    1296:	3f 83       	std	Y+7, r19	; 0x07
    1298:	2e 83       	std	Y+6, r18	; 0x06
    129a:	4e 81       	ldd	r20, Y+6	; 0x06
    129c:	5f 81       	ldd	r21, Y+7	; 0x07
    129e:	41 30       	cpi	r20, 0x01	; 1
    12a0:	51 05       	cpc	r21, r1
    12a2:	59 f1       	breq	.+86     	; 0x12fa <DIO_U8GetPinValue+0x98>
    12a4:	8e 81       	ldd	r24, Y+6	; 0x06
    12a6:	9f 81       	ldd	r25, Y+7	; 0x07
    12a8:	82 30       	cpi	r24, 0x02	; 2
    12aa:	91 05       	cpc	r25, r1
    12ac:	34 f4       	brge	.+12     	; 0x12ba <DIO_U8GetPinValue+0x58>
    12ae:	2e 81       	ldd	r18, Y+6	; 0x06
    12b0:	3f 81       	ldd	r19, Y+7	; 0x07
    12b2:	21 15       	cp	r18, r1
    12b4:	31 05       	cpc	r19, r1
    12b6:	69 f0       	breq	.+26     	; 0x12d2 <DIO_U8GetPinValue+0x70>
    12b8:	5c c0       	rjmp	.+184    	; 0x1372 <DIO_U8GetPinValue+0x110>
    12ba:	4e 81       	ldd	r20, Y+6	; 0x06
    12bc:	5f 81       	ldd	r21, Y+7	; 0x07
    12be:	42 30       	cpi	r20, 0x02	; 2
    12c0:	51 05       	cpc	r21, r1
    12c2:	79 f1       	breq	.+94     	; 0x1322 <DIO_U8GetPinValue+0xc0>
    12c4:	8e 81       	ldd	r24, Y+6	; 0x06
    12c6:	9f 81       	ldd	r25, Y+7	; 0x07
    12c8:	83 30       	cpi	r24, 0x03	; 3
    12ca:	91 05       	cpc	r25, r1
    12cc:	09 f4       	brne	.+2      	; 0x12d0 <DIO_U8GetPinValue+0x6e>
    12ce:	3d c0       	rjmp	.+122    	; 0x134a <DIO_U8GetPinValue+0xe8>
    12d0:	50 c0       	rjmp	.+160    	; 0x1372 <DIO_U8GetPinValue+0x110>
		{	
			case DIO_PORTA: *Copy_U8Value = GET_BIT(PINA,Copy_U8PinNumb); break;
    12d2:	e9 e3       	ldi	r30, 0x39	; 57
    12d4:	f0 e0       	ldi	r31, 0x00	; 0
    12d6:	80 81       	ld	r24, Z
    12d8:	28 2f       	mov	r18, r24
    12da:	30 e0       	ldi	r19, 0x00	; 0
    12dc:	8b 81       	ldd	r24, Y+3	; 0x03
    12de:	88 2f       	mov	r24, r24
    12e0:	90 e0       	ldi	r25, 0x00	; 0
    12e2:	a9 01       	movw	r20, r18
    12e4:	02 c0       	rjmp	.+4      	; 0x12ea <DIO_U8GetPinValue+0x88>
    12e6:	55 95       	asr	r21
    12e8:	47 95       	ror	r20
    12ea:	8a 95       	dec	r24
    12ec:	e2 f7       	brpl	.-8      	; 0x12e6 <DIO_U8GetPinValue+0x84>
    12ee:	ca 01       	movw	r24, r20
    12f0:	81 70       	andi	r24, 0x01	; 1
    12f2:	ec 81       	ldd	r30, Y+4	; 0x04
    12f4:	fd 81       	ldd	r31, Y+5	; 0x05
    12f6:	80 83       	st	Z, r24
    12f8:	41 c0       	rjmp	.+130    	; 0x137c <DIO_U8GetPinValue+0x11a>
			case DIO_PORTB: *Copy_U8Value = GET_BIT(PINB,Copy_U8PinNumb); break;
    12fa:	e6 e3       	ldi	r30, 0x36	; 54
    12fc:	f0 e0       	ldi	r31, 0x00	; 0
    12fe:	80 81       	ld	r24, Z
    1300:	28 2f       	mov	r18, r24
    1302:	30 e0       	ldi	r19, 0x00	; 0
    1304:	8b 81       	ldd	r24, Y+3	; 0x03
    1306:	88 2f       	mov	r24, r24
    1308:	90 e0       	ldi	r25, 0x00	; 0
    130a:	a9 01       	movw	r20, r18
    130c:	02 c0       	rjmp	.+4      	; 0x1312 <DIO_U8GetPinValue+0xb0>
    130e:	55 95       	asr	r21
    1310:	47 95       	ror	r20
    1312:	8a 95       	dec	r24
    1314:	e2 f7       	brpl	.-8      	; 0x130e <DIO_U8GetPinValue+0xac>
    1316:	ca 01       	movw	r24, r20
    1318:	81 70       	andi	r24, 0x01	; 1
    131a:	ec 81       	ldd	r30, Y+4	; 0x04
    131c:	fd 81       	ldd	r31, Y+5	; 0x05
    131e:	80 83       	st	Z, r24
    1320:	2d c0       	rjmp	.+90     	; 0x137c <DIO_U8GetPinValue+0x11a>
			case DIO_PORTC:	*Copy_U8Value = GET_BIT(PINC,Copy_U8PinNumb); break;
    1322:	e3 e3       	ldi	r30, 0x33	; 51
    1324:	f0 e0       	ldi	r31, 0x00	; 0
    1326:	80 81       	ld	r24, Z
    1328:	28 2f       	mov	r18, r24
    132a:	30 e0       	ldi	r19, 0x00	; 0
    132c:	8b 81       	ldd	r24, Y+3	; 0x03
    132e:	88 2f       	mov	r24, r24
    1330:	90 e0       	ldi	r25, 0x00	; 0
    1332:	a9 01       	movw	r20, r18
    1334:	02 c0       	rjmp	.+4      	; 0x133a <DIO_U8GetPinValue+0xd8>
    1336:	55 95       	asr	r21
    1338:	47 95       	ror	r20
    133a:	8a 95       	dec	r24
    133c:	e2 f7       	brpl	.-8      	; 0x1336 <DIO_U8GetPinValue+0xd4>
    133e:	ca 01       	movw	r24, r20
    1340:	81 70       	andi	r24, 0x01	; 1
    1342:	ec 81       	ldd	r30, Y+4	; 0x04
    1344:	fd 81       	ldd	r31, Y+5	; 0x05
    1346:	80 83       	st	Z, r24
    1348:	19 c0       	rjmp	.+50     	; 0x137c <DIO_U8GetPinValue+0x11a>
			case DIO_PORTD: *Copy_U8Value = GET_BIT(PIND,Copy_U8PinNumb); break;
    134a:	e0 e3       	ldi	r30, 0x30	; 48
    134c:	f0 e0       	ldi	r31, 0x00	; 0
    134e:	80 81       	ld	r24, Z
    1350:	28 2f       	mov	r18, r24
    1352:	30 e0       	ldi	r19, 0x00	; 0
    1354:	8b 81       	ldd	r24, Y+3	; 0x03
    1356:	88 2f       	mov	r24, r24
    1358:	90 e0       	ldi	r25, 0x00	; 0
    135a:	a9 01       	movw	r20, r18
    135c:	02 c0       	rjmp	.+4      	; 0x1362 <DIO_U8GetPinValue+0x100>
    135e:	55 95       	asr	r21
    1360:	47 95       	ror	r20
    1362:	8a 95       	dec	r24
    1364:	e2 f7       	brpl	.-8      	; 0x135e <DIO_U8GetPinValue+0xfc>
    1366:	ca 01       	movw	r24, r20
    1368:	81 70       	andi	r24, 0x01	; 1
    136a:	ec 81       	ldd	r30, Y+4	; 0x04
    136c:	fd 81       	ldd	r31, Y+5	; 0x05
    136e:	80 83       	st	Z, r24
    1370:	05 c0       	rjmp	.+10     	; 0x137c <DIO_U8GetPinValue+0x11a>
			default:
			Local_U8ErrorState=ERROR_STATE_OK;
    1372:	81 e0       	ldi	r24, 0x01	; 1
    1374:	89 83       	std	Y+1, r24	; 0x01
    1376:	02 c0       	rjmp	.+4      	; 0x137c <DIO_U8GetPinValue+0x11a>
			break;
		}
	}
	else
	{
		 Local_U8ErrorState=ERROR_STATE_OK;
    1378:	81 e0       	ldi	r24, 0x01	; 1
    137a:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_U8ErrorState;
    137c:	89 81       	ldd	r24, Y+1	; 0x01
}
    137e:	27 96       	adiw	r28, 0x07	; 7
    1380:	0f b6       	in	r0, 0x3f	; 63
    1382:	f8 94       	cli
    1384:	de bf       	out	0x3e, r29	; 62
    1386:	0f be       	out	0x3f, r0	; 63
    1388:	cd bf       	out	0x3d, r28	; 61
    138a:	cf 91       	pop	r28
    138c:	df 91       	pop	r29
    138e:	08 95       	ret

00001390 <DIO_U8TogglePin>:

u8 DIO_U8TogglePin(u8 Copy_U8PortNumb,u8 Copy_U8PinNumb)
{
    1390:	df 93       	push	r29
    1392:	cf 93       	push	r28
    1394:	00 d0       	rcall	.+0      	; 0x1396 <DIO_U8TogglePin+0x6>
    1396:	00 d0       	rcall	.+0      	; 0x1398 <DIO_U8TogglePin+0x8>
    1398:	0f 92       	push	r0
    139a:	cd b7       	in	r28, 0x3d	; 61
    139c:	de b7       	in	r29, 0x3e	; 62
    139e:	8a 83       	std	Y+2, r24	; 0x02
    13a0:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_U8ErrorState=ERROR_STATE_NOK;
    13a2:	19 82       	std	Y+1, r1	; 0x01
	if((Copy_U8PortNumb <= DIO_PORTD) && (Copy_U8PinNumb <= DIO_PIN7))
    13a4:	8a 81       	ldd	r24, Y+2	; 0x02
    13a6:	84 30       	cpi	r24, 0x04	; 4
    13a8:	08 f0       	brcs	.+2      	; 0x13ac <DIO_U8TogglePin+0x1c>
    13aa:	76 c0       	rjmp	.+236    	; 0x1498 <DIO_U8TogglePin+0x108>
    13ac:	8b 81       	ldd	r24, Y+3	; 0x03
    13ae:	88 30       	cpi	r24, 0x08	; 8
    13b0:	08 f0       	brcs	.+2      	; 0x13b4 <DIO_U8TogglePin+0x24>
    13b2:	72 c0       	rjmp	.+228    	; 0x1498 <DIO_U8TogglePin+0x108>
	{
		switch(Copy_U8PortNumb)
    13b4:	8a 81       	ldd	r24, Y+2	; 0x02
    13b6:	28 2f       	mov	r18, r24
    13b8:	30 e0       	ldi	r19, 0x00	; 0
    13ba:	3d 83       	std	Y+5, r19	; 0x05
    13bc:	2c 83       	std	Y+4, r18	; 0x04
    13be:	8c 81       	ldd	r24, Y+4	; 0x04
    13c0:	9d 81       	ldd	r25, Y+5	; 0x05
    13c2:	81 30       	cpi	r24, 0x01	; 1
    13c4:	91 05       	cpc	r25, r1
    13c6:	49 f1       	breq	.+82     	; 0x141a <DIO_U8TogglePin+0x8a>
    13c8:	2c 81       	ldd	r18, Y+4	; 0x04
    13ca:	3d 81       	ldd	r19, Y+5	; 0x05
    13cc:	22 30       	cpi	r18, 0x02	; 2
    13ce:	31 05       	cpc	r19, r1
    13d0:	2c f4       	brge	.+10     	; 0x13dc <DIO_U8TogglePin+0x4c>
    13d2:	8c 81       	ldd	r24, Y+4	; 0x04
    13d4:	9d 81       	ldd	r25, Y+5	; 0x05
    13d6:	00 97       	sbiw	r24, 0x00	; 0
    13d8:	61 f0       	breq	.+24     	; 0x13f2 <DIO_U8TogglePin+0x62>
    13da:	5b c0       	rjmp	.+182    	; 0x1492 <DIO_U8TogglePin+0x102>
    13dc:	2c 81       	ldd	r18, Y+4	; 0x04
    13de:	3d 81       	ldd	r19, Y+5	; 0x05
    13e0:	22 30       	cpi	r18, 0x02	; 2
    13e2:	31 05       	cpc	r19, r1
    13e4:	71 f1       	breq	.+92     	; 0x1442 <DIO_U8TogglePin+0xb2>
    13e6:	8c 81       	ldd	r24, Y+4	; 0x04
    13e8:	9d 81       	ldd	r25, Y+5	; 0x05
    13ea:	83 30       	cpi	r24, 0x03	; 3
    13ec:	91 05       	cpc	r25, r1
    13ee:	e9 f1       	breq	.+122    	; 0x146a <DIO_U8TogglePin+0xda>
    13f0:	50 c0       	rjmp	.+160    	; 0x1492 <DIO_U8TogglePin+0x102>
		{	
			case DIO_PORTA: TOG_BIT(PORTA,Copy_U8PinNumb); break;
    13f2:	ab e3       	ldi	r26, 0x3B	; 59
    13f4:	b0 e0       	ldi	r27, 0x00	; 0
    13f6:	eb e3       	ldi	r30, 0x3B	; 59
    13f8:	f0 e0       	ldi	r31, 0x00	; 0
    13fa:	80 81       	ld	r24, Z
    13fc:	48 2f       	mov	r20, r24
    13fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1400:	28 2f       	mov	r18, r24
    1402:	30 e0       	ldi	r19, 0x00	; 0
    1404:	81 e0       	ldi	r24, 0x01	; 1
    1406:	90 e0       	ldi	r25, 0x00	; 0
    1408:	02 2e       	mov	r0, r18
    140a:	02 c0       	rjmp	.+4      	; 0x1410 <DIO_U8TogglePin+0x80>
    140c:	88 0f       	add	r24, r24
    140e:	99 1f       	adc	r25, r25
    1410:	0a 94       	dec	r0
    1412:	e2 f7       	brpl	.-8      	; 0x140c <DIO_U8TogglePin+0x7c>
    1414:	84 27       	eor	r24, r20
    1416:	8c 93       	st	X, r24
    1418:	41 c0       	rjmp	.+130    	; 0x149c <DIO_U8TogglePin+0x10c>
			case DIO_PORTB: TOG_BIT(PORTB,Copy_U8PinNumb); break;
    141a:	a8 e3       	ldi	r26, 0x38	; 56
    141c:	b0 e0       	ldi	r27, 0x00	; 0
    141e:	e8 e3       	ldi	r30, 0x38	; 56
    1420:	f0 e0       	ldi	r31, 0x00	; 0
    1422:	80 81       	ld	r24, Z
    1424:	48 2f       	mov	r20, r24
    1426:	8b 81       	ldd	r24, Y+3	; 0x03
    1428:	28 2f       	mov	r18, r24
    142a:	30 e0       	ldi	r19, 0x00	; 0
    142c:	81 e0       	ldi	r24, 0x01	; 1
    142e:	90 e0       	ldi	r25, 0x00	; 0
    1430:	02 2e       	mov	r0, r18
    1432:	02 c0       	rjmp	.+4      	; 0x1438 <DIO_U8TogglePin+0xa8>
    1434:	88 0f       	add	r24, r24
    1436:	99 1f       	adc	r25, r25
    1438:	0a 94       	dec	r0
    143a:	e2 f7       	brpl	.-8      	; 0x1434 <DIO_U8TogglePin+0xa4>
    143c:	84 27       	eor	r24, r20
    143e:	8c 93       	st	X, r24
    1440:	2d c0       	rjmp	.+90     	; 0x149c <DIO_U8TogglePin+0x10c>
			case DIO_PORTC: TOG_BIT(PORTC,Copy_U8PinNumb); break;
    1442:	a5 e3       	ldi	r26, 0x35	; 53
    1444:	b0 e0       	ldi	r27, 0x00	; 0
    1446:	e5 e3       	ldi	r30, 0x35	; 53
    1448:	f0 e0       	ldi	r31, 0x00	; 0
    144a:	80 81       	ld	r24, Z
    144c:	48 2f       	mov	r20, r24
    144e:	8b 81       	ldd	r24, Y+3	; 0x03
    1450:	28 2f       	mov	r18, r24
    1452:	30 e0       	ldi	r19, 0x00	; 0
    1454:	81 e0       	ldi	r24, 0x01	; 1
    1456:	90 e0       	ldi	r25, 0x00	; 0
    1458:	02 2e       	mov	r0, r18
    145a:	02 c0       	rjmp	.+4      	; 0x1460 <DIO_U8TogglePin+0xd0>
    145c:	88 0f       	add	r24, r24
    145e:	99 1f       	adc	r25, r25
    1460:	0a 94       	dec	r0
    1462:	e2 f7       	brpl	.-8      	; 0x145c <DIO_U8TogglePin+0xcc>
    1464:	84 27       	eor	r24, r20
    1466:	8c 93       	st	X, r24
    1468:	19 c0       	rjmp	.+50     	; 0x149c <DIO_U8TogglePin+0x10c>
			case DIO_PORTD: TOG_BIT(PORTD,Copy_U8PinNumb); break;
    146a:	a2 e3       	ldi	r26, 0x32	; 50
    146c:	b0 e0       	ldi	r27, 0x00	; 0
    146e:	e2 e3       	ldi	r30, 0x32	; 50
    1470:	f0 e0       	ldi	r31, 0x00	; 0
    1472:	80 81       	ld	r24, Z
    1474:	48 2f       	mov	r20, r24
    1476:	8b 81       	ldd	r24, Y+3	; 0x03
    1478:	28 2f       	mov	r18, r24
    147a:	30 e0       	ldi	r19, 0x00	; 0
    147c:	81 e0       	ldi	r24, 0x01	; 1
    147e:	90 e0       	ldi	r25, 0x00	; 0
    1480:	02 2e       	mov	r0, r18
    1482:	02 c0       	rjmp	.+4      	; 0x1488 <DIO_U8TogglePin+0xf8>
    1484:	88 0f       	add	r24, r24
    1486:	99 1f       	adc	r25, r25
    1488:	0a 94       	dec	r0
    148a:	e2 f7       	brpl	.-8      	; 0x1484 <DIO_U8TogglePin+0xf4>
    148c:	84 27       	eor	r24, r20
    148e:	8c 93       	st	X, r24
    1490:	05 c0       	rjmp	.+10     	; 0x149c <DIO_U8TogglePin+0x10c>
			default:
			Local_U8ErrorState=ERROR_STATE_OK;
    1492:	81 e0       	ldi	r24, 0x01	; 1
    1494:	89 83       	std	Y+1, r24	; 0x01
    1496:	02 c0       	rjmp	.+4      	; 0x149c <DIO_U8TogglePin+0x10c>
			break;		
		}
	}
	else
	{
		 Local_U8ErrorState=ERROR_STATE_OK;
    1498:	81 e0       	ldi	r24, 0x01	; 1
    149a:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_U8ErrorState;
    149c:	89 81       	ldd	r24, Y+1	; 0x01
}
    149e:	0f 90       	pop	r0
    14a0:	0f 90       	pop	r0
    14a2:	0f 90       	pop	r0
    14a4:	0f 90       	pop	r0
    14a6:	0f 90       	pop	r0
    14a8:	cf 91       	pop	r28
    14aa:	df 91       	pop	r29
    14ac:	08 95       	ret

000014ae <DIO_U8SetPortDirection>:

u8 DIO_U8SetPortDirection(u8 Copy_U8PortNumb,u8 Copy_U8Directon)
{
    14ae:	df 93       	push	r29
    14b0:	cf 93       	push	r28
    14b2:	cd b7       	in	r28, 0x3d	; 61
    14b4:	de b7       	in	r29, 0x3e	; 62
    14b6:	29 97       	sbiw	r28, 0x09	; 9
    14b8:	0f b6       	in	r0, 0x3f	; 63
    14ba:	f8 94       	cli
    14bc:	de bf       	out	0x3e, r29	; 62
    14be:	0f be       	out	0x3f, r0	; 63
    14c0:	cd bf       	out	0x3d, r28	; 61
    14c2:	8a 83       	std	Y+2, r24	; 0x02
    14c4:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_U8ErrorState=ERROR_STATE_NOK;
    14c6:	19 82       	std	Y+1, r1	; 0x01
	if((Copy_U8PortNumb <= DIO_PORTD) && (Copy_U8Directon <=DIO_PORT_OUT))
    14c8:	8a 81       	ldd	r24, Y+2	; 0x02
    14ca:	84 30       	cpi	r24, 0x04	; 4
    14cc:	08 f0       	brcs	.+2      	; 0x14d0 <DIO_U8SetPortDirection+0x22>
    14ce:	a4 c0       	rjmp	.+328    	; 0x1618 <DIO_U8SetPortDirection+0x16a>
	{
		if(Copy_U8Directon == DIO_PORT_OUT)
    14d0:	8b 81       	ldd	r24, Y+3	; 0x03
    14d2:	8f 3f       	cpi	r24, 0xFF	; 255
    14d4:	b1 f5       	brne	.+108    	; 0x1542 <DIO_U8SetPortDirection+0x94>
		{
			switch(Copy_U8PortNumb)
    14d6:	8a 81       	ldd	r24, Y+2	; 0x02
    14d8:	28 2f       	mov	r18, r24
    14da:	30 e0       	ldi	r19, 0x00	; 0
    14dc:	39 87       	std	Y+9, r19	; 0x09
    14de:	28 87       	std	Y+8, r18	; 0x08
    14e0:	88 85       	ldd	r24, Y+8	; 0x08
    14e2:	99 85       	ldd	r25, Y+9	; 0x09
    14e4:	81 30       	cpi	r24, 0x01	; 1
    14e6:	91 05       	cpc	r25, r1
    14e8:	d1 f0       	breq	.+52     	; 0x151e <DIO_U8SetPortDirection+0x70>
    14ea:	28 85       	ldd	r18, Y+8	; 0x08
    14ec:	39 85       	ldd	r19, Y+9	; 0x09
    14ee:	22 30       	cpi	r18, 0x02	; 2
    14f0:	31 05       	cpc	r19, r1
    14f2:	2c f4       	brge	.+10     	; 0x14fe <DIO_U8SetPortDirection+0x50>
    14f4:	88 85       	ldd	r24, Y+8	; 0x08
    14f6:	99 85       	ldd	r25, Y+9	; 0x09
    14f8:	00 97       	sbiw	r24, 0x00	; 0
    14fa:	61 f0       	breq	.+24     	; 0x1514 <DIO_U8SetPortDirection+0x66>
    14fc:	1f c0       	rjmp	.+62     	; 0x153c <DIO_U8SetPortDirection+0x8e>
    14fe:	28 85       	ldd	r18, Y+8	; 0x08
    1500:	39 85       	ldd	r19, Y+9	; 0x09
    1502:	22 30       	cpi	r18, 0x02	; 2
    1504:	31 05       	cpc	r19, r1
    1506:	81 f0       	breq	.+32     	; 0x1528 <DIO_U8SetPortDirection+0x7a>
    1508:	88 85       	ldd	r24, Y+8	; 0x08
    150a:	99 85       	ldd	r25, Y+9	; 0x09
    150c:	83 30       	cpi	r24, 0x03	; 3
    150e:	91 05       	cpc	r25, r1
    1510:	81 f0       	breq	.+32     	; 0x1532 <DIO_U8SetPortDirection+0x84>
    1512:	14 c0       	rjmp	.+40     	; 0x153c <DIO_U8SetPortDirection+0x8e>
			{
				case DIO_PORTA: DDRA=DIO_PORT_OUT; break;
    1514:	ea e3       	ldi	r30, 0x3A	; 58
    1516:	f0 e0       	ldi	r31, 0x00	; 0
    1518:	8f ef       	ldi	r24, 0xFF	; 255
    151a:	80 83       	st	Z, r24
    151c:	7f c0       	rjmp	.+254    	; 0x161c <DIO_U8SetPortDirection+0x16e>
				case DIO_PORTB: DDRB=DIO_PORT_OUT; break;
    151e:	e7 e3       	ldi	r30, 0x37	; 55
    1520:	f0 e0       	ldi	r31, 0x00	; 0
    1522:	8f ef       	ldi	r24, 0xFF	; 255
    1524:	80 83       	st	Z, r24
    1526:	7a c0       	rjmp	.+244    	; 0x161c <DIO_U8SetPortDirection+0x16e>
				case DIO_PORTC: DDRC=DIO_PORT_OUT; break;
    1528:	e4 e3       	ldi	r30, 0x34	; 52
    152a:	f0 e0       	ldi	r31, 0x00	; 0
    152c:	8f ef       	ldi	r24, 0xFF	; 255
    152e:	80 83       	st	Z, r24
    1530:	75 c0       	rjmp	.+234    	; 0x161c <DIO_U8SetPortDirection+0x16e>
				case DIO_PORTD: DDRD=DIO_PORT_OUT; break;
    1532:	e1 e3       	ldi	r30, 0x31	; 49
    1534:	f0 e0       	ldi	r31, 0x00	; 0
    1536:	8f ef       	ldi	r24, 0xFF	; 255
    1538:	80 83       	st	Z, r24
    153a:	70 c0       	rjmp	.+224    	; 0x161c <DIO_U8SetPortDirection+0x16e>
				default:
				Local_U8ErrorState=ERROR_STATE_OK;
    153c:	81 e0       	ldi	r24, 0x01	; 1
    153e:	89 83       	std	Y+1, r24	; 0x01
    1540:	6d c0       	rjmp	.+218    	; 0x161c <DIO_U8SetPortDirection+0x16e>
				break;	
			}
		}
		else if(Copy_U8Directon == DIO_PORT_IN)
    1542:	8b 81       	ldd	r24, Y+3	; 0x03
    1544:	88 23       	and	r24, r24
    1546:	91 f5       	brne	.+100    	; 0x15ac <DIO_U8SetPortDirection+0xfe>
		{
			switch(Copy_U8PortNumb)
    1548:	8a 81       	ldd	r24, Y+2	; 0x02
    154a:	28 2f       	mov	r18, r24
    154c:	30 e0       	ldi	r19, 0x00	; 0
    154e:	3f 83       	std	Y+7, r19	; 0x07
    1550:	2e 83       	std	Y+6, r18	; 0x06
    1552:	8e 81       	ldd	r24, Y+6	; 0x06
    1554:	9f 81       	ldd	r25, Y+7	; 0x07
    1556:	81 30       	cpi	r24, 0x01	; 1
    1558:	91 05       	cpc	r25, r1
    155a:	c9 f0       	breq	.+50     	; 0x158e <DIO_U8SetPortDirection+0xe0>
    155c:	2e 81       	ldd	r18, Y+6	; 0x06
    155e:	3f 81       	ldd	r19, Y+7	; 0x07
    1560:	22 30       	cpi	r18, 0x02	; 2
    1562:	31 05       	cpc	r19, r1
    1564:	2c f4       	brge	.+10     	; 0x1570 <DIO_U8SetPortDirection+0xc2>
    1566:	8e 81       	ldd	r24, Y+6	; 0x06
    1568:	9f 81       	ldd	r25, Y+7	; 0x07
    156a:	00 97       	sbiw	r24, 0x00	; 0
    156c:	61 f0       	breq	.+24     	; 0x1586 <DIO_U8SetPortDirection+0xd8>
    156e:	1b c0       	rjmp	.+54     	; 0x15a6 <DIO_U8SetPortDirection+0xf8>
    1570:	2e 81       	ldd	r18, Y+6	; 0x06
    1572:	3f 81       	ldd	r19, Y+7	; 0x07
    1574:	22 30       	cpi	r18, 0x02	; 2
    1576:	31 05       	cpc	r19, r1
    1578:	71 f0       	breq	.+28     	; 0x1596 <DIO_U8SetPortDirection+0xe8>
    157a:	8e 81       	ldd	r24, Y+6	; 0x06
    157c:	9f 81       	ldd	r25, Y+7	; 0x07
    157e:	83 30       	cpi	r24, 0x03	; 3
    1580:	91 05       	cpc	r25, r1
    1582:	69 f0       	breq	.+26     	; 0x159e <DIO_U8SetPortDirection+0xf0>
    1584:	10 c0       	rjmp	.+32     	; 0x15a6 <DIO_U8SetPortDirection+0xf8>
			{
				case DIO_PORTA: DDRA=DIO_PORT_IN; break;
    1586:	ea e3       	ldi	r30, 0x3A	; 58
    1588:	f0 e0       	ldi	r31, 0x00	; 0
    158a:	10 82       	st	Z, r1
    158c:	47 c0       	rjmp	.+142    	; 0x161c <DIO_U8SetPortDirection+0x16e>
				case DIO_PORTB: DDRB=DIO_PORT_IN; break;
    158e:	e7 e3       	ldi	r30, 0x37	; 55
    1590:	f0 e0       	ldi	r31, 0x00	; 0
    1592:	10 82       	st	Z, r1
    1594:	43 c0       	rjmp	.+134    	; 0x161c <DIO_U8SetPortDirection+0x16e>
				case DIO_PORTC: DDRC=DIO_PORT_IN; break;
    1596:	e4 e3       	ldi	r30, 0x34	; 52
    1598:	f0 e0       	ldi	r31, 0x00	; 0
    159a:	10 82       	st	Z, r1
    159c:	3f c0       	rjmp	.+126    	; 0x161c <DIO_U8SetPortDirection+0x16e>
				case DIO_PORTD: DDRD=DIO_PORT_IN; break;
    159e:	e1 e3       	ldi	r30, 0x31	; 49
    15a0:	f0 e0       	ldi	r31, 0x00	; 0
    15a2:	10 82       	st	Z, r1
    15a4:	3b c0       	rjmp	.+118    	; 0x161c <DIO_U8SetPortDirection+0x16e>
				default:
				Local_U8ErrorState=ERROR_STATE_OK;
    15a6:	81 e0       	ldi	r24, 0x01	; 1
    15a8:	89 83       	std	Y+1, r24	; 0x01
    15aa:	38 c0       	rjmp	.+112    	; 0x161c <DIO_U8SetPortDirection+0x16e>
				break;	
			}
		}
		else
		{
			switch(Copy_U8PortNumb)
    15ac:	8a 81       	ldd	r24, Y+2	; 0x02
    15ae:	28 2f       	mov	r18, r24
    15b0:	30 e0       	ldi	r19, 0x00	; 0
    15b2:	3d 83       	std	Y+5, r19	; 0x05
    15b4:	2c 83       	std	Y+4, r18	; 0x04
    15b6:	8c 81       	ldd	r24, Y+4	; 0x04
    15b8:	9d 81       	ldd	r25, Y+5	; 0x05
    15ba:	81 30       	cpi	r24, 0x01	; 1
    15bc:	91 05       	cpc	r25, r1
    15be:	d1 f0       	breq	.+52     	; 0x15f4 <DIO_U8SetPortDirection+0x146>
    15c0:	2c 81       	ldd	r18, Y+4	; 0x04
    15c2:	3d 81       	ldd	r19, Y+5	; 0x05
    15c4:	22 30       	cpi	r18, 0x02	; 2
    15c6:	31 05       	cpc	r19, r1
    15c8:	2c f4       	brge	.+10     	; 0x15d4 <DIO_U8SetPortDirection+0x126>
    15ca:	8c 81       	ldd	r24, Y+4	; 0x04
    15cc:	9d 81       	ldd	r25, Y+5	; 0x05
    15ce:	00 97       	sbiw	r24, 0x00	; 0
    15d0:	61 f0       	breq	.+24     	; 0x15ea <DIO_U8SetPortDirection+0x13c>
    15d2:	1f c0       	rjmp	.+62     	; 0x1612 <DIO_U8SetPortDirection+0x164>
    15d4:	2c 81       	ldd	r18, Y+4	; 0x04
    15d6:	3d 81       	ldd	r19, Y+5	; 0x05
    15d8:	22 30       	cpi	r18, 0x02	; 2
    15da:	31 05       	cpc	r19, r1
    15dc:	81 f0       	breq	.+32     	; 0x15fe <DIO_U8SetPortDirection+0x150>
    15de:	8c 81       	ldd	r24, Y+4	; 0x04
    15e0:	9d 81       	ldd	r25, Y+5	; 0x05
    15e2:	83 30       	cpi	r24, 0x03	; 3
    15e4:	91 05       	cpc	r25, r1
    15e6:	81 f0       	breq	.+32     	; 0x1608 <DIO_U8SetPortDirection+0x15a>
    15e8:	14 c0       	rjmp	.+40     	; 0x1612 <DIO_U8SetPortDirection+0x164>
			{
				case DIO_PORTA: DDRA=Copy_U8Directon; break;
    15ea:	ea e3       	ldi	r30, 0x3A	; 58
    15ec:	f0 e0       	ldi	r31, 0x00	; 0
    15ee:	8b 81       	ldd	r24, Y+3	; 0x03
    15f0:	80 83       	st	Z, r24
    15f2:	14 c0       	rjmp	.+40     	; 0x161c <DIO_U8SetPortDirection+0x16e>
				case DIO_PORTB: DDRB=Copy_U8Directon; break;
    15f4:	e7 e3       	ldi	r30, 0x37	; 55
    15f6:	f0 e0       	ldi	r31, 0x00	; 0
    15f8:	8b 81       	ldd	r24, Y+3	; 0x03
    15fa:	80 83       	st	Z, r24
    15fc:	0f c0       	rjmp	.+30     	; 0x161c <DIO_U8SetPortDirection+0x16e>
				case DIO_PORTC: DDRC=Copy_U8Directon; break;
    15fe:	e4 e3       	ldi	r30, 0x34	; 52
    1600:	f0 e0       	ldi	r31, 0x00	; 0
    1602:	8b 81       	ldd	r24, Y+3	; 0x03
    1604:	80 83       	st	Z, r24
    1606:	0a c0       	rjmp	.+20     	; 0x161c <DIO_U8SetPortDirection+0x16e>
				case DIO_PORTD: DDRD=Copy_U8Directon; break;
    1608:	e1 e3       	ldi	r30, 0x31	; 49
    160a:	f0 e0       	ldi	r31, 0x00	; 0
    160c:	8b 81       	ldd	r24, Y+3	; 0x03
    160e:	80 83       	st	Z, r24
    1610:	05 c0       	rjmp	.+10     	; 0x161c <DIO_U8SetPortDirection+0x16e>
				default:
				Local_U8ErrorState=ERROR_STATE_OK;
    1612:	81 e0       	ldi	r24, 0x01	; 1
    1614:	89 83       	std	Y+1, r24	; 0x01
    1616:	02 c0       	rjmp	.+4      	; 0x161c <DIO_U8SetPortDirection+0x16e>
			}
		}
	}
	else
	{
		 Local_U8ErrorState=ERROR_STATE_OK;
    1618:	81 e0       	ldi	r24, 0x01	; 1
    161a:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_U8ErrorState;
    161c:	89 81       	ldd	r24, Y+1	; 0x01
}
    161e:	29 96       	adiw	r28, 0x09	; 9
    1620:	0f b6       	in	r0, 0x3f	; 63
    1622:	f8 94       	cli
    1624:	de bf       	out	0x3e, r29	; 62
    1626:	0f be       	out	0x3f, r0	; 63
    1628:	cd bf       	out	0x3d, r28	; 61
    162a:	cf 91       	pop	r28
    162c:	df 91       	pop	r29
    162e:	08 95       	ret

00001630 <DIO_U8SetPortValue>:

u8 DIO_U8SetPortValue(u8 Copy_U8PortNumb,u8 Copy_U8Value)
{
    1630:	df 93       	push	r29
    1632:	cf 93       	push	r28
    1634:	cd b7       	in	r28, 0x3d	; 61
    1636:	de b7       	in	r29, 0x3e	; 62
    1638:	29 97       	sbiw	r28, 0x09	; 9
    163a:	0f b6       	in	r0, 0x3f	; 63
    163c:	f8 94       	cli
    163e:	de bf       	out	0x3e, r29	; 62
    1640:	0f be       	out	0x3f, r0	; 63
    1642:	cd bf       	out	0x3d, r28	; 61
    1644:	8a 83       	std	Y+2, r24	; 0x02
    1646:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_U8ErrorState=ERROR_STATE_NOK;
    1648:	19 82       	std	Y+1, r1	; 0x01
	if((Copy_U8PortNumb <= DIO_PORTD) && (Copy_U8Value <=DIO_PORT_HIGH))
    164a:	8a 81       	ldd	r24, Y+2	; 0x02
    164c:	84 30       	cpi	r24, 0x04	; 4
    164e:	08 f0       	brcs	.+2      	; 0x1652 <DIO_U8SetPortValue+0x22>
    1650:	a4 c0       	rjmp	.+328    	; 0x179a <DIO_U8SetPortValue+0x16a>
	{
		if(Copy_U8Value == DIO_PORT_HIGH)
    1652:	8b 81       	ldd	r24, Y+3	; 0x03
    1654:	8f 3f       	cpi	r24, 0xFF	; 255
    1656:	b1 f5       	brne	.+108    	; 0x16c4 <DIO_U8SetPortValue+0x94>
		{
			switch(Copy_U8PortNumb)
    1658:	8a 81       	ldd	r24, Y+2	; 0x02
    165a:	28 2f       	mov	r18, r24
    165c:	30 e0       	ldi	r19, 0x00	; 0
    165e:	39 87       	std	Y+9, r19	; 0x09
    1660:	28 87       	std	Y+8, r18	; 0x08
    1662:	88 85       	ldd	r24, Y+8	; 0x08
    1664:	99 85       	ldd	r25, Y+9	; 0x09
    1666:	81 30       	cpi	r24, 0x01	; 1
    1668:	91 05       	cpc	r25, r1
    166a:	d1 f0       	breq	.+52     	; 0x16a0 <DIO_U8SetPortValue+0x70>
    166c:	28 85       	ldd	r18, Y+8	; 0x08
    166e:	39 85       	ldd	r19, Y+9	; 0x09
    1670:	22 30       	cpi	r18, 0x02	; 2
    1672:	31 05       	cpc	r19, r1
    1674:	2c f4       	brge	.+10     	; 0x1680 <DIO_U8SetPortValue+0x50>
    1676:	88 85       	ldd	r24, Y+8	; 0x08
    1678:	99 85       	ldd	r25, Y+9	; 0x09
    167a:	00 97       	sbiw	r24, 0x00	; 0
    167c:	61 f0       	breq	.+24     	; 0x1696 <DIO_U8SetPortValue+0x66>
    167e:	1f c0       	rjmp	.+62     	; 0x16be <DIO_U8SetPortValue+0x8e>
    1680:	28 85       	ldd	r18, Y+8	; 0x08
    1682:	39 85       	ldd	r19, Y+9	; 0x09
    1684:	22 30       	cpi	r18, 0x02	; 2
    1686:	31 05       	cpc	r19, r1
    1688:	81 f0       	breq	.+32     	; 0x16aa <DIO_U8SetPortValue+0x7a>
    168a:	88 85       	ldd	r24, Y+8	; 0x08
    168c:	99 85       	ldd	r25, Y+9	; 0x09
    168e:	83 30       	cpi	r24, 0x03	; 3
    1690:	91 05       	cpc	r25, r1
    1692:	81 f0       	breq	.+32     	; 0x16b4 <DIO_U8SetPortValue+0x84>
    1694:	14 c0       	rjmp	.+40     	; 0x16be <DIO_U8SetPortValue+0x8e>
			{
				case DIO_PORTA:  PORTA=DIO_PORT_HIGH; break;
    1696:	eb e3       	ldi	r30, 0x3B	; 59
    1698:	f0 e0       	ldi	r31, 0x00	; 0
    169a:	8f ef       	ldi	r24, 0xFF	; 255
    169c:	80 83       	st	Z, r24
    169e:	7f c0       	rjmp	.+254    	; 0x179e <DIO_U8SetPortValue+0x16e>
				case DIO_PORTB: PORTB=DIO_PORT_HIGH; break;
    16a0:	e8 e3       	ldi	r30, 0x38	; 56
    16a2:	f0 e0       	ldi	r31, 0x00	; 0
    16a4:	8f ef       	ldi	r24, 0xFF	; 255
    16a6:	80 83       	st	Z, r24
    16a8:	7a c0       	rjmp	.+244    	; 0x179e <DIO_U8SetPortValue+0x16e>
				case DIO_PORTC: PORTC=DIO_PORT_HIGH; break;
    16aa:	e5 e3       	ldi	r30, 0x35	; 53
    16ac:	f0 e0       	ldi	r31, 0x00	; 0
    16ae:	8f ef       	ldi	r24, 0xFF	; 255
    16b0:	80 83       	st	Z, r24
    16b2:	75 c0       	rjmp	.+234    	; 0x179e <DIO_U8SetPortValue+0x16e>
				case DIO_PORTD: PORTD=DIO_PORT_HIGH; break;
    16b4:	e2 e3       	ldi	r30, 0x32	; 50
    16b6:	f0 e0       	ldi	r31, 0x00	; 0
    16b8:	8f ef       	ldi	r24, 0xFF	; 255
    16ba:	80 83       	st	Z, r24
    16bc:	70 c0       	rjmp	.+224    	; 0x179e <DIO_U8SetPortValue+0x16e>
				default:
				Local_U8ErrorState=ERROR_STATE_OK;
    16be:	81 e0       	ldi	r24, 0x01	; 1
    16c0:	89 83       	std	Y+1, r24	; 0x01
    16c2:	6d c0       	rjmp	.+218    	; 0x179e <DIO_U8SetPortValue+0x16e>
				break;	
			}
		}
		else if(Copy_U8Value == DIO_PORT_IN)
    16c4:	8b 81       	ldd	r24, Y+3	; 0x03
    16c6:	88 23       	and	r24, r24
    16c8:	91 f5       	brne	.+100    	; 0x172e <DIO_U8SetPortValue+0xfe>
		{
			switch(Copy_U8PortNumb)
    16ca:	8a 81       	ldd	r24, Y+2	; 0x02
    16cc:	28 2f       	mov	r18, r24
    16ce:	30 e0       	ldi	r19, 0x00	; 0
    16d0:	3f 83       	std	Y+7, r19	; 0x07
    16d2:	2e 83       	std	Y+6, r18	; 0x06
    16d4:	8e 81       	ldd	r24, Y+6	; 0x06
    16d6:	9f 81       	ldd	r25, Y+7	; 0x07
    16d8:	81 30       	cpi	r24, 0x01	; 1
    16da:	91 05       	cpc	r25, r1
    16dc:	c9 f0       	breq	.+50     	; 0x1710 <DIO_U8SetPortValue+0xe0>
    16de:	2e 81       	ldd	r18, Y+6	; 0x06
    16e0:	3f 81       	ldd	r19, Y+7	; 0x07
    16e2:	22 30       	cpi	r18, 0x02	; 2
    16e4:	31 05       	cpc	r19, r1
    16e6:	2c f4       	brge	.+10     	; 0x16f2 <DIO_U8SetPortValue+0xc2>
    16e8:	8e 81       	ldd	r24, Y+6	; 0x06
    16ea:	9f 81       	ldd	r25, Y+7	; 0x07
    16ec:	00 97       	sbiw	r24, 0x00	; 0
    16ee:	61 f0       	breq	.+24     	; 0x1708 <DIO_U8SetPortValue+0xd8>
    16f0:	1b c0       	rjmp	.+54     	; 0x1728 <DIO_U8SetPortValue+0xf8>
    16f2:	2e 81       	ldd	r18, Y+6	; 0x06
    16f4:	3f 81       	ldd	r19, Y+7	; 0x07
    16f6:	22 30       	cpi	r18, 0x02	; 2
    16f8:	31 05       	cpc	r19, r1
    16fa:	71 f0       	breq	.+28     	; 0x1718 <DIO_U8SetPortValue+0xe8>
    16fc:	8e 81       	ldd	r24, Y+6	; 0x06
    16fe:	9f 81       	ldd	r25, Y+7	; 0x07
    1700:	83 30       	cpi	r24, 0x03	; 3
    1702:	91 05       	cpc	r25, r1
    1704:	69 f0       	breq	.+26     	; 0x1720 <DIO_U8SetPortValue+0xf0>
    1706:	10 c0       	rjmp	.+32     	; 0x1728 <DIO_U8SetPortValue+0xf8>
			{
				case DIO_PORTA: PORTA=DIO_PORT_LOW; break;
    1708:	eb e3       	ldi	r30, 0x3B	; 59
    170a:	f0 e0       	ldi	r31, 0x00	; 0
    170c:	10 82       	st	Z, r1
    170e:	47 c0       	rjmp	.+142    	; 0x179e <DIO_U8SetPortValue+0x16e>
				case DIO_PORTB: PORTB=DIO_PORT_LOW; break;
    1710:	e8 e3       	ldi	r30, 0x38	; 56
    1712:	f0 e0       	ldi	r31, 0x00	; 0
    1714:	10 82       	st	Z, r1
    1716:	43 c0       	rjmp	.+134    	; 0x179e <DIO_U8SetPortValue+0x16e>
				case DIO_PORTC: PORTC=DIO_PORT_LOW; break;
    1718:	e5 e3       	ldi	r30, 0x35	; 53
    171a:	f0 e0       	ldi	r31, 0x00	; 0
    171c:	10 82       	st	Z, r1
    171e:	3f c0       	rjmp	.+126    	; 0x179e <DIO_U8SetPortValue+0x16e>
				case DIO_PORTD: PORTD=DIO_PORT_LOW; break;
    1720:	e2 e3       	ldi	r30, 0x32	; 50
    1722:	f0 e0       	ldi	r31, 0x00	; 0
    1724:	10 82       	st	Z, r1
    1726:	3b c0       	rjmp	.+118    	; 0x179e <DIO_U8SetPortValue+0x16e>
				default:
				Local_U8ErrorState=ERROR_STATE_OK;
    1728:	81 e0       	ldi	r24, 0x01	; 1
    172a:	89 83       	std	Y+1, r24	; 0x01
    172c:	38 c0       	rjmp	.+112    	; 0x179e <DIO_U8SetPortValue+0x16e>
				break;	
			}
		}
		else
		{
			switch(Copy_U8PortNumb)
    172e:	8a 81       	ldd	r24, Y+2	; 0x02
    1730:	28 2f       	mov	r18, r24
    1732:	30 e0       	ldi	r19, 0x00	; 0
    1734:	3d 83       	std	Y+5, r19	; 0x05
    1736:	2c 83       	std	Y+4, r18	; 0x04
    1738:	8c 81       	ldd	r24, Y+4	; 0x04
    173a:	9d 81       	ldd	r25, Y+5	; 0x05
    173c:	81 30       	cpi	r24, 0x01	; 1
    173e:	91 05       	cpc	r25, r1
    1740:	d1 f0       	breq	.+52     	; 0x1776 <DIO_U8SetPortValue+0x146>
    1742:	2c 81       	ldd	r18, Y+4	; 0x04
    1744:	3d 81       	ldd	r19, Y+5	; 0x05
    1746:	22 30       	cpi	r18, 0x02	; 2
    1748:	31 05       	cpc	r19, r1
    174a:	2c f4       	brge	.+10     	; 0x1756 <DIO_U8SetPortValue+0x126>
    174c:	8c 81       	ldd	r24, Y+4	; 0x04
    174e:	9d 81       	ldd	r25, Y+5	; 0x05
    1750:	00 97       	sbiw	r24, 0x00	; 0
    1752:	61 f0       	breq	.+24     	; 0x176c <DIO_U8SetPortValue+0x13c>
    1754:	1f c0       	rjmp	.+62     	; 0x1794 <DIO_U8SetPortValue+0x164>
    1756:	2c 81       	ldd	r18, Y+4	; 0x04
    1758:	3d 81       	ldd	r19, Y+5	; 0x05
    175a:	22 30       	cpi	r18, 0x02	; 2
    175c:	31 05       	cpc	r19, r1
    175e:	81 f0       	breq	.+32     	; 0x1780 <DIO_U8SetPortValue+0x150>
    1760:	8c 81       	ldd	r24, Y+4	; 0x04
    1762:	9d 81       	ldd	r25, Y+5	; 0x05
    1764:	83 30       	cpi	r24, 0x03	; 3
    1766:	91 05       	cpc	r25, r1
    1768:	81 f0       	breq	.+32     	; 0x178a <DIO_U8SetPortValue+0x15a>
    176a:	14 c0       	rjmp	.+40     	; 0x1794 <DIO_U8SetPortValue+0x164>
			{
				case DIO_PORTA: PORTA=Copy_U8Value; break;
    176c:	eb e3       	ldi	r30, 0x3B	; 59
    176e:	f0 e0       	ldi	r31, 0x00	; 0
    1770:	8b 81       	ldd	r24, Y+3	; 0x03
    1772:	80 83       	st	Z, r24
    1774:	14 c0       	rjmp	.+40     	; 0x179e <DIO_U8SetPortValue+0x16e>
				case DIO_PORTB: PORTB=Copy_U8Value; break;
    1776:	e8 e3       	ldi	r30, 0x38	; 56
    1778:	f0 e0       	ldi	r31, 0x00	; 0
    177a:	8b 81       	ldd	r24, Y+3	; 0x03
    177c:	80 83       	st	Z, r24
    177e:	0f c0       	rjmp	.+30     	; 0x179e <DIO_U8SetPortValue+0x16e>
				case DIO_PORTC: PORTC=Copy_U8Value; break;
    1780:	e5 e3       	ldi	r30, 0x35	; 53
    1782:	f0 e0       	ldi	r31, 0x00	; 0
    1784:	8b 81       	ldd	r24, Y+3	; 0x03
    1786:	80 83       	st	Z, r24
    1788:	0a c0       	rjmp	.+20     	; 0x179e <DIO_U8SetPortValue+0x16e>
				case DIO_PORTD: PORTD=Copy_U8Value; break;
    178a:	e2 e3       	ldi	r30, 0x32	; 50
    178c:	f0 e0       	ldi	r31, 0x00	; 0
    178e:	8b 81       	ldd	r24, Y+3	; 0x03
    1790:	80 83       	st	Z, r24
    1792:	05 c0       	rjmp	.+10     	; 0x179e <DIO_U8SetPortValue+0x16e>
				default:
				Local_U8ErrorState=ERROR_STATE_OK;
    1794:	81 e0       	ldi	r24, 0x01	; 1
    1796:	89 83       	std	Y+1, r24	; 0x01
    1798:	02 c0       	rjmp	.+4      	; 0x179e <DIO_U8SetPortValue+0x16e>
		}
		
	}
	else
	{
		 Local_U8ErrorState=ERROR_STATE_OK;
    179a:	81 e0       	ldi	r24, 0x01	; 1
    179c:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_U8ErrorState;
    179e:	89 81       	ldd	r24, Y+1	; 0x01
}
    17a0:	29 96       	adiw	r28, 0x09	; 9
    17a2:	0f b6       	in	r0, 0x3f	; 63
    17a4:	f8 94       	cli
    17a6:	de bf       	out	0x3e, r29	; 62
    17a8:	0f be       	out	0x3f, r0	; 63
    17aa:	cd bf       	out	0x3d, r28	; 61
    17ac:	cf 91       	pop	r28
    17ae:	df 91       	pop	r29
    17b0:	08 95       	ret

000017b2 <DIO_U8GetPortValue>:

u8 DIO_U8GetPortValue(u8 Copy_U8PortNumb,u8 *Copy_U8Value)
{
    17b2:	df 93       	push	r29
    17b4:	cf 93       	push	r28
    17b6:	00 d0       	rcall	.+0      	; 0x17b8 <DIO_U8GetPortValue+0x6>
    17b8:	00 d0       	rcall	.+0      	; 0x17ba <DIO_U8GetPortValue+0x8>
    17ba:	00 d0       	rcall	.+0      	; 0x17bc <DIO_U8GetPortValue+0xa>
    17bc:	cd b7       	in	r28, 0x3d	; 61
    17be:	de b7       	in	r29, 0x3e	; 62
    17c0:	8a 83       	std	Y+2, r24	; 0x02
    17c2:	7c 83       	std	Y+4, r23	; 0x04
    17c4:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_U8ErrorState=ERROR_STATE_NOK;
    17c6:	19 82       	std	Y+1, r1	; 0x01
	if((Copy_U8PortNumb <= DIO_PORTD))
    17c8:	8a 81       	ldd	r24, Y+2	; 0x02
    17ca:	84 30       	cpi	r24, 0x04	; 4
    17cc:	08 f0       	brcs	.+2      	; 0x17d0 <DIO_U8GetPortValue+0x1e>
    17ce:	3e c0       	rjmp	.+124    	; 0x184c <DIO_U8GetPortValue+0x9a>
	{
		switch(Copy_U8PortNumb)
    17d0:	8a 81       	ldd	r24, Y+2	; 0x02
    17d2:	28 2f       	mov	r18, r24
    17d4:	30 e0       	ldi	r19, 0x00	; 0
    17d6:	3e 83       	std	Y+6, r19	; 0x06
    17d8:	2d 83       	std	Y+5, r18	; 0x05
    17da:	8d 81       	ldd	r24, Y+5	; 0x05
    17dc:	9e 81       	ldd	r25, Y+6	; 0x06
    17de:	81 30       	cpi	r24, 0x01	; 1
    17e0:	91 05       	cpc	r25, r1
    17e2:	e1 f0       	breq	.+56     	; 0x181c <DIO_U8GetPortValue+0x6a>
    17e4:	2d 81       	ldd	r18, Y+5	; 0x05
    17e6:	3e 81       	ldd	r19, Y+6	; 0x06
    17e8:	22 30       	cpi	r18, 0x02	; 2
    17ea:	31 05       	cpc	r19, r1
    17ec:	2c f4       	brge	.+10     	; 0x17f8 <DIO_U8GetPortValue+0x46>
    17ee:	8d 81       	ldd	r24, Y+5	; 0x05
    17f0:	9e 81       	ldd	r25, Y+6	; 0x06
    17f2:	00 97       	sbiw	r24, 0x00	; 0
    17f4:	61 f0       	breq	.+24     	; 0x180e <DIO_U8GetPortValue+0x5c>
    17f6:	27 c0       	rjmp	.+78     	; 0x1846 <DIO_U8GetPortValue+0x94>
    17f8:	2d 81       	ldd	r18, Y+5	; 0x05
    17fa:	3e 81       	ldd	r19, Y+6	; 0x06
    17fc:	22 30       	cpi	r18, 0x02	; 2
    17fe:	31 05       	cpc	r19, r1
    1800:	a1 f0       	breq	.+40     	; 0x182a <DIO_U8GetPortValue+0x78>
    1802:	8d 81       	ldd	r24, Y+5	; 0x05
    1804:	9e 81       	ldd	r25, Y+6	; 0x06
    1806:	83 30       	cpi	r24, 0x03	; 3
    1808:	91 05       	cpc	r25, r1
    180a:	b1 f0       	breq	.+44     	; 0x1838 <DIO_U8GetPortValue+0x86>
    180c:	1c c0       	rjmp	.+56     	; 0x1846 <DIO_U8GetPortValue+0x94>
		{
			case DIO_PORTA: *Copy_U8Value=PINA; break;
    180e:	e9 e3       	ldi	r30, 0x39	; 57
    1810:	f0 e0       	ldi	r31, 0x00	; 0
    1812:	80 81       	ld	r24, Z
    1814:	eb 81       	ldd	r30, Y+3	; 0x03
    1816:	fc 81       	ldd	r31, Y+4	; 0x04
    1818:	80 83       	st	Z, r24
    181a:	1a c0       	rjmp	.+52     	; 0x1850 <DIO_U8GetPortValue+0x9e>
			case DIO_PORTB: *Copy_U8Value=PINB;; break;
    181c:	e6 e3       	ldi	r30, 0x36	; 54
    181e:	f0 e0       	ldi	r31, 0x00	; 0
    1820:	80 81       	ld	r24, Z
    1822:	eb 81       	ldd	r30, Y+3	; 0x03
    1824:	fc 81       	ldd	r31, Y+4	; 0x04
    1826:	80 83       	st	Z, r24
    1828:	13 c0       	rjmp	.+38     	; 0x1850 <DIO_U8GetPortValue+0x9e>
			case DIO_PORTC: *Copy_U8Value=PINC;; break;
    182a:	e3 e3       	ldi	r30, 0x33	; 51
    182c:	f0 e0       	ldi	r31, 0x00	; 0
    182e:	80 81       	ld	r24, Z
    1830:	eb 81       	ldd	r30, Y+3	; 0x03
    1832:	fc 81       	ldd	r31, Y+4	; 0x04
    1834:	80 83       	st	Z, r24
    1836:	0c c0       	rjmp	.+24     	; 0x1850 <DIO_U8GetPortValue+0x9e>
			case DIO_PORTD: *Copy_U8Value=PIND;; break;
    1838:	e0 e3       	ldi	r30, 0x30	; 48
    183a:	f0 e0       	ldi	r31, 0x00	; 0
    183c:	80 81       	ld	r24, Z
    183e:	eb 81       	ldd	r30, Y+3	; 0x03
    1840:	fc 81       	ldd	r31, Y+4	; 0x04
    1842:	80 83       	st	Z, r24
    1844:	05 c0       	rjmp	.+10     	; 0x1850 <DIO_U8GetPortValue+0x9e>
			default:
			Local_U8ErrorState=ERROR_STATE_OK;
    1846:	81 e0       	ldi	r24, 0x01	; 1
    1848:	89 83       	std	Y+1, r24	; 0x01
    184a:	02 c0       	rjmp	.+4      	; 0x1850 <DIO_U8GetPortValue+0x9e>
			break;	
		}
	}
	else
	{
		 Local_U8ErrorState=ERROR_STATE_OK;
    184c:	81 e0       	ldi	r24, 0x01	; 1
    184e:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_U8ErrorState;
    1850:	89 81       	ldd	r24, Y+1	; 0x01
}
    1852:	26 96       	adiw	r28, 0x06	; 6
    1854:	0f b6       	in	r0, 0x3f	; 63
    1856:	f8 94       	cli
    1858:	de bf       	out	0x3e, r29	; 62
    185a:	0f be       	out	0x3f, r0	; 63
    185c:	cd bf       	out	0x3d, r28	; 61
    185e:	cf 91       	pop	r28
    1860:	df 91       	pop	r29
    1862:	08 95       	ret

00001864 <I2C_VidMasterInit>:
#include "I2C_Interface.h"
#include "I2C_Private.h"


void I2C_VidMasterInit(void)
{
    1864:	df 93       	push	r29
    1866:	cf 93       	push	r28
    1868:	cd b7       	in	r28, 0x3d	; 61
    186a:	de b7       	in	r29, 0x3e	; 62
	/*01- set the Prescaller-> 1*/
	CLR_BIT(I2C_TWSR,TWPS0);
    186c:	a1 e2       	ldi	r26, 0x21	; 33
    186e:	b0 e0       	ldi	r27, 0x00	; 0
    1870:	e1 e2       	ldi	r30, 0x21	; 33
    1872:	f0 e0       	ldi	r31, 0x00	; 0
    1874:	80 81       	ld	r24, Z
    1876:	8e 7f       	andi	r24, 0xFE	; 254
    1878:	8c 93       	st	X, r24
	CLR_BIT(I2C_TWSR,TWPS1);
    187a:	a1 e2       	ldi	r26, 0x21	; 33
    187c:	b0 e0       	ldi	r27, 0x00	; 0
    187e:	e1 e2       	ldi	r30, 0x21	; 33
    1880:	f0 e0       	ldi	r31, 0x00	; 0
    1882:	80 81       	ld	r24, Z
    1884:	8d 7f       	andi	r24, 0xFD	; 253
    1886:	8c 93       	st	X, r24
	/*02- choose Frequancy -->400KHZ Max speed and for 200 200KHZ --> I2C_TWBR=12 */
	I2C_TWBR=2;
    1888:	e0 e2       	ldi	r30, 0x20	; 32
    188a:	f0 e0       	ldi	r31, 0x00	; 0
    188c:	82 e0       	ldi	r24, 0x02	; 2
    188e:	80 83       	st	Z, r24
	/*03- Enable I2C*/
	SET_BIT(I2C_TWCR,TWEN);
    1890:	a6 e5       	ldi	r26, 0x56	; 86
    1892:	b0 e0       	ldi	r27, 0x00	; 0
    1894:	e6 e5       	ldi	r30, 0x56	; 86
    1896:	f0 e0       	ldi	r31, 0x00	; 0
    1898:	80 81       	ld	r24, Z
    189a:	84 60       	ori	r24, 0x04	; 4
    189c:	8c 93       	st	X, r24
}
    189e:	cf 91       	pop	r28
    18a0:	df 91       	pop	r29
    18a2:	08 95       	ret

000018a4 <I2C_VidSlaveInit>:

void I2C_VidSlaveInit(u8 Copy_u8SlaveAddress)
{
    18a4:	df 93       	push	r29
    18a6:	cf 93       	push	r28
    18a8:	0f 92       	push	r0
    18aa:	cd b7       	in	r28, 0x3d	; 61
    18ac:	de b7       	in	r29, 0x3e	; 62
    18ae:	89 83       	std	Y+1, r24	; 0x01
	/*01- Enable the ACK Bit */
	SET_BIT(I2C_TWCR,TWEA);
    18b0:	a6 e5       	ldi	r26, 0x56	; 86
    18b2:	b0 e0       	ldi	r27, 0x00	; 0
    18b4:	e6 e5       	ldi	r30, 0x56	; 86
    18b6:	f0 e0       	ldi	r31, 0x00	; 0
    18b8:	80 81       	ld	r24, Z
    18ba:	80 64       	ori	r24, 0x40	; 64
    18bc:	8c 93       	st	X, r24
	/*02- Write Slave Address --> only 7 MSB*/
	I2C_TWAR=Copy_u8SlaveAddress<<1;  // as the data is only 7 bits and bit 0 is read write bit
    18be:	e2 e2       	ldi	r30, 0x22	; 34
    18c0:	f0 e0       	ldi	r31, 0x00	; 0
    18c2:	89 81       	ldd	r24, Y+1	; 0x01
    18c4:	88 0f       	add	r24, r24
    18c6:	80 83       	st	Z, r24
	/*03- Enable I2C */
	SET_BIT(I2C_TWCR,TWEN);
    18c8:	a6 e5       	ldi	r26, 0x56	; 86
    18ca:	b0 e0       	ldi	r27, 0x00	; 0
    18cc:	e6 e5       	ldi	r30, 0x56	; 86
    18ce:	f0 e0       	ldi	r31, 0x00	; 0
    18d0:	80 81       	ld	r24, Z
    18d2:	84 60       	ori	r24, 0x04	; 4
    18d4:	8c 93       	st	X, r24
}
    18d6:	0f 90       	pop	r0
    18d8:	cf 91       	pop	r28
    18da:	df 91       	pop	r29
    18dc:	08 95       	ret

000018de <I2C_VidStartCondition>:

void I2C_VidStartCondition(void)
{
    18de:	df 93       	push	r29
    18e0:	cf 93       	push	r28
    18e2:	cd b7       	in	r28, 0x3d	; 61
    18e4:	de b7       	in	r29, 0x3e	; 62
	/*01- Clear the flag & Enable the SC Pins*/
	
	SET_BIT(I2C_TWCR,TWINT);
    18e6:	a6 e5       	ldi	r26, 0x56	; 86
    18e8:	b0 e0       	ldi	r27, 0x00	; 0
    18ea:	e6 e5       	ldi	r30, 0x56	; 86
    18ec:	f0 e0       	ldi	r31, 0x00	; 0
    18ee:	80 81       	ld	r24, Z
    18f0:	80 68       	ori	r24, 0x80	; 128
    18f2:	8c 93       	st	X, r24
	SET_BIT(I2C_TWCR,TWSTA);
    18f4:	a6 e5       	ldi	r26, 0x56	; 86
    18f6:	b0 e0       	ldi	r27, 0x00	; 0
    18f8:	e6 e5       	ldi	r30, 0x56	; 86
    18fa:	f0 e0       	ldi	r31, 0x00	; 0
    18fc:	80 81       	ld	r24, Z
    18fe:	80 62       	ori	r24, 0x20	; 32
    1900:	8c 93       	st	X, r24
	
	/*02- wait for flag to be Cleared ---> Stuck */
	
	while((GET_BIT(I2C_TWCR,TWINT))==0);
    1902:	e6 e5       	ldi	r30, 0x56	; 86
    1904:	f0 e0       	ldi	r31, 0x00	; 0
    1906:	80 81       	ld	r24, Z
    1908:	88 23       	and	r24, r24
    190a:	dc f7       	brge	.-10     	; 0x1902 <I2C_VidStartCondition+0x24>
}
    190c:	cf 91       	pop	r28
    190e:	df 91       	pop	r29
    1910:	08 95       	ret

00001912 <I2C_VidStopCondition>:

void I2C_VidStopCondition(void)
{
    1912:	df 93       	push	r29
    1914:	cf 93       	push	r28
    1916:	cd b7       	in	r28, 0x3d	; 61
    1918:	de b7       	in	r29, 0x3e	; 62
	/*01- Clear the flag & Enable the SC Pins*/
	
	SET_BIT(I2C_TWCR,TWINT);
    191a:	a6 e5       	ldi	r26, 0x56	; 86
    191c:	b0 e0       	ldi	r27, 0x00	; 0
    191e:	e6 e5       	ldi	r30, 0x56	; 86
    1920:	f0 e0       	ldi	r31, 0x00	; 0
    1922:	80 81       	ld	r24, Z
    1924:	80 68       	ori	r24, 0x80	; 128
    1926:	8c 93       	st	X, r24
	SET_BIT(I2C_TWCR,TWSTO);
    1928:	a6 e5       	ldi	r26, 0x56	; 86
    192a:	b0 e0       	ldi	r27, 0x00	; 0
    192c:	e6 e5       	ldi	r30, 0x56	; 86
    192e:	f0 e0       	ldi	r31, 0x00	; 0
    1930:	80 81       	ld	r24, Z
    1932:	80 61       	ori	r24, 0x10	; 16
    1934:	8c 93       	st	X, r24
}
    1936:	cf 91       	pop	r28
    1938:	df 91       	pop	r29
    193a:	08 95       	ret

0000193c <I2C_VidSlaveAddressWrite>:

void I2C_VidSlaveAddressWrite(u8 Copy_u8SlaveAddress)//written by master
{
    193c:	df 93       	push	r29
    193e:	cf 93       	push	r28
    1940:	0f 92       	push	r0
    1942:	cd b7       	in	r28, 0x3d	; 61
    1944:	de b7       	in	r29, 0x3e	; 62
    1946:	89 83       	std	Y+1, r24	; 0x01
	/*01- Write Slave Address --> only 7 MSB*/
	I2C_TWDR=Copy_u8SlaveAddress<<1;
    1948:	e3 e2       	ldi	r30, 0x23	; 35
    194a:	f0 e0       	ldi	r31, 0x00	; 0
    194c:	89 81       	ldd	r24, Y+1	; 0x01
    194e:	88 0f       	add	r24, r24
    1950:	80 83       	st	Z, r24
	/*02- Clear TWGCE bit to select Write  */
	CLR_BIT(I2C_TWDR,TWGCE);
    1952:	a3 e2       	ldi	r26, 0x23	; 35
    1954:	b0 e0       	ldi	r27, 0x00	; 0
    1956:	e3 e2       	ldi	r30, 0x23	; 35
    1958:	f0 e0       	ldi	r31, 0x00	; 0
    195a:	80 81       	ld	r24, Z
    195c:	8e 7f       	andi	r24, 0xFE	; 254
    195e:	8c 93       	st	X, r24

	CLR_BIT(I2C_TWCR,TWSTA);
    1960:	a6 e5       	ldi	r26, 0x56	; 86
    1962:	b0 e0       	ldi	r27, 0x00	; 0
    1964:	e6 e5       	ldi	r30, 0x56	; 86
    1966:	f0 e0       	ldi	r31, 0x00	; 0
    1968:	80 81       	ld	r24, Z
    196a:	8f 7d       	andi	r24, 0xDF	; 223
    196c:	8c 93       	st	X, r24
	/*03-Clear flag */
	SET_BIT(I2C_TWCR,TWINT);
    196e:	a6 e5       	ldi	r26, 0x56	; 86
    1970:	b0 e0       	ldi	r27, 0x00	; 0
    1972:	e6 e5       	ldi	r30, 0x56	; 86
    1974:	f0 e0       	ldi	r31, 0x00	; 0
    1976:	80 81       	ld	r24, Z
    1978:	80 68       	ori	r24, 0x80	; 128
    197a:	8c 93       	st	X, r24
	
	/*04- wait for flag to be Cleared ---> Stuck */
	while((GET_BIT(I2C_TWCR,TWINT))==0);
    197c:	e6 e5       	ldi	r30, 0x56	; 86
    197e:	f0 e0       	ldi	r31, 0x00	; 0
    1980:	80 81       	ld	r24, Z
    1982:	88 23       	and	r24, r24
    1984:	dc f7       	brge	.-10     	; 0x197c <I2C_VidSlaveAddressWrite+0x40>

}
    1986:	0f 90       	pop	r0
    1988:	cf 91       	pop	r28
    198a:	df 91       	pop	r29
    198c:	08 95       	ret

0000198e <I2C_VidSlaveAddressRead>:

void I2C_VidSlaveAddressRead(u8 Copy_u8SlaveAddress)
{
    198e:	df 93       	push	r29
    1990:	cf 93       	push	r28
    1992:	0f 92       	push	r0
    1994:	cd b7       	in	r28, 0x3d	; 61
    1996:	de b7       	in	r29, 0x3e	; 62
    1998:	89 83       	std	Y+1, r24	; 0x01
	/*01- Write Slave Address --> only 7 MSB*/
	I2C_TWDR=Copy_u8SlaveAddress<<1;
    199a:	e3 e2       	ldi	r30, 0x23	; 35
    199c:	f0 e0       	ldi	r31, 0x00	; 0
    199e:	89 81       	ldd	r24, Y+1	; 0x01
    19a0:	88 0f       	add	r24, r24
    19a2:	80 83       	st	Z, r24
	
	/*02- Clear TWGCE bit to select Write  */
	
	SET_BIT(I2C_TWDR,TWGCE);
    19a4:	a3 e2       	ldi	r26, 0x23	; 35
    19a6:	b0 e0       	ldi	r27, 0x00	; 0
    19a8:	e3 e2       	ldi	r30, 0x23	; 35
    19aa:	f0 e0       	ldi	r31, 0x00	; 0
    19ac:	80 81       	ld	r24, Z
    19ae:	81 60       	ori	r24, 0x01	; 1
    19b0:	8c 93       	st	X, r24
	CLR_BIT(I2C_TWCR,TWSTA);
    19b2:	a6 e5       	ldi	r26, 0x56	; 86
    19b4:	b0 e0       	ldi	r27, 0x00	; 0
    19b6:	e6 e5       	ldi	r30, 0x56	; 86
    19b8:	f0 e0       	ldi	r31, 0x00	; 0
    19ba:	80 81       	ld	r24, Z
    19bc:	8f 7d       	andi	r24, 0xDF	; 223
    19be:	8c 93       	st	X, r24
	
	/*03-Clear flag */
	SET_BIT(I2C_TWCR,TWINT);
    19c0:	a6 e5       	ldi	r26, 0x56	; 86
    19c2:	b0 e0       	ldi	r27, 0x00	; 0
    19c4:	e6 e5       	ldi	r30, 0x56	; 86
    19c6:	f0 e0       	ldi	r31, 0x00	; 0
    19c8:	80 81       	ld	r24, Z
    19ca:	80 68       	ori	r24, 0x80	; 128
    19cc:	8c 93       	st	X, r24
	
	/*04- wait for flag to be Cleared ---> Stuck */
	while((GET_BIT(I2C_TWCR,TWINT))==0);
    19ce:	e6 e5       	ldi	r30, 0x56	; 86
    19d0:	f0 e0       	ldi	r31, 0x00	; 0
    19d2:	80 81       	ld	r24, Z
    19d4:	88 23       	and	r24, r24
    19d6:	dc f7       	brge	.-10     	; 0x19ce <I2C_VidSlaveAddressRead+0x40>
}
    19d8:	0f 90       	pop	r0
    19da:	cf 91       	pop	r28
    19dc:	df 91       	pop	r29
    19de:	08 95       	ret

000019e0 <I2C_VidMastarSendData>:

void I2C_VidMastarSendData(u8 Copy_u8Data)
{
    19e0:	df 93       	push	r29
    19e2:	cf 93       	push	r28
    19e4:	0f 92       	push	r0
    19e6:	cd b7       	in	r28, 0x3d	; 61
    19e8:	de b7       	in	r29, 0x3e	; 62
    19ea:	89 83       	std	Y+1, r24	; 0x01
	/*01- Send the data to I2C Data Register */
	I2C_TWDR=Copy_u8Data;
    19ec:	e3 e2       	ldi	r30, 0x23	; 35
    19ee:	f0 e0       	ldi	r31, 0x00	; 0
    19f0:	89 81       	ldd	r24, Y+1	; 0x01
    19f2:	80 83       	st	Z, r24
	
	/*02-Clear flag */
	SET_BIT(I2C_TWCR,TWINT);
    19f4:	a6 e5       	ldi	r26, 0x56	; 86
    19f6:	b0 e0       	ldi	r27, 0x00	; 0
    19f8:	e6 e5       	ldi	r30, 0x56	; 86
    19fa:	f0 e0       	ldi	r31, 0x00	; 0
    19fc:	80 81       	ld	r24, Z
    19fe:	80 68       	ori	r24, 0x80	; 128
    1a00:	8c 93       	st	X, r24
	
	/*03- wait for flag to be Cleared ---> Stuck */
	while((GET_BIT(I2C_TWCR,TWINT))==0);
    1a02:	e6 e5       	ldi	r30, 0x56	; 86
    1a04:	f0 e0       	ldi	r31, 0x00	; 0
    1a06:	80 81       	ld	r24, Z
    1a08:	88 23       	and	r24, r24
    1a0a:	dc f7       	brge	.-10     	; 0x1a02 <I2C_VidMastarSendData+0x22>
}
    1a0c:	0f 90       	pop	r0
    1a0e:	cf 91       	pop	r28
    1a10:	df 91       	pop	r29
    1a12:	08 95       	ret

00001a14 <I2C_VidMastarRecieveData>:

u8 I2C_VidMastarRecieveData(void)
{
    1a14:	df 93       	push	r29
    1a16:	cf 93       	push	r28
    1a18:	cd b7       	in	r28, 0x3d	; 61
    1a1a:	de b7       	in	r29, 0x3e	; 62
	/*01-Clear flag */
	SET_BIT(I2C_TWCR,TWINT);
    1a1c:	a6 e5       	ldi	r26, 0x56	; 86
    1a1e:	b0 e0       	ldi	r27, 0x00	; 0
    1a20:	e6 e5       	ldi	r30, 0x56	; 86
    1a22:	f0 e0       	ldi	r31, 0x00	; 0
    1a24:	80 81       	ld	r24, Z
    1a26:	80 68       	ori	r24, 0x80	; 128
    1a28:	8c 93       	st	X, r24
	
	/*02- wait for flag to be Cleared ---> Stuck */
	while((GET_BIT(I2C_TWCR,TWINT))==0);
    1a2a:	e6 e5       	ldi	r30, 0x56	; 86
    1a2c:	f0 e0       	ldi	r31, 0x00	; 0
    1a2e:	80 81       	ld	r24, Z
    1a30:	88 23       	and	r24, r24
    1a32:	dc f7       	brge	.-10     	; 0x1a2a <I2C_VidMastarRecieveData+0x16>
	
	/*03- read the data to I2C Data Register */
	return I2C_TWDR;
    1a34:	e3 e2       	ldi	r30, 0x23	; 35
    1a36:	f0 e0       	ldi	r31, 0x00	; 0
    1a38:	80 81       	ld	r24, Z
}
    1a3a:	cf 91       	pop	r28
    1a3c:	df 91       	pop	r29
    1a3e:	08 95       	ret

00001a40 <I2C_VidSlaveRecieveData>:

u8 I2C_VidSlaveRecieveData(void)
{
    1a40:	df 93       	push	r29
    1a42:	cf 93       	push	r28
    1a44:	cd b7       	in	r28, 0x3d	; 61
    1a46:	de b7       	in	r29, 0x3e	; 62
	/*01- wait ---> Stuck */
	while((I2C_TWSR&0xf8)!=0x60);
    1a48:	e1 e2       	ldi	r30, 0x21	; 33
    1a4a:	f0 e0       	ldi	r31, 0x00	; 0
    1a4c:	80 81       	ld	r24, Z
    1a4e:	88 2f       	mov	r24, r24
    1a50:	90 e0       	ldi	r25, 0x00	; 0
    1a52:	88 7f       	andi	r24, 0xF8	; 248
    1a54:	90 70       	andi	r25, 0x00	; 0
    1a56:	80 36       	cpi	r24, 0x60	; 96
    1a58:	91 05       	cpc	r25, r1
    1a5a:	b1 f7       	brne	.-20     	; 0x1a48 <I2C_VidSlaveRecieveData+0x8>

	/*02- set the I2C Init */
	SET_BIT(I2C_TWCR,TWINT);
    1a5c:	a6 e5       	ldi	r26, 0x56	; 86
    1a5e:	b0 e0       	ldi	r27, 0x00	; 0
    1a60:	e6 e5       	ldi	r30, 0x56	; 86
    1a62:	f0 e0       	ldi	r31, 0x00	; 0
    1a64:	80 81       	ld	r24, Z
    1a66:	80 68       	ori	r24, 0x80	; 128
    1a68:	8c 93       	st	X, r24
	/*03- wait ---> Stuck */
	while((I2C_TWSR&0xf8)!=0x80);
    1a6a:	e1 e2       	ldi	r30, 0x21	; 33
    1a6c:	f0 e0       	ldi	r31, 0x00	; 0
    1a6e:	80 81       	ld	r24, Z
    1a70:	88 2f       	mov	r24, r24
    1a72:	90 e0       	ldi	r25, 0x00	; 0
    1a74:	88 7f       	andi	r24, 0xF8	; 248
    1a76:	90 70       	andi	r25, 0x00	; 0
    1a78:	80 38       	cpi	r24, 0x80	; 128
    1a7a:	91 05       	cpc	r25, r1
    1a7c:	b1 f7       	brne	.-20     	; 0x1a6a <I2C_VidSlaveRecieveData+0x2a>

	/*04- read the data to I2C Data Register */
	return I2C_TWDR;
    1a7e:	e3 e2       	ldi	r30, 0x23	; 35
    1a80:	f0 e0       	ldi	r31, 0x00	; 0
    1a82:	80 81       	ld	r24, Z

}
    1a84:	cf 91       	pop	r28
    1a86:	df 91       	pop	r29
    1a88:	08 95       	ret

00001a8a <KPAD_VidInit>:
#include "KPAD_Interface.h"
#include "KPAD_Private.h"
#include "KPAD_Config.h"

void KPAD_VidInit(void)
{
    1a8a:	df 93       	push	r29
    1a8c:	cf 93       	push	r28
    1a8e:	cd b7       	in	r28, 0x3d	; 61
    1a90:	de b7       	in	r29, 0x3e	; 62
	DIO_U8SetPortDirection(DIO_PORTA, 0xF0);
    1a92:	80 e0       	ldi	r24, 0x00	; 0
    1a94:	60 ef       	ldi	r22, 0xF0	; 240
    1a96:	0e 94 57 0a 	call	0x14ae	; 0x14ae <DIO_U8SetPortDirection>
	DIO_U8SetPortValue(DIO_PORTA, 0xFF);
    1a9a:	80 e0       	ldi	r24, 0x00	; 0
    1a9c:	6f ef       	ldi	r22, 0xFF	; 255
    1a9e:	0e 94 18 0b 	call	0x1630	; 0x1630 <DIO_U8SetPortValue>
}
    1aa2:	cf 91       	pop	r28
    1aa4:	df 91       	pop	r29
    1aa6:	08 95       	ret

00001aa8 <KPAD_U8GetPressedKey>:

u8 KPAD_U8GetPressedKey(u8 *Copy_U8Returned)
{
    1aa8:	df 93       	push	r29
    1aaa:	cf 93       	push	r28
    1aac:	cd b7       	in	r28, 0x3d	; 61
    1aae:	de b7       	in	r29, 0x3e	; 62
    1ab0:	e1 97       	sbiw	r28, 0x31	; 49
    1ab2:	0f b6       	in	r0, 0x3f	; 63
    1ab4:	f8 94       	cli
    1ab6:	de bf       	out	0x3e, r29	; 62
    1ab8:	0f be       	out	0x3f, r0	; 63
    1aba:	cd bf       	out	0x3d, r28	; 61
    1abc:	9c a7       	std	Y+44, r25	; 0x2c
    1abe:	8b a7       	std	Y+43, r24	; 0x2b
	u8 Local_U8ErrorState=ERROR_STATE_NOK;
    1ac0:	19 8a       	std	Y+17, r1	; 0x11
	u8 LocaL_U8KPAD_ARR[ROW_NUMBERS][COLUMN_NUMBERS]= KPAD_ARR;
    1ac2:	ce 01       	movw	r24, r28
    1ac4:	42 96       	adiw	r24, 0x12	; 18
    1ac6:	9e a7       	std	Y+46, r25	; 0x2e
    1ac8:	8d a7       	std	Y+45, r24	; 0x2d
    1aca:	e4 e8       	ldi	r30, 0x84	; 132
    1acc:	f3 e0       	ldi	r31, 0x03	; 3
    1ace:	f8 ab       	std	Y+48, r31	; 0x30
    1ad0:	ef a7       	std	Y+47, r30	; 0x2f
    1ad2:	f0 e1       	ldi	r31, 0x10	; 16
    1ad4:	f9 ab       	std	Y+49, r31	; 0x31
    1ad6:	ef a5       	ldd	r30, Y+47	; 0x2f
    1ad8:	f8 a9       	ldd	r31, Y+48	; 0x30
    1ada:	00 80       	ld	r0, Z
    1adc:	8f a5       	ldd	r24, Y+47	; 0x2f
    1ade:	98 a9       	ldd	r25, Y+48	; 0x30
    1ae0:	01 96       	adiw	r24, 0x01	; 1
    1ae2:	98 ab       	std	Y+48, r25	; 0x30
    1ae4:	8f a7       	std	Y+47, r24	; 0x2f
    1ae6:	ed a5       	ldd	r30, Y+45	; 0x2d
    1ae8:	fe a5       	ldd	r31, Y+46	; 0x2e
    1aea:	00 82       	st	Z, r0
    1aec:	8d a5       	ldd	r24, Y+45	; 0x2d
    1aee:	9e a5       	ldd	r25, Y+46	; 0x2e
    1af0:	01 96       	adiw	r24, 0x01	; 1
    1af2:	9e a7       	std	Y+46, r25	; 0x2e
    1af4:	8d a7       	std	Y+45, r24	; 0x2d
    1af6:	99 a9       	ldd	r25, Y+49	; 0x31
    1af8:	91 50       	subi	r25, 0x01	; 1
    1afa:	99 ab       	std	Y+49, r25	; 0x31
    1afc:	e9 a9       	ldd	r30, Y+49	; 0x31
    1afe:	ee 23       	and	r30, r30
    1b00:	51 f7       	brne	.-44     	; 0x1ad6 <KPAD_U8GetPressedKey+0x2e>
	u8 Local_U8PinState;

	u8 Local_U8ColIndex,Local_U8CRowIndex;
	u8 KPAD_U8RowsPins[ROW_NUMBERS]={KPAD_ROW_PIN0,KPAD_ROW_PIN1,KPAD_ROW_PIN2,KPAD_ROW_PIN3};
    1b02:	1b a2       	std	Y+35, r1	; 0x23
    1b04:	81 e0       	ldi	r24, 0x01	; 1
    1b06:	8c a3       	std	Y+36, r24	; 0x24
    1b08:	82 e0       	ldi	r24, 0x02	; 2
    1b0a:	8d a3       	std	Y+37, r24	; 0x25
    1b0c:	83 e0       	ldi	r24, 0x03	; 3
    1b0e:	8e a3       	std	Y+38, r24	; 0x26
	u8 KPAD_U8ColsPins[COLUMN_NUMBERS]={KPAD_COLUMN_PIN0,KPAD_COLUMN_PIN1,KPAD_COLUMN_PIN2,KPAD_COLUMN_PIN3};
    1b10:	84 e0       	ldi	r24, 0x04	; 4
    1b12:	8f a3       	std	Y+39, r24	; 0x27
    1b14:	85 e0       	ldi	r24, 0x05	; 5
    1b16:	88 a7       	std	Y+40, r24	; 0x28
    1b18:	86 e0       	ldi	r24, 0x06	; 6
    1b1a:	89 a7       	std	Y+41, r24	; 0x29
    1b1c:	87 e0       	ldi	r24, 0x07	; 7
    1b1e:	8a a7       	std	Y+42, r24	; 0x2a

	if(Copy_U8Returned !=NULL)
    1b20:	8b a5       	ldd	r24, Y+43	; 0x2b
    1b22:	9c a5       	ldd	r25, Y+44	; 0x2c
    1b24:	00 97       	sbiw	r24, 0x00	; 0
    1b26:	09 f4       	brne	.+2      	; 0x1b2a <KPAD_U8GetPressedKey+0x82>
    1b28:	e5 c0       	rjmp	.+458    	; 0x1cf4 <KPAD_U8GetPressedKey+0x24c>
	{
		*Copy_U8Returned=0xff;
    1b2a:	eb a5       	ldd	r30, Y+43	; 0x2b
    1b2c:	fc a5       	ldd	r31, Y+44	; 0x2c
    1b2e:	8f ef       	ldi	r24, 0xFF	; 255
    1b30:	80 83       	st	Z, r24
		for(Local_U8ColIndex=0;Local_U8ColIndex <COLUMN_NUMBERS ; Local_U8ColIndex++)
    1b32:	18 8a       	std	Y+16, r1	; 0x10
    1b34:	da c0       	rjmp	.+436    	; 0x1cea <KPAD_U8GetPressedKey+0x242>
		{
			DIO_U8SetPinValue(KPAD_PORT,KPAD_U8ColsPins[Local_U8ColIndex],DIO_LOW);
    1b36:	88 89       	ldd	r24, Y+16	; 0x10
    1b38:	28 2f       	mov	r18, r24
    1b3a:	30 e0       	ldi	r19, 0x00	; 0
    1b3c:	ce 01       	movw	r24, r28
    1b3e:	87 96       	adiw	r24, 0x27	; 39
    1b40:	fc 01       	movw	r30, r24
    1b42:	e2 0f       	add	r30, r18
    1b44:	f3 1f       	adc	r31, r19
    1b46:	90 81       	ld	r25, Z
    1b48:	80 e0       	ldi	r24, 0x00	; 0
    1b4a:	69 2f       	mov	r22, r25
    1b4c:	40 e0       	ldi	r20, 0x00	; 0
    1b4e:	0e 94 15 08 	call	0x102a	; 0x102a <DIO_U8SetPinValue>
			for(Local_U8CRowIndex=0; Local_U8CRowIndex < ROW_NUMBERS ; Local_U8CRowIndex++)
    1b52:	1f 86       	std	Y+15, r1	; 0x0f
    1b54:	b5 c0       	rjmp	.+362    	; 0x1cc0 <KPAD_U8GetPressedKey+0x218>
			{
				DIO_U8GetPinValue(KPAD_PORT,KPAD_U8RowsPins[Local_U8CRowIndex],&Local_U8PinState);
    1b56:	8f 85       	ldd	r24, Y+15	; 0x0f
    1b58:	28 2f       	mov	r18, r24
    1b5a:	30 e0       	ldi	r19, 0x00	; 0
    1b5c:	ce 01       	movw	r24, r28
    1b5e:	83 96       	adiw	r24, 0x23	; 35
    1b60:	fc 01       	movw	r30, r24
    1b62:	e2 0f       	add	r30, r18
    1b64:	f3 1f       	adc	r31, r19
    1b66:	90 81       	ld	r25, Z
    1b68:	9e 01       	movw	r18, r28
    1b6a:	2e 5d       	subi	r18, 0xDE	; 222
    1b6c:	3f 4f       	sbci	r19, 0xFF	; 255
    1b6e:	80 e0       	ldi	r24, 0x00	; 0
    1b70:	69 2f       	mov	r22, r25
    1b72:	a9 01       	movw	r20, r18
    1b74:	0e 94 31 09 	call	0x1262	; 0x1262 <DIO_U8GetPinValue>
				if(Local_U8PinState==DIO_LOW)
    1b78:	8a a1       	ldd	r24, Y+34	; 0x22
    1b7a:	88 23       	and	r24, r24
    1b7c:	09 f0       	breq	.+2      	; 0x1b80 <KPAD_U8GetPressedKey+0xd8>
    1b7e:	9d c0       	rjmp	.+314    	; 0x1cba <KPAD_U8GetPressedKey+0x212>
    1b80:	80 e0       	ldi	r24, 0x00	; 0
    1b82:	90 e0       	ldi	r25, 0x00	; 0
    1b84:	a0 ef       	ldi	r26, 0xF0	; 240
    1b86:	b1 e4       	ldi	r27, 0x41	; 65
    1b88:	8b 87       	std	Y+11, r24	; 0x0b
    1b8a:	9c 87       	std	Y+12, r25	; 0x0c
    1b8c:	ad 87       	std	Y+13, r26	; 0x0d
    1b8e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b90:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b92:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b94:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b96:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b98:	20 e0       	ldi	r18, 0x00	; 0
    1b9a:	30 e0       	ldi	r19, 0x00	; 0
    1b9c:	4a ef       	ldi	r20, 0xFA	; 250
    1b9e:	54 e4       	ldi	r21, 0x44	; 68
    1ba0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ba4:	dc 01       	movw	r26, r24
    1ba6:	cb 01       	movw	r24, r22
    1ba8:	8f 83       	std	Y+7, r24	; 0x07
    1baa:	98 87       	std	Y+8, r25	; 0x08
    1bac:	a9 87       	std	Y+9, r26	; 0x09
    1bae:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1bb0:	6f 81       	ldd	r22, Y+7	; 0x07
    1bb2:	78 85       	ldd	r23, Y+8	; 0x08
    1bb4:	89 85       	ldd	r24, Y+9	; 0x09
    1bb6:	9a 85       	ldd	r25, Y+10	; 0x0a
    1bb8:	20 e0       	ldi	r18, 0x00	; 0
    1bba:	30 e0       	ldi	r19, 0x00	; 0
    1bbc:	40 e8       	ldi	r20, 0x80	; 128
    1bbe:	5f e3       	ldi	r21, 0x3F	; 63
    1bc0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1bc4:	88 23       	and	r24, r24
    1bc6:	2c f4       	brge	.+10     	; 0x1bd2 <KPAD_U8GetPressedKey+0x12a>
		__ticks = 1;
    1bc8:	81 e0       	ldi	r24, 0x01	; 1
    1bca:	90 e0       	ldi	r25, 0x00	; 0
    1bcc:	9e 83       	std	Y+6, r25	; 0x06
    1bce:	8d 83       	std	Y+5, r24	; 0x05
    1bd0:	3f c0       	rjmp	.+126    	; 0x1c50 <KPAD_U8GetPressedKey+0x1a8>
	else if (__tmp > 65535)
    1bd2:	6f 81       	ldd	r22, Y+7	; 0x07
    1bd4:	78 85       	ldd	r23, Y+8	; 0x08
    1bd6:	89 85       	ldd	r24, Y+9	; 0x09
    1bd8:	9a 85       	ldd	r25, Y+10	; 0x0a
    1bda:	20 e0       	ldi	r18, 0x00	; 0
    1bdc:	3f ef       	ldi	r19, 0xFF	; 255
    1bde:	4f e7       	ldi	r20, 0x7F	; 127
    1be0:	57 e4       	ldi	r21, 0x47	; 71
    1be2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1be6:	18 16       	cp	r1, r24
    1be8:	4c f5       	brge	.+82     	; 0x1c3c <KPAD_U8GetPressedKey+0x194>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1bea:	6b 85       	ldd	r22, Y+11	; 0x0b
    1bec:	7c 85       	ldd	r23, Y+12	; 0x0c
    1bee:	8d 85       	ldd	r24, Y+13	; 0x0d
    1bf0:	9e 85       	ldd	r25, Y+14	; 0x0e
    1bf2:	20 e0       	ldi	r18, 0x00	; 0
    1bf4:	30 e0       	ldi	r19, 0x00	; 0
    1bf6:	40 e2       	ldi	r20, 0x20	; 32
    1bf8:	51 e4       	ldi	r21, 0x41	; 65
    1bfa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bfe:	dc 01       	movw	r26, r24
    1c00:	cb 01       	movw	r24, r22
    1c02:	bc 01       	movw	r22, r24
    1c04:	cd 01       	movw	r24, r26
    1c06:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c0a:	dc 01       	movw	r26, r24
    1c0c:	cb 01       	movw	r24, r22
    1c0e:	9e 83       	std	Y+6, r25	; 0x06
    1c10:	8d 83       	std	Y+5, r24	; 0x05
    1c12:	0f c0       	rjmp	.+30     	; 0x1c32 <KPAD_U8GetPressedKey+0x18a>
    1c14:	88 ec       	ldi	r24, 0xC8	; 200
    1c16:	90 e0       	ldi	r25, 0x00	; 0
    1c18:	9c 83       	std	Y+4, r25	; 0x04
    1c1a:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1c1c:	8b 81       	ldd	r24, Y+3	; 0x03
    1c1e:	9c 81       	ldd	r25, Y+4	; 0x04
    1c20:	01 97       	sbiw	r24, 0x01	; 1
    1c22:	f1 f7       	brne	.-4      	; 0x1c20 <KPAD_U8GetPressedKey+0x178>
    1c24:	9c 83       	std	Y+4, r25	; 0x04
    1c26:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c28:	8d 81       	ldd	r24, Y+5	; 0x05
    1c2a:	9e 81       	ldd	r25, Y+6	; 0x06
    1c2c:	01 97       	sbiw	r24, 0x01	; 1
    1c2e:	9e 83       	std	Y+6, r25	; 0x06
    1c30:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c32:	8d 81       	ldd	r24, Y+5	; 0x05
    1c34:	9e 81       	ldd	r25, Y+6	; 0x06
    1c36:	00 97       	sbiw	r24, 0x00	; 0
    1c38:	69 f7       	brne	.-38     	; 0x1c14 <KPAD_U8GetPressedKey+0x16c>
    1c3a:	26 c0       	rjmp	.+76     	; 0x1c88 <KPAD_U8GetPressedKey+0x1e0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c3c:	6f 81       	ldd	r22, Y+7	; 0x07
    1c3e:	78 85       	ldd	r23, Y+8	; 0x08
    1c40:	89 85       	ldd	r24, Y+9	; 0x09
    1c42:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c44:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c48:	dc 01       	movw	r26, r24
    1c4a:	cb 01       	movw	r24, r22
    1c4c:	9e 83       	std	Y+6, r25	; 0x06
    1c4e:	8d 83       	std	Y+5, r24	; 0x05
    1c50:	8d 81       	ldd	r24, Y+5	; 0x05
    1c52:	9e 81       	ldd	r25, Y+6	; 0x06
    1c54:	9a 83       	std	Y+2, r25	; 0x02
    1c56:	89 83       	std	Y+1, r24	; 0x01
    1c58:	89 81       	ldd	r24, Y+1	; 0x01
    1c5a:	9a 81       	ldd	r25, Y+2	; 0x02
    1c5c:	01 97       	sbiw	r24, 0x01	; 1
    1c5e:	f1 f7       	brne	.-4      	; 0x1c5c <KPAD_U8GetPressedKey+0x1b4>
    1c60:	9a 83       	std	Y+2, r25	; 0x02
    1c62:	89 83       	std	Y+1, r24	; 0x01
    1c64:	11 c0       	rjmp	.+34     	; 0x1c88 <KPAD_U8GetPressedKey+0x1e0>
						_delay_ms(30);

						/* Polling on the pressed Key */
						while(Local_U8PinState==DIO_LOW)
						{
							DIO_U8GetPinValue(KPAD_PORT,KPAD_U8RowsPins[Local_U8CRowIndex],&Local_U8PinState);
    1c66:	8f 85       	ldd	r24, Y+15	; 0x0f
    1c68:	28 2f       	mov	r18, r24
    1c6a:	30 e0       	ldi	r19, 0x00	; 0
    1c6c:	ce 01       	movw	r24, r28
    1c6e:	83 96       	adiw	r24, 0x23	; 35
    1c70:	fc 01       	movw	r30, r24
    1c72:	e2 0f       	add	r30, r18
    1c74:	f3 1f       	adc	r31, r19
    1c76:	90 81       	ld	r25, Z
    1c78:	9e 01       	movw	r18, r28
    1c7a:	2e 5d       	subi	r18, 0xDE	; 222
    1c7c:	3f 4f       	sbci	r19, 0xFF	; 255
    1c7e:	80 e0       	ldi	r24, 0x00	; 0
    1c80:	69 2f       	mov	r22, r25
    1c82:	a9 01       	movw	r20, r18
    1c84:	0e 94 31 09 	call	0x1262	; 0x1262 <DIO_U8GetPinValue>
				if(Local_U8PinState==DIO_LOW)
					{
						_delay_ms(30);

						/* Polling on the pressed Key */
						while(Local_U8PinState==DIO_LOW)
    1c88:	8a a1       	ldd	r24, Y+34	; 0x22
    1c8a:	88 23       	and	r24, r24
    1c8c:	61 f3       	breq	.-40     	; 0x1c66 <KPAD_U8GetPressedKey+0x1be>
						{
							DIO_U8GetPinValue(KPAD_PORT,KPAD_U8RowsPins[Local_U8CRowIndex],&Local_U8PinState);
						}
						*Copy_U8Returned=LocaL_U8KPAD_ARR[Local_U8CRowIndex][Local_U8ColIndex];
    1c8e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1c90:	28 2f       	mov	r18, r24
    1c92:	30 e0       	ldi	r19, 0x00	; 0
    1c94:	88 89       	ldd	r24, Y+16	; 0x10
    1c96:	48 2f       	mov	r20, r24
    1c98:	50 e0       	ldi	r21, 0x00	; 0
    1c9a:	22 0f       	add	r18, r18
    1c9c:	33 1f       	adc	r19, r19
    1c9e:	22 0f       	add	r18, r18
    1ca0:	33 1f       	adc	r19, r19
    1ca2:	ce 01       	movw	r24, r28
    1ca4:	01 96       	adiw	r24, 0x01	; 1
    1ca6:	82 0f       	add	r24, r18
    1ca8:	93 1f       	adc	r25, r19
    1caa:	84 0f       	add	r24, r20
    1cac:	95 1f       	adc	r25, r21
    1cae:	fc 01       	movw	r30, r24
    1cb0:	71 96       	adiw	r30, 0x11	; 17
    1cb2:	80 81       	ld	r24, Z
    1cb4:	eb a5       	ldd	r30, Y+43	; 0x2b
    1cb6:	fc a5       	ldd	r31, Y+44	; 0x2c
    1cb8:	80 83       	st	Z, r24
	{
		*Copy_U8Returned=0xff;
		for(Local_U8ColIndex=0;Local_U8ColIndex <COLUMN_NUMBERS ; Local_U8ColIndex++)
		{
			DIO_U8SetPinValue(KPAD_PORT,KPAD_U8ColsPins[Local_U8ColIndex],DIO_LOW);
			for(Local_U8CRowIndex=0; Local_U8CRowIndex < ROW_NUMBERS ; Local_U8CRowIndex++)
    1cba:	8f 85       	ldd	r24, Y+15	; 0x0f
    1cbc:	8f 5f       	subi	r24, 0xFF	; 255
    1cbe:	8f 87       	std	Y+15, r24	; 0x0f
    1cc0:	8f 85       	ldd	r24, Y+15	; 0x0f
    1cc2:	84 30       	cpi	r24, 0x04	; 4
    1cc4:	08 f4       	brcc	.+2      	; 0x1cc8 <KPAD_U8GetPressedKey+0x220>
    1cc6:	47 cf       	rjmp	.-370    	; 0x1b56 <KPAD_U8GetPressedKey+0xae>
						}
						*Copy_U8Returned=LocaL_U8KPAD_ARR[Local_U8CRowIndex][Local_U8ColIndex];

					}
			}
			DIO_U8SetPinValue(KPAD_PORT,KPAD_U8ColsPins[Local_U8ColIndex],DIO_HIGH);
    1cc8:	88 89       	ldd	r24, Y+16	; 0x10
    1cca:	28 2f       	mov	r18, r24
    1ccc:	30 e0       	ldi	r19, 0x00	; 0
    1cce:	ce 01       	movw	r24, r28
    1cd0:	87 96       	adiw	r24, 0x27	; 39
    1cd2:	fc 01       	movw	r30, r24
    1cd4:	e2 0f       	add	r30, r18
    1cd6:	f3 1f       	adc	r31, r19
    1cd8:	90 81       	ld	r25, Z
    1cda:	80 e0       	ldi	r24, 0x00	; 0
    1cdc:	69 2f       	mov	r22, r25
    1cde:	41 e0       	ldi	r20, 0x01	; 1
    1ce0:	0e 94 15 08 	call	0x102a	; 0x102a <DIO_U8SetPinValue>
	u8 KPAD_U8ColsPins[COLUMN_NUMBERS]={KPAD_COLUMN_PIN0,KPAD_COLUMN_PIN1,KPAD_COLUMN_PIN2,KPAD_COLUMN_PIN3};

	if(Copy_U8Returned !=NULL)
	{
		*Copy_U8Returned=0xff;
		for(Local_U8ColIndex=0;Local_U8ColIndex <COLUMN_NUMBERS ; Local_U8ColIndex++)
    1ce4:	88 89       	ldd	r24, Y+16	; 0x10
    1ce6:	8f 5f       	subi	r24, 0xFF	; 255
    1ce8:	88 8b       	std	Y+16, r24	; 0x10
    1cea:	88 89       	ldd	r24, Y+16	; 0x10
    1cec:	84 30       	cpi	r24, 0x04	; 4
    1cee:	08 f4       	brcc	.+2      	; 0x1cf2 <KPAD_U8GetPressedKey+0x24a>
    1cf0:	22 cf       	rjmp	.-444    	; 0x1b36 <KPAD_U8GetPressedKey+0x8e>
    1cf2:	02 c0       	rjmp	.+4      	; 0x1cf8 <KPAD_U8GetPressedKey+0x250>
		}

	}
	else
	{
		Local_U8ErrorState=ERROR_STATE_OK;
    1cf4:	81 e0       	ldi	r24, 0x01	; 1
    1cf6:	89 8b       	std	Y+17, r24	; 0x11
	}

return Local_U8ErrorState;
    1cf8:	89 89       	ldd	r24, Y+17	; 0x11

}
    1cfa:	e1 96       	adiw	r28, 0x31	; 49
    1cfc:	0f b6       	in	r0, 0x3f	; 63
    1cfe:	f8 94       	cli
    1d00:	de bf       	out	0x3e, r29	; 62
    1d02:	0f be       	out	0x3f, r0	; 63
    1d04:	cd bf       	out	0x3d, r28	; 61
    1d06:	cf 91       	pop	r28
    1d08:	df 91       	pop	r29
    1d0a:	08 95       	ret

00001d0c <LCD_VoidSendCommand>:
#include "LCD_Interface.h"
#include "LCD_Private.h"
#include "LCD_Config.h"

void LCD_VoidSendCommand(u8 Copy_U8Command)
{
    1d0c:	0f 93       	push	r16
    1d0e:	1f 93       	push	r17
    1d10:	df 93       	push	r29
    1d12:	cf 93       	push	r28
    1d14:	cd b7       	in	r28, 0x3d	; 61
    1d16:	de b7       	in	r29, 0x3e	; 62
    1d18:	c7 55       	subi	r28, 0x57	; 87
    1d1a:	d0 40       	sbci	r29, 0x00	; 0
    1d1c:	0f b6       	in	r0, 0x3f	; 63
    1d1e:	f8 94       	cli
    1d20:	de bf       	out	0x3e, r29	; 62
    1d22:	0f be       	out	0x3f, r0	; 63
    1d24:	cd bf       	out	0x3d, r28	; 61
    1d26:	fe 01       	movw	r30, r28
    1d28:	e9 5a       	subi	r30, 0xA9	; 169
    1d2a:	ff 4f       	sbci	r31, 0xFF	; 255
    1d2c:	80 83       	st	Z, r24
	DIO_U8SetPinValue(LCD_CONTROL_PORT,CONTROL_E,DIO_HIGH);
	_delay_ms(2);
	DIO_U8SetPinValue(LCD_CONTROL_PORT,CONTROL_E,DIO_LOW);
#elif LCD_MODE == LCD_4BIT_MODE
	/* Set RS -> Low  --> to send Command*/
	DIO_U8SetPinValue(LCD_CONTROL_PORT,CONTROL_RS,DIO_LOW);
    1d2e:	83 e0       	ldi	r24, 0x03	; 3
    1d30:	62 e0       	ldi	r22, 0x02	; 2
    1d32:	40 e0       	ldi	r20, 0x00	; 0
    1d34:	0e 94 15 08 	call	0x102a	; 0x102a <DIO_U8SetPinValue>

	/* Set RW -> Low  --> to Write*/
	DIO_U8SetPinValue(LCD_CONTROL_PORT,CONTROL_RW,DIO_LOW);
    1d38:	83 e0       	ldi	r24, 0x03	; 3
    1d3a:	63 e0       	ldi	r22, 0x03	; 3
    1d3c:	40 e0       	ldi	r20, 0x00	; 0
    1d3e:	0e 94 15 08 	call	0x102a	; 0x102a <DIO_U8SetPinValue>

	/* Send the Command to Data Port */
	DIO_U8SetPortValue(LCD_DATA_PORT,Copy_U8Command);
    1d42:	fe 01       	movw	r30, r28
    1d44:	e9 5a       	subi	r30, 0xA9	; 169
    1d46:	ff 4f       	sbci	r31, 0xFF	; 255
    1d48:	82 e0       	ldi	r24, 0x02	; 2
    1d4a:	60 81       	ld	r22, Z
    1d4c:	0e 94 18 0b 	call	0x1630	; 0x1630 <DIO_U8SetPortValue>
	/*Enable sequence to send command*/
	DIO_U8SetPinValue(LCD_CONTROL_PORT,CONTROL_E,DIO_HIGH);
    1d50:	83 e0       	ldi	r24, 0x03	; 3
    1d52:	64 e0       	ldi	r22, 0x04	; 4
    1d54:	41 e0       	ldi	r20, 0x01	; 1
    1d56:	0e 94 15 08 	call	0x102a	; 0x102a <DIO_U8SetPinValue>
    1d5a:	fe 01       	movw	r30, r28
    1d5c:	ed 5a       	subi	r30, 0xAD	; 173
    1d5e:	ff 4f       	sbci	r31, 0xFF	; 255
    1d60:	80 e0       	ldi	r24, 0x00	; 0
    1d62:	90 e0       	ldi	r25, 0x00	; 0
    1d64:	a0 e8       	ldi	r26, 0x80	; 128
    1d66:	bf e3       	ldi	r27, 0x3F	; 63
    1d68:	80 83       	st	Z, r24
    1d6a:	91 83       	std	Z+1, r25	; 0x01
    1d6c:	a2 83       	std	Z+2, r26	; 0x02
    1d6e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1d70:	8e 01       	movw	r16, r28
    1d72:	01 5b       	subi	r16, 0xB1	; 177
    1d74:	1f 4f       	sbci	r17, 0xFF	; 255
    1d76:	fe 01       	movw	r30, r28
    1d78:	ed 5a       	subi	r30, 0xAD	; 173
    1d7a:	ff 4f       	sbci	r31, 0xFF	; 255
    1d7c:	60 81       	ld	r22, Z
    1d7e:	71 81       	ldd	r23, Z+1	; 0x01
    1d80:	82 81       	ldd	r24, Z+2	; 0x02
    1d82:	93 81       	ldd	r25, Z+3	; 0x03
    1d84:	2b ea       	ldi	r18, 0xAB	; 171
    1d86:	3a ea       	ldi	r19, 0xAA	; 170
    1d88:	4a e2       	ldi	r20, 0x2A	; 42
    1d8a:	50 e4       	ldi	r21, 0x40	; 64
    1d8c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d90:	dc 01       	movw	r26, r24
    1d92:	cb 01       	movw	r24, r22
    1d94:	f8 01       	movw	r30, r16
    1d96:	80 83       	st	Z, r24
    1d98:	91 83       	std	Z+1, r25	; 0x01
    1d9a:	a2 83       	std	Z+2, r26	; 0x02
    1d9c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1d9e:	fe 01       	movw	r30, r28
    1da0:	e1 5b       	subi	r30, 0xB1	; 177
    1da2:	ff 4f       	sbci	r31, 0xFF	; 255
    1da4:	60 81       	ld	r22, Z
    1da6:	71 81       	ldd	r23, Z+1	; 0x01
    1da8:	82 81       	ldd	r24, Z+2	; 0x02
    1daa:	93 81       	ldd	r25, Z+3	; 0x03
    1dac:	20 e0       	ldi	r18, 0x00	; 0
    1dae:	30 e0       	ldi	r19, 0x00	; 0
    1db0:	40 e8       	ldi	r20, 0x80	; 128
    1db2:	5f e3       	ldi	r21, 0x3F	; 63
    1db4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1db8:	88 23       	and	r24, r24
    1dba:	34 f4       	brge	.+12     	; 0x1dc8 <LCD_VoidSendCommand+0xbc>
		__ticks = 1;
    1dbc:	fe 01       	movw	r30, r28
    1dbe:	e2 5b       	subi	r30, 0xB2	; 178
    1dc0:	ff 4f       	sbci	r31, 0xFF	; 255
    1dc2:	81 e0       	ldi	r24, 0x01	; 1
    1dc4:	80 83       	st	Z, r24
    1dc6:	e0 c0       	rjmp	.+448    	; 0x1f88 <LCD_VoidSendCommand+0x27c>
	else if (__tmp > 255)
    1dc8:	fe 01       	movw	r30, r28
    1dca:	e1 5b       	subi	r30, 0xB1	; 177
    1dcc:	ff 4f       	sbci	r31, 0xFF	; 255
    1dce:	60 81       	ld	r22, Z
    1dd0:	71 81       	ldd	r23, Z+1	; 0x01
    1dd2:	82 81       	ldd	r24, Z+2	; 0x02
    1dd4:	93 81       	ldd	r25, Z+3	; 0x03
    1dd6:	20 e0       	ldi	r18, 0x00	; 0
    1dd8:	30 e0       	ldi	r19, 0x00	; 0
    1dda:	4f e7       	ldi	r20, 0x7F	; 127
    1ddc:	53 e4       	ldi	r21, 0x43	; 67
    1dde:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1de2:	18 16       	cp	r1, r24
    1de4:	0c f0       	brlt	.+2      	; 0x1de8 <LCD_VoidSendCommand+0xdc>
    1de6:	c0 c0       	rjmp	.+384    	; 0x1f68 <LCD_VoidSendCommand+0x25c>
	{
		_delay_ms(__us / 1000.0);
    1de8:	fe 01       	movw	r30, r28
    1dea:	ed 5a       	subi	r30, 0xAD	; 173
    1dec:	ff 4f       	sbci	r31, 0xFF	; 255
    1dee:	60 81       	ld	r22, Z
    1df0:	71 81       	ldd	r23, Z+1	; 0x01
    1df2:	82 81       	ldd	r24, Z+2	; 0x02
    1df4:	93 81       	ldd	r25, Z+3	; 0x03
    1df6:	20 e0       	ldi	r18, 0x00	; 0
    1df8:	30 e0       	ldi	r19, 0x00	; 0
    1dfa:	4a e7       	ldi	r20, 0x7A	; 122
    1dfc:	54 e4       	ldi	r21, 0x44	; 68
    1dfe:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1e02:	dc 01       	movw	r26, r24
    1e04:	cb 01       	movw	r24, r22
    1e06:	fe 01       	movw	r30, r28
    1e08:	e6 5b       	subi	r30, 0xB6	; 182
    1e0a:	ff 4f       	sbci	r31, 0xFF	; 255
    1e0c:	80 83       	st	Z, r24
    1e0e:	91 83       	std	Z+1, r25	; 0x01
    1e10:	a2 83       	std	Z+2, r26	; 0x02
    1e12:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e14:	8e 01       	movw	r16, r28
    1e16:	0a 5b       	subi	r16, 0xBA	; 186
    1e18:	1f 4f       	sbci	r17, 0xFF	; 255
    1e1a:	fe 01       	movw	r30, r28
    1e1c:	e6 5b       	subi	r30, 0xB6	; 182
    1e1e:	ff 4f       	sbci	r31, 0xFF	; 255
    1e20:	60 81       	ld	r22, Z
    1e22:	71 81       	ldd	r23, Z+1	; 0x01
    1e24:	82 81       	ldd	r24, Z+2	; 0x02
    1e26:	93 81       	ldd	r25, Z+3	; 0x03
    1e28:	20 e0       	ldi	r18, 0x00	; 0
    1e2a:	30 e0       	ldi	r19, 0x00	; 0
    1e2c:	4a ef       	ldi	r20, 0xFA	; 250
    1e2e:	54 e4       	ldi	r21, 0x44	; 68
    1e30:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e34:	dc 01       	movw	r26, r24
    1e36:	cb 01       	movw	r24, r22
    1e38:	f8 01       	movw	r30, r16
    1e3a:	80 83       	st	Z, r24
    1e3c:	91 83       	std	Z+1, r25	; 0x01
    1e3e:	a2 83       	std	Z+2, r26	; 0x02
    1e40:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1e42:	fe 01       	movw	r30, r28
    1e44:	ea 5b       	subi	r30, 0xBA	; 186
    1e46:	ff 4f       	sbci	r31, 0xFF	; 255
    1e48:	60 81       	ld	r22, Z
    1e4a:	71 81       	ldd	r23, Z+1	; 0x01
    1e4c:	82 81       	ldd	r24, Z+2	; 0x02
    1e4e:	93 81       	ldd	r25, Z+3	; 0x03
    1e50:	20 e0       	ldi	r18, 0x00	; 0
    1e52:	30 e0       	ldi	r19, 0x00	; 0
    1e54:	40 e8       	ldi	r20, 0x80	; 128
    1e56:	5f e3       	ldi	r21, 0x3F	; 63
    1e58:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1e5c:	88 23       	and	r24, r24
    1e5e:	44 f4       	brge	.+16     	; 0x1e70 <LCD_VoidSendCommand+0x164>
		__ticks = 1;
    1e60:	fe 01       	movw	r30, r28
    1e62:	ec 5b       	subi	r30, 0xBC	; 188
    1e64:	ff 4f       	sbci	r31, 0xFF	; 255
    1e66:	81 e0       	ldi	r24, 0x01	; 1
    1e68:	90 e0       	ldi	r25, 0x00	; 0
    1e6a:	91 83       	std	Z+1, r25	; 0x01
    1e6c:	80 83       	st	Z, r24
    1e6e:	64 c0       	rjmp	.+200    	; 0x1f38 <LCD_VoidSendCommand+0x22c>
	else if (__tmp > 65535)
    1e70:	fe 01       	movw	r30, r28
    1e72:	ea 5b       	subi	r30, 0xBA	; 186
    1e74:	ff 4f       	sbci	r31, 0xFF	; 255
    1e76:	60 81       	ld	r22, Z
    1e78:	71 81       	ldd	r23, Z+1	; 0x01
    1e7a:	82 81       	ldd	r24, Z+2	; 0x02
    1e7c:	93 81       	ldd	r25, Z+3	; 0x03
    1e7e:	20 e0       	ldi	r18, 0x00	; 0
    1e80:	3f ef       	ldi	r19, 0xFF	; 255
    1e82:	4f e7       	ldi	r20, 0x7F	; 127
    1e84:	57 e4       	ldi	r21, 0x47	; 71
    1e86:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1e8a:	18 16       	cp	r1, r24
    1e8c:	0c f0       	brlt	.+2      	; 0x1e90 <LCD_VoidSendCommand+0x184>
    1e8e:	43 c0       	rjmp	.+134    	; 0x1f16 <LCD_VoidSendCommand+0x20a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e90:	fe 01       	movw	r30, r28
    1e92:	e6 5b       	subi	r30, 0xB6	; 182
    1e94:	ff 4f       	sbci	r31, 0xFF	; 255
    1e96:	60 81       	ld	r22, Z
    1e98:	71 81       	ldd	r23, Z+1	; 0x01
    1e9a:	82 81       	ldd	r24, Z+2	; 0x02
    1e9c:	93 81       	ldd	r25, Z+3	; 0x03
    1e9e:	20 e0       	ldi	r18, 0x00	; 0
    1ea0:	30 e0       	ldi	r19, 0x00	; 0
    1ea2:	40 e2       	ldi	r20, 0x20	; 32
    1ea4:	51 e4       	ldi	r21, 0x41	; 65
    1ea6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1eaa:	dc 01       	movw	r26, r24
    1eac:	cb 01       	movw	r24, r22
    1eae:	8e 01       	movw	r16, r28
    1eb0:	0c 5b       	subi	r16, 0xBC	; 188
    1eb2:	1f 4f       	sbci	r17, 0xFF	; 255
    1eb4:	bc 01       	movw	r22, r24
    1eb6:	cd 01       	movw	r24, r26
    1eb8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ebc:	dc 01       	movw	r26, r24
    1ebe:	cb 01       	movw	r24, r22
    1ec0:	f8 01       	movw	r30, r16
    1ec2:	91 83       	std	Z+1, r25	; 0x01
    1ec4:	80 83       	st	Z, r24
    1ec6:	1f c0       	rjmp	.+62     	; 0x1f06 <LCD_VoidSendCommand+0x1fa>
    1ec8:	fe 01       	movw	r30, r28
    1eca:	ee 5b       	subi	r30, 0xBE	; 190
    1ecc:	ff 4f       	sbci	r31, 0xFF	; 255
    1ece:	88 ec       	ldi	r24, 0xC8	; 200
    1ed0:	90 e0       	ldi	r25, 0x00	; 0
    1ed2:	91 83       	std	Z+1, r25	; 0x01
    1ed4:	80 83       	st	Z, r24
    1ed6:	fe 01       	movw	r30, r28
    1ed8:	ee 5b       	subi	r30, 0xBE	; 190
    1eda:	ff 4f       	sbci	r31, 0xFF	; 255
    1edc:	80 81       	ld	r24, Z
    1ede:	91 81       	ldd	r25, Z+1	; 0x01
    1ee0:	01 97       	sbiw	r24, 0x01	; 1
    1ee2:	f1 f7       	brne	.-4      	; 0x1ee0 <LCD_VoidSendCommand+0x1d4>
    1ee4:	fe 01       	movw	r30, r28
    1ee6:	ee 5b       	subi	r30, 0xBE	; 190
    1ee8:	ff 4f       	sbci	r31, 0xFF	; 255
    1eea:	91 83       	std	Z+1, r25	; 0x01
    1eec:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1eee:	de 01       	movw	r26, r28
    1ef0:	ac 5b       	subi	r26, 0xBC	; 188
    1ef2:	bf 4f       	sbci	r27, 0xFF	; 255
    1ef4:	fe 01       	movw	r30, r28
    1ef6:	ec 5b       	subi	r30, 0xBC	; 188
    1ef8:	ff 4f       	sbci	r31, 0xFF	; 255
    1efa:	80 81       	ld	r24, Z
    1efc:	91 81       	ldd	r25, Z+1	; 0x01
    1efe:	01 97       	sbiw	r24, 0x01	; 1
    1f00:	11 96       	adiw	r26, 0x01	; 1
    1f02:	9c 93       	st	X, r25
    1f04:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f06:	fe 01       	movw	r30, r28
    1f08:	ec 5b       	subi	r30, 0xBC	; 188
    1f0a:	ff 4f       	sbci	r31, 0xFF	; 255
    1f0c:	80 81       	ld	r24, Z
    1f0e:	91 81       	ldd	r25, Z+1	; 0x01
    1f10:	00 97       	sbiw	r24, 0x00	; 0
    1f12:	d1 f6       	brne	.-76     	; 0x1ec8 <LCD_VoidSendCommand+0x1bc>
    1f14:	42 c0       	rjmp	.+132    	; 0x1f9a <LCD_VoidSendCommand+0x28e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f16:	8e 01       	movw	r16, r28
    1f18:	0c 5b       	subi	r16, 0xBC	; 188
    1f1a:	1f 4f       	sbci	r17, 0xFF	; 255
    1f1c:	fe 01       	movw	r30, r28
    1f1e:	ea 5b       	subi	r30, 0xBA	; 186
    1f20:	ff 4f       	sbci	r31, 0xFF	; 255
    1f22:	60 81       	ld	r22, Z
    1f24:	71 81       	ldd	r23, Z+1	; 0x01
    1f26:	82 81       	ldd	r24, Z+2	; 0x02
    1f28:	93 81       	ldd	r25, Z+3	; 0x03
    1f2a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f2e:	dc 01       	movw	r26, r24
    1f30:	cb 01       	movw	r24, r22
    1f32:	f8 01       	movw	r30, r16
    1f34:	91 83       	std	Z+1, r25	; 0x01
    1f36:	80 83       	st	Z, r24
    1f38:	de 01       	movw	r26, r28
    1f3a:	a0 5c       	subi	r26, 0xC0	; 192
    1f3c:	bf 4f       	sbci	r27, 0xFF	; 255
    1f3e:	fe 01       	movw	r30, r28
    1f40:	ec 5b       	subi	r30, 0xBC	; 188
    1f42:	ff 4f       	sbci	r31, 0xFF	; 255
    1f44:	80 81       	ld	r24, Z
    1f46:	91 81       	ldd	r25, Z+1	; 0x01
    1f48:	11 96       	adiw	r26, 0x01	; 1
    1f4a:	9c 93       	st	X, r25
    1f4c:	8e 93       	st	-X, r24
    1f4e:	fe 01       	movw	r30, r28
    1f50:	e0 5c       	subi	r30, 0xC0	; 192
    1f52:	ff 4f       	sbci	r31, 0xFF	; 255
    1f54:	80 81       	ld	r24, Z
    1f56:	91 81       	ldd	r25, Z+1	; 0x01
    1f58:	01 97       	sbiw	r24, 0x01	; 1
    1f5a:	f1 f7       	brne	.-4      	; 0x1f58 <LCD_VoidSendCommand+0x24c>
    1f5c:	fe 01       	movw	r30, r28
    1f5e:	e0 5c       	subi	r30, 0xC0	; 192
    1f60:	ff 4f       	sbci	r31, 0xFF	; 255
    1f62:	91 83       	std	Z+1, r25	; 0x01
    1f64:	80 83       	st	Z, r24
    1f66:	19 c0       	rjmp	.+50     	; 0x1f9a <LCD_VoidSendCommand+0x28e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1f68:	8e 01       	movw	r16, r28
    1f6a:	02 5b       	subi	r16, 0xB2	; 178
    1f6c:	1f 4f       	sbci	r17, 0xFF	; 255
    1f6e:	fe 01       	movw	r30, r28
    1f70:	e1 5b       	subi	r30, 0xB1	; 177
    1f72:	ff 4f       	sbci	r31, 0xFF	; 255
    1f74:	60 81       	ld	r22, Z
    1f76:	71 81       	ldd	r23, Z+1	; 0x01
    1f78:	82 81       	ldd	r24, Z+2	; 0x02
    1f7a:	93 81       	ldd	r25, Z+3	; 0x03
    1f7c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f80:	dc 01       	movw	r26, r24
    1f82:	cb 01       	movw	r24, r22
    1f84:	f8 01       	movw	r30, r16
    1f86:	80 83       	st	Z, r24
    1f88:	fe 01       	movw	r30, r28
    1f8a:	e2 5b       	subi	r30, 0xB2	; 178
    1f8c:	ff 4f       	sbci	r31, 0xFF	; 255
    1f8e:	80 81       	ld	r24, Z
    1f90:	8f af       	std	Y+63, r24	; 0x3f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1f92:	8f ad       	ldd	r24, Y+63	; 0x3f
    1f94:	8a 95       	dec	r24
    1f96:	f1 f7       	brne	.-4      	; 0x1f94 <LCD_VoidSendCommand+0x288>
    1f98:	8f af       	std	Y+63, r24	; 0x3f
	_delay_us(1);
	DIO_U8SetPinValue(LCD_CONTROL_PORT,CONTROL_E,DIO_LOW);
    1f9a:	83 e0       	ldi	r24, 0x03	; 3
    1f9c:	64 e0       	ldi	r22, 0x04	; 4
    1f9e:	40 e0       	ldi	r20, 0x00	; 0
    1fa0:	0e 94 15 08 	call	0x102a	; 0x102a <DIO_U8SetPinValue>
    1fa4:	80 e0       	ldi	r24, 0x00	; 0
    1fa6:	90 e0       	ldi	r25, 0x00	; 0
    1fa8:	a8 e4       	ldi	r26, 0x48	; 72
    1faa:	b3 e4       	ldi	r27, 0x43	; 67
    1fac:	8b af       	std	Y+59, r24	; 0x3b
    1fae:	9c af       	std	Y+60, r25	; 0x3c
    1fb0:	ad af       	std	Y+61, r26	; 0x3d
    1fb2:	be af       	std	Y+62, r27	; 0x3e
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1fb4:	6b ad       	ldd	r22, Y+59	; 0x3b
    1fb6:	7c ad       	ldd	r23, Y+60	; 0x3c
    1fb8:	8d ad       	ldd	r24, Y+61	; 0x3d
    1fba:	9e ad       	ldd	r25, Y+62	; 0x3e
    1fbc:	2b ea       	ldi	r18, 0xAB	; 171
    1fbe:	3a ea       	ldi	r19, 0xAA	; 170
    1fc0:	4a e2       	ldi	r20, 0x2A	; 42
    1fc2:	50 e4       	ldi	r21, 0x40	; 64
    1fc4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fc8:	dc 01       	movw	r26, r24
    1fca:	cb 01       	movw	r24, r22
    1fcc:	8f ab       	std	Y+55, r24	; 0x37
    1fce:	98 af       	std	Y+56, r25	; 0x38
    1fd0:	a9 af       	std	Y+57, r26	; 0x39
    1fd2:	ba af       	std	Y+58, r27	; 0x3a
	if (__tmp < 1.0)
    1fd4:	6f a9       	ldd	r22, Y+55	; 0x37
    1fd6:	78 ad       	ldd	r23, Y+56	; 0x38
    1fd8:	89 ad       	ldd	r24, Y+57	; 0x39
    1fda:	9a ad       	ldd	r25, Y+58	; 0x3a
    1fdc:	20 e0       	ldi	r18, 0x00	; 0
    1fde:	30 e0       	ldi	r19, 0x00	; 0
    1fe0:	40 e8       	ldi	r20, 0x80	; 128
    1fe2:	5f e3       	ldi	r21, 0x3F	; 63
    1fe4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1fe8:	88 23       	and	r24, r24
    1fea:	1c f4       	brge	.+6      	; 0x1ff2 <LCD_VoidSendCommand+0x2e6>
		__ticks = 1;
    1fec:	81 e0       	ldi	r24, 0x01	; 1
    1fee:	8e ab       	std	Y+54, r24	; 0x36
    1ff0:	91 c0       	rjmp	.+290    	; 0x2114 <LCD_VoidSendCommand+0x408>
	else if (__tmp > 255)
    1ff2:	6f a9       	ldd	r22, Y+55	; 0x37
    1ff4:	78 ad       	ldd	r23, Y+56	; 0x38
    1ff6:	89 ad       	ldd	r24, Y+57	; 0x39
    1ff8:	9a ad       	ldd	r25, Y+58	; 0x3a
    1ffa:	20 e0       	ldi	r18, 0x00	; 0
    1ffc:	30 e0       	ldi	r19, 0x00	; 0
    1ffe:	4f e7       	ldi	r20, 0x7F	; 127
    2000:	53 e4       	ldi	r21, 0x43	; 67
    2002:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2006:	18 16       	cp	r1, r24
    2008:	0c f0       	brlt	.+2      	; 0x200c <LCD_VoidSendCommand+0x300>
    200a:	7b c0       	rjmp	.+246    	; 0x2102 <LCD_VoidSendCommand+0x3f6>
	{
		_delay_ms(__us / 1000.0);
    200c:	6b ad       	ldd	r22, Y+59	; 0x3b
    200e:	7c ad       	ldd	r23, Y+60	; 0x3c
    2010:	8d ad       	ldd	r24, Y+61	; 0x3d
    2012:	9e ad       	ldd	r25, Y+62	; 0x3e
    2014:	20 e0       	ldi	r18, 0x00	; 0
    2016:	30 e0       	ldi	r19, 0x00	; 0
    2018:	4a e7       	ldi	r20, 0x7A	; 122
    201a:	54 e4       	ldi	r21, 0x44	; 68
    201c:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2020:	dc 01       	movw	r26, r24
    2022:	cb 01       	movw	r24, r22
    2024:	8a ab       	std	Y+50, r24	; 0x32
    2026:	9b ab       	std	Y+51, r25	; 0x33
    2028:	ac ab       	std	Y+52, r26	; 0x34
    202a:	bd ab       	std	Y+53, r27	; 0x35
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    202c:	6a a9       	ldd	r22, Y+50	; 0x32
    202e:	7b a9       	ldd	r23, Y+51	; 0x33
    2030:	8c a9       	ldd	r24, Y+52	; 0x34
    2032:	9d a9       	ldd	r25, Y+53	; 0x35
    2034:	20 e0       	ldi	r18, 0x00	; 0
    2036:	30 e0       	ldi	r19, 0x00	; 0
    2038:	4a ef       	ldi	r20, 0xFA	; 250
    203a:	54 e4       	ldi	r21, 0x44	; 68
    203c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2040:	dc 01       	movw	r26, r24
    2042:	cb 01       	movw	r24, r22
    2044:	8e a7       	std	Y+46, r24	; 0x2e
    2046:	9f a7       	std	Y+47, r25	; 0x2f
    2048:	a8 ab       	std	Y+48, r26	; 0x30
    204a:	b9 ab       	std	Y+49, r27	; 0x31
	if (__tmp < 1.0)
    204c:	6e a5       	ldd	r22, Y+46	; 0x2e
    204e:	7f a5       	ldd	r23, Y+47	; 0x2f
    2050:	88 a9       	ldd	r24, Y+48	; 0x30
    2052:	99 a9       	ldd	r25, Y+49	; 0x31
    2054:	20 e0       	ldi	r18, 0x00	; 0
    2056:	30 e0       	ldi	r19, 0x00	; 0
    2058:	40 e8       	ldi	r20, 0x80	; 128
    205a:	5f e3       	ldi	r21, 0x3F	; 63
    205c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2060:	88 23       	and	r24, r24
    2062:	2c f4       	brge	.+10     	; 0x206e <LCD_VoidSendCommand+0x362>
		__ticks = 1;
    2064:	81 e0       	ldi	r24, 0x01	; 1
    2066:	90 e0       	ldi	r25, 0x00	; 0
    2068:	9d a7       	std	Y+45, r25	; 0x2d
    206a:	8c a7       	std	Y+44, r24	; 0x2c
    206c:	3f c0       	rjmp	.+126    	; 0x20ec <LCD_VoidSendCommand+0x3e0>
	else if (__tmp > 65535)
    206e:	6e a5       	ldd	r22, Y+46	; 0x2e
    2070:	7f a5       	ldd	r23, Y+47	; 0x2f
    2072:	88 a9       	ldd	r24, Y+48	; 0x30
    2074:	99 a9       	ldd	r25, Y+49	; 0x31
    2076:	20 e0       	ldi	r18, 0x00	; 0
    2078:	3f ef       	ldi	r19, 0xFF	; 255
    207a:	4f e7       	ldi	r20, 0x7F	; 127
    207c:	57 e4       	ldi	r21, 0x47	; 71
    207e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2082:	18 16       	cp	r1, r24
    2084:	4c f5       	brge	.+82     	; 0x20d8 <LCD_VoidSendCommand+0x3cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2086:	6a a9       	ldd	r22, Y+50	; 0x32
    2088:	7b a9       	ldd	r23, Y+51	; 0x33
    208a:	8c a9       	ldd	r24, Y+52	; 0x34
    208c:	9d a9       	ldd	r25, Y+53	; 0x35
    208e:	20 e0       	ldi	r18, 0x00	; 0
    2090:	30 e0       	ldi	r19, 0x00	; 0
    2092:	40 e2       	ldi	r20, 0x20	; 32
    2094:	51 e4       	ldi	r21, 0x41	; 65
    2096:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    209a:	dc 01       	movw	r26, r24
    209c:	cb 01       	movw	r24, r22
    209e:	bc 01       	movw	r22, r24
    20a0:	cd 01       	movw	r24, r26
    20a2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20a6:	dc 01       	movw	r26, r24
    20a8:	cb 01       	movw	r24, r22
    20aa:	9d a7       	std	Y+45, r25	; 0x2d
    20ac:	8c a7       	std	Y+44, r24	; 0x2c
    20ae:	0f c0       	rjmp	.+30     	; 0x20ce <LCD_VoidSendCommand+0x3c2>
    20b0:	88 ec       	ldi	r24, 0xC8	; 200
    20b2:	90 e0       	ldi	r25, 0x00	; 0
    20b4:	9b a7       	std	Y+43, r25	; 0x2b
    20b6:	8a a7       	std	Y+42, r24	; 0x2a
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    20b8:	8a a5       	ldd	r24, Y+42	; 0x2a
    20ba:	9b a5       	ldd	r25, Y+43	; 0x2b
    20bc:	01 97       	sbiw	r24, 0x01	; 1
    20be:	f1 f7       	brne	.-4      	; 0x20bc <LCD_VoidSendCommand+0x3b0>
    20c0:	9b a7       	std	Y+43, r25	; 0x2b
    20c2:	8a a7       	std	Y+42, r24	; 0x2a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20c4:	8c a5       	ldd	r24, Y+44	; 0x2c
    20c6:	9d a5       	ldd	r25, Y+45	; 0x2d
    20c8:	01 97       	sbiw	r24, 0x01	; 1
    20ca:	9d a7       	std	Y+45, r25	; 0x2d
    20cc:	8c a7       	std	Y+44, r24	; 0x2c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20ce:	8c a5       	ldd	r24, Y+44	; 0x2c
    20d0:	9d a5       	ldd	r25, Y+45	; 0x2d
    20d2:	00 97       	sbiw	r24, 0x00	; 0
    20d4:	69 f7       	brne	.-38     	; 0x20b0 <LCD_VoidSendCommand+0x3a4>
    20d6:	24 c0       	rjmp	.+72     	; 0x2120 <LCD_VoidSendCommand+0x414>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20d8:	6e a5       	ldd	r22, Y+46	; 0x2e
    20da:	7f a5       	ldd	r23, Y+47	; 0x2f
    20dc:	88 a9       	ldd	r24, Y+48	; 0x30
    20de:	99 a9       	ldd	r25, Y+49	; 0x31
    20e0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20e4:	dc 01       	movw	r26, r24
    20e6:	cb 01       	movw	r24, r22
    20e8:	9d a7       	std	Y+45, r25	; 0x2d
    20ea:	8c a7       	std	Y+44, r24	; 0x2c
    20ec:	8c a5       	ldd	r24, Y+44	; 0x2c
    20ee:	9d a5       	ldd	r25, Y+45	; 0x2d
    20f0:	99 a7       	std	Y+41, r25	; 0x29
    20f2:	88 a7       	std	Y+40, r24	; 0x28
    20f4:	88 a5       	ldd	r24, Y+40	; 0x28
    20f6:	99 a5       	ldd	r25, Y+41	; 0x29
    20f8:	01 97       	sbiw	r24, 0x01	; 1
    20fa:	f1 f7       	brne	.-4      	; 0x20f8 <LCD_VoidSendCommand+0x3ec>
    20fc:	99 a7       	std	Y+41, r25	; 0x29
    20fe:	88 a7       	std	Y+40, r24	; 0x28
    2100:	0f c0       	rjmp	.+30     	; 0x2120 <LCD_VoidSendCommand+0x414>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2102:	6f a9       	ldd	r22, Y+55	; 0x37
    2104:	78 ad       	ldd	r23, Y+56	; 0x38
    2106:	89 ad       	ldd	r24, Y+57	; 0x39
    2108:	9a ad       	ldd	r25, Y+58	; 0x3a
    210a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    210e:	dc 01       	movw	r26, r24
    2110:	cb 01       	movw	r24, r22
    2112:	8e ab       	std	Y+54, r24	; 0x36
    2114:	8e a9       	ldd	r24, Y+54	; 0x36
    2116:	8f a3       	std	Y+39, r24	; 0x27
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2118:	8f a1       	ldd	r24, Y+39	; 0x27
    211a:	8a 95       	dec	r24
    211c:	f1 f7       	brne	.-4      	; 0x211a <LCD_VoidSendCommand+0x40e>
    211e:	8f a3       	std	Y+39, r24	; 0x27
	_delay_us(200);
	/* Write On Command Least Lower Nibble */
	DIO_U8SetPortValue(LCD_DATA_PORT,(Copy_U8Command << 4));
    2120:	fe 01       	movw	r30, r28
    2122:	e9 5a       	subi	r30, 0xA9	; 169
    2124:	ff 4f       	sbci	r31, 0xFF	; 255
    2126:	80 81       	ld	r24, Z
    2128:	98 2f       	mov	r25, r24
    212a:	92 95       	swap	r25
    212c:	90 7f       	andi	r25, 0xF0	; 240
    212e:	82 e0       	ldi	r24, 0x02	; 2
    2130:	69 2f       	mov	r22, r25
    2132:	0e 94 18 0b 	call	0x1630	; 0x1630 <DIO_U8SetPortValue>
	/*Enable sequence to send command*/
	DIO_U8SetPinValue(LCD_CONTROL_PORT,CONTROL_E,DIO_HIGH);
    2136:	83 e0       	ldi	r24, 0x03	; 3
    2138:	64 e0       	ldi	r22, 0x04	; 4
    213a:	41 e0       	ldi	r20, 0x01	; 1
    213c:	0e 94 15 08 	call	0x102a	; 0x102a <DIO_U8SetPinValue>
    2140:	80 e0       	ldi	r24, 0x00	; 0
    2142:	90 e0       	ldi	r25, 0x00	; 0
    2144:	a0 e8       	ldi	r26, 0x80	; 128
    2146:	bf e3       	ldi	r27, 0x3F	; 63
    2148:	8b a3       	std	Y+35, r24	; 0x23
    214a:	9c a3       	std	Y+36, r25	; 0x24
    214c:	ad a3       	std	Y+37, r26	; 0x25
    214e:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2150:	6b a1       	ldd	r22, Y+35	; 0x23
    2152:	7c a1       	ldd	r23, Y+36	; 0x24
    2154:	8d a1       	ldd	r24, Y+37	; 0x25
    2156:	9e a1       	ldd	r25, Y+38	; 0x26
    2158:	2b ea       	ldi	r18, 0xAB	; 171
    215a:	3a ea       	ldi	r19, 0xAA	; 170
    215c:	4a e2       	ldi	r20, 0x2A	; 42
    215e:	50 e4       	ldi	r21, 0x40	; 64
    2160:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2164:	dc 01       	movw	r26, r24
    2166:	cb 01       	movw	r24, r22
    2168:	8f 8f       	std	Y+31, r24	; 0x1f
    216a:	98 a3       	std	Y+32, r25	; 0x20
    216c:	a9 a3       	std	Y+33, r26	; 0x21
    216e:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    2170:	6f 8d       	ldd	r22, Y+31	; 0x1f
    2172:	78 a1       	ldd	r23, Y+32	; 0x20
    2174:	89 a1       	ldd	r24, Y+33	; 0x21
    2176:	9a a1       	ldd	r25, Y+34	; 0x22
    2178:	20 e0       	ldi	r18, 0x00	; 0
    217a:	30 e0       	ldi	r19, 0x00	; 0
    217c:	40 e8       	ldi	r20, 0x80	; 128
    217e:	5f e3       	ldi	r21, 0x3F	; 63
    2180:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2184:	88 23       	and	r24, r24
    2186:	1c f4       	brge	.+6      	; 0x218e <LCD_VoidSendCommand+0x482>
		__ticks = 1;
    2188:	81 e0       	ldi	r24, 0x01	; 1
    218a:	8e 8f       	std	Y+30, r24	; 0x1e
    218c:	91 c0       	rjmp	.+290    	; 0x22b0 <LCD_VoidSendCommand+0x5a4>
	else if (__tmp > 255)
    218e:	6f 8d       	ldd	r22, Y+31	; 0x1f
    2190:	78 a1       	ldd	r23, Y+32	; 0x20
    2192:	89 a1       	ldd	r24, Y+33	; 0x21
    2194:	9a a1       	ldd	r25, Y+34	; 0x22
    2196:	20 e0       	ldi	r18, 0x00	; 0
    2198:	30 e0       	ldi	r19, 0x00	; 0
    219a:	4f e7       	ldi	r20, 0x7F	; 127
    219c:	53 e4       	ldi	r21, 0x43	; 67
    219e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    21a2:	18 16       	cp	r1, r24
    21a4:	0c f0       	brlt	.+2      	; 0x21a8 <LCD_VoidSendCommand+0x49c>
    21a6:	7b c0       	rjmp	.+246    	; 0x229e <LCD_VoidSendCommand+0x592>
	{
		_delay_ms(__us / 1000.0);
    21a8:	6b a1       	ldd	r22, Y+35	; 0x23
    21aa:	7c a1       	ldd	r23, Y+36	; 0x24
    21ac:	8d a1       	ldd	r24, Y+37	; 0x25
    21ae:	9e a1       	ldd	r25, Y+38	; 0x26
    21b0:	20 e0       	ldi	r18, 0x00	; 0
    21b2:	30 e0       	ldi	r19, 0x00	; 0
    21b4:	4a e7       	ldi	r20, 0x7A	; 122
    21b6:	54 e4       	ldi	r21, 0x44	; 68
    21b8:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    21bc:	dc 01       	movw	r26, r24
    21be:	cb 01       	movw	r24, r22
    21c0:	8a 8f       	std	Y+26, r24	; 0x1a
    21c2:	9b 8f       	std	Y+27, r25	; 0x1b
    21c4:	ac 8f       	std	Y+28, r26	; 0x1c
    21c6:	bd 8f       	std	Y+29, r27	; 0x1d
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21c8:	6a 8d       	ldd	r22, Y+26	; 0x1a
    21ca:	7b 8d       	ldd	r23, Y+27	; 0x1b
    21cc:	8c 8d       	ldd	r24, Y+28	; 0x1c
    21ce:	9d 8d       	ldd	r25, Y+29	; 0x1d
    21d0:	20 e0       	ldi	r18, 0x00	; 0
    21d2:	30 e0       	ldi	r19, 0x00	; 0
    21d4:	4a ef       	ldi	r20, 0xFA	; 250
    21d6:	54 e4       	ldi	r21, 0x44	; 68
    21d8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21dc:	dc 01       	movw	r26, r24
    21de:	cb 01       	movw	r24, r22
    21e0:	8e 8b       	std	Y+22, r24	; 0x16
    21e2:	9f 8b       	std	Y+23, r25	; 0x17
    21e4:	a8 8f       	std	Y+24, r26	; 0x18
    21e6:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
    21e8:	6e 89       	ldd	r22, Y+22	; 0x16
    21ea:	7f 89       	ldd	r23, Y+23	; 0x17
    21ec:	88 8d       	ldd	r24, Y+24	; 0x18
    21ee:	99 8d       	ldd	r25, Y+25	; 0x19
    21f0:	20 e0       	ldi	r18, 0x00	; 0
    21f2:	30 e0       	ldi	r19, 0x00	; 0
    21f4:	40 e8       	ldi	r20, 0x80	; 128
    21f6:	5f e3       	ldi	r21, 0x3F	; 63
    21f8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    21fc:	88 23       	and	r24, r24
    21fe:	2c f4       	brge	.+10     	; 0x220a <LCD_VoidSendCommand+0x4fe>
		__ticks = 1;
    2200:	81 e0       	ldi	r24, 0x01	; 1
    2202:	90 e0       	ldi	r25, 0x00	; 0
    2204:	9d 8b       	std	Y+21, r25	; 0x15
    2206:	8c 8b       	std	Y+20, r24	; 0x14
    2208:	3f c0       	rjmp	.+126    	; 0x2288 <LCD_VoidSendCommand+0x57c>
	else if (__tmp > 65535)
    220a:	6e 89       	ldd	r22, Y+22	; 0x16
    220c:	7f 89       	ldd	r23, Y+23	; 0x17
    220e:	88 8d       	ldd	r24, Y+24	; 0x18
    2210:	99 8d       	ldd	r25, Y+25	; 0x19
    2212:	20 e0       	ldi	r18, 0x00	; 0
    2214:	3f ef       	ldi	r19, 0xFF	; 255
    2216:	4f e7       	ldi	r20, 0x7F	; 127
    2218:	57 e4       	ldi	r21, 0x47	; 71
    221a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    221e:	18 16       	cp	r1, r24
    2220:	4c f5       	brge	.+82     	; 0x2274 <LCD_VoidSendCommand+0x568>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2222:	6a 8d       	ldd	r22, Y+26	; 0x1a
    2224:	7b 8d       	ldd	r23, Y+27	; 0x1b
    2226:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2228:	9d 8d       	ldd	r25, Y+29	; 0x1d
    222a:	20 e0       	ldi	r18, 0x00	; 0
    222c:	30 e0       	ldi	r19, 0x00	; 0
    222e:	40 e2       	ldi	r20, 0x20	; 32
    2230:	51 e4       	ldi	r21, 0x41	; 65
    2232:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2236:	dc 01       	movw	r26, r24
    2238:	cb 01       	movw	r24, r22
    223a:	bc 01       	movw	r22, r24
    223c:	cd 01       	movw	r24, r26
    223e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2242:	dc 01       	movw	r26, r24
    2244:	cb 01       	movw	r24, r22
    2246:	9d 8b       	std	Y+21, r25	; 0x15
    2248:	8c 8b       	std	Y+20, r24	; 0x14
    224a:	0f c0       	rjmp	.+30     	; 0x226a <LCD_VoidSendCommand+0x55e>
    224c:	88 ec       	ldi	r24, 0xC8	; 200
    224e:	90 e0       	ldi	r25, 0x00	; 0
    2250:	9b 8b       	std	Y+19, r25	; 0x13
    2252:	8a 8b       	std	Y+18, r24	; 0x12
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2254:	8a 89       	ldd	r24, Y+18	; 0x12
    2256:	9b 89       	ldd	r25, Y+19	; 0x13
    2258:	01 97       	sbiw	r24, 0x01	; 1
    225a:	f1 f7       	brne	.-4      	; 0x2258 <LCD_VoidSendCommand+0x54c>
    225c:	9b 8b       	std	Y+19, r25	; 0x13
    225e:	8a 8b       	std	Y+18, r24	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2260:	8c 89       	ldd	r24, Y+20	; 0x14
    2262:	9d 89       	ldd	r25, Y+21	; 0x15
    2264:	01 97       	sbiw	r24, 0x01	; 1
    2266:	9d 8b       	std	Y+21, r25	; 0x15
    2268:	8c 8b       	std	Y+20, r24	; 0x14
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    226a:	8c 89       	ldd	r24, Y+20	; 0x14
    226c:	9d 89       	ldd	r25, Y+21	; 0x15
    226e:	00 97       	sbiw	r24, 0x00	; 0
    2270:	69 f7       	brne	.-38     	; 0x224c <LCD_VoidSendCommand+0x540>
    2272:	24 c0       	rjmp	.+72     	; 0x22bc <LCD_VoidSendCommand+0x5b0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2274:	6e 89       	ldd	r22, Y+22	; 0x16
    2276:	7f 89       	ldd	r23, Y+23	; 0x17
    2278:	88 8d       	ldd	r24, Y+24	; 0x18
    227a:	99 8d       	ldd	r25, Y+25	; 0x19
    227c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2280:	dc 01       	movw	r26, r24
    2282:	cb 01       	movw	r24, r22
    2284:	9d 8b       	std	Y+21, r25	; 0x15
    2286:	8c 8b       	std	Y+20, r24	; 0x14
    2288:	8c 89       	ldd	r24, Y+20	; 0x14
    228a:	9d 89       	ldd	r25, Y+21	; 0x15
    228c:	99 8b       	std	Y+17, r25	; 0x11
    228e:	88 8b       	std	Y+16, r24	; 0x10
    2290:	88 89       	ldd	r24, Y+16	; 0x10
    2292:	99 89       	ldd	r25, Y+17	; 0x11
    2294:	01 97       	sbiw	r24, 0x01	; 1
    2296:	f1 f7       	brne	.-4      	; 0x2294 <LCD_VoidSendCommand+0x588>
    2298:	99 8b       	std	Y+17, r25	; 0x11
    229a:	88 8b       	std	Y+16, r24	; 0x10
    229c:	0f c0       	rjmp	.+30     	; 0x22bc <LCD_VoidSendCommand+0x5b0>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    229e:	6f 8d       	ldd	r22, Y+31	; 0x1f
    22a0:	78 a1       	ldd	r23, Y+32	; 0x20
    22a2:	89 a1       	ldd	r24, Y+33	; 0x21
    22a4:	9a a1       	ldd	r25, Y+34	; 0x22
    22a6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22aa:	dc 01       	movw	r26, r24
    22ac:	cb 01       	movw	r24, r22
    22ae:	8e 8f       	std	Y+30, r24	; 0x1e
    22b0:	8e 8d       	ldd	r24, Y+30	; 0x1e
    22b2:	8f 87       	std	Y+15, r24	; 0x0f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    22b4:	8f 85       	ldd	r24, Y+15	; 0x0f
    22b6:	8a 95       	dec	r24
    22b8:	f1 f7       	brne	.-4      	; 0x22b6 <LCD_VoidSendCommand+0x5aa>
    22ba:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_us(1);
	DIO_U8SetPinValue(LCD_CONTROL_PORT,CONTROL_E,DIO_LOW);
    22bc:	83 e0       	ldi	r24, 0x03	; 3
    22be:	64 e0       	ldi	r22, 0x04	; 4
    22c0:	40 e0       	ldi	r20, 0x00	; 0
    22c2:	0e 94 15 08 	call	0x102a	; 0x102a <DIO_U8SetPinValue>
    22c6:	80 e0       	ldi	r24, 0x00	; 0
    22c8:	90 e0       	ldi	r25, 0x00	; 0
    22ca:	a0 e0       	ldi	r26, 0x00	; 0
    22cc:	b0 e4       	ldi	r27, 0x40	; 64
    22ce:	8b 87       	std	Y+11, r24	; 0x0b
    22d0:	9c 87       	std	Y+12, r25	; 0x0c
    22d2:	ad 87       	std	Y+13, r26	; 0x0d
    22d4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22d6:	6b 85       	ldd	r22, Y+11	; 0x0b
    22d8:	7c 85       	ldd	r23, Y+12	; 0x0c
    22da:	8d 85       	ldd	r24, Y+13	; 0x0d
    22dc:	9e 85       	ldd	r25, Y+14	; 0x0e
    22de:	20 e0       	ldi	r18, 0x00	; 0
    22e0:	30 e0       	ldi	r19, 0x00	; 0
    22e2:	4a ef       	ldi	r20, 0xFA	; 250
    22e4:	54 e4       	ldi	r21, 0x44	; 68
    22e6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22ea:	dc 01       	movw	r26, r24
    22ec:	cb 01       	movw	r24, r22
    22ee:	8f 83       	std	Y+7, r24	; 0x07
    22f0:	98 87       	std	Y+8, r25	; 0x08
    22f2:	a9 87       	std	Y+9, r26	; 0x09
    22f4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    22f6:	6f 81       	ldd	r22, Y+7	; 0x07
    22f8:	78 85       	ldd	r23, Y+8	; 0x08
    22fa:	89 85       	ldd	r24, Y+9	; 0x09
    22fc:	9a 85       	ldd	r25, Y+10	; 0x0a
    22fe:	20 e0       	ldi	r18, 0x00	; 0
    2300:	30 e0       	ldi	r19, 0x00	; 0
    2302:	40 e8       	ldi	r20, 0x80	; 128
    2304:	5f e3       	ldi	r21, 0x3F	; 63
    2306:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    230a:	88 23       	and	r24, r24
    230c:	2c f4       	brge	.+10     	; 0x2318 <LCD_VoidSendCommand+0x60c>
		__ticks = 1;
    230e:	81 e0       	ldi	r24, 0x01	; 1
    2310:	90 e0       	ldi	r25, 0x00	; 0
    2312:	9e 83       	std	Y+6, r25	; 0x06
    2314:	8d 83       	std	Y+5, r24	; 0x05
    2316:	3f c0       	rjmp	.+126    	; 0x2396 <LCD_VoidSendCommand+0x68a>
	else if (__tmp > 65535)
    2318:	6f 81       	ldd	r22, Y+7	; 0x07
    231a:	78 85       	ldd	r23, Y+8	; 0x08
    231c:	89 85       	ldd	r24, Y+9	; 0x09
    231e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2320:	20 e0       	ldi	r18, 0x00	; 0
    2322:	3f ef       	ldi	r19, 0xFF	; 255
    2324:	4f e7       	ldi	r20, 0x7F	; 127
    2326:	57 e4       	ldi	r21, 0x47	; 71
    2328:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    232c:	18 16       	cp	r1, r24
    232e:	4c f5       	brge	.+82     	; 0x2382 <LCD_VoidSendCommand+0x676>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2330:	6b 85       	ldd	r22, Y+11	; 0x0b
    2332:	7c 85       	ldd	r23, Y+12	; 0x0c
    2334:	8d 85       	ldd	r24, Y+13	; 0x0d
    2336:	9e 85       	ldd	r25, Y+14	; 0x0e
    2338:	20 e0       	ldi	r18, 0x00	; 0
    233a:	30 e0       	ldi	r19, 0x00	; 0
    233c:	40 e2       	ldi	r20, 0x20	; 32
    233e:	51 e4       	ldi	r21, 0x41	; 65
    2340:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2344:	dc 01       	movw	r26, r24
    2346:	cb 01       	movw	r24, r22
    2348:	bc 01       	movw	r22, r24
    234a:	cd 01       	movw	r24, r26
    234c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2350:	dc 01       	movw	r26, r24
    2352:	cb 01       	movw	r24, r22
    2354:	9e 83       	std	Y+6, r25	; 0x06
    2356:	8d 83       	std	Y+5, r24	; 0x05
    2358:	0f c0       	rjmp	.+30     	; 0x2378 <LCD_VoidSendCommand+0x66c>
    235a:	88 ec       	ldi	r24, 0xC8	; 200
    235c:	90 e0       	ldi	r25, 0x00	; 0
    235e:	9c 83       	std	Y+4, r25	; 0x04
    2360:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2362:	8b 81       	ldd	r24, Y+3	; 0x03
    2364:	9c 81       	ldd	r25, Y+4	; 0x04
    2366:	01 97       	sbiw	r24, 0x01	; 1
    2368:	f1 f7       	brne	.-4      	; 0x2366 <LCD_VoidSendCommand+0x65a>
    236a:	9c 83       	std	Y+4, r25	; 0x04
    236c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    236e:	8d 81       	ldd	r24, Y+5	; 0x05
    2370:	9e 81       	ldd	r25, Y+6	; 0x06
    2372:	01 97       	sbiw	r24, 0x01	; 1
    2374:	9e 83       	std	Y+6, r25	; 0x06
    2376:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2378:	8d 81       	ldd	r24, Y+5	; 0x05
    237a:	9e 81       	ldd	r25, Y+6	; 0x06
    237c:	00 97       	sbiw	r24, 0x00	; 0
    237e:	69 f7       	brne	.-38     	; 0x235a <LCD_VoidSendCommand+0x64e>
    2380:	14 c0       	rjmp	.+40     	; 0x23aa <LCD_VoidSendCommand+0x69e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2382:	6f 81       	ldd	r22, Y+7	; 0x07
    2384:	78 85       	ldd	r23, Y+8	; 0x08
    2386:	89 85       	ldd	r24, Y+9	; 0x09
    2388:	9a 85       	ldd	r25, Y+10	; 0x0a
    238a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    238e:	dc 01       	movw	r26, r24
    2390:	cb 01       	movw	r24, r22
    2392:	9e 83       	std	Y+6, r25	; 0x06
    2394:	8d 83       	std	Y+5, r24	; 0x05
    2396:	8d 81       	ldd	r24, Y+5	; 0x05
    2398:	9e 81       	ldd	r25, Y+6	; 0x06
    239a:	9a 83       	std	Y+2, r25	; 0x02
    239c:	89 83       	std	Y+1, r24	; 0x01
    239e:	89 81       	ldd	r24, Y+1	; 0x01
    23a0:	9a 81       	ldd	r25, Y+2	; 0x02
    23a2:	01 97       	sbiw	r24, 0x01	; 1
    23a4:	f1 f7       	brne	.-4      	; 0x23a2 <LCD_VoidSendCommand+0x696>
    23a6:	9a 83       	std	Y+2, r25	; 0x02
    23a8:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
#endif
}
    23aa:	c9 5a       	subi	r28, 0xA9	; 169
    23ac:	df 4f       	sbci	r29, 0xFF	; 255
    23ae:	0f b6       	in	r0, 0x3f	; 63
    23b0:	f8 94       	cli
    23b2:	de bf       	out	0x3e, r29	; 62
    23b4:	0f be       	out	0x3f, r0	; 63
    23b6:	cd bf       	out	0x3d, r28	; 61
    23b8:	cf 91       	pop	r28
    23ba:	df 91       	pop	r29
    23bc:	1f 91       	pop	r17
    23be:	0f 91       	pop	r16
    23c0:	08 95       	ret

000023c2 <LCD_VoidLCDInit>:

void LCD_VoidLCDInit(void)
{
    23c2:	df 93       	push	r29
    23c4:	cf 93       	push	r28
    23c6:	cd b7       	in	r28, 0x3d	; 61
    23c8:	de b7       	in	r29, 0x3e	; 62
    23ca:	6c 97       	sbiw	r28, 0x1c	; 28
    23cc:	0f b6       	in	r0, 0x3f	; 63
    23ce:	f8 94       	cli
    23d0:	de bf       	out	0x3e, r29	; 62
    23d2:	0f be       	out	0x3f, r0	; 63
    23d4:	cd bf       	out	0x3d, r28	; 61

	/* clear Display */
	LCD_VoidSendCommand(LCD_CLEAR);
#elif LCD_MODE == LCD_4BIT_MODE
	/* Set Direction Data PORT -> High */
	DIO_U8SetPortDirection(LCD_DATA_PORT, 0xF0);
    23d6:	82 e0       	ldi	r24, 0x02	; 2
    23d8:	60 ef       	ldi	r22, 0xF0	; 240
    23da:	0e 94 57 0a 	call	0x14ae	; 0x14ae <DIO_U8SetPortDirection>

	/* Set Direction Control PORT ( E,RS,RW ) -> High */
	DIO_U8SetPinDirection(LCD_CONTROL_PORT, CONTROL_E, HIGH);
    23de:	83 e0       	ldi	r24, 0x03	; 3
    23e0:	64 e0       	ldi	r22, 0x04	; 4
    23e2:	41 e0       	ldi	r20, 0x01	; 1
    23e4:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <DIO_U8SetPinDirection>
	DIO_U8SetPinDirection(LCD_CONTROL_PORT, CONTROL_RS, HIGH);
    23e8:	83 e0       	ldi	r24, 0x03	; 3
    23ea:	62 e0       	ldi	r22, 0x02	; 2
    23ec:	41 e0       	ldi	r20, 0x01	; 1
    23ee:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <DIO_U8SetPinDirection>
	DIO_U8SetPinDirection(LCD_CONTROL_PORT, CONTROL_RW, HIGH);
    23f2:	83 e0       	ldi	r24, 0x03	; 3
    23f4:	63 e0       	ldi	r22, 0x03	; 3
    23f6:	41 e0       	ldi	r20, 0x01	; 1
    23f8:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <DIO_U8SetPinDirection>
    23fc:	80 e0       	ldi	r24, 0x00	; 0
    23fe:	90 e0       	ldi	r25, 0x00	; 0
    2400:	ac e0       	ldi	r26, 0x0C	; 12
    2402:	b2 e4       	ldi	r27, 0x42	; 66
    2404:	89 8f       	std	Y+25, r24	; 0x19
    2406:	9a 8f       	std	Y+26, r25	; 0x1a
    2408:	ab 8f       	std	Y+27, r26	; 0x1b
    240a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    240c:	69 8d       	ldd	r22, Y+25	; 0x19
    240e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2410:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2412:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2414:	20 e0       	ldi	r18, 0x00	; 0
    2416:	30 e0       	ldi	r19, 0x00	; 0
    2418:	4a ef       	ldi	r20, 0xFA	; 250
    241a:	54 e4       	ldi	r21, 0x44	; 68
    241c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2420:	dc 01       	movw	r26, r24
    2422:	cb 01       	movw	r24, r22
    2424:	8d 8b       	std	Y+21, r24	; 0x15
    2426:	9e 8b       	std	Y+22, r25	; 0x16
    2428:	af 8b       	std	Y+23, r26	; 0x17
    242a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    242c:	6d 89       	ldd	r22, Y+21	; 0x15
    242e:	7e 89       	ldd	r23, Y+22	; 0x16
    2430:	8f 89       	ldd	r24, Y+23	; 0x17
    2432:	98 8d       	ldd	r25, Y+24	; 0x18
    2434:	20 e0       	ldi	r18, 0x00	; 0
    2436:	30 e0       	ldi	r19, 0x00	; 0
    2438:	40 e8       	ldi	r20, 0x80	; 128
    243a:	5f e3       	ldi	r21, 0x3F	; 63
    243c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2440:	88 23       	and	r24, r24
    2442:	2c f4       	brge	.+10     	; 0x244e <LCD_VoidLCDInit+0x8c>
		__ticks = 1;
    2444:	81 e0       	ldi	r24, 0x01	; 1
    2446:	90 e0       	ldi	r25, 0x00	; 0
    2448:	9c 8b       	std	Y+20, r25	; 0x14
    244a:	8b 8b       	std	Y+19, r24	; 0x13
    244c:	3f c0       	rjmp	.+126    	; 0x24cc <LCD_VoidLCDInit+0x10a>
	else if (__tmp > 65535)
    244e:	6d 89       	ldd	r22, Y+21	; 0x15
    2450:	7e 89       	ldd	r23, Y+22	; 0x16
    2452:	8f 89       	ldd	r24, Y+23	; 0x17
    2454:	98 8d       	ldd	r25, Y+24	; 0x18
    2456:	20 e0       	ldi	r18, 0x00	; 0
    2458:	3f ef       	ldi	r19, 0xFF	; 255
    245a:	4f e7       	ldi	r20, 0x7F	; 127
    245c:	57 e4       	ldi	r21, 0x47	; 71
    245e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2462:	18 16       	cp	r1, r24
    2464:	4c f5       	brge	.+82     	; 0x24b8 <LCD_VoidLCDInit+0xf6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2466:	69 8d       	ldd	r22, Y+25	; 0x19
    2468:	7a 8d       	ldd	r23, Y+26	; 0x1a
    246a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    246c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    246e:	20 e0       	ldi	r18, 0x00	; 0
    2470:	30 e0       	ldi	r19, 0x00	; 0
    2472:	40 e2       	ldi	r20, 0x20	; 32
    2474:	51 e4       	ldi	r21, 0x41	; 65
    2476:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    247a:	dc 01       	movw	r26, r24
    247c:	cb 01       	movw	r24, r22
    247e:	bc 01       	movw	r22, r24
    2480:	cd 01       	movw	r24, r26
    2482:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2486:	dc 01       	movw	r26, r24
    2488:	cb 01       	movw	r24, r22
    248a:	9c 8b       	std	Y+20, r25	; 0x14
    248c:	8b 8b       	std	Y+19, r24	; 0x13
    248e:	0f c0       	rjmp	.+30     	; 0x24ae <LCD_VoidLCDInit+0xec>
    2490:	88 ec       	ldi	r24, 0xC8	; 200
    2492:	90 e0       	ldi	r25, 0x00	; 0
    2494:	9a 8b       	std	Y+18, r25	; 0x12
    2496:	89 8b       	std	Y+17, r24	; 0x11
    2498:	89 89       	ldd	r24, Y+17	; 0x11
    249a:	9a 89       	ldd	r25, Y+18	; 0x12
    249c:	01 97       	sbiw	r24, 0x01	; 1
    249e:	f1 f7       	brne	.-4      	; 0x249c <LCD_VoidLCDInit+0xda>
    24a0:	9a 8b       	std	Y+18, r25	; 0x12
    24a2:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24a4:	8b 89       	ldd	r24, Y+19	; 0x13
    24a6:	9c 89       	ldd	r25, Y+20	; 0x14
    24a8:	01 97       	sbiw	r24, 0x01	; 1
    24aa:	9c 8b       	std	Y+20, r25	; 0x14
    24ac:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24ae:	8b 89       	ldd	r24, Y+19	; 0x13
    24b0:	9c 89       	ldd	r25, Y+20	; 0x14
    24b2:	00 97       	sbiw	r24, 0x00	; 0
    24b4:	69 f7       	brne	.-38     	; 0x2490 <LCD_VoidLCDInit+0xce>
    24b6:	14 c0       	rjmp	.+40     	; 0x24e0 <LCD_VoidLCDInit+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24b8:	6d 89       	ldd	r22, Y+21	; 0x15
    24ba:	7e 89       	ldd	r23, Y+22	; 0x16
    24bc:	8f 89       	ldd	r24, Y+23	; 0x17
    24be:	98 8d       	ldd	r25, Y+24	; 0x18
    24c0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24c4:	dc 01       	movw	r26, r24
    24c6:	cb 01       	movw	r24, r22
    24c8:	9c 8b       	std	Y+20, r25	; 0x14
    24ca:	8b 8b       	std	Y+19, r24	; 0x13
    24cc:	8b 89       	ldd	r24, Y+19	; 0x13
    24ce:	9c 89       	ldd	r25, Y+20	; 0x14
    24d0:	98 8b       	std	Y+16, r25	; 0x10
    24d2:	8f 87       	std	Y+15, r24	; 0x0f
    24d4:	8f 85       	ldd	r24, Y+15	; 0x0f
    24d6:	98 89       	ldd	r25, Y+16	; 0x10
    24d8:	01 97       	sbiw	r24, 0x01	; 1
    24da:	f1 f7       	brne	.-4      	; 0x24d8 <LCD_VoidLCDInit+0x116>
    24dc:	98 8b       	std	Y+16, r25	; 0x10
    24de:	8f 87       	std	Y+15, r24	; 0x0f
	/* LCD Power ON delay always >15ms */
	_delay_ms(35);
	LCD_VoidSendCommand(0x33);
    24e0:	83 e3       	ldi	r24, 0x33	; 51
    24e2:	0e 94 86 0e 	call	0x1d0c	; 0x1d0c <LCD_VoidSendCommand>
	/* send for 4 bit initialization of LCD  */
	LCD_VoidSendCommand(0x32);
    24e6:	82 e3       	ldi	r24, 0x32	; 50
    24e8:	0e 94 86 0e 	call	0x1d0c	; 0x1d0c <LCD_VoidSendCommand>
	/* Use 2 line and initialize 5*7 matrix in (4-bit mode)*/
	LCD_VoidSendCommand(0x28);
    24ec:	88 e2       	ldi	r24, 0x28	; 40
    24ee:	0e 94 86 0e 	call	0x1d0c	; 0x1d0c <LCD_VoidSendCommand>
	/* Display on cursor off */
	LCD_VoidSendCommand(0x0c);
    24f2:	8c e0       	ldi	r24, 0x0C	; 12
    24f4:	0e 94 86 0e 	call	0x1d0c	; 0x1d0c <LCD_VoidSendCommand>
	/* Increment cursor (shift cursor to right) */
	LCD_VoidSendCommand(0x06);
    24f8:	86 e0       	ldi	r24, 0x06	; 6
    24fa:	0e 94 86 0e 	call	0x1d0c	; 0x1d0c <LCD_VoidSendCommand>
	/* Clear display screen*/
	LCD_VoidSendCommand(0x01);
    24fe:	81 e0       	ldi	r24, 0x01	; 1
    2500:	0e 94 86 0e 	call	0x1d0c	; 0x1d0c <LCD_VoidSendCommand>
    2504:	80 e0       	ldi	r24, 0x00	; 0
    2506:	90 e0       	ldi	r25, 0x00	; 0
    2508:	a0 e0       	ldi	r26, 0x00	; 0
    250a:	b0 e4       	ldi	r27, 0x40	; 64
    250c:	8b 87       	std	Y+11, r24	; 0x0b
    250e:	9c 87       	std	Y+12, r25	; 0x0c
    2510:	ad 87       	std	Y+13, r26	; 0x0d
    2512:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2514:	6b 85       	ldd	r22, Y+11	; 0x0b
    2516:	7c 85       	ldd	r23, Y+12	; 0x0c
    2518:	8d 85       	ldd	r24, Y+13	; 0x0d
    251a:	9e 85       	ldd	r25, Y+14	; 0x0e
    251c:	20 e0       	ldi	r18, 0x00	; 0
    251e:	30 e0       	ldi	r19, 0x00	; 0
    2520:	4a ef       	ldi	r20, 0xFA	; 250
    2522:	54 e4       	ldi	r21, 0x44	; 68
    2524:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2528:	dc 01       	movw	r26, r24
    252a:	cb 01       	movw	r24, r22
    252c:	8f 83       	std	Y+7, r24	; 0x07
    252e:	98 87       	std	Y+8, r25	; 0x08
    2530:	a9 87       	std	Y+9, r26	; 0x09
    2532:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2534:	6f 81       	ldd	r22, Y+7	; 0x07
    2536:	78 85       	ldd	r23, Y+8	; 0x08
    2538:	89 85       	ldd	r24, Y+9	; 0x09
    253a:	9a 85       	ldd	r25, Y+10	; 0x0a
    253c:	20 e0       	ldi	r18, 0x00	; 0
    253e:	30 e0       	ldi	r19, 0x00	; 0
    2540:	40 e8       	ldi	r20, 0x80	; 128
    2542:	5f e3       	ldi	r21, 0x3F	; 63
    2544:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2548:	88 23       	and	r24, r24
    254a:	2c f4       	brge	.+10     	; 0x2556 <LCD_VoidLCDInit+0x194>
		__ticks = 1;
    254c:	81 e0       	ldi	r24, 0x01	; 1
    254e:	90 e0       	ldi	r25, 0x00	; 0
    2550:	9e 83       	std	Y+6, r25	; 0x06
    2552:	8d 83       	std	Y+5, r24	; 0x05
    2554:	3f c0       	rjmp	.+126    	; 0x25d4 <LCD_VoidLCDInit+0x212>
	else if (__tmp > 65535)
    2556:	6f 81       	ldd	r22, Y+7	; 0x07
    2558:	78 85       	ldd	r23, Y+8	; 0x08
    255a:	89 85       	ldd	r24, Y+9	; 0x09
    255c:	9a 85       	ldd	r25, Y+10	; 0x0a
    255e:	20 e0       	ldi	r18, 0x00	; 0
    2560:	3f ef       	ldi	r19, 0xFF	; 255
    2562:	4f e7       	ldi	r20, 0x7F	; 127
    2564:	57 e4       	ldi	r21, 0x47	; 71
    2566:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    256a:	18 16       	cp	r1, r24
    256c:	4c f5       	brge	.+82     	; 0x25c0 <LCD_VoidLCDInit+0x1fe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    256e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2570:	7c 85       	ldd	r23, Y+12	; 0x0c
    2572:	8d 85       	ldd	r24, Y+13	; 0x0d
    2574:	9e 85       	ldd	r25, Y+14	; 0x0e
    2576:	20 e0       	ldi	r18, 0x00	; 0
    2578:	30 e0       	ldi	r19, 0x00	; 0
    257a:	40 e2       	ldi	r20, 0x20	; 32
    257c:	51 e4       	ldi	r21, 0x41	; 65
    257e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2582:	dc 01       	movw	r26, r24
    2584:	cb 01       	movw	r24, r22
    2586:	bc 01       	movw	r22, r24
    2588:	cd 01       	movw	r24, r26
    258a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    258e:	dc 01       	movw	r26, r24
    2590:	cb 01       	movw	r24, r22
    2592:	9e 83       	std	Y+6, r25	; 0x06
    2594:	8d 83       	std	Y+5, r24	; 0x05
    2596:	0f c0       	rjmp	.+30     	; 0x25b6 <LCD_VoidLCDInit+0x1f4>
    2598:	88 ec       	ldi	r24, 0xC8	; 200
    259a:	90 e0       	ldi	r25, 0x00	; 0
    259c:	9c 83       	std	Y+4, r25	; 0x04
    259e:	8b 83       	std	Y+3, r24	; 0x03
    25a0:	8b 81       	ldd	r24, Y+3	; 0x03
    25a2:	9c 81       	ldd	r25, Y+4	; 0x04
    25a4:	01 97       	sbiw	r24, 0x01	; 1
    25a6:	f1 f7       	brne	.-4      	; 0x25a4 <LCD_VoidLCDInit+0x1e2>
    25a8:	9c 83       	std	Y+4, r25	; 0x04
    25aa:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25ac:	8d 81       	ldd	r24, Y+5	; 0x05
    25ae:	9e 81       	ldd	r25, Y+6	; 0x06
    25b0:	01 97       	sbiw	r24, 0x01	; 1
    25b2:	9e 83       	std	Y+6, r25	; 0x06
    25b4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25b6:	8d 81       	ldd	r24, Y+5	; 0x05
    25b8:	9e 81       	ldd	r25, Y+6	; 0x06
    25ba:	00 97       	sbiw	r24, 0x00	; 0
    25bc:	69 f7       	brne	.-38     	; 0x2598 <LCD_VoidLCDInit+0x1d6>
    25be:	14 c0       	rjmp	.+40     	; 0x25e8 <LCD_VoidLCDInit+0x226>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25c0:	6f 81       	ldd	r22, Y+7	; 0x07
    25c2:	78 85       	ldd	r23, Y+8	; 0x08
    25c4:	89 85       	ldd	r24, Y+9	; 0x09
    25c6:	9a 85       	ldd	r25, Y+10	; 0x0a
    25c8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25cc:	dc 01       	movw	r26, r24
    25ce:	cb 01       	movw	r24, r22
    25d0:	9e 83       	std	Y+6, r25	; 0x06
    25d2:	8d 83       	std	Y+5, r24	; 0x05
    25d4:	8d 81       	ldd	r24, Y+5	; 0x05
    25d6:	9e 81       	ldd	r25, Y+6	; 0x06
    25d8:	9a 83       	std	Y+2, r25	; 0x02
    25da:	89 83       	std	Y+1, r24	; 0x01
    25dc:	89 81       	ldd	r24, Y+1	; 0x01
    25de:	9a 81       	ldd	r25, Y+2	; 0x02
    25e0:	01 97       	sbiw	r24, 0x01	; 1
    25e2:	f1 f7       	brne	.-4      	; 0x25e0 <LCD_VoidLCDInit+0x21e>
    25e4:	9a 83       	std	Y+2, r25	; 0x02
    25e6:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	LCD_VoidSendCommand (0x80);
    25e8:	80 e8       	ldi	r24, 0x80	; 128
    25ea:	0e 94 86 0e 	call	0x1d0c	; 0x1d0c <LCD_VoidSendCommand>
	/* End Of Init */
#endif
}
    25ee:	6c 96       	adiw	r28, 0x1c	; 28
    25f0:	0f b6       	in	r0, 0x3f	; 63
    25f2:	f8 94       	cli
    25f4:	de bf       	out	0x3e, r29	; 62
    25f6:	0f be       	out	0x3f, r0	; 63
    25f8:	cd bf       	out	0x3d, r28	; 61
    25fa:	cf 91       	pop	r28
    25fc:	df 91       	pop	r29
    25fe:	08 95       	ret

00002600 <LCD_VoidSendData>:

void LCD_VoidSendData(u8 Copy_U8Data)
{
    2600:	0f 93       	push	r16
    2602:	1f 93       	push	r17
    2604:	df 93       	push	r29
    2606:	cf 93       	push	r28
    2608:	cd b7       	in	r28, 0x3d	; 61
    260a:	de b7       	in	r29, 0x3e	; 62
    260c:	c7 55       	subi	r28, 0x57	; 87
    260e:	d0 40       	sbci	r29, 0x00	; 0
    2610:	0f b6       	in	r0, 0x3f	; 63
    2612:	f8 94       	cli
    2614:	de bf       	out	0x3e, r29	; 62
    2616:	0f be       	out	0x3f, r0	; 63
    2618:	cd bf       	out	0x3d, r28	; 61
    261a:	fe 01       	movw	r30, r28
    261c:	e9 5a       	subi	r30, 0xA9	; 169
    261e:	ff 4f       	sbci	r31, 0xFF	; 255
    2620:	80 83       	st	Z, r24
	DIO_U8SetPinValue(LCD_CONTROL_PORT,CONTROL_E,DIO_HIGH);
	_delay_ms(2);
	DIO_U8SetPinValue(LCD_CONTROL_PORT,CONTROL_E,DIO_LOW);
#elif LCD_MODE == LCD_4BIT_MODE
	/* Set RS -> High  --> to send data*/
	DIO_U8SetPinValue(LCD_CONTROL_PORT,CONTROL_RS,DIO_HIGH);
    2622:	83 e0       	ldi	r24, 0x03	; 3
    2624:	62 e0       	ldi	r22, 0x02	; 2
    2626:	41 e0       	ldi	r20, 0x01	; 1
    2628:	0e 94 15 08 	call	0x102a	; 0x102a <DIO_U8SetPinValue>

	/* Set RW -> Low  --> to Write*/
	DIO_U8SetPinValue(LCD_CONTROL_PORT,CONTROL_RW,DIO_LOW);
    262c:	83 e0       	ldi	r24, 0x03	; 3
    262e:	63 e0       	ldi	r22, 0x03	; 3
    2630:	40 e0       	ldi	r20, 0x00	; 0
    2632:	0e 94 15 08 	call	0x102a	; 0x102a <DIO_U8SetPinValue>
	/* Write On Char */
	DIO_U8SetPortValue(LCD_DATA_PORT, Copy_U8Data);
    2636:	fe 01       	movw	r30, r28
    2638:	e9 5a       	subi	r30, 0xA9	; 169
    263a:	ff 4f       	sbci	r31, 0xFF	; 255
    263c:	82 e0       	ldi	r24, 0x02	; 2
    263e:	60 81       	ld	r22, Z
    2640:	0e 94 18 0b 	call	0x1630	; 0x1630 <DIO_U8SetPortValue>
	/*Enable sequence to send command*/
	DIO_U8SetPinValue(LCD_CONTROL_PORT,CONTROL_E,DIO_HIGH);
    2644:	83 e0       	ldi	r24, 0x03	; 3
    2646:	64 e0       	ldi	r22, 0x04	; 4
    2648:	41 e0       	ldi	r20, 0x01	; 1
    264a:	0e 94 15 08 	call	0x102a	; 0x102a <DIO_U8SetPinValue>
    264e:	fe 01       	movw	r30, r28
    2650:	ed 5a       	subi	r30, 0xAD	; 173
    2652:	ff 4f       	sbci	r31, 0xFF	; 255
    2654:	80 e0       	ldi	r24, 0x00	; 0
    2656:	90 e0       	ldi	r25, 0x00	; 0
    2658:	a0 e8       	ldi	r26, 0x80	; 128
    265a:	bf e3       	ldi	r27, 0x3F	; 63
    265c:	80 83       	st	Z, r24
    265e:	91 83       	std	Z+1, r25	; 0x01
    2660:	a2 83       	std	Z+2, r26	; 0x02
    2662:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2664:	8e 01       	movw	r16, r28
    2666:	01 5b       	subi	r16, 0xB1	; 177
    2668:	1f 4f       	sbci	r17, 0xFF	; 255
    266a:	fe 01       	movw	r30, r28
    266c:	ed 5a       	subi	r30, 0xAD	; 173
    266e:	ff 4f       	sbci	r31, 0xFF	; 255
    2670:	60 81       	ld	r22, Z
    2672:	71 81       	ldd	r23, Z+1	; 0x01
    2674:	82 81       	ldd	r24, Z+2	; 0x02
    2676:	93 81       	ldd	r25, Z+3	; 0x03
    2678:	2b ea       	ldi	r18, 0xAB	; 171
    267a:	3a ea       	ldi	r19, 0xAA	; 170
    267c:	4a e2       	ldi	r20, 0x2A	; 42
    267e:	50 e4       	ldi	r21, 0x40	; 64
    2680:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2684:	dc 01       	movw	r26, r24
    2686:	cb 01       	movw	r24, r22
    2688:	f8 01       	movw	r30, r16
    268a:	80 83       	st	Z, r24
    268c:	91 83       	std	Z+1, r25	; 0x01
    268e:	a2 83       	std	Z+2, r26	; 0x02
    2690:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2692:	fe 01       	movw	r30, r28
    2694:	e1 5b       	subi	r30, 0xB1	; 177
    2696:	ff 4f       	sbci	r31, 0xFF	; 255
    2698:	60 81       	ld	r22, Z
    269a:	71 81       	ldd	r23, Z+1	; 0x01
    269c:	82 81       	ldd	r24, Z+2	; 0x02
    269e:	93 81       	ldd	r25, Z+3	; 0x03
    26a0:	20 e0       	ldi	r18, 0x00	; 0
    26a2:	30 e0       	ldi	r19, 0x00	; 0
    26a4:	40 e8       	ldi	r20, 0x80	; 128
    26a6:	5f e3       	ldi	r21, 0x3F	; 63
    26a8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    26ac:	88 23       	and	r24, r24
    26ae:	34 f4       	brge	.+12     	; 0x26bc <LCD_VoidSendData+0xbc>
		__ticks = 1;
    26b0:	fe 01       	movw	r30, r28
    26b2:	e2 5b       	subi	r30, 0xB2	; 178
    26b4:	ff 4f       	sbci	r31, 0xFF	; 255
    26b6:	81 e0       	ldi	r24, 0x01	; 1
    26b8:	80 83       	st	Z, r24
    26ba:	e0 c0       	rjmp	.+448    	; 0x287c <LCD_VoidSendData+0x27c>
	else if (__tmp > 255)
    26bc:	fe 01       	movw	r30, r28
    26be:	e1 5b       	subi	r30, 0xB1	; 177
    26c0:	ff 4f       	sbci	r31, 0xFF	; 255
    26c2:	60 81       	ld	r22, Z
    26c4:	71 81       	ldd	r23, Z+1	; 0x01
    26c6:	82 81       	ldd	r24, Z+2	; 0x02
    26c8:	93 81       	ldd	r25, Z+3	; 0x03
    26ca:	20 e0       	ldi	r18, 0x00	; 0
    26cc:	30 e0       	ldi	r19, 0x00	; 0
    26ce:	4f e7       	ldi	r20, 0x7F	; 127
    26d0:	53 e4       	ldi	r21, 0x43	; 67
    26d2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    26d6:	18 16       	cp	r1, r24
    26d8:	0c f0       	brlt	.+2      	; 0x26dc <LCD_VoidSendData+0xdc>
    26da:	c0 c0       	rjmp	.+384    	; 0x285c <LCD_VoidSendData+0x25c>
	{
		_delay_ms(__us / 1000.0);
    26dc:	fe 01       	movw	r30, r28
    26de:	ed 5a       	subi	r30, 0xAD	; 173
    26e0:	ff 4f       	sbci	r31, 0xFF	; 255
    26e2:	60 81       	ld	r22, Z
    26e4:	71 81       	ldd	r23, Z+1	; 0x01
    26e6:	82 81       	ldd	r24, Z+2	; 0x02
    26e8:	93 81       	ldd	r25, Z+3	; 0x03
    26ea:	20 e0       	ldi	r18, 0x00	; 0
    26ec:	30 e0       	ldi	r19, 0x00	; 0
    26ee:	4a e7       	ldi	r20, 0x7A	; 122
    26f0:	54 e4       	ldi	r21, 0x44	; 68
    26f2:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    26f6:	dc 01       	movw	r26, r24
    26f8:	cb 01       	movw	r24, r22
    26fa:	fe 01       	movw	r30, r28
    26fc:	e6 5b       	subi	r30, 0xB6	; 182
    26fe:	ff 4f       	sbci	r31, 0xFF	; 255
    2700:	80 83       	st	Z, r24
    2702:	91 83       	std	Z+1, r25	; 0x01
    2704:	a2 83       	std	Z+2, r26	; 0x02
    2706:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2708:	8e 01       	movw	r16, r28
    270a:	0a 5b       	subi	r16, 0xBA	; 186
    270c:	1f 4f       	sbci	r17, 0xFF	; 255
    270e:	fe 01       	movw	r30, r28
    2710:	e6 5b       	subi	r30, 0xB6	; 182
    2712:	ff 4f       	sbci	r31, 0xFF	; 255
    2714:	60 81       	ld	r22, Z
    2716:	71 81       	ldd	r23, Z+1	; 0x01
    2718:	82 81       	ldd	r24, Z+2	; 0x02
    271a:	93 81       	ldd	r25, Z+3	; 0x03
    271c:	20 e0       	ldi	r18, 0x00	; 0
    271e:	30 e0       	ldi	r19, 0x00	; 0
    2720:	4a ef       	ldi	r20, 0xFA	; 250
    2722:	54 e4       	ldi	r21, 0x44	; 68
    2724:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2728:	dc 01       	movw	r26, r24
    272a:	cb 01       	movw	r24, r22
    272c:	f8 01       	movw	r30, r16
    272e:	80 83       	st	Z, r24
    2730:	91 83       	std	Z+1, r25	; 0x01
    2732:	a2 83       	std	Z+2, r26	; 0x02
    2734:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2736:	fe 01       	movw	r30, r28
    2738:	ea 5b       	subi	r30, 0xBA	; 186
    273a:	ff 4f       	sbci	r31, 0xFF	; 255
    273c:	60 81       	ld	r22, Z
    273e:	71 81       	ldd	r23, Z+1	; 0x01
    2740:	82 81       	ldd	r24, Z+2	; 0x02
    2742:	93 81       	ldd	r25, Z+3	; 0x03
    2744:	20 e0       	ldi	r18, 0x00	; 0
    2746:	30 e0       	ldi	r19, 0x00	; 0
    2748:	40 e8       	ldi	r20, 0x80	; 128
    274a:	5f e3       	ldi	r21, 0x3F	; 63
    274c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2750:	88 23       	and	r24, r24
    2752:	44 f4       	brge	.+16     	; 0x2764 <LCD_VoidSendData+0x164>
		__ticks = 1;
    2754:	fe 01       	movw	r30, r28
    2756:	ec 5b       	subi	r30, 0xBC	; 188
    2758:	ff 4f       	sbci	r31, 0xFF	; 255
    275a:	81 e0       	ldi	r24, 0x01	; 1
    275c:	90 e0       	ldi	r25, 0x00	; 0
    275e:	91 83       	std	Z+1, r25	; 0x01
    2760:	80 83       	st	Z, r24
    2762:	64 c0       	rjmp	.+200    	; 0x282c <LCD_VoidSendData+0x22c>
	else if (__tmp > 65535)
    2764:	fe 01       	movw	r30, r28
    2766:	ea 5b       	subi	r30, 0xBA	; 186
    2768:	ff 4f       	sbci	r31, 0xFF	; 255
    276a:	60 81       	ld	r22, Z
    276c:	71 81       	ldd	r23, Z+1	; 0x01
    276e:	82 81       	ldd	r24, Z+2	; 0x02
    2770:	93 81       	ldd	r25, Z+3	; 0x03
    2772:	20 e0       	ldi	r18, 0x00	; 0
    2774:	3f ef       	ldi	r19, 0xFF	; 255
    2776:	4f e7       	ldi	r20, 0x7F	; 127
    2778:	57 e4       	ldi	r21, 0x47	; 71
    277a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    277e:	18 16       	cp	r1, r24
    2780:	0c f0       	brlt	.+2      	; 0x2784 <LCD_VoidSendData+0x184>
    2782:	43 c0       	rjmp	.+134    	; 0x280a <LCD_VoidSendData+0x20a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2784:	fe 01       	movw	r30, r28
    2786:	e6 5b       	subi	r30, 0xB6	; 182
    2788:	ff 4f       	sbci	r31, 0xFF	; 255
    278a:	60 81       	ld	r22, Z
    278c:	71 81       	ldd	r23, Z+1	; 0x01
    278e:	82 81       	ldd	r24, Z+2	; 0x02
    2790:	93 81       	ldd	r25, Z+3	; 0x03
    2792:	20 e0       	ldi	r18, 0x00	; 0
    2794:	30 e0       	ldi	r19, 0x00	; 0
    2796:	40 e2       	ldi	r20, 0x20	; 32
    2798:	51 e4       	ldi	r21, 0x41	; 65
    279a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    279e:	dc 01       	movw	r26, r24
    27a0:	cb 01       	movw	r24, r22
    27a2:	8e 01       	movw	r16, r28
    27a4:	0c 5b       	subi	r16, 0xBC	; 188
    27a6:	1f 4f       	sbci	r17, 0xFF	; 255
    27a8:	bc 01       	movw	r22, r24
    27aa:	cd 01       	movw	r24, r26
    27ac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27b0:	dc 01       	movw	r26, r24
    27b2:	cb 01       	movw	r24, r22
    27b4:	f8 01       	movw	r30, r16
    27b6:	91 83       	std	Z+1, r25	; 0x01
    27b8:	80 83       	st	Z, r24
    27ba:	1f c0       	rjmp	.+62     	; 0x27fa <LCD_VoidSendData+0x1fa>
    27bc:	fe 01       	movw	r30, r28
    27be:	ee 5b       	subi	r30, 0xBE	; 190
    27c0:	ff 4f       	sbci	r31, 0xFF	; 255
    27c2:	88 ec       	ldi	r24, 0xC8	; 200
    27c4:	90 e0       	ldi	r25, 0x00	; 0
    27c6:	91 83       	std	Z+1, r25	; 0x01
    27c8:	80 83       	st	Z, r24
    27ca:	fe 01       	movw	r30, r28
    27cc:	ee 5b       	subi	r30, 0xBE	; 190
    27ce:	ff 4f       	sbci	r31, 0xFF	; 255
    27d0:	80 81       	ld	r24, Z
    27d2:	91 81       	ldd	r25, Z+1	; 0x01
    27d4:	01 97       	sbiw	r24, 0x01	; 1
    27d6:	f1 f7       	brne	.-4      	; 0x27d4 <LCD_VoidSendData+0x1d4>
    27d8:	fe 01       	movw	r30, r28
    27da:	ee 5b       	subi	r30, 0xBE	; 190
    27dc:	ff 4f       	sbci	r31, 0xFF	; 255
    27de:	91 83       	std	Z+1, r25	; 0x01
    27e0:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    27e2:	de 01       	movw	r26, r28
    27e4:	ac 5b       	subi	r26, 0xBC	; 188
    27e6:	bf 4f       	sbci	r27, 0xFF	; 255
    27e8:	fe 01       	movw	r30, r28
    27ea:	ec 5b       	subi	r30, 0xBC	; 188
    27ec:	ff 4f       	sbci	r31, 0xFF	; 255
    27ee:	80 81       	ld	r24, Z
    27f0:	91 81       	ldd	r25, Z+1	; 0x01
    27f2:	01 97       	sbiw	r24, 0x01	; 1
    27f4:	11 96       	adiw	r26, 0x01	; 1
    27f6:	9c 93       	st	X, r25
    27f8:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27fa:	fe 01       	movw	r30, r28
    27fc:	ec 5b       	subi	r30, 0xBC	; 188
    27fe:	ff 4f       	sbci	r31, 0xFF	; 255
    2800:	80 81       	ld	r24, Z
    2802:	91 81       	ldd	r25, Z+1	; 0x01
    2804:	00 97       	sbiw	r24, 0x00	; 0
    2806:	d1 f6       	brne	.-76     	; 0x27bc <LCD_VoidSendData+0x1bc>
    2808:	42 c0       	rjmp	.+132    	; 0x288e <LCD_VoidSendData+0x28e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    280a:	8e 01       	movw	r16, r28
    280c:	0c 5b       	subi	r16, 0xBC	; 188
    280e:	1f 4f       	sbci	r17, 0xFF	; 255
    2810:	fe 01       	movw	r30, r28
    2812:	ea 5b       	subi	r30, 0xBA	; 186
    2814:	ff 4f       	sbci	r31, 0xFF	; 255
    2816:	60 81       	ld	r22, Z
    2818:	71 81       	ldd	r23, Z+1	; 0x01
    281a:	82 81       	ldd	r24, Z+2	; 0x02
    281c:	93 81       	ldd	r25, Z+3	; 0x03
    281e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2822:	dc 01       	movw	r26, r24
    2824:	cb 01       	movw	r24, r22
    2826:	f8 01       	movw	r30, r16
    2828:	91 83       	std	Z+1, r25	; 0x01
    282a:	80 83       	st	Z, r24
    282c:	de 01       	movw	r26, r28
    282e:	a0 5c       	subi	r26, 0xC0	; 192
    2830:	bf 4f       	sbci	r27, 0xFF	; 255
    2832:	fe 01       	movw	r30, r28
    2834:	ec 5b       	subi	r30, 0xBC	; 188
    2836:	ff 4f       	sbci	r31, 0xFF	; 255
    2838:	80 81       	ld	r24, Z
    283a:	91 81       	ldd	r25, Z+1	; 0x01
    283c:	11 96       	adiw	r26, 0x01	; 1
    283e:	9c 93       	st	X, r25
    2840:	8e 93       	st	-X, r24
    2842:	fe 01       	movw	r30, r28
    2844:	e0 5c       	subi	r30, 0xC0	; 192
    2846:	ff 4f       	sbci	r31, 0xFF	; 255
    2848:	80 81       	ld	r24, Z
    284a:	91 81       	ldd	r25, Z+1	; 0x01
    284c:	01 97       	sbiw	r24, 0x01	; 1
    284e:	f1 f7       	brne	.-4      	; 0x284c <LCD_VoidSendData+0x24c>
    2850:	fe 01       	movw	r30, r28
    2852:	e0 5c       	subi	r30, 0xC0	; 192
    2854:	ff 4f       	sbci	r31, 0xFF	; 255
    2856:	91 83       	std	Z+1, r25	; 0x01
    2858:	80 83       	st	Z, r24
    285a:	19 c0       	rjmp	.+50     	; 0x288e <LCD_VoidSendData+0x28e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    285c:	8e 01       	movw	r16, r28
    285e:	02 5b       	subi	r16, 0xB2	; 178
    2860:	1f 4f       	sbci	r17, 0xFF	; 255
    2862:	fe 01       	movw	r30, r28
    2864:	e1 5b       	subi	r30, 0xB1	; 177
    2866:	ff 4f       	sbci	r31, 0xFF	; 255
    2868:	60 81       	ld	r22, Z
    286a:	71 81       	ldd	r23, Z+1	; 0x01
    286c:	82 81       	ldd	r24, Z+2	; 0x02
    286e:	93 81       	ldd	r25, Z+3	; 0x03
    2870:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2874:	dc 01       	movw	r26, r24
    2876:	cb 01       	movw	r24, r22
    2878:	f8 01       	movw	r30, r16
    287a:	80 83       	st	Z, r24
    287c:	fe 01       	movw	r30, r28
    287e:	e2 5b       	subi	r30, 0xB2	; 178
    2880:	ff 4f       	sbci	r31, 0xFF	; 255
    2882:	80 81       	ld	r24, Z
    2884:	8f af       	std	Y+63, r24	; 0x3f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2886:	8f ad       	ldd	r24, Y+63	; 0x3f
    2888:	8a 95       	dec	r24
    288a:	f1 f7       	brne	.-4      	; 0x2888 <LCD_VoidSendData+0x288>
    288c:	8f af       	std	Y+63, r24	; 0x3f
	_delay_us(1);
	DIO_U8SetPinValue(LCD_CONTROL_PORT,CONTROL_E,DIO_LOW);
    288e:	83 e0       	ldi	r24, 0x03	; 3
    2890:	64 e0       	ldi	r22, 0x04	; 4
    2892:	40 e0       	ldi	r20, 0x00	; 0
    2894:	0e 94 15 08 	call	0x102a	; 0x102a <DIO_U8SetPinValue>
    2898:	80 e0       	ldi	r24, 0x00	; 0
    289a:	90 e0       	ldi	r25, 0x00	; 0
    289c:	a8 e4       	ldi	r26, 0x48	; 72
    289e:	b3 e4       	ldi	r27, 0x43	; 67
    28a0:	8b af       	std	Y+59, r24	; 0x3b
    28a2:	9c af       	std	Y+60, r25	; 0x3c
    28a4:	ad af       	std	Y+61, r26	; 0x3d
    28a6:	be af       	std	Y+62, r27	; 0x3e
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    28a8:	6b ad       	ldd	r22, Y+59	; 0x3b
    28aa:	7c ad       	ldd	r23, Y+60	; 0x3c
    28ac:	8d ad       	ldd	r24, Y+61	; 0x3d
    28ae:	9e ad       	ldd	r25, Y+62	; 0x3e
    28b0:	2b ea       	ldi	r18, 0xAB	; 171
    28b2:	3a ea       	ldi	r19, 0xAA	; 170
    28b4:	4a e2       	ldi	r20, 0x2A	; 42
    28b6:	50 e4       	ldi	r21, 0x40	; 64
    28b8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28bc:	dc 01       	movw	r26, r24
    28be:	cb 01       	movw	r24, r22
    28c0:	8f ab       	std	Y+55, r24	; 0x37
    28c2:	98 af       	std	Y+56, r25	; 0x38
    28c4:	a9 af       	std	Y+57, r26	; 0x39
    28c6:	ba af       	std	Y+58, r27	; 0x3a
	if (__tmp < 1.0)
    28c8:	6f a9       	ldd	r22, Y+55	; 0x37
    28ca:	78 ad       	ldd	r23, Y+56	; 0x38
    28cc:	89 ad       	ldd	r24, Y+57	; 0x39
    28ce:	9a ad       	ldd	r25, Y+58	; 0x3a
    28d0:	20 e0       	ldi	r18, 0x00	; 0
    28d2:	30 e0       	ldi	r19, 0x00	; 0
    28d4:	40 e8       	ldi	r20, 0x80	; 128
    28d6:	5f e3       	ldi	r21, 0x3F	; 63
    28d8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    28dc:	88 23       	and	r24, r24
    28de:	1c f4       	brge	.+6      	; 0x28e6 <LCD_VoidSendData+0x2e6>
		__ticks = 1;
    28e0:	81 e0       	ldi	r24, 0x01	; 1
    28e2:	8e ab       	std	Y+54, r24	; 0x36
    28e4:	91 c0       	rjmp	.+290    	; 0x2a08 <LCD_VoidSendData+0x408>
	else if (__tmp > 255)
    28e6:	6f a9       	ldd	r22, Y+55	; 0x37
    28e8:	78 ad       	ldd	r23, Y+56	; 0x38
    28ea:	89 ad       	ldd	r24, Y+57	; 0x39
    28ec:	9a ad       	ldd	r25, Y+58	; 0x3a
    28ee:	20 e0       	ldi	r18, 0x00	; 0
    28f0:	30 e0       	ldi	r19, 0x00	; 0
    28f2:	4f e7       	ldi	r20, 0x7F	; 127
    28f4:	53 e4       	ldi	r21, 0x43	; 67
    28f6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    28fa:	18 16       	cp	r1, r24
    28fc:	0c f0       	brlt	.+2      	; 0x2900 <LCD_VoidSendData+0x300>
    28fe:	7b c0       	rjmp	.+246    	; 0x29f6 <LCD_VoidSendData+0x3f6>
	{
		_delay_ms(__us / 1000.0);
    2900:	6b ad       	ldd	r22, Y+59	; 0x3b
    2902:	7c ad       	ldd	r23, Y+60	; 0x3c
    2904:	8d ad       	ldd	r24, Y+61	; 0x3d
    2906:	9e ad       	ldd	r25, Y+62	; 0x3e
    2908:	20 e0       	ldi	r18, 0x00	; 0
    290a:	30 e0       	ldi	r19, 0x00	; 0
    290c:	4a e7       	ldi	r20, 0x7A	; 122
    290e:	54 e4       	ldi	r21, 0x44	; 68
    2910:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2914:	dc 01       	movw	r26, r24
    2916:	cb 01       	movw	r24, r22
    2918:	8a ab       	std	Y+50, r24	; 0x32
    291a:	9b ab       	std	Y+51, r25	; 0x33
    291c:	ac ab       	std	Y+52, r26	; 0x34
    291e:	bd ab       	std	Y+53, r27	; 0x35
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2920:	6a a9       	ldd	r22, Y+50	; 0x32
    2922:	7b a9       	ldd	r23, Y+51	; 0x33
    2924:	8c a9       	ldd	r24, Y+52	; 0x34
    2926:	9d a9       	ldd	r25, Y+53	; 0x35
    2928:	20 e0       	ldi	r18, 0x00	; 0
    292a:	30 e0       	ldi	r19, 0x00	; 0
    292c:	4a ef       	ldi	r20, 0xFA	; 250
    292e:	54 e4       	ldi	r21, 0x44	; 68
    2930:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2934:	dc 01       	movw	r26, r24
    2936:	cb 01       	movw	r24, r22
    2938:	8e a7       	std	Y+46, r24	; 0x2e
    293a:	9f a7       	std	Y+47, r25	; 0x2f
    293c:	a8 ab       	std	Y+48, r26	; 0x30
    293e:	b9 ab       	std	Y+49, r27	; 0x31
	if (__tmp < 1.0)
    2940:	6e a5       	ldd	r22, Y+46	; 0x2e
    2942:	7f a5       	ldd	r23, Y+47	; 0x2f
    2944:	88 a9       	ldd	r24, Y+48	; 0x30
    2946:	99 a9       	ldd	r25, Y+49	; 0x31
    2948:	20 e0       	ldi	r18, 0x00	; 0
    294a:	30 e0       	ldi	r19, 0x00	; 0
    294c:	40 e8       	ldi	r20, 0x80	; 128
    294e:	5f e3       	ldi	r21, 0x3F	; 63
    2950:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2954:	88 23       	and	r24, r24
    2956:	2c f4       	brge	.+10     	; 0x2962 <LCD_VoidSendData+0x362>
		__ticks = 1;
    2958:	81 e0       	ldi	r24, 0x01	; 1
    295a:	90 e0       	ldi	r25, 0x00	; 0
    295c:	9d a7       	std	Y+45, r25	; 0x2d
    295e:	8c a7       	std	Y+44, r24	; 0x2c
    2960:	3f c0       	rjmp	.+126    	; 0x29e0 <LCD_VoidSendData+0x3e0>
	else if (__tmp > 65535)
    2962:	6e a5       	ldd	r22, Y+46	; 0x2e
    2964:	7f a5       	ldd	r23, Y+47	; 0x2f
    2966:	88 a9       	ldd	r24, Y+48	; 0x30
    2968:	99 a9       	ldd	r25, Y+49	; 0x31
    296a:	20 e0       	ldi	r18, 0x00	; 0
    296c:	3f ef       	ldi	r19, 0xFF	; 255
    296e:	4f e7       	ldi	r20, 0x7F	; 127
    2970:	57 e4       	ldi	r21, 0x47	; 71
    2972:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2976:	18 16       	cp	r1, r24
    2978:	4c f5       	brge	.+82     	; 0x29cc <LCD_VoidSendData+0x3cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    297a:	6a a9       	ldd	r22, Y+50	; 0x32
    297c:	7b a9       	ldd	r23, Y+51	; 0x33
    297e:	8c a9       	ldd	r24, Y+52	; 0x34
    2980:	9d a9       	ldd	r25, Y+53	; 0x35
    2982:	20 e0       	ldi	r18, 0x00	; 0
    2984:	30 e0       	ldi	r19, 0x00	; 0
    2986:	40 e2       	ldi	r20, 0x20	; 32
    2988:	51 e4       	ldi	r21, 0x41	; 65
    298a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    298e:	dc 01       	movw	r26, r24
    2990:	cb 01       	movw	r24, r22
    2992:	bc 01       	movw	r22, r24
    2994:	cd 01       	movw	r24, r26
    2996:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    299a:	dc 01       	movw	r26, r24
    299c:	cb 01       	movw	r24, r22
    299e:	9d a7       	std	Y+45, r25	; 0x2d
    29a0:	8c a7       	std	Y+44, r24	; 0x2c
    29a2:	0f c0       	rjmp	.+30     	; 0x29c2 <LCD_VoidSendData+0x3c2>
    29a4:	88 ec       	ldi	r24, 0xC8	; 200
    29a6:	90 e0       	ldi	r25, 0x00	; 0
    29a8:	9b a7       	std	Y+43, r25	; 0x2b
    29aa:	8a a7       	std	Y+42, r24	; 0x2a
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    29ac:	8a a5       	ldd	r24, Y+42	; 0x2a
    29ae:	9b a5       	ldd	r25, Y+43	; 0x2b
    29b0:	01 97       	sbiw	r24, 0x01	; 1
    29b2:	f1 f7       	brne	.-4      	; 0x29b0 <LCD_VoidSendData+0x3b0>
    29b4:	9b a7       	std	Y+43, r25	; 0x2b
    29b6:	8a a7       	std	Y+42, r24	; 0x2a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29b8:	8c a5       	ldd	r24, Y+44	; 0x2c
    29ba:	9d a5       	ldd	r25, Y+45	; 0x2d
    29bc:	01 97       	sbiw	r24, 0x01	; 1
    29be:	9d a7       	std	Y+45, r25	; 0x2d
    29c0:	8c a7       	std	Y+44, r24	; 0x2c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    29c2:	8c a5       	ldd	r24, Y+44	; 0x2c
    29c4:	9d a5       	ldd	r25, Y+45	; 0x2d
    29c6:	00 97       	sbiw	r24, 0x00	; 0
    29c8:	69 f7       	brne	.-38     	; 0x29a4 <LCD_VoidSendData+0x3a4>
    29ca:	24 c0       	rjmp	.+72     	; 0x2a14 <LCD_VoidSendData+0x414>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    29cc:	6e a5       	ldd	r22, Y+46	; 0x2e
    29ce:	7f a5       	ldd	r23, Y+47	; 0x2f
    29d0:	88 a9       	ldd	r24, Y+48	; 0x30
    29d2:	99 a9       	ldd	r25, Y+49	; 0x31
    29d4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29d8:	dc 01       	movw	r26, r24
    29da:	cb 01       	movw	r24, r22
    29dc:	9d a7       	std	Y+45, r25	; 0x2d
    29de:	8c a7       	std	Y+44, r24	; 0x2c
    29e0:	8c a5       	ldd	r24, Y+44	; 0x2c
    29e2:	9d a5       	ldd	r25, Y+45	; 0x2d
    29e4:	99 a7       	std	Y+41, r25	; 0x29
    29e6:	88 a7       	std	Y+40, r24	; 0x28
    29e8:	88 a5       	ldd	r24, Y+40	; 0x28
    29ea:	99 a5       	ldd	r25, Y+41	; 0x29
    29ec:	01 97       	sbiw	r24, 0x01	; 1
    29ee:	f1 f7       	brne	.-4      	; 0x29ec <LCD_VoidSendData+0x3ec>
    29f0:	99 a7       	std	Y+41, r25	; 0x29
    29f2:	88 a7       	std	Y+40, r24	; 0x28
    29f4:	0f c0       	rjmp	.+30     	; 0x2a14 <LCD_VoidSendData+0x414>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    29f6:	6f a9       	ldd	r22, Y+55	; 0x37
    29f8:	78 ad       	ldd	r23, Y+56	; 0x38
    29fa:	89 ad       	ldd	r24, Y+57	; 0x39
    29fc:	9a ad       	ldd	r25, Y+58	; 0x3a
    29fe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a02:	dc 01       	movw	r26, r24
    2a04:	cb 01       	movw	r24, r22
    2a06:	8e ab       	std	Y+54, r24	; 0x36
    2a08:	8e a9       	ldd	r24, Y+54	; 0x36
    2a0a:	8f a3       	std	Y+39, r24	; 0x27
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2a0c:	8f a1       	ldd	r24, Y+39	; 0x27
    2a0e:	8a 95       	dec	r24
    2a10:	f1 f7       	brne	.-4      	; 0x2a0e <LCD_VoidSendData+0x40e>
    2a12:	8f a3       	std	Y+39, r24	; 0x27
	_delay_us(200);
	/* Write On Char Least Signifit */
	DIO_U8SetPortValue(LCD_DATA_PORT, (Copy_U8Data << 4));
    2a14:	fe 01       	movw	r30, r28
    2a16:	e9 5a       	subi	r30, 0xA9	; 169
    2a18:	ff 4f       	sbci	r31, 0xFF	; 255
    2a1a:	80 81       	ld	r24, Z
    2a1c:	98 2f       	mov	r25, r24
    2a1e:	92 95       	swap	r25
    2a20:	90 7f       	andi	r25, 0xF0	; 240
    2a22:	82 e0       	ldi	r24, 0x02	; 2
    2a24:	69 2f       	mov	r22, r25
    2a26:	0e 94 18 0b 	call	0x1630	; 0x1630 <DIO_U8SetPortValue>
	/*Enable sequence to send command*/
	DIO_U8SetPinValue(LCD_CONTROL_PORT, CONTROL_E, DIO_HIGH);
    2a2a:	83 e0       	ldi	r24, 0x03	; 3
    2a2c:	64 e0       	ldi	r22, 0x04	; 4
    2a2e:	41 e0       	ldi	r20, 0x01	; 1
    2a30:	0e 94 15 08 	call	0x102a	; 0x102a <DIO_U8SetPinValue>
    2a34:	80 e0       	ldi	r24, 0x00	; 0
    2a36:	90 e0       	ldi	r25, 0x00	; 0
    2a38:	a0 e8       	ldi	r26, 0x80	; 128
    2a3a:	bf e3       	ldi	r27, 0x3F	; 63
    2a3c:	8b a3       	std	Y+35, r24	; 0x23
    2a3e:	9c a3       	std	Y+36, r25	; 0x24
    2a40:	ad a3       	std	Y+37, r26	; 0x25
    2a42:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2a44:	6b a1       	ldd	r22, Y+35	; 0x23
    2a46:	7c a1       	ldd	r23, Y+36	; 0x24
    2a48:	8d a1       	ldd	r24, Y+37	; 0x25
    2a4a:	9e a1       	ldd	r25, Y+38	; 0x26
    2a4c:	2b ea       	ldi	r18, 0xAB	; 171
    2a4e:	3a ea       	ldi	r19, 0xAA	; 170
    2a50:	4a e2       	ldi	r20, 0x2A	; 42
    2a52:	50 e4       	ldi	r21, 0x40	; 64
    2a54:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a58:	dc 01       	movw	r26, r24
    2a5a:	cb 01       	movw	r24, r22
    2a5c:	8f 8f       	std	Y+31, r24	; 0x1f
    2a5e:	98 a3       	std	Y+32, r25	; 0x20
    2a60:	a9 a3       	std	Y+33, r26	; 0x21
    2a62:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    2a64:	6f 8d       	ldd	r22, Y+31	; 0x1f
    2a66:	78 a1       	ldd	r23, Y+32	; 0x20
    2a68:	89 a1       	ldd	r24, Y+33	; 0x21
    2a6a:	9a a1       	ldd	r25, Y+34	; 0x22
    2a6c:	20 e0       	ldi	r18, 0x00	; 0
    2a6e:	30 e0       	ldi	r19, 0x00	; 0
    2a70:	40 e8       	ldi	r20, 0x80	; 128
    2a72:	5f e3       	ldi	r21, 0x3F	; 63
    2a74:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2a78:	88 23       	and	r24, r24
    2a7a:	1c f4       	brge	.+6      	; 0x2a82 <LCD_VoidSendData+0x482>
		__ticks = 1;
    2a7c:	81 e0       	ldi	r24, 0x01	; 1
    2a7e:	8e 8f       	std	Y+30, r24	; 0x1e
    2a80:	91 c0       	rjmp	.+290    	; 0x2ba4 <LCD_VoidSendData+0x5a4>
	else if (__tmp > 255)
    2a82:	6f 8d       	ldd	r22, Y+31	; 0x1f
    2a84:	78 a1       	ldd	r23, Y+32	; 0x20
    2a86:	89 a1       	ldd	r24, Y+33	; 0x21
    2a88:	9a a1       	ldd	r25, Y+34	; 0x22
    2a8a:	20 e0       	ldi	r18, 0x00	; 0
    2a8c:	30 e0       	ldi	r19, 0x00	; 0
    2a8e:	4f e7       	ldi	r20, 0x7F	; 127
    2a90:	53 e4       	ldi	r21, 0x43	; 67
    2a92:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2a96:	18 16       	cp	r1, r24
    2a98:	0c f0       	brlt	.+2      	; 0x2a9c <LCD_VoidSendData+0x49c>
    2a9a:	7b c0       	rjmp	.+246    	; 0x2b92 <LCD_VoidSendData+0x592>
	{
		_delay_ms(__us / 1000.0);
    2a9c:	6b a1       	ldd	r22, Y+35	; 0x23
    2a9e:	7c a1       	ldd	r23, Y+36	; 0x24
    2aa0:	8d a1       	ldd	r24, Y+37	; 0x25
    2aa2:	9e a1       	ldd	r25, Y+38	; 0x26
    2aa4:	20 e0       	ldi	r18, 0x00	; 0
    2aa6:	30 e0       	ldi	r19, 0x00	; 0
    2aa8:	4a e7       	ldi	r20, 0x7A	; 122
    2aaa:	54 e4       	ldi	r21, 0x44	; 68
    2aac:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2ab0:	dc 01       	movw	r26, r24
    2ab2:	cb 01       	movw	r24, r22
    2ab4:	8a 8f       	std	Y+26, r24	; 0x1a
    2ab6:	9b 8f       	std	Y+27, r25	; 0x1b
    2ab8:	ac 8f       	std	Y+28, r26	; 0x1c
    2aba:	bd 8f       	std	Y+29, r27	; 0x1d
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2abc:	6a 8d       	ldd	r22, Y+26	; 0x1a
    2abe:	7b 8d       	ldd	r23, Y+27	; 0x1b
    2ac0:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2ac2:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2ac4:	20 e0       	ldi	r18, 0x00	; 0
    2ac6:	30 e0       	ldi	r19, 0x00	; 0
    2ac8:	4a ef       	ldi	r20, 0xFA	; 250
    2aca:	54 e4       	ldi	r21, 0x44	; 68
    2acc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ad0:	dc 01       	movw	r26, r24
    2ad2:	cb 01       	movw	r24, r22
    2ad4:	8e 8b       	std	Y+22, r24	; 0x16
    2ad6:	9f 8b       	std	Y+23, r25	; 0x17
    2ad8:	a8 8f       	std	Y+24, r26	; 0x18
    2ada:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
    2adc:	6e 89       	ldd	r22, Y+22	; 0x16
    2ade:	7f 89       	ldd	r23, Y+23	; 0x17
    2ae0:	88 8d       	ldd	r24, Y+24	; 0x18
    2ae2:	99 8d       	ldd	r25, Y+25	; 0x19
    2ae4:	20 e0       	ldi	r18, 0x00	; 0
    2ae6:	30 e0       	ldi	r19, 0x00	; 0
    2ae8:	40 e8       	ldi	r20, 0x80	; 128
    2aea:	5f e3       	ldi	r21, 0x3F	; 63
    2aec:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2af0:	88 23       	and	r24, r24
    2af2:	2c f4       	brge	.+10     	; 0x2afe <LCD_VoidSendData+0x4fe>
		__ticks = 1;
    2af4:	81 e0       	ldi	r24, 0x01	; 1
    2af6:	90 e0       	ldi	r25, 0x00	; 0
    2af8:	9d 8b       	std	Y+21, r25	; 0x15
    2afa:	8c 8b       	std	Y+20, r24	; 0x14
    2afc:	3f c0       	rjmp	.+126    	; 0x2b7c <LCD_VoidSendData+0x57c>
	else if (__tmp > 65535)
    2afe:	6e 89       	ldd	r22, Y+22	; 0x16
    2b00:	7f 89       	ldd	r23, Y+23	; 0x17
    2b02:	88 8d       	ldd	r24, Y+24	; 0x18
    2b04:	99 8d       	ldd	r25, Y+25	; 0x19
    2b06:	20 e0       	ldi	r18, 0x00	; 0
    2b08:	3f ef       	ldi	r19, 0xFF	; 255
    2b0a:	4f e7       	ldi	r20, 0x7F	; 127
    2b0c:	57 e4       	ldi	r21, 0x47	; 71
    2b0e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2b12:	18 16       	cp	r1, r24
    2b14:	4c f5       	brge	.+82     	; 0x2b68 <LCD_VoidSendData+0x568>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b16:	6a 8d       	ldd	r22, Y+26	; 0x1a
    2b18:	7b 8d       	ldd	r23, Y+27	; 0x1b
    2b1a:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2b1c:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2b1e:	20 e0       	ldi	r18, 0x00	; 0
    2b20:	30 e0       	ldi	r19, 0x00	; 0
    2b22:	40 e2       	ldi	r20, 0x20	; 32
    2b24:	51 e4       	ldi	r21, 0x41	; 65
    2b26:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b2a:	dc 01       	movw	r26, r24
    2b2c:	cb 01       	movw	r24, r22
    2b2e:	bc 01       	movw	r22, r24
    2b30:	cd 01       	movw	r24, r26
    2b32:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b36:	dc 01       	movw	r26, r24
    2b38:	cb 01       	movw	r24, r22
    2b3a:	9d 8b       	std	Y+21, r25	; 0x15
    2b3c:	8c 8b       	std	Y+20, r24	; 0x14
    2b3e:	0f c0       	rjmp	.+30     	; 0x2b5e <LCD_VoidSendData+0x55e>
    2b40:	88 ec       	ldi	r24, 0xC8	; 200
    2b42:	90 e0       	ldi	r25, 0x00	; 0
    2b44:	9b 8b       	std	Y+19, r25	; 0x13
    2b46:	8a 8b       	std	Y+18, r24	; 0x12
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2b48:	8a 89       	ldd	r24, Y+18	; 0x12
    2b4a:	9b 89       	ldd	r25, Y+19	; 0x13
    2b4c:	01 97       	sbiw	r24, 0x01	; 1
    2b4e:	f1 f7       	brne	.-4      	; 0x2b4c <LCD_VoidSendData+0x54c>
    2b50:	9b 8b       	std	Y+19, r25	; 0x13
    2b52:	8a 8b       	std	Y+18, r24	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b54:	8c 89       	ldd	r24, Y+20	; 0x14
    2b56:	9d 89       	ldd	r25, Y+21	; 0x15
    2b58:	01 97       	sbiw	r24, 0x01	; 1
    2b5a:	9d 8b       	std	Y+21, r25	; 0x15
    2b5c:	8c 8b       	std	Y+20, r24	; 0x14
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b5e:	8c 89       	ldd	r24, Y+20	; 0x14
    2b60:	9d 89       	ldd	r25, Y+21	; 0x15
    2b62:	00 97       	sbiw	r24, 0x00	; 0
    2b64:	69 f7       	brne	.-38     	; 0x2b40 <LCD_VoidSendData+0x540>
    2b66:	24 c0       	rjmp	.+72     	; 0x2bb0 <LCD_VoidSendData+0x5b0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b68:	6e 89       	ldd	r22, Y+22	; 0x16
    2b6a:	7f 89       	ldd	r23, Y+23	; 0x17
    2b6c:	88 8d       	ldd	r24, Y+24	; 0x18
    2b6e:	99 8d       	ldd	r25, Y+25	; 0x19
    2b70:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b74:	dc 01       	movw	r26, r24
    2b76:	cb 01       	movw	r24, r22
    2b78:	9d 8b       	std	Y+21, r25	; 0x15
    2b7a:	8c 8b       	std	Y+20, r24	; 0x14
    2b7c:	8c 89       	ldd	r24, Y+20	; 0x14
    2b7e:	9d 89       	ldd	r25, Y+21	; 0x15
    2b80:	99 8b       	std	Y+17, r25	; 0x11
    2b82:	88 8b       	std	Y+16, r24	; 0x10
    2b84:	88 89       	ldd	r24, Y+16	; 0x10
    2b86:	99 89       	ldd	r25, Y+17	; 0x11
    2b88:	01 97       	sbiw	r24, 0x01	; 1
    2b8a:	f1 f7       	brne	.-4      	; 0x2b88 <LCD_VoidSendData+0x588>
    2b8c:	99 8b       	std	Y+17, r25	; 0x11
    2b8e:	88 8b       	std	Y+16, r24	; 0x10
    2b90:	0f c0       	rjmp	.+30     	; 0x2bb0 <LCD_VoidSendData+0x5b0>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2b92:	6f 8d       	ldd	r22, Y+31	; 0x1f
    2b94:	78 a1       	ldd	r23, Y+32	; 0x20
    2b96:	89 a1       	ldd	r24, Y+33	; 0x21
    2b98:	9a a1       	ldd	r25, Y+34	; 0x22
    2b9a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b9e:	dc 01       	movw	r26, r24
    2ba0:	cb 01       	movw	r24, r22
    2ba2:	8e 8f       	std	Y+30, r24	; 0x1e
    2ba4:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2ba6:	8f 87       	std	Y+15, r24	; 0x0f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2ba8:	8f 85       	ldd	r24, Y+15	; 0x0f
    2baa:	8a 95       	dec	r24
    2bac:	f1 f7       	brne	.-4      	; 0x2baa <LCD_VoidSendData+0x5aa>
    2bae:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_us(1);
	DIO_U8SetPinValue(LCD_CONTROL_PORT, CONTROL_E, DIO_LOW);
    2bb0:	83 e0       	ldi	r24, 0x03	; 3
    2bb2:	64 e0       	ldi	r22, 0x04	; 4
    2bb4:	40 e0       	ldi	r20, 0x00	; 0
    2bb6:	0e 94 15 08 	call	0x102a	; 0x102a <DIO_U8SetPinValue>
    2bba:	80 e0       	ldi	r24, 0x00	; 0
    2bbc:	90 e0       	ldi	r25, 0x00	; 0
    2bbe:	a0 e0       	ldi	r26, 0x00	; 0
    2bc0:	b0 e4       	ldi	r27, 0x40	; 64
    2bc2:	8b 87       	std	Y+11, r24	; 0x0b
    2bc4:	9c 87       	std	Y+12, r25	; 0x0c
    2bc6:	ad 87       	std	Y+13, r26	; 0x0d
    2bc8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2bca:	6b 85       	ldd	r22, Y+11	; 0x0b
    2bcc:	7c 85       	ldd	r23, Y+12	; 0x0c
    2bce:	8d 85       	ldd	r24, Y+13	; 0x0d
    2bd0:	9e 85       	ldd	r25, Y+14	; 0x0e
    2bd2:	20 e0       	ldi	r18, 0x00	; 0
    2bd4:	30 e0       	ldi	r19, 0x00	; 0
    2bd6:	4a ef       	ldi	r20, 0xFA	; 250
    2bd8:	54 e4       	ldi	r21, 0x44	; 68
    2bda:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bde:	dc 01       	movw	r26, r24
    2be0:	cb 01       	movw	r24, r22
    2be2:	8f 83       	std	Y+7, r24	; 0x07
    2be4:	98 87       	std	Y+8, r25	; 0x08
    2be6:	a9 87       	std	Y+9, r26	; 0x09
    2be8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2bea:	6f 81       	ldd	r22, Y+7	; 0x07
    2bec:	78 85       	ldd	r23, Y+8	; 0x08
    2bee:	89 85       	ldd	r24, Y+9	; 0x09
    2bf0:	9a 85       	ldd	r25, Y+10	; 0x0a
    2bf2:	20 e0       	ldi	r18, 0x00	; 0
    2bf4:	30 e0       	ldi	r19, 0x00	; 0
    2bf6:	40 e8       	ldi	r20, 0x80	; 128
    2bf8:	5f e3       	ldi	r21, 0x3F	; 63
    2bfa:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2bfe:	88 23       	and	r24, r24
    2c00:	2c f4       	brge	.+10     	; 0x2c0c <LCD_VoidSendData+0x60c>
		__ticks = 1;
    2c02:	81 e0       	ldi	r24, 0x01	; 1
    2c04:	90 e0       	ldi	r25, 0x00	; 0
    2c06:	9e 83       	std	Y+6, r25	; 0x06
    2c08:	8d 83       	std	Y+5, r24	; 0x05
    2c0a:	3f c0       	rjmp	.+126    	; 0x2c8a <LCD_VoidSendData+0x68a>
	else if (__tmp > 65535)
    2c0c:	6f 81       	ldd	r22, Y+7	; 0x07
    2c0e:	78 85       	ldd	r23, Y+8	; 0x08
    2c10:	89 85       	ldd	r24, Y+9	; 0x09
    2c12:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c14:	20 e0       	ldi	r18, 0x00	; 0
    2c16:	3f ef       	ldi	r19, 0xFF	; 255
    2c18:	4f e7       	ldi	r20, 0x7F	; 127
    2c1a:	57 e4       	ldi	r21, 0x47	; 71
    2c1c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2c20:	18 16       	cp	r1, r24
    2c22:	4c f5       	brge	.+82     	; 0x2c76 <LCD_VoidSendData+0x676>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c24:	6b 85       	ldd	r22, Y+11	; 0x0b
    2c26:	7c 85       	ldd	r23, Y+12	; 0x0c
    2c28:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c2a:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c2c:	20 e0       	ldi	r18, 0x00	; 0
    2c2e:	30 e0       	ldi	r19, 0x00	; 0
    2c30:	40 e2       	ldi	r20, 0x20	; 32
    2c32:	51 e4       	ldi	r21, 0x41	; 65
    2c34:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c38:	dc 01       	movw	r26, r24
    2c3a:	cb 01       	movw	r24, r22
    2c3c:	bc 01       	movw	r22, r24
    2c3e:	cd 01       	movw	r24, r26
    2c40:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c44:	dc 01       	movw	r26, r24
    2c46:	cb 01       	movw	r24, r22
    2c48:	9e 83       	std	Y+6, r25	; 0x06
    2c4a:	8d 83       	std	Y+5, r24	; 0x05
    2c4c:	0f c0       	rjmp	.+30     	; 0x2c6c <LCD_VoidSendData+0x66c>
    2c4e:	88 ec       	ldi	r24, 0xC8	; 200
    2c50:	90 e0       	ldi	r25, 0x00	; 0
    2c52:	9c 83       	std	Y+4, r25	; 0x04
    2c54:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2c56:	8b 81       	ldd	r24, Y+3	; 0x03
    2c58:	9c 81       	ldd	r25, Y+4	; 0x04
    2c5a:	01 97       	sbiw	r24, 0x01	; 1
    2c5c:	f1 f7       	brne	.-4      	; 0x2c5a <LCD_VoidSendData+0x65a>
    2c5e:	9c 83       	std	Y+4, r25	; 0x04
    2c60:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c62:	8d 81       	ldd	r24, Y+5	; 0x05
    2c64:	9e 81       	ldd	r25, Y+6	; 0x06
    2c66:	01 97       	sbiw	r24, 0x01	; 1
    2c68:	9e 83       	std	Y+6, r25	; 0x06
    2c6a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c6c:	8d 81       	ldd	r24, Y+5	; 0x05
    2c6e:	9e 81       	ldd	r25, Y+6	; 0x06
    2c70:	00 97       	sbiw	r24, 0x00	; 0
    2c72:	69 f7       	brne	.-38     	; 0x2c4e <LCD_VoidSendData+0x64e>
    2c74:	14 c0       	rjmp	.+40     	; 0x2c9e <LCD_VoidSendData+0x69e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c76:	6f 81       	ldd	r22, Y+7	; 0x07
    2c78:	78 85       	ldd	r23, Y+8	; 0x08
    2c7a:	89 85       	ldd	r24, Y+9	; 0x09
    2c7c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c7e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c82:	dc 01       	movw	r26, r24
    2c84:	cb 01       	movw	r24, r22
    2c86:	9e 83       	std	Y+6, r25	; 0x06
    2c88:	8d 83       	std	Y+5, r24	; 0x05
    2c8a:	8d 81       	ldd	r24, Y+5	; 0x05
    2c8c:	9e 81       	ldd	r25, Y+6	; 0x06
    2c8e:	9a 83       	std	Y+2, r25	; 0x02
    2c90:	89 83       	std	Y+1, r24	; 0x01
    2c92:	89 81       	ldd	r24, Y+1	; 0x01
    2c94:	9a 81       	ldd	r25, Y+2	; 0x02
    2c96:	01 97       	sbiw	r24, 0x01	; 1
    2c98:	f1 f7       	brne	.-4      	; 0x2c96 <LCD_VoidSendData+0x696>
    2c9a:	9a 83       	std	Y+2, r25	; 0x02
    2c9c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
#endif
}
    2c9e:	c9 5a       	subi	r28, 0xA9	; 169
    2ca0:	df 4f       	sbci	r29, 0xFF	; 255
    2ca2:	0f b6       	in	r0, 0x3f	; 63
    2ca4:	f8 94       	cli
    2ca6:	de bf       	out	0x3e, r29	; 62
    2ca8:	0f be       	out	0x3f, r0	; 63
    2caa:	cd bf       	out	0x3d, r28	; 61
    2cac:	cf 91       	pop	r28
    2cae:	df 91       	pop	r29
    2cb0:	1f 91       	pop	r17
    2cb2:	0f 91       	pop	r16
    2cb4:	08 95       	ret

00002cb6 <LCD_VoidSendString>:
void LCD_VoidSendString(u8 *Copy_U8String)
{
    2cb6:	df 93       	push	r29
    2cb8:	cf 93       	push	r28
    2cba:	00 d0       	rcall	.+0      	; 0x2cbc <LCD_VoidSendString+0x6>
    2cbc:	cd b7       	in	r28, 0x3d	; 61
    2cbe:	de b7       	in	r29, 0x3e	; 62
    2cc0:	9a 83       	std	Y+2, r25	; 0x02
    2cc2:	89 83       	std	Y+1, r24	; 0x01
    2cc4:	11 c0       	rjmp	.+34     	; 0x2ce8 <LCD_VoidSendString+0x32>
	static u8 i=0;
	while(Copy_U8String[i] != '\0')
	{
		LCD_VoidSendData(Copy_U8String[i]);
    2cc6:	80 91 94 03 	lds	r24, 0x0394
    2cca:	28 2f       	mov	r18, r24
    2ccc:	30 e0       	ldi	r19, 0x00	; 0
    2cce:	89 81       	ldd	r24, Y+1	; 0x01
    2cd0:	9a 81       	ldd	r25, Y+2	; 0x02
    2cd2:	fc 01       	movw	r30, r24
    2cd4:	e2 0f       	add	r30, r18
    2cd6:	f3 1f       	adc	r31, r19
    2cd8:	80 81       	ld	r24, Z
    2cda:	0e 94 00 13 	call	0x2600	; 0x2600 <LCD_VoidSendData>
		i++;
    2cde:	80 91 94 03 	lds	r24, 0x0394
    2ce2:	8f 5f       	subi	r24, 0xFF	; 255
    2ce4:	80 93 94 03 	sts	0x0394, r24
#endif
}
void LCD_VoidSendString(u8 *Copy_U8String)
{
	static u8 i=0;
	while(Copy_U8String[i] != '\0')
    2ce8:	80 91 94 03 	lds	r24, 0x0394
    2cec:	28 2f       	mov	r18, r24
    2cee:	30 e0       	ldi	r19, 0x00	; 0
    2cf0:	89 81       	ldd	r24, Y+1	; 0x01
    2cf2:	9a 81       	ldd	r25, Y+2	; 0x02
    2cf4:	fc 01       	movw	r30, r24
    2cf6:	e2 0f       	add	r30, r18
    2cf8:	f3 1f       	adc	r31, r19
    2cfa:	80 81       	ld	r24, Z
    2cfc:	88 23       	and	r24, r24
    2cfe:	19 f7       	brne	.-58     	; 0x2cc6 <LCD_VoidSendString+0x10>
		LCD_VoidSendData(Copy_U8String[i]);
		i++;
	}


}
    2d00:	0f 90       	pop	r0
    2d02:	0f 90       	pop	r0
    2d04:	cf 91       	pop	r28
    2d06:	df 91       	pop	r29
    2d08:	08 95       	ret

00002d0a <LCD_VoidGoToRowCol>:
void LCD_VoidGoToRowCol(u8 Copy_U8Row ,u8 Copy_U8Col)
{
    2d0a:	df 93       	push	r29
    2d0c:	cf 93       	push	r28
    2d0e:	00 d0       	rcall	.+0      	; 0x2d10 <LCD_VoidGoToRowCol+0x6>
    2d10:	00 d0       	rcall	.+0      	; 0x2d12 <LCD_VoidGoToRowCol+0x8>
    2d12:	cd b7       	in	r28, 0x3d	; 61
    2d14:	de b7       	in	r29, 0x3e	; 62
    2d16:	89 83       	std	Y+1, r24	; 0x01
    2d18:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_U8Row)
    2d1a:	89 81       	ldd	r24, Y+1	; 0x01
    2d1c:	28 2f       	mov	r18, r24
    2d1e:	30 e0       	ldi	r19, 0x00	; 0
    2d20:	3c 83       	std	Y+4, r19	; 0x04
    2d22:	2b 83       	std	Y+3, r18	; 0x03
    2d24:	8b 81       	ldd	r24, Y+3	; 0x03
    2d26:	9c 81       	ldd	r25, Y+4	; 0x04
    2d28:	00 97       	sbiw	r24, 0x00	; 0
    2d2a:	31 f0       	breq	.+12     	; 0x2d38 <LCD_VoidGoToRowCol+0x2e>
    2d2c:	2b 81       	ldd	r18, Y+3	; 0x03
    2d2e:	3c 81       	ldd	r19, Y+4	; 0x04
    2d30:	21 30       	cpi	r18, 0x01	; 1
    2d32:	31 05       	cpc	r19, r1
    2d34:	31 f0       	breq	.+12     	; 0x2d42 <LCD_VoidGoToRowCol+0x38>
    2d36:	09 c0       	rjmp	.+18     	; 0x2d4a <LCD_VoidGoToRowCol+0x40>
	{
		case 0:LCD_VoidSendCommand(0x80+Copy_U8Col);break;
    2d38:	8a 81       	ldd	r24, Y+2	; 0x02
    2d3a:	80 58       	subi	r24, 0x80	; 128
    2d3c:	0e 94 86 0e 	call	0x1d0c	; 0x1d0c <LCD_VoidSendCommand>
    2d40:	04 c0       	rjmp	.+8      	; 0x2d4a <LCD_VoidGoToRowCol+0x40>
		case 1:LCD_VoidSendCommand(0xc0+Copy_U8Col);break;
    2d42:	8a 81       	ldd	r24, Y+2	; 0x02
    2d44:	80 54       	subi	r24, 0x40	; 64
    2d46:	0e 94 86 0e 	call	0x1d0c	; 0x1d0c <LCD_VoidSendCommand>
	}
}
    2d4a:	0f 90       	pop	r0
    2d4c:	0f 90       	pop	r0
    2d4e:	0f 90       	pop	r0
    2d50:	0f 90       	pop	r0
    2d52:	cf 91       	pop	r28
    2d54:	df 91       	pop	r29
    2d56:	08 95       	ret

00002d58 <LCD_VoidSendNumber>:


void LCD_VoidSendNumber(s32 Copy_s32Number)
{
    2d58:	0f 93       	push	r16
    2d5a:	1f 93       	push	r17
    2d5c:	df 93       	push	r29
    2d5e:	cf 93       	push	r28
    2d60:	cd b7       	in	r28, 0x3d	; 61
    2d62:	de b7       	in	r29, 0x3e	; 62
    2d64:	60 97       	sbiw	r28, 0x10	; 16
    2d66:	0f b6       	in	r0, 0x3f	; 63
    2d68:	f8 94       	cli
    2d6a:	de bf       	out	0x3e, r29	; 62
    2d6c:	0f be       	out	0x3f, r0	; 63
    2d6e:	cd bf       	out	0x3d, r28	; 61
    2d70:	6d 87       	std	Y+13, r22	; 0x0d
    2d72:	7e 87       	std	Y+14, r23	; 0x0e
    2d74:	8f 87       	std	Y+15, r24	; 0x0f
    2d76:	98 8b       	std	Y+16, r25	; 0x10
    u8 Local_u8Array[11]; // Increased array size to accommodate negative sign
    s8 Local_counter = 0;
    2d78:	19 82       	std	Y+1, r1	; 0x01

    if (Copy_s32Number < 0)
    2d7a:	8d 85       	ldd	r24, Y+13	; 0x0d
    2d7c:	9e 85       	ldd	r25, Y+14	; 0x0e
    2d7e:	af 85       	ldd	r26, Y+15	; 0x0f
    2d80:	b8 89       	ldd	r27, Y+16	; 0x10
    2d82:	bb 23       	and	r27, r27
    2d84:	9c f4       	brge	.+38     	; 0x2dac <LCD_VoidSendNumber+0x54>
    {
    	LCD_VoidSendData('-'); // Display negative sign
    2d86:	8d e2       	ldi	r24, 0x2D	; 45
    2d88:	0e 94 00 13 	call	0x2600	; 0x2600 <LCD_VoidSendData>
    	Copy_s32Number = -Copy_s32Number; // Convert negative number to positive for processing
    2d8c:	8d 85       	ldd	r24, Y+13	; 0x0d
    2d8e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2d90:	af 85       	ldd	r26, Y+15	; 0x0f
    2d92:	b8 89       	ldd	r27, Y+16	; 0x10
    2d94:	b0 95       	com	r27
    2d96:	a0 95       	com	r26
    2d98:	90 95       	com	r25
    2d9a:	81 95       	neg	r24
    2d9c:	9f 4f       	sbci	r25, 0xFF	; 255
    2d9e:	af 4f       	sbci	r26, 0xFF	; 255
    2da0:	bf 4f       	sbci	r27, 0xFF	; 255
    2da2:	8d 87       	std	Y+13, r24	; 0x0d
    2da4:	9e 87       	std	Y+14, r25	; 0x0e
    2da6:	af 87       	std	Y+15, r26	; 0x0f
    2da8:	b8 8b       	std	Y+16, r27	; 0x10
    2daa:	3c c0       	rjmp	.+120    	; 0x2e24 <LCD_VoidSendNumber+0xcc>
    }
    else if (Copy_s32Number == 0)
    2dac:	8d 85       	ldd	r24, Y+13	; 0x0d
    2dae:	9e 85       	ldd	r25, Y+14	; 0x0e
    2db0:	af 85       	ldd	r26, Y+15	; 0x0f
    2db2:	b8 89       	ldd	r27, Y+16	; 0x10
    2db4:	00 97       	sbiw	r24, 0x00	; 0
    2db6:	a1 05       	cpc	r26, r1
    2db8:	b1 05       	cpc	r27, r1
    2dba:	a1 f5       	brne	.+104    	; 0x2e24 <LCD_VoidSendNumber+0xcc>
    {
    	LCD_VoidSendData('0');
    2dbc:	80 e3       	ldi	r24, 0x30	; 48
    2dbe:	0e 94 00 13 	call	0x2600	; 0x2600 <LCD_VoidSendData>
    2dc2:	30 c0       	rjmp	.+96     	; 0x2e24 <LCD_VoidSendNumber+0xcc>
    }

    while (Copy_s32Number > LOW)
    {
        Local_u8Array[Local_counter++] = (Copy_s32Number % 10) + 48;
    2dc4:	89 81       	ldd	r24, Y+1	; 0x01
    2dc6:	08 2f       	mov	r16, r24
    2dc8:	11 27       	eor	r17, r17
    2dca:	07 fd       	sbrc	r16, 7
    2dcc:	10 95       	com	r17
    2dce:	8d 85       	ldd	r24, Y+13	; 0x0d
    2dd0:	9e 85       	ldd	r25, Y+14	; 0x0e
    2dd2:	af 85       	ldd	r26, Y+15	; 0x0f
    2dd4:	b8 89       	ldd	r27, Y+16	; 0x10
    2dd6:	2a e0       	ldi	r18, 0x0A	; 10
    2dd8:	30 e0       	ldi	r19, 0x00	; 0
    2dda:	40 e0       	ldi	r20, 0x00	; 0
    2ddc:	50 e0       	ldi	r21, 0x00	; 0
    2dde:	bc 01       	movw	r22, r24
    2de0:	cd 01       	movw	r24, r26
    2de2:	0e 94 f9 35 	call	0x6bf2	; 0x6bf2 <__divmodsi4>
    2de6:	dc 01       	movw	r26, r24
    2de8:	cb 01       	movw	r24, r22
    2dea:	28 2f       	mov	r18, r24
    2dec:	20 5d       	subi	r18, 0xD0	; 208
    2dee:	ce 01       	movw	r24, r28
    2df0:	02 96       	adiw	r24, 0x02	; 2
    2df2:	fc 01       	movw	r30, r24
    2df4:	e0 0f       	add	r30, r16
    2df6:	f1 1f       	adc	r31, r17
    2df8:	20 83       	st	Z, r18
    2dfa:	89 81       	ldd	r24, Y+1	; 0x01
    2dfc:	8f 5f       	subi	r24, 0xFF	; 255
    2dfe:	89 83       	std	Y+1, r24	; 0x01
        Copy_s32Number /= 10;
    2e00:	8d 85       	ldd	r24, Y+13	; 0x0d
    2e02:	9e 85       	ldd	r25, Y+14	; 0x0e
    2e04:	af 85       	ldd	r26, Y+15	; 0x0f
    2e06:	b8 89       	ldd	r27, Y+16	; 0x10
    2e08:	2a e0       	ldi	r18, 0x0A	; 10
    2e0a:	30 e0       	ldi	r19, 0x00	; 0
    2e0c:	40 e0       	ldi	r20, 0x00	; 0
    2e0e:	50 e0       	ldi	r21, 0x00	; 0
    2e10:	bc 01       	movw	r22, r24
    2e12:	cd 01       	movw	r24, r26
    2e14:	0e 94 f9 35 	call	0x6bf2	; 0x6bf2 <__divmodsi4>
    2e18:	da 01       	movw	r26, r20
    2e1a:	c9 01       	movw	r24, r18
    2e1c:	8d 87       	std	Y+13, r24	; 0x0d
    2e1e:	9e 87       	std	Y+14, r25	; 0x0e
    2e20:	af 87       	std	Y+15, r26	; 0x0f
    2e22:	b8 8b       	std	Y+16, r27	; 0x10
    else if (Copy_s32Number == 0)
    {
    	LCD_VoidSendData('0');
    }

    while (Copy_s32Number > LOW)
    2e24:	8d 85       	ldd	r24, Y+13	; 0x0d
    2e26:	9e 85       	ldd	r25, Y+14	; 0x0e
    2e28:	af 85       	ldd	r26, Y+15	; 0x0f
    2e2a:	b8 89       	ldd	r27, Y+16	; 0x10
    2e2c:	18 16       	cp	r1, r24
    2e2e:	19 06       	cpc	r1, r25
    2e30:	1a 06       	cpc	r1, r26
    2e32:	1b 06       	cpc	r1, r27
    2e34:	3c f2       	brlt	.-114    	; 0x2dc4 <LCD_VoidSendNumber+0x6c>
    {
        Local_u8Array[Local_counter++] = (Copy_s32Number % 10) + 48;
        Copy_s32Number /= 10;
    }

    Local_counter--;
    2e36:	89 81       	ldd	r24, Y+1	; 0x01
    2e38:	81 50       	subi	r24, 0x01	; 1
    2e3a:	89 83       	std	Y+1, r24	; 0x01
    2e3c:	10 c0       	rjmp	.+32     	; 0x2e5e <LCD_VoidSendNumber+0x106>

    // Loop for sending the reverse of the array
    while (Local_counter >= 0)
    {
    	LCD_VoidSendData(Local_u8Array[Local_counter]);
    2e3e:	89 81       	ldd	r24, Y+1	; 0x01
    2e40:	28 2f       	mov	r18, r24
    2e42:	33 27       	eor	r19, r19
    2e44:	27 fd       	sbrc	r18, 7
    2e46:	30 95       	com	r19
    2e48:	ce 01       	movw	r24, r28
    2e4a:	02 96       	adiw	r24, 0x02	; 2
    2e4c:	fc 01       	movw	r30, r24
    2e4e:	e2 0f       	add	r30, r18
    2e50:	f3 1f       	adc	r31, r19
    2e52:	80 81       	ld	r24, Z
    2e54:	0e 94 00 13 	call	0x2600	; 0x2600 <LCD_VoidSendData>
        Local_counter--;
    2e58:	89 81       	ldd	r24, Y+1	; 0x01
    2e5a:	81 50       	subi	r24, 0x01	; 1
    2e5c:	89 83       	std	Y+1, r24	; 0x01
    }

    Local_counter--;

    // Loop for sending the reverse of the array
    while (Local_counter >= 0)
    2e5e:	89 81       	ldd	r24, Y+1	; 0x01
    2e60:	88 23       	and	r24, r24
    2e62:	6c f7       	brge	.-38     	; 0x2e3e <LCD_VoidSendNumber+0xe6>
    {
    	LCD_VoidSendData(Local_u8Array[Local_counter]);
        Local_counter--;
    }
}
    2e64:	60 96       	adiw	r28, 0x10	; 16
    2e66:	0f b6       	in	r0, 0x3f	; 63
    2e68:	f8 94       	cli
    2e6a:	de bf       	out	0x3e, r29	; 62
    2e6c:	0f be       	out	0x3f, r0	; 63
    2e6e:	cd bf       	out	0x3d, r28	; 61
    2e70:	cf 91       	pop	r28
    2e72:	df 91       	pop	r29
    2e74:	1f 91       	pop	r17
    2e76:	0f 91       	pop	r16
    2e78:	08 95       	ret

00002e7a <LCD_u8WriteString>:
u8 LCD_u8WriteString(u8 *Copy_U8String)
{
    2e7a:	df 93       	push	r29
    2e7c:	cf 93       	push	r28
    2e7e:	00 d0       	rcall	.+0      	; 0x2e80 <LCD_u8WriteString+0x6>
    2e80:	0f 92       	push	r0
    2e82:	cd b7       	in	r28, 0x3d	; 61
    2e84:	de b7       	in	r29, 0x3e	; 62
    2e86:	9b 83       	std	Y+3, r25	; 0x03
    2e88:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_U8ErrorState = ERROR_STATE_OK;
    2e8a:	81 e0       	ldi	r24, 0x01	; 1
    2e8c:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_U8String != NULL)
    2e8e:	8a 81       	ldd	r24, Y+2	; 0x02
    2e90:	9b 81       	ldd	r25, Y+3	; 0x03
    2e92:	00 97       	sbiw	r24, 0x00	; 0
    2e94:	91 f0       	breq	.+36     	; 0x2eba <LCD_u8WriteString+0x40>
    2e96:	0b c0       	rjmp	.+22     	; 0x2eae <LCD_u8WriteString+0x34>
	{
		while(*Copy_U8String > NULL_STR)
		{
			LCD_VoidSendData(*Copy_U8String++);
    2e98:	ea 81       	ldd	r30, Y+2	; 0x02
    2e9a:	fb 81       	ldd	r31, Y+3	; 0x03
    2e9c:	20 81       	ld	r18, Z
    2e9e:	8a 81       	ldd	r24, Y+2	; 0x02
    2ea0:	9b 81       	ldd	r25, Y+3	; 0x03
    2ea2:	01 96       	adiw	r24, 0x01	; 1
    2ea4:	9b 83       	std	Y+3, r25	; 0x03
    2ea6:	8a 83       	std	Y+2, r24	; 0x02
    2ea8:	82 2f       	mov	r24, r18
    2eaa:	0e 94 00 13 	call	0x2600	; 0x2600 <LCD_VoidSendData>
u8 LCD_u8WriteString(u8 *Copy_U8String)
{
	u8 Local_U8ErrorState = ERROR_STATE_OK;
	if(Copy_U8String != NULL)
	{
		while(*Copy_U8String > NULL_STR)
    2eae:	ea 81       	ldd	r30, Y+2	; 0x02
    2eb0:	fb 81       	ldd	r31, Y+3	; 0x03
    2eb2:	80 81       	ld	r24, Z
    2eb4:	88 23       	and	r24, r24
    2eb6:	81 f7       	brne	.-32     	; 0x2e98 <LCD_u8WriteString+0x1e>
    2eb8:	01 c0       	rjmp	.+2      	; 0x2ebc <LCD_u8WriteString+0x42>
			LCD_VoidSendData(*Copy_U8String++);
		}
	}
	else
	{
		Local_U8ErrorState = ERROR_STATE_NOK;
    2eba:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_U8ErrorState;
    2ebc:	89 81       	ldd	r24, Y+1	; 0x01
}
    2ebe:	0f 90       	pop	r0
    2ec0:	0f 90       	pop	r0
    2ec2:	0f 90       	pop	r0
    2ec4:	cf 91       	pop	r28
    2ec6:	df 91       	pop	r29
    2ec8:	08 95       	ret

00002eca <SERVO_U8SetServoAngle>:
#include "DIO_interface.h"
#include "Timer.h"
#include "SERVO_Interface.h"

u8 SERVO_U8SetServoAngle(s8 Copy_S8Angle)
{
    2eca:	df 93       	push	r29
    2ecc:	cf 93       	push	r28
    2ece:	cd b7       	in	r28, 0x3d	; 61
    2ed0:	de b7       	in	r29, 0x3e	; 62
    2ed2:	a0 97       	sbiw	r28, 0x20	; 32
    2ed4:	0f b6       	in	r0, 0x3f	; 63
    2ed6:	f8 94       	cli
    2ed8:	de bf       	out	0x3e, r29	; 62
    2eda:	0f be       	out	0x3f, r0	; 63
    2edc:	cd bf       	out	0x3d, r28	; 61
    2ede:	88 a3       	std	Y+32, r24	; 0x20
	u8 Local_U8ErrorState = ERROR_STATE_OK;
    2ee0:	81 e0       	ldi	r24, 0x01	; 1
    2ee2:	8f 8f       	std	Y+31, r24	; 0x1f

	if((Copy_S8Angle<= 90  )&&(Copy_S8Angle >= -90))
    2ee4:	88 a1       	ldd	r24, Y+32	; 0x20
    2ee6:	8b 35       	cpi	r24, 0x5B	; 91
    2ee8:	0c f0       	brlt	.+2      	; 0x2eec <SERVO_U8SetServoAngle+0x22>
    2eea:	52 c1       	rjmp	.+676    	; 0x3190 <SERVO_U8SetServoAngle+0x2c6>
    2eec:	88 a1       	ldd	r24, Y+32	; 0x20
    2eee:	86 3a       	cpi	r24, 0xA6	; 166
    2ef0:	0c f4       	brge	.+2      	; 0x2ef4 <SERVO_U8SetServoAngle+0x2a>
    2ef2:	4e c1       	rjmp	.+668    	; 0x3190 <SERVO_U8SetServoAngle+0x2c6>
	{
		if(Copy_S8Angle >=0)
    2ef4:	88 a1       	ldd	r24, Y+32	; 0x20
    2ef6:	88 23       	and	r24, r24
    2ef8:	0c f4       	brge	.+2      	; 0x2efc <SERVO_U8SetServoAngle+0x32>
    2efa:	a5 c0       	rjmp	.+330    	; 0x3046 <SERVO_U8SetServoAngle+0x17c>
		{
			for(s8 local_S16Counter=0; local_S16Counter<=Copy_S8Angle;local_S16Counter++)
    2efc:	1e 8e       	std	Y+30, r1	; 0x1e
    2efe:	9d c0       	rjmp	.+314    	; 0x303a <SERVO_U8SetServoAngle+0x170>
				{
					TIMER_VidCTCTimer1Preload(5.550*local_S16Counter+1500);
    2f00:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2f02:	99 27       	eor	r25, r25
    2f04:	87 fd       	sbrc	r24, 7
    2f06:	90 95       	com	r25
    2f08:	a9 2f       	mov	r26, r25
    2f0a:	b9 2f       	mov	r27, r25
    2f0c:	bc 01       	movw	r22, r24
    2f0e:	cd 01       	movw	r24, r26
    2f10:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    2f14:	dc 01       	movw	r26, r24
    2f16:	cb 01       	movw	r24, r22
    2f18:	bc 01       	movw	r22, r24
    2f1a:	cd 01       	movw	r24, r26
    2f1c:	2a e9       	ldi	r18, 0x9A	; 154
    2f1e:	39 e9       	ldi	r19, 0x99	; 153
    2f20:	41 eb       	ldi	r20, 0xB1	; 177
    2f22:	50 e4       	ldi	r21, 0x40	; 64
    2f24:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f28:	dc 01       	movw	r26, r24
    2f2a:	cb 01       	movw	r24, r22
    2f2c:	bc 01       	movw	r22, r24
    2f2e:	cd 01       	movw	r24, r26
    2f30:	20 e0       	ldi	r18, 0x00	; 0
    2f32:	30 e8       	ldi	r19, 0x80	; 128
    2f34:	4b eb       	ldi	r20, 0xBB	; 187
    2f36:	54 e4       	ldi	r21, 0x44	; 68
    2f38:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    2f3c:	dc 01       	movw	r26, r24
    2f3e:	cb 01       	movw	r24, r22
    2f40:	bc 01       	movw	r22, r24
    2f42:	cd 01       	movw	r24, r26
    2f44:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
    2f48:	dc 01       	movw	r26, r24
    2f4a:	cb 01       	movw	r24, r22
    2f4c:	0e 94 9d 32 	call	0x653a	; 0x653a <TIMER_VidCTCTimer1Preload>
    2f50:	80 e0       	ldi	r24, 0x00	; 0
    2f52:	90 e0       	ldi	r25, 0x00	; 0
    2f54:	a8 e4       	ldi	r26, 0x48	; 72
    2f56:	b2 e4       	ldi	r27, 0x42	; 66
    2f58:	89 8f       	std	Y+25, r24	; 0x19
    2f5a:	9a 8f       	std	Y+26, r25	; 0x1a
    2f5c:	ab 8f       	std	Y+27, r26	; 0x1b
    2f5e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f60:	69 8d       	ldd	r22, Y+25	; 0x19
    2f62:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2f64:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2f66:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2f68:	20 e0       	ldi	r18, 0x00	; 0
    2f6a:	30 e0       	ldi	r19, 0x00	; 0
    2f6c:	4a ef       	ldi	r20, 0xFA	; 250
    2f6e:	54 e4       	ldi	r21, 0x44	; 68
    2f70:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f74:	dc 01       	movw	r26, r24
    2f76:	cb 01       	movw	r24, r22
    2f78:	8d 8b       	std	Y+21, r24	; 0x15
    2f7a:	9e 8b       	std	Y+22, r25	; 0x16
    2f7c:	af 8b       	std	Y+23, r26	; 0x17
    2f7e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2f80:	6d 89       	ldd	r22, Y+21	; 0x15
    2f82:	7e 89       	ldd	r23, Y+22	; 0x16
    2f84:	8f 89       	ldd	r24, Y+23	; 0x17
    2f86:	98 8d       	ldd	r25, Y+24	; 0x18
    2f88:	20 e0       	ldi	r18, 0x00	; 0
    2f8a:	30 e0       	ldi	r19, 0x00	; 0
    2f8c:	40 e8       	ldi	r20, 0x80	; 128
    2f8e:	5f e3       	ldi	r21, 0x3F	; 63
    2f90:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2f94:	88 23       	and	r24, r24
    2f96:	2c f4       	brge	.+10     	; 0x2fa2 <SERVO_U8SetServoAngle+0xd8>
		__ticks = 1;
    2f98:	81 e0       	ldi	r24, 0x01	; 1
    2f9a:	90 e0       	ldi	r25, 0x00	; 0
    2f9c:	9c 8b       	std	Y+20, r25	; 0x14
    2f9e:	8b 8b       	std	Y+19, r24	; 0x13
    2fa0:	3f c0       	rjmp	.+126    	; 0x3020 <SERVO_U8SetServoAngle+0x156>
	else if (__tmp > 65535)
    2fa2:	6d 89       	ldd	r22, Y+21	; 0x15
    2fa4:	7e 89       	ldd	r23, Y+22	; 0x16
    2fa6:	8f 89       	ldd	r24, Y+23	; 0x17
    2fa8:	98 8d       	ldd	r25, Y+24	; 0x18
    2faa:	20 e0       	ldi	r18, 0x00	; 0
    2fac:	3f ef       	ldi	r19, 0xFF	; 255
    2fae:	4f e7       	ldi	r20, 0x7F	; 127
    2fb0:	57 e4       	ldi	r21, 0x47	; 71
    2fb2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2fb6:	18 16       	cp	r1, r24
    2fb8:	4c f5       	brge	.+82     	; 0x300c <SERVO_U8SetServoAngle+0x142>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2fba:	69 8d       	ldd	r22, Y+25	; 0x19
    2fbc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2fbe:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2fc0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2fc2:	20 e0       	ldi	r18, 0x00	; 0
    2fc4:	30 e0       	ldi	r19, 0x00	; 0
    2fc6:	40 e2       	ldi	r20, 0x20	; 32
    2fc8:	51 e4       	ldi	r21, 0x41	; 65
    2fca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2fce:	dc 01       	movw	r26, r24
    2fd0:	cb 01       	movw	r24, r22
    2fd2:	bc 01       	movw	r22, r24
    2fd4:	cd 01       	movw	r24, r26
    2fd6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fda:	dc 01       	movw	r26, r24
    2fdc:	cb 01       	movw	r24, r22
    2fde:	9c 8b       	std	Y+20, r25	; 0x14
    2fe0:	8b 8b       	std	Y+19, r24	; 0x13
    2fe2:	0f c0       	rjmp	.+30     	; 0x3002 <SERVO_U8SetServoAngle+0x138>
    2fe4:	88 ec       	ldi	r24, 0xC8	; 200
    2fe6:	90 e0       	ldi	r25, 0x00	; 0
    2fe8:	9a 8b       	std	Y+18, r25	; 0x12
    2fea:	89 8b       	std	Y+17, r24	; 0x11
    2fec:	89 89       	ldd	r24, Y+17	; 0x11
    2fee:	9a 89       	ldd	r25, Y+18	; 0x12
    2ff0:	01 97       	sbiw	r24, 0x01	; 1
    2ff2:	f1 f7       	brne	.-4      	; 0x2ff0 <SERVO_U8SetServoAngle+0x126>
    2ff4:	9a 8b       	std	Y+18, r25	; 0x12
    2ff6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ff8:	8b 89       	ldd	r24, Y+19	; 0x13
    2ffa:	9c 89       	ldd	r25, Y+20	; 0x14
    2ffc:	01 97       	sbiw	r24, 0x01	; 1
    2ffe:	9c 8b       	std	Y+20, r25	; 0x14
    3000:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3002:	8b 89       	ldd	r24, Y+19	; 0x13
    3004:	9c 89       	ldd	r25, Y+20	; 0x14
    3006:	00 97       	sbiw	r24, 0x00	; 0
    3008:	69 f7       	brne	.-38     	; 0x2fe4 <SERVO_U8SetServoAngle+0x11a>
    300a:	14 c0       	rjmp	.+40     	; 0x3034 <SERVO_U8SetServoAngle+0x16a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    300c:	6d 89       	ldd	r22, Y+21	; 0x15
    300e:	7e 89       	ldd	r23, Y+22	; 0x16
    3010:	8f 89       	ldd	r24, Y+23	; 0x17
    3012:	98 8d       	ldd	r25, Y+24	; 0x18
    3014:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3018:	dc 01       	movw	r26, r24
    301a:	cb 01       	movw	r24, r22
    301c:	9c 8b       	std	Y+20, r25	; 0x14
    301e:	8b 8b       	std	Y+19, r24	; 0x13
    3020:	8b 89       	ldd	r24, Y+19	; 0x13
    3022:	9c 89       	ldd	r25, Y+20	; 0x14
    3024:	98 8b       	std	Y+16, r25	; 0x10
    3026:	8f 87       	std	Y+15, r24	; 0x0f
    3028:	8f 85       	ldd	r24, Y+15	; 0x0f
    302a:	98 89       	ldd	r25, Y+16	; 0x10
    302c:	01 97       	sbiw	r24, 0x01	; 1
    302e:	f1 f7       	brne	.-4      	; 0x302c <SERVO_U8SetServoAngle+0x162>
    3030:	98 8b       	std	Y+16, r25	; 0x10
    3032:	8f 87       	std	Y+15, r24	; 0x0f

	if((Copy_S8Angle<= 90  )&&(Copy_S8Angle >= -90))
	{
		if(Copy_S8Angle >=0)
		{
			for(s8 local_S16Counter=0; local_S16Counter<=Copy_S8Angle;local_S16Counter++)
    3034:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3036:	8f 5f       	subi	r24, 0xFF	; 255
    3038:	8e 8f       	std	Y+30, r24	; 0x1e
    303a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    303c:	88 a1       	ldd	r24, Y+32	; 0x20
    303e:	89 17       	cp	r24, r25
    3040:	0c f0       	brlt	.+2      	; 0x3044 <SERVO_U8SetServoAngle+0x17a>
    3042:	5e cf       	rjmp	.-324    	; 0x2f00 <SERVO_U8SetServoAngle+0x36>
    3044:	a6 c0       	rjmp	.+332    	; 0x3192 <SERVO_U8SetServoAngle+0x2c8>
					_delay_ms(50);
				}
		}
		else
		{
			for(s8 local_S16Counter=0; local_S16Counter >=Copy_S8Angle;local_S16Counter--) // for negative
    3046:	1d 8e       	std	Y+29, r1	; 0x1d
    3048:	9d c0       	rjmp	.+314    	; 0x3184 <SERVO_U8SetServoAngle+0x2ba>
				{
					TIMER_VidCTCTimer1Preload(5.569*local_S16Counter+1500);
    304a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    304c:	99 27       	eor	r25, r25
    304e:	87 fd       	sbrc	r24, 7
    3050:	90 95       	com	r25
    3052:	a9 2f       	mov	r26, r25
    3054:	b9 2f       	mov	r27, r25
    3056:	bc 01       	movw	r22, r24
    3058:	cd 01       	movw	r24, r26
    305a:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    305e:	dc 01       	movw	r26, r24
    3060:	cb 01       	movw	r24, r22
    3062:	bc 01       	movw	r22, r24
    3064:	cd 01       	movw	r24, r26
    3066:	2f e3       	ldi	r18, 0x3F	; 63
    3068:	35 e3       	ldi	r19, 0x35	; 53
    306a:	42 eb       	ldi	r20, 0xB2	; 178
    306c:	50 e4       	ldi	r21, 0x40	; 64
    306e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3072:	dc 01       	movw	r26, r24
    3074:	cb 01       	movw	r24, r22
    3076:	bc 01       	movw	r22, r24
    3078:	cd 01       	movw	r24, r26
    307a:	20 e0       	ldi	r18, 0x00	; 0
    307c:	30 e8       	ldi	r19, 0x80	; 128
    307e:	4b eb       	ldi	r20, 0xBB	; 187
    3080:	54 e4       	ldi	r21, 0x44	; 68
    3082:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    3086:	dc 01       	movw	r26, r24
    3088:	cb 01       	movw	r24, r22
    308a:	bc 01       	movw	r22, r24
    308c:	cd 01       	movw	r24, r26
    308e:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
    3092:	dc 01       	movw	r26, r24
    3094:	cb 01       	movw	r24, r22
    3096:	0e 94 9d 32 	call	0x653a	; 0x653a <TIMER_VidCTCTimer1Preload>
    309a:	80 e0       	ldi	r24, 0x00	; 0
    309c:	90 e0       	ldi	r25, 0x00	; 0
    309e:	a8 e4       	ldi	r26, 0x48	; 72
    30a0:	b2 e4       	ldi	r27, 0x42	; 66
    30a2:	8b 87       	std	Y+11, r24	; 0x0b
    30a4:	9c 87       	std	Y+12, r25	; 0x0c
    30a6:	ad 87       	std	Y+13, r26	; 0x0d
    30a8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    30aa:	6b 85       	ldd	r22, Y+11	; 0x0b
    30ac:	7c 85       	ldd	r23, Y+12	; 0x0c
    30ae:	8d 85       	ldd	r24, Y+13	; 0x0d
    30b0:	9e 85       	ldd	r25, Y+14	; 0x0e
    30b2:	20 e0       	ldi	r18, 0x00	; 0
    30b4:	30 e0       	ldi	r19, 0x00	; 0
    30b6:	4a ef       	ldi	r20, 0xFA	; 250
    30b8:	54 e4       	ldi	r21, 0x44	; 68
    30ba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30be:	dc 01       	movw	r26, r24
    30c0:	cb 01       	movw	r24, r22
    30c2:	8f 83       	std	Y+7, r24	; 0x07
    30c4:	98 87       	std	Y+8, r25	; 0x08
    30c6:	a9 87       	std	Y+9, r26	; 0x09
    30c8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    30ca:	6f 81       	ldd	r22, Y+7	; 0x07
    30cc:	78 85       	ldd	r23, Y+8	; 0x08
    30ce:	89 85       	ldd	r24, Y+9	; 0x09
    30d0:	9a 85       	ldd	r25, Y+10	; 0x0a
    30d2:	20 e0       	ldi	r18, 0x00	; 0
    30d4:	30 e0       	ldi	r19, 0x00	; 0
    30d6:	40 e8       	ldi	r20, 0x80	; 128
    30d8:	5f e3       	ldi	r21, 0x3F	; 63
    30da:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    30de:	88 23       	and	r24, r24
    30e0:	2c f4       	brge	.+10     	; 0x30ec <SERVO_U8SetServoAngle+0x222>
		__ticks = 1;
    30e2:	81 e0       	ldi	r24, 0x01	; 1
    30e4:	90 e0       	ldi	r25, 0x00	; 0
    30e6:	9e 83       	std	Y+6, r25	; 0x06
    30e8:	8d 83       	std	Y+5, r24	; 0x05
    30ea:	3f c0       	rjmp	.+126    	; 0x316a <SERVO_U8SetServoAngle+0x2a0>
	else if (__tmp > 65535)
    30ec:	6f 81       	ldd	r22, Y+7	; 0x07
    30ee:	78 85       	ldd	r23, Y+8	; 0x08
    30f0:	89 85       	ldd	r24, Y+9	; 0x09
    30f2:	9a 85       	ldd	r25, Y+10	; 0x0a
    30f4:	20 e0       	ldi	r18, 0x00	; 0
    30f6:	3f ef       	ldi	r19, 0xFF	; 255
    30f8:	4f e7       	ldi	r20, 0x7F	; 127
    30fa:	57 e4       	ldi	r21, 0x47	; 71
    30fc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3100:	18 16       	cp	r1, r24
    3102:	4c f5       	brge	.+82     	; 0x3156 <SERVO_U8SetServoAngle+0x28c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3104:	6b 85       	ldd	r22, Y+11	; 0x0b
    3106:	7c 85       	ldd	r23, Y+12	; 0x0c
    3108:	8d 85       	ldd	r24, Y+13	; 0x0d
    310a:	9e 85       	ldd	r25, Y+14	; 0x0e
    310c:	20 e0       	ldi	r18, 0x00	; 0
    310e:	30 e0       	ldi	r19, 0x00	; 0
    3110:	40 e2       	ldi	r20, 0x20	; 32
    3112:	51 e4       	ldi	r21, 0x41	; 65
    3114:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3118:	dc 01       	movw	r26, r24
    311a:	cb 01       	movw	r24, r22
    311c:	bc 01       	movw	r22, r24
    311e:	cd 01       	movw	r24, r26
    3120:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3124:	dc 01       	movw	r26, r24
    3126:	cb 01       	movw	r24, r22
    3128:	9e 83       	std	Y+6, r25	; 0x06
    312a:	8d 83       	std	Y+5, r24	; 0x05
    312c:	0f c0       	rjmp	.+30     	; 0x314c <SERVO_U8SetServoAngle+0x282>
    312e:	88 ec       	ldi	r24, 0xC8	; 200
    3130:	90 e0       	ldi	r25, 0x00	; 0
    3132:	9c 83       	std	Y+4, r25	; 0x04
    3134:	8b 83       	std	Y+3, r24	; 0x03
    3136:	8b 81       	ldd	r24, Y+3	; 0x03
    3138:	9c 81       	ldd	r25, Y+4	; 0x04
    313a:	01 97       	sbiw	r24, 0x01	; 1
    313c:	f1 f7       	brne	.-4      	; 0x313a <SERVO_U8SetServoAngle+0x270>
    313e:	9c 83       	std	Y+4, r25	; 0x04
    3140:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3142:	8d 81       	ldd	r24, Y+5	; 0x05
    3144:	9e 81       	ldd	r25, Y+6	; 0x06
    3146:	01 97       	sbiw	r24, 0x01	; 1
    3148:	9e 83       	std	Y+6, r25	; 0x06
    314a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    314c:	8d 81       	ldd	r24, Y+5	; 0x05
    314e:	9e 81       	ldd	r25, Y+6	; 0x06
    3150:	00 97       	sbiw	r24, 0x00	; 0
    3152:	69 f7       	brne	.-38     	; 0x312e <SERVO_U8SetServoAngle+0x264>
    3154:	14 c0       	rjmp	.+40     	; 0x317e <SERVO_U8SetServoAngle+0x2b4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3156:	6f 81       	ldd	r22, Y+7	; 0x07
    3158:	78 85       	ldd	r23, Y+8	; 0x08
    315a:	89 85       	ldd	r24, Y+9	; 0x09
    315c:	9a 85       	ldd	r25, Y+10	; 0x0a
    315e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3162:	dc 01       	movw	r26, r24
    3164:	cb 01       	movw	r24, r22
    3166:	9e 83       	std	Y+6, r25	; 0x06
    3168:	8d 83       	std	Y+5, r24	; 0x05
    316a:	8d 81       	ldd	r24, Y+5	; 0x05
    316c:	9e 81       	ldd	r25, Y+6	; 0x06
    316e:	9a 83       	std	Y+2, r25	; 0x02
    3170:	89 83       	std	Y+1, r24	; 0x01
    3172:	89 81       	ldd	r24, Y+1	; 0x01
    3174:	9a 81       	ldd	r25, Y+2	; 0x02
    3176:	01 97       	sbiw	r24, 0x01	; 1
    3178:	f1 f7       	brne	.-4      	; 0x3176 <SERVO_U8SetServoAngle+0x2ac>
    317a:	9a 83       	std	Y+2, r25	; 0x02
    317c:	89 83       	std	Y+1, r24	; 0x01
					_delay_ms(50);
				}
		}
		else
		{
			for(s8 local_S16Counter=0; local_S16Counter >=Copy_S8Angle;local_S16Counter--) // for negative
    317e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3180:	81 50       	subi	r24, 0x01	; 1
    3182:	8d 8f       	std	Y+29, r24	; 0x1d
    3184:	9d 8d       	ldd	r25, Y+29	; 0x1d
    3186:	88 a1       	ldd	r24, Y+32	; 0x20
    3188:	98 17       	cp	r25, r24
    318a:	0c f0       	brlt	.+2      	; 0x318e <SERVO_U8SetServoAngle+0x2c4>
    318c:	5e cf       	rjmp	.-324    	; 0x304a <SERVO_U8SetServoAngle+0x180>
    318e:	01 c0       	rjmp	.+2      	; 0x3192 <SERVO_U8SetServoAngle+0x2c8>


	}
	else
	{
		Local_U8ErrorState = ERROR_STATE_NOK;
    3190:	1f 8e       	std	Y+31, r1	; 0x1f
	}
	return Local_U8ErrorState;
    3192:	8f 8d       	ldd	r24, Y+31	; 0x1f
}
    3194:	a0 96       	adiw	r28, 0x20	; 32
    3196:	0f b6       	in	r0, 0x3f	; 63
    3198:	f8 94       	cli
    319a:	de bf       	out	0x3e, r29	; 62
    319c:	0f be       	out	0x3f, r0	; 63
    319e:	cd bf       	out	0x3d, r28	; 61
    31a0:	cf 91       	pop	r28
    31a2:	df 91       	pop	r29
    31a4:	08 95       	ret

000031a6 <SM_VoidServo_APP>:
#include "Smart_Home_Interface.h"
#include "USART_Interface.h"
static s16 mine = 0;

void SM_VoidServo_APP(void)
{
    31a6:	0f 93       	push	r16
    31a8:	1f 93       	push	r17
    31aa:	df 93       	push	r29
    31ac:	cf 93       	push	r28
    31ae:	cd b7       	in	r28, 0x3d	; 61
    31b0:	de b7       	in	r29, 0x3e	; 62
    31b2:	c4 56       	subi	r28, 0x64	; 100
    31b4:	d0 40       	sbci	r29, 0x00	; 0
    31b6:	0f b6       	in	r0, 0x3f	; 63
    31b8:	f8 94       	cli
    31ba:	de bf       	out	0x3e, r29	; 62
    31bc:	0f be       	out	0x3f, r0	; 63
    31be:	cd bf       	out	0x3d, r28	; 61
    u8 Pressed_Key;
	while(1)
	{


  serv:  KPAD_U8GetPressedKey(&Pressed_Key);
    31c0:	ce 01       	movw	r24, r28
    31c2:	8c 59       	subi	r24, 0x9C	; 156
    31c4:	9f 4f       	sbci	r25, 0xFF	; 255
    31c6:	0e 94 54 0d 	call	0x1aa8	; 0x1aa8 <KPAD_U8GetPressedKey>

    if ((Pressed_Key >= '0') && (Pressed_Key <= '9')) {
    31ca:	fe 01       	movw	r30, r28
    31cc:	ec 59       	subi	r30, 0x9C	; 156
    31ce:	ff 4f       	sbci	r31, 0xFF	; 255
    31d0:	80 81       	ld	r24, Z
    31d2:	80 33       	cpi	r24, 0x30	; 48
    31d4:	80 f1       	brcs	.+96     	; 0x3236 <SM_VoidServo_APP+0x90>
    31d6:	fe 01       	movw	r30, r28
    31d8:	ec 59       	subi	r30, 0x9C	; 156
    31da:	ff 4f       	sbci	r31, 0xFF	; 255
    31dc:	80 81       	ld	r24, Z
    31de:	8a 33       	cpi	r24, 0x3A	; 58
    31e0:	50 f5       	brcc	.+84     	; 0x3236 <SM_VoidServo_APP+0x90>
        LCD_VoidSendData(Pressed_Key);
    31e2:	fe 01       	movw	r30, r28
    31e4:	ec 59       	subi	r30, 0x9C	; 156
    31e6:	ff 4f       	sbci	r31, 0xFF	; 255
    31e8:	80 81       	ld	r24, Z
    31ea:	0e 94 00 13 	call	0x2600	; 0x2600 <LCD_VoidSendData>
        u8 angle = Pressed_Key - '0';
    31ee:	fe 01       	movw	r30, r28
    31f0:	ec 59       	subi	r30, 0x9C	; 156
    31f2:	ff 4f       	sbci	r31, 0xFF	; 255
    31f4:	80 81       	ld	r24, Z
    31f6:	fe 01       	movw	r30, r28
    31f8:	ed 59       	subi	r30, 0x9D	; 157
    31fa:	ff 4f       	sbci	r31, 0xFF	; 255
    31fc:	80 53       	subi	r24, 0x30	; 48
    31fe:	80 83       	st	Z, r24
        mine = mine * 10 + angle;
    3200:	80 91 95 03 	lds	r24, 0x0395
    3204:	90 91 96 03 	lds	r25, 0x0396
    3208:	9c 01       	movw	r18, r24
    320a:	22 0f       	add	r18, r18
    320c:	33 1f       	adc	r19, r19
    320e:	c9 01       	movw	r24, r18
    3210:	88 0f       	add	r24, r24
    3212:	99 1f       	adc	r25, r25
    3214:	88 0f       	add	r24, r24
    3216:	99 1f       	adc	r25, r25
    3218:	28 0f       	add	r18, r24
    321a:	39 1f       	adc	r19, r25
    321c:	fe 01       	movw	r30, r28
    321e:	ed 59       	subi	r30, 0x9D	; 157
    3220:	ff 4f       	sbci	r31, 0xFF	; 255
    3222:	80 81       	ld	r24, Z
    3224:	88 2f       	mov	r24, r24
    3226:	90 e0       	ldi	r25, 0x00	; 0
    3228:	82 0f       	add	r24, r18
    322a:	93 1f       	adc	r25, r19
    322c:	90 93 96 03 	sts	0x0396, r25
    3230:	80 93 95 03 	sts	0x0395, r24
    3234:	c5 cf       	rjmp	.-118    	; 0x31c0 <SM_VoidServo_APP+0x1a>
    }
    else if (Pressed_Key == '-')
    3236:	fe 01       	movw	r30, r28
    3238:	ec 59       	subi	r30, 0x9C	; 156
    323a:	ff 4f       	sbci	r31, 0xFF	; 255
    323c:	80 81       	ld	r24, Z
    323e:	8d 32       	cpi	r24, 0x2D	; 45
    3240:	39 f4       	brne	.+14     	; 0x3250 <SM_VoidServo_APP+0xaa>
     {
    	isNegative =-1;
    3242:	8f ef       	ldi	r24, 0xFF	; 255
    3244:	80 93 83 03 	sts	0x0383, r24
    	LCD_VoidSendData('-');
    3248:	8d e2       	ldi	r24, 0x2D	; 45
    324a:	0e 94 00 13 	call	0x2600	; 0x2600 <LCD_VoidSendData>
    324e:	b8 cf       	rjmp	.-144    	; 0x31c0 <SM_VoidServo_APP+0x1a>
     }
    else if (Pressed_Key == '=')
    3250:	fe 01       	movw	r30, r28
    3252:	ec 59       	subi	r30, 0x9C	; 156
    3254:	ff 4f       	sbci	r31, 0xFF	; 255
    3256:	80 81       	ld	r24, Z
    3258:	8d 33       	cpi	r24, 0x3D	; 61
    325a:	09 f0       	breq	.+2      	; 0x325e <SM_VoidServo_APP+0xb8>
    325c:	17 c4       	rjmp	.+2094   	; 0x3a8c <SM_VoidServo_APP+0x8e6>
    {
        if(isNegative == -1)
    325e:	80 91 83 03 	lds	r24, 0x0383
    3262:	8f 3f       	cpi	r24, 0xFF	; 255
    3264:	59 f4       	brne	.+22     	; 0x327c <SM_VoidServo_APP+0xd6>
        {
        	mine = -mine;
    3266:	80 91 95 03 	lds	r24, 0x0395
    326a:	90 91 96 03 	lds	r25, 0x0396
    326e:	90 95       	com	r25
    3270:	81 95       	neg	r24
    3272:	9f 4f       	sbci	r25, 0xFF	; 255
    3274:	90 93 96 03 	sts	0x0396, r25
    3278:	80 93 95 03 	sts	0x0395, r24
        }
        if((mine <=90) &&(mine >= -90))
    327c:	80 91 95 03 	lds	r24, 0x0395
    3280:	90 91 96 03 	lds	r25, 0x0396
    3284:	8b 35       	cpi	r24, 0x5B	; 91
    3286:	91 05       	cpc	r25, r1
    3288:	0c f0       	brlt	.+2      	; 0x328c <SM_VoidServo_APP+0xe6>
    328a:	1d c2       	rjmp	.+1082   	; 0x36c6 <SM_VoidServo_APP+0x520>
    328c:	80 91 95 03 	lds	r24, 0x0395
    3290:	90 91 96 03 	lds	r25, 0x0396
    3294:	2f ef       	ldi	r18, 0xFF	; 255
    3296:	86 3a       	cpi	r24, 0xA6	; 166
    3298:	92 07       	cpc	r25, r18
    329a:	0c f4       	brge	.+2      	; 0x329e <SM_VoidServo_APP+0xf8>
    329c:	14 c2       	rjmp	.+1064   	; 0x36c6 <SM_VoidServo_APP+0x520>
        {
        LCD_VoidSendCommand(1);
    329e:	81 e0       	ldi	r24, 0x01	; 1
    32a0:	0e 94 86 0e 	call	0x1d0c	; 0x1d0c <LCD_VoidSendCommand>
    32a4:	fe 01       	movw	r30, r28
    32a6:	e1 5a       	subi	r30, 0xA1	; 161
    32a8:	ff 4f       	sbci	r31, 0xFF	; 255
    32aa:	80 e0       	ldi	r24, 0x00	; 0
    32ac:	90 e0       	ldi	r25, 0x00	; 0
    32ae:	aa ef       	ldi	r26, 0xFA	; 250
    32b0:	b3 e4       	ldi	r27, 0x43	; 67
    32b2:	80 83       	st	Z, r24
    32b4:	91 83       	std	Z+1, r25	; 0x01
    32b6:	a2 83       	std	Z+2, r26	; 0x02
    32b8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    32ba:	8e 01       	movw	r16, r28
    32bc:	05 5a       	subi	r16, 0xA5	; 165
    32be:	1f 4f       	sbci	r17, 0xFF	; 255
    32c0:	fe 01       	movw	r30, r28
    32c2:	e1 5a       	subi	r30, 0xA1	; 161
    32c4:	ff 4f       	sbci	r31, 0xFF	; 255
    32c6:	60 81       	ld	r22, Z
    32c8:	71 81       	ldd	r23, Z+1	; 0x01
    32ca:	82 81       	ldd	r24, Z+2	; 0x02
    32cc:	93 81       	ldd	r25, Z+3	; 0x03
    32ce:	20 e0       	ldi	r18, 0x00	; 0
    32d0:	30 e0       	ldi	r19, 0x00	; 0
    32d2:	4a ef       	ldi	r20, 0xFA	; 250
    32d4:	54 e4       	ldi	r21, 0x44	; 68
    32d6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    32da:	dc 01       	movw	r26, r24
    32dc:	cb 01       	movw	r24, r22
    32de:	f8 01       	movw	r30, r16
    32e0:	80 83       	st	Z, r24
    32e2:	91 83       	std	Z+1, r25	; 0x01
    32e4:	a2 83       	std	Z+2, r26	; 0x02
    32e6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    32e8:	fe 01       	movw	r30, r28
    32ea:	e5 5a       	subi	r30, 0xA5	; 165
    32ec:	ff 4f       	sbci	r31, 0xFF	; 255
    32ee:	60 81       	ld	r22, Z
    32f0:	71 81       	ldd	r23, Z+1	; 0x01
    32f2:	82 81       	ldd	r24, Z+2	; 0x02
    32f4:	93 81       	ldd	r25, Z+3	; 0x03
    32f6:	20 e0       	ldi	r18, 0x00	; 0
    32f8:	30 e0       	ldi	r19, 0x00	; 0
    32fa:	40 e8       	ldi	r20, 0x80	; 128
    32fc:	5f e3       	ldi	r21, 0x3F	; 63
    32fe:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3302:	88 23       	and	r24, r24
    3304:	44 f4       	brge	.+16     	; 0x3316 <SM_VoidServo_APP+0x170>
		__ticks = 1;
    3306:	fe 01       	movw	r30, r28
    3308:	e7 5a       	subi	r30, 0xA7	; 167
    330a:	ff 4f       	sbci	r31, 0xFF	; 255
    330c:	81 e0       	ldi	r24, 0x01	; 1
    330e:	90 e0       	ldi	r25, 0x00	; 0
    3310:	91 83       	std	Z+1, r25	; 0x01
    3312:	80 83       	st	Z, r24
    3314:	64 c0       	rjmp	.+200    	; 0x33de <SM_VoidServo_APP+0x238>
	else if (__tmp > 65535)
    3316:	fe 01       	movw	r30, r28
    3318:	e5 5a       	subi	r30, 0xA5	; 165
    331a:	ff 4f       	sbci	r31, 0xFF	; 255
    331c:	60 81       	ld	r22, Z
    331e:	71 81       	ldd	r23, Z+1	; 0x01
    3320:	82 81       	ldd	r24, Z+2	; 0x02
    3322:	93 81       	ldd	r25, Z+3	; 0x03
    3324:	20 e0       	ldi	r18, 0x00	; 0
    3326:	3f ef       	ldi	r19, 0xFF	; 255
    3328:	4f e7       	ldi	r20, 0x7F	; 127
    332a:	57 e4       	ldi	r21, 0x47	; 71
    332c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3330:	18 16       	cp	r1, r24
    3332:	0c f0       	brlt	.+2      	; 0x3336 <SM_VoidServo_APP+0x190>
    3334:	43 c0       	rjmp	.+134    	; 0x33bc <SM_VoidServo_APP+0x216>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3336:	fe 01       	movw	r30, r28
    3338:	e1 5a       	subi	r30, 0xA1	; 161
    333a:	ff 4f       	sbci	r31, 0xFF	; 255
    333c:	60 81       	ld	r22, Z
    333e:	71 81       	ldd	r23, Z+1	; 0x01
    3340:	82 81       	ldd	r24, Z+2	; 0x02
    3342:	93 81       	ldd	r25, Z+3	; 0x03
    3344:	20 e0       	ldi	r18, 0x00	; 0
    3346:	30 e0       	ldi	r19, 0x00	; 0
    3348:	40 e2       	ldi	r20, 0x20	; 32
    334a:	51 e4       	ldi	r21, 0x41	; 65
    334c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3350:	dc 01       	movw	r26, r24
    3352:	cb 01       	movw	r24, r22
    3354:	8e 01       	movw	r16, r28
    3356:	07 5a       	subi	r16, 0xA7	; 167
    3358:	1f 4f       	sbci	r17, 0xFF	; 255
    335a:	bc 01       	movw	r22, r24
    335c:	cd 01       	movw	r24, r26
    335e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3362:	dc 01       	movw	r26, r24
    3364:	cb 01       	movw	r24, r22
    3366:	f8 01       	movw	r30, r16
    3368:	91 83       	std	Z+1, r25	; 0x01
    336a:	80 83       	st	Z, r24
    336c:	1f c0       	rjmp	.+62     	; 0x33ac <SM_VoidServo_APP+0x206>
    336e:	fe 01       	movw	r30, r28
    3370:	e9 5a       	subi	r30, 0xA9	; 169
    3372:	ff 4f       	sbci	r31, 0xFF	; 255
    3374:	88 ec       	ldi	r24, 0xC8	; 200
    3376:	90 e0       	ldi	r25, 0x00	; 0
    3378:	91 83       	std	Z+1, r25	; 0x01
    337a:	80 83       	st	Z, r24
    337c:	fe 01       	movw	r30, r28
    337e:	e9 5a       	subi	r30, 0xA9	; 169
    3380:	ff 4f       	sbci	r31, 0xFF	; 255
    3382:	80 81       	ld	r24, Z
    3384:	91 81       	ldd	r25, Z+1	; 0x01
    3386:	01 97       	sbiw	r24, 0x01	; 1
    3388:	f1 f7       	brne	.-4      	; 0x3386 <SM_VoidServo_APP+0x1e0>
    338a:	fe 01       	movw	r30, r28
    338c:	e9 5a       	subi	r30, 0xA9	; 169
    338e:	ff 4f       	sbci	r31, 0xFF	; 255
    3390:	91 83       	std	Z+1, r25	; 0x01
    3392:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3394:	de 01       	movw	r26, r28
    3396:	a7 5a       	subi	r26, 0xA7	; 167
    3398:	bf 4f       	sbci	r27, 0xFF	; 255
    339a:	fe 01       	movw	r30, r28
    339c:	e7 5a       	subi	r30, 0xA7	; 167
    339e:	ff 4f       	sbci	r31, 0xFF	; 255
    33a0:	80 81       	ld	r24, Z
    33a2:	91 81       	ldd	r25, Z+1	; 0x01
    33a4:	01 97       	sbiw	r24, 0x01	; 1
    33a6:	11 96       	adiw	r26, 0x01	; 1
    33a8:	9c 93       	st	X, r25
    33aa:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    33ac:	fe 01       	movw	r30, r28
    33ae:	e7 5a       	subi	r30, 0xA7	; 167
    33b0:	ff 4f       	sbci	r31, 0xFF	; 255
    33b2:	80 81       	ld	r24, Z
    33b4:	91 81       	ldd	r25, Z+1	; 0x01
    33b6:	00 97       	sbiw	r24, 0x00	; 0
    33b8:	d1 f6       	brne	.-76     	; 0x336e <SM_VoidServo_APP+0x1c8>
    33ba:	27 c0       	rjmp	.+78     	; 0x340a <SM_VoidServo_APP+0x264>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    33bc:	8e 01       	movw	r16, r28
    33be:	07 5a       	subi	r16, 0xA7	; 167
    33c0:	1f 4f       	sbci	r17, 0xFF	; 255
    33c2:	fe 01       	movw	r30, r28
    33c4:	e5 5a       	subi	r30, 0xA5	; 165
    33c6:	ff 4f       	sbci	r31, 0xFF	; 255
    33c8:	60 81       	ld	r22, Z
    33ca:	71 81       	ldd	r23, Z+1	; 0x01
    33cc:	82 81       	ldd	r24, Z+2	; 0x02
    33ce:	93 81       	ldd	r25, Z+3	; 0x03
    33d0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    33d4:	dc 01       	movw	r26, r24
    33d6:	cb 01       	movw	r24, r22
    33d8:	f8 01       	movw	r30, r16
    33da:	91 83       	std	Z+1, r25	; 0x01
    33dc:	80 83       	st	Z, r24
    33de:	de 01       	movw	r26, r28
    33e0:	ab 5a       	subi	r26, 0xAB	; 171
    33e2:	bf 4f       	sbci	r27, 0xFF	; 255
    33e4:	fe 01       	movw	r30, r28
    33e6:	e7 5a       	subi	r30, 0xA7	; 167
    33e8:	ff 4f       	sbci	r31, 0xFF	; 255
    33ea:	80 81       	ld	r24, Z
    33ec:	91 81       	ldd	r25, Z+1	; 0x01
    33ee:	8d 93       	st	X+, r24
    33f0:	9c 93       	st	X, r25
    33f2:	fe 01       	movw	r30, r28
    33f4:	eb 5a       	subi	r30, 0xAB	; 171
    33f6:	ff 4f       	sbci	r31, 0xFF	; 255
    33f8:	80 81       	ld	r24, Z
    33fa:	91 81       	ldd	r25, Z+1	; 0x01
    33fc:	01 97       	sbiw	r24, 0x01	; 1
    33fe:	f1 f7       	brne	.-4      	; 0x33fc <SM_VoidServo_APP+0x256>
    3400:	fe 01       	movw	r30, r28
    3402:	eb 5a       	subi	r30, 0xAB	; 171
    3404:	ff 4f       	sbci	r31, 0xFF	; 255
    3406:	91 83       	std	Z+1, r25	; 0x01
    3408:	80 83       	st	Z, r24
        _delay_ms(500);
        LCD_u8WriteString("YOUR ANGLE= ");
    340a:	80 e6       	ldi	r24, 0x60	; 96
    340c:	90 e0       	ldi	r25, 0x00	; 0
    340e:	0e 94 3d 17 	call	0x2e7a	; 0x2e7a <LCD_u8WriteString>

        LCD_VoidSendNumber(mine);
    3412:	80 91 95 03 	lds	r24, 0x0395
    3416:	90 91 96 03 	lds	r25, 0x0396
    341a:	aa 27       	eor	r26, r26
    341c:	97 fd       	sbrc	r25, 7
    341e:	a0 95       	com	r26
    3420:	ba 2f       	mov	r27, r26
    3422:	bc 01       	movw	r22, r24
    3424:	cd 01       	movw	r24, r26
    3426:	0e 94 ac 16 	call	0x2d58	; 0x2d58 <LCD_VoidSendNumber>
    342a:	fe 01       	movw	r30, r28
    342c:	ef 5a       	subi	r30, 0xAF	; 175
    342e:	ff 4f       	sbci	r31, 0xFF	; 255
    3430:	80 e0       	ldi	r24, 0x00	; 0
    3432:	90 e0       	ldi	r25, 0x00	; 0
    3434:	aa ef       	ldi	r26, 0xFA	; 250
    3436:	b3 e4       	ldi	r27, 0x43	; 67
    3438:	80 83       	st	Z, r24
    343a:	91 83       	std	Z+1, r25	; 0x01
    343c:	a2 83       	std	Z+2, r26	; 0x02
    343e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3440:	8e 01       	movw	r16, r28
    3442:	03 5b       	subi	r16, 0xB3	; 179
    3444:	1f 4f       	sbci	r17, 0xFF	; 255
    3446:	fe 01       	movw	r30, r28
    3448:	ef 5a       	subi	r30, 0xAF	; 175
    344a:	ff 4f       	sbci	r31, 0xFF	; 255
    344c:	60 81       	ld	r22, Z
    344e:	71 81       	ldd	r23, Z+1	; 0x01
    3450:	82 81       	ldd	r24, Z+2	; 0x02
    3452:	93 81       	ldd	r25, Z+3	; 0x03
    3454:	20 e0       	ldi	r18, 0x00	; 0
    3456:	30 e0       	ldi	r19, 0x00	; 0
    3458:	4a ef       	ldi	r20, 0xFA	; 250
    345a:	54 e4       	ldi	r21, 0x44	; 68
    345c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3460:	dc 01       	movw	r26, r24
    3462:	cb 01       	movw	r24, r22
    3464:	f8 01       	movw	r30, r16
    3466:	80 83       	st	Z, r24
    3468:	91 83       	std	Z+1, r25	; 0x01
    346a:	a2 83       	std	Z+2, r26	; 0x02
    346c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    346e:	fe 01       	movw	r30, r28
    3470:	e3 5b       	subi	r30, 0xB3	; 179
    3472:	ff 4f       	sbci	r31, 0xFF	; 255
    3474:	60 81       	ld	r22, Z
    3476:	71 81       	ldd	r23, Z+1	; 0x01
    3478:	82 81       	ldd	r24, Z+2	; 0x02
    347a:	93 81       	ldd	r25, Z+3	; 0x03
    347c:	20 e0       	ldi	r18, 0x00	; 0
    347e:	30 e0       	ldi	r19, 0x00	; 0
    3480:	40 e8       	ldi	r20, 0x80	; 128
    3482:	5f e3       	ldi	r21, 0x3F	; 63
    3484:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3488:	88 23       	and	r24, r24
    348a:	44 f4       	brge	.+16     	; 0x349c <SM_VoidServo_APP+0x2f6>
		__ticks = 1;
    348c:	fe 01       	movw	r30, r28
    348e:	e5 5b       	subi	r30, 0xB5	; 181
    3490:	ff 4f       	sbci	r31, 0xFF	; 255
    3492:	81 e0       	ldi	r24, 0x01	; 1
    3494:	90 e0       	ldi	r25, 0x00	; 0
    3496:	91 83       	std	Z+1, r25	; 0x01
    3498:	80 83       	st	Z, r24
    349a:	64 c0       	rjmp	.+200    	; 0x3564 <SM_VoidServo_APP+0x3be>
	else if (__tmp > 65535)
    349c:	fe 01       	movw	r30, r28
    349e:	e3 5b       	subi	r30, 0xB3	; 179
    34a0:	ff 4f       	sbci	r31, 0xFF	; 255
    34a2:	60 81       	ld	r22, Z
    34a4:	71 81       	ldd	r23, Z+1	; 0x01
    34a6:	82 81       	ldd	r24, Z+2	; 0x02
    34a8:	93 81       	ldd	r25, Z+3	; 0x03
    34aa:	20 e0       	ldi	r18, 0x00	; 0
    34ac:	3f ef       	ldi	r19, 0xFF	; 255
    34ae:	4f e7       	ldi	r20, 0x7F	; 127
    34b0:	57 e4       	ldi	r21, 0x47	; 71
    34b2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    34b6:	18 16       	cp	r1, r24
    34b8:	0c f0       	brlt	.+2      	; 0x34bc <SM_VoidServo_APP+0x316>
    34ba:	43 c0       	rjmp	.+134    	; 0x3542 <SM_VoidServo_APP+0x39c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    34bc:	fe 01       	movw	r30, r28
    34be:	ef 5a       	subi	r30, 0xAF	; 175
    34c0:	ff 4f       	sbci	r31, 0xFF	; 255
    34c2:	60 81       	ld	r22, Z
    34c4:	71 81       	ldd	r23, Z+1	; 0x01
    34c6:	82 81       	ldd	r24, Z+2	; 0x02
    34c8:	93 81       	ldd	r25, Z+3	; 0x03
    34ca:	20 e0       	ldi	r18, 0x00	; 0
    34cc:	30 e0       	ldi	r19, 0x00	; 0
    34ce:	40 e2       	ldi	r20, 0x20	; 32
    34d0:	51 e4       	ldi	r21, 0x41	; 65
    34d2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    34d6:	dc 01       	movw	r26, r24
    34d8:	cb 01       	movw	r24, r22
    34da:	8e 01       	movw	r16, r28
    34dc:	05 5b       	subi	r16, 0xB5	; 181
    34de:	1f 4f       	sbci	r17, 0xFF	; 255
    34e0:	bc 01       	movw	r22, r24
    34e2:	cd 01       	movw	r24, r26
    34e4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    34e8:	dc 01       	movw	r26, r24
    34ea:	cb 01       	movw	r24, r22
    34ec:	f8 01       	movw	r30, r16
    34ee:	91 83       	std	Z+1, r25	; 0x01
    34f0:	80 83       	st	Z, r24
    34f2:	1f c0       	rjmp	.+62     	; 0x3532 <SM_VoidServo_APP+0x38c>
    34f4:	fe 01       	movw	r30, r28
    34f6:	e7 5b       	subi	r30, 0xB7	; 183
    34f8:	ff 4f       	sbci	r31, 0xFF	; 255
    34fa:	88 ec       	ldi	r24, 0xC8	; 200
    34fc:	90 e0       	ldi	r25, 0x00	; 0
    34fe:	91 83       	std	Z+1, r25	; 0x01
    3500:	80 83       	st	Z, r24
    3502:	fe 01       	movw	r30, r28
    3504:	e7 5b       	subi	r30, 0xB7	; 183
    3506:	ff 4f       	sbci	r31, 0xFF	; 255
    3508:	80 81       	ld	r24, Z
    350a:	91 81       	ldd	r25, Z+1	; 0x01
    350c:	01 97       	sbiw	r24, 0x01	; 1
    350e:	f1 f7       	brne	.-4      	; 0x350c <SM_VoidServo_APP+0x366>
    3510:	fe 01       	movw	r30, r28
    3512:	e7 5b       	subi	r30, 0xB7	; 183
    3514:	ff 4f       	sbci	r31, 0xFF	; 255
    3516:	91 83       	std	Z+1, r25	; 0x01
    3518:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    351a:	de 01       	movw	r26, r28
    351c:	a5 5b       	subi	r26, 0xB5	; 181
    351e:	bf 4f       	sbci	r27, 0xFF	; 255
    3520:	fe 01       	movw	r30, r28
    3522:	e5 5b       	subi	r30, 0xB5	; 181
    3524:	ff 4f       	sbci	r31, 0xFF	; 255
    3526:	80 81       	ld	r24, Z
    3528:	91 81       	ldd	r25, Z+1	; 0x01
    352a:	01 97       	sbiw	r24, 0x01	; 1
    352c:	11 96       	adiw	r26, 0x01	; 1
    352e:	9c 93       	st	X, r25
    3530:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3532:	fe 01       	movw	r30, r28
    3534:	e5 5b       	subi	r30, 0xB5	; 181
    3536:	ff 4f       	sbci	r31, 0xFF	; 255
    3538:	80 81       	ld	r24, Z
    353a:	91 81       	ldd	r25, Z+1	; 0x01
    353c:	00 97       	sbiw	r24, 0x00	; 0
    353e:	d1 f6       	brne	.-76     	; 0x34f4 <SM_VoidServo_APP+0x34e>
    3540:	27 c0       	rjmp	.+78     	; 0x3590 <SM_VoidServo_APP+0x3ea>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3542:	8e 01       	movw	r16, r28
    3544:	05 5b       	subi	r16, 0xB5	; 181
    3546:	1f 4f       	sbci	r17, 0xFF	; 255
    3548:	fe 01       	movw	r30, r28
    354a:	e3 5b       	subi	r30, 0xB3	; 179
    354c:	ff 4f       	sbci	r31, 0xFF	; 255
    354e:	60 81       	ld	r22, Z
    3550:	71 81       	ldd	r23, Z+1	; 0x01
    3552:	82 81       	ldd	r24, Z+2	; 0x02
    3554:	93 81       	ldd	r25, Z+3	; 0x03
    3556:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    355a:	dc 01       	movw	r26, r24
    355c:	cb 01       	movw	r24, r22
    355e:	f8 01       	movw	r30, r16
    3560:	91 83       	std	Z+1, r25	; 0x01
    3562:	80 83       	st	Z, r24
    3564:	de 01       	movw	r26, r28
    3566:	a9 5b       	subi	r26, 0xB9	; 185
    3568:	bf 4f       	sbci	r27, 0xFF	; 255
    356a:	fe 01       	movw	r30, r28
    356c:	e5 5b       	subi	r30, 0xB5	; 181
    356e:	ff 4f       	sbci	r31, 0xFF	; 255
    3570:	80 81       	ld	r24, Z
    3572:	91 81       	ldd	r25, Z+1	; 0x01
    3574:	8d 93       	st	X+, r24
    3576:	9c 93       	st	X, r25
    3578:	fe 01       	movw	r30, r28
    357a:	e9 5b       	subi	r30, 0xB9	; 185
    357c:	ff 4f       	sbci	r31, 0xFF	; 255
    357e:	80 81       	ld	r24, Z
    3580:	91 81       	ldd	r25, Z+1	; 0x01
    3582:	01 97       	sbiw	r24, 0x01	; 1
    3584:	f1 f7       	brne	.-4      	; 0x3582 <SM_VoidServo_APP+0x3dc>
    3586:	fe 01       	movw	r30, r28
    3588:	e9 5b       	subi	r30, 0xB9	; 185
    358a:	ff 4f       	sbci	r31, 0xFF	; 255
    358c:	91 83       	std	Z+1, r25	; 0x01
    358e:	80 83       	st	Z, r24
        _delay_ms(500);
        LCD_VoidGoToRowCol(1,1);
    3590:	81 e0       	ldi	r24, 0x01	; 1
    3592:	61 e0       	ldi	r22, 0x01	; 1
    3594:	0e 94 85 16 	call	0x2d0a	; 0x2d0a <LCD_VoidGoToRowCol>
        SERVO_U8SetServoAngle(mine);
    3598:	80 91 95 03 	lds	r24, 0x0395
    359c:	90 91 96 03 	lds	r25, 0x0396
    35a0:	0e 94 65 17 	call	0x2eca	; 0x2eca <SERVO_U8SetServoAngle>
        mine =0;
    35a4:	10 92 96 03 	sts	0x0396, r1
    35a8:	10 92 95 03 	sts	0x0395, r1
        LCD_VoidSendCommand(1);
    35ac:	81 e0       	ldi	r24, 0x01	; 1
    35ae:	0e 94 86 0e 	call	0x1d0c	; 0x1d0c <LCD_VoidSendCommand>
    35b2:	fe 01       	movw	r30, r28
    35b4:	ed 5b       	subi	r30, 0xBD	; 189
    35b6:	ff 4f       	sbci	r31, 0xFF	; 255
    35b8:	80 e0       	ldi	r24, 0x00	; 0
    35ba:	90 e0       	ldi	r25, 0x00	; 0
    35bc:	a6 e9       	ldi	r26, 0x96	; 150
    35be:	b3 e4       	ldi	r27, 0x43	; 67
    35c0:	80 83       	st	Z, r24
    35c2:	91 83       	std	Z+1, r25	; 0x01
    35c4:	a2 83       	std	Z+2, r26	; 0x02
    35c6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    35c8:	8e 01       	movw	r16, r28
    35ca:	01 5c       	subi	r16, 0xC1	; 193
    35cc:	1f 4f       	sbci	r17, 0xFF	; 255
    35ce:	fe 01       	movw	r30, r28
    35d0:	ed 5b       	subi	r30, 0xBD	; 189
    35d2:	ff 4f       	sbci	r31, 0xFF	; 255
    35d4:	60 81       	ld	r22, Z
    35d6:	71 81       	ldd	r23, Z+1	; 0x01
    35d8:	82 81       	ldd	r24, Z+2	; 0x02
    35da:	93 81       	ldd	r25, Z+3	; 0x03
    35dc:	20 e0       	ldi	r18, 0x00	; 0
    35de:	30 e0       	ldi	r19, 0x00	; 0
    35e0:	4a ef       	ldi	r20, 0xFA	; 250
    35e2:	54 e4       	ldi	r21, 0x44	; 68
    35e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    35e8:	dc 01       	movw	r26, r24
    35ea:	cb 01       	movw	r24, r22
    35ec:	f8 01       	movw	r30, r16
    35ee:	80 83       	st	Z, r24
    35f0:	91 83       	std	Z+1, r25	; 0x01
    35f2:	a2 83       	std	Z+2, r26	; 0x02
    35f4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    35f6:	fe 01       	movw	r30, r28
    35f8:	ff 96       	adiw	r30, 0x3f	; 63
    35fa:	60 81       	ld	r22, Z
    35fc:	71 81       	ldd	r23, Z+1	; 0x01
    35fe:	82 81       	ldd	r24, Z+2	; 0x02
    3600:	93 81       	ldd	r25, Z+3	; 0x03
    3602:	20 e0       	ldi	r18, 0x00	; 0
    3604:	30 e0       	ldi	r19, 0x00	; 0
    3606:	40 e8       	ldi	r20, 0x80	; 128
    3608:	5f e3       	ldi	r21, 0x3F	; 63
    360a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    360e:	88 23       	and	r24, r24
    3610:	2c f4       	brge	.+10     	; 0x361c <SM_VoidServo_APP+0x476>
		__ticks = 1;
    3612:	81 e0       	ldi	r24, 0x01	; 1
    3614:	90 e0       	ldi	r25, 0x00	; 0
    3616:	9e af       	std	Y+62, r25	; 0x3e
    3618:	8d af       	std	Y+61, r24	; 0x3d
    361a:	46 c0       	rjmp	.+140    	; 0x36a8 <SM_VoidServo_APP+0x502>
	else if (__tmp > 65535)
    361c:	fe 01       	movw	r30, r28
    361e:	ff 96       	adiw	r30, 0x3f	; 63
    3620:	60 81       	ld	r22, Z
    3622:	71 81       	ldd	r23, Z+1	; 0x01
    3624:	82 81       	ldd	r24, Z+2	; 0x02
    3626:	93 81       	ldd	r25, Z+3	; 0x03
    3628:	20 e0       	ldi	r18, 0x00	; 0
    362a:	3f ef       	ldi	r19, 0xFF	; 255
    362c:	4f e7       	ldi	r20, 0x7F	; 127
    362e:	57 e4       	ldi	r21, 0x47	; 71
    3630:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3634:	18 16       	cp	r1, r24
    3636:	64 f5       	brge	.+88     	; 0x3690 <SM_VoidServo_APP+0x4ea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3638:	fe 01       	movw	r30, r28
    363a:	ed 5b       	subi	r30, 0xBD	; 189
    363c:	ff 4f       	sbci	r31, 0xFF	; 255
    363e:	60 81       	ld	r22, Z
    3640:	71 81       	ldd	r23, Z+1	; 0x01
    3642:	82 81       	ldd	r24, Z+2	; 0x02
    3644:	93 81       	ldd	r25, Z+3	; 0x03
    3646:	20 e0       	ldi	r18, 0x00	; 0
    3648:	30 e0       	ldi	r19, 0x00	; 0
    364a:	40 e2       	ldi	r20, 0x20	; 32
    364c:	51 e4       	ldi	r21, 0x41	; 65
    364e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3652:	dc 01       	movw	r26, r24
    3654:	cb 01       	movw	r24, r22
    3656:	bc 01       	movw	r22, r24
    3658:	cd 01       	movw	r24, r26
    365a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    365e:	dc 01       	movw	r26, r24
    3660:	cb 01       	movw	r24, r22
    3662:	9e af       	std	Y+62, r25	; 0x3e
    3664:	8d af       	std	Y+61, r24	; 0x3d
    3666:	0f c0       	rjmp	.+30     	; 0x3686 <SM_VoidServo_APP+0x4e0>
    3668:	88 ec       	ldi	r24, 0xC8	; 200
    366a:	90 e0       	ldi	r25, 0x00	; 0
    366c:	9c af       	std	Y+60, r25	; 0x3c
    366e:	8b af       	std	Y+59, r24	; 0x3b
    3670:	8b ad       	ldd	r24, Y+59	; 0x3b
    3672:	9c ad       	ldd	r25, Y+60	; 0x3c
    3674:	01 97       	sbiw	r24, 0x01	; 1
    3676:	f1 f7       	brne	.-4      	; 0x3674 <SM_VoidServo_APP+0x4ce>
    3678:	9c af       	std	Y+60, r25	; 0x3c
    367a:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    367c:	8d ad       	ldd	r24, Y+61	; 0x3d
    367e:	9e ad       	ldd	r25, Y+62	; 0x3e
    3680:	01 97       	sbiw	r24, 0x01	; 1
    3682:	9e af       	std	Y+62, r25	; 0x3e
    3684:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3686:	8d ad       	ldd	r24, Y+61	; 0x3d
    3688:	9e ad       	ldd	r25, Y+62	; 0x3e
    368a:	00 97       	sbiw	r24, 0x00	; 0
    368c:	69 f7       	brne	.-38     	; 0x3668 <SM_VoidServo_APP+0x4c2>
    368e:	16 c0       	rjmp	.+44     	; 0x36bc <SM_VoidServo_APP+0x516>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3690:	fe 01       	movw	r30, r28
    3692:	ff 96       	adiw	r30, 0x3f	; 63
    3694:	60 81       	ld	r22, Z
    3696:	71 81       	ldd	r23, Z+1	; 0x01
    3698:	82 81       	ldd	r24, Z+2	; 0x02
    369a:	93 81       	ldd	r25, Z+3	; 0x03
    369c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    36a0:	dc 01       	movw	r26, r24
    36a2:	cb 01       	movw	r24, r22
    36a4:	9e af       	std	Y+62, r25	; 0x3e
    36a6:	8d af       	std	Y+61, r24	; 0x3d
    36a8:	8d ad       	ldd	r24, Y+61	; 0x3d
    36aa:	9e ad       	ldd	r25, Y+62	; 0x3e
    36ac:	9a af       	std	Y+58, r25	; 0x3a
    36ae:	89 af       	std	Y+57, r24	; 0x39
    36b0:	89 ad       	ldd	r24, Y+57	; 0x39
    36b2:	9a ad       	ldd	r25, Y+58	; 0x3a
    36b4:	01 97       	sbiw	r24, 0x01	; 1
    36b6:	f1 f7       	brne	.-4      	; 0x36b4 <SM_VoidServo_APP+0x50e>
    36b8:	9a af       	std	Y+58, r25	; 0x3a
    36ba:	89 af       	std	Y+57, r24	; 0x39
        _delay_ms(300);
        LCD_u8WriteString("CHOOSE ANGLE: ");
    36bc:	8d e6       	ldi	r24, 0x6D	; 109
    36be:	90 e0       	ldi	r25, 0x00	; 0
    36c0:	0e 94 3d 17 	call	0x2e7a	; 0x2e7a <LCD_u8WriteString>
    36c4:	7d cd       	rjmp	.-1286   	; 0x31c0 <SM_VoidServo_APP+0x1a>
        goto serv;
        }
        else
        {                  // for range 90 : - 90
        	 LCD_VoidSendCommand(1);
    36c6:	81 e0       	ldi	r24, 0x01	; 1
    36c8:	0e 94 86 0e 	call	0x1d0c	; 0x1d0c <LCD_VoidSendCommand>
    36cc:	80 e0       	ldi	r24, 0x00	; 0
    36ce:	90 e0       	ldi	r25, 0x00	; 0
    36d0:	aa ef       	ldi	r26, 0xFA	; 250
    36d2:	b3 e4       	ldi	r27, 0x43	; 67
    36d4:	8d ab       	std	Y+53, r24	; 0x35
    36d6:	9e ab       	std	Y+54, r25	; 0x36
    36d8:	af ab       	std	Y+55, r26	; 0x37
    36da:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    36dc:	6d a9       	ldd	r22, Y+53	; 0x35
    36de:	7e a9       	ldd	r23, Y+54	; 0x36
    36e0:	8f a9       	ldd	r24, Y+55	; 0x37
    36e2:	98 ad       	ldd	r25, Y+56	; 0x38
    36e4:	20 e0       	ldi	r18, 0x00	; 0
    36e6:	30 e0       	ldi	r19, 0x00	; 0
    36e8:	4a ef       	ldi	r20, 0xFA	; 250
    36ea:	54 e4       	ldi	r21, 0x44	; 68
    36ec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    36f0:	dc 01       	movw	r26, r24
    36f2:	cb 01       	movw	r24, r22
    36f4:	89 ab       	std	Y+49, r24	; 0x31
    36f6:	9a ab       	std	Y+50, r25	; 0x32
    36f8:	ab ab       	std	Y+51, r26	; 0x33
    36fa:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    36fc:	69 a9       	ldd	r22, Y+49	; 0x31
    36fe:	7a a9       	ldd	r23, Y+50	; 0x32
    3700:	8b a9       	ldd	r24, Y+51	; 0x33
    3702:	9c a9       	ldd	r25, Y+52	; 0x34
    3704:	20 e0       	ldi	r18, 0x00	; 0
    3706:	30 e0       	ldi	r19, 0x00	; 0
    3708:	40 e8       	ldi	r20, 0x80	; 128
    370a:	5f e3       	ldi	r21, 0x3F	; 63
    370c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3710:	88 23       	and	r24, r24
    3712:	2c f4       	brge	.+10     	; 0x371e <SM_VoidServo_APP+0x578>
		__ticks = 1;
    3714:	81 e0       	ldi	r24, 0x01	; 1
    3716:	90 e0       	ldi	r25, 0x00	; 0
    3718:	98 ab       	std	Y+48, r25	; 0x30
    371a:	8f a7       	std	Y+47, r24	; 0x2f
    371c:	3f c0       	rjmp	.+126    	; 0x379c <SM_VoidServo_APP+0x5f6>
	else if (__tmp > 65535)
    371e:	69 a9       	ldd	r22, Y+49	; 0x31
    3720:	7a a9       	ldd	r23, Y+50	; 0x32
    3722:	8b a9       	ldd	r24, Y+51	; 0x33
    3724:	9c a9       	ldd	r25, Y+52	; 0x34
    3726:	20 e0       	ldi	r18, 0x00	; 0
    3728:	3f ef       	ldi	r19, 0xFF	; 255
    372a:	4f e7       	ldi	r20, 0x7F	; 127
    372c:	57 e4       	ldi	r21, 0x47	; 71
    372e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3732:	18 16       	cp	r1, r24
    3734:	4c f5       	brge	.+82     	; 0x3788 <SM_VoidServo_APP+0x5e2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3736:	6d a9       	ldd	r22, Y+53	; 0x35
    3738:	7e a9       	ldd	r23, Y+54	; 0x36
    373a:	8f a9       	ldd	r24, Y+55	; 0x37
    373c:	98 ad       	ldd	r25, Y+56	; 0x38
    373e:	20 e0       	ldi	r18, 0x00	; 0
    3740:	30 e0       	ldi	r19, 0x00	; 0
    3742:	40 e2       	ldi	r20, 0x20	; 32
    3744:	51 e4       	ldi	r21, 0x41	; 65
    3746:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    374a:	dc 01       	movw	r26, r24
    374c:	cb 01       	movw	r24, r22
    374e:	bc 01       	movw	r22, r24
    3750:	cd 01       	movw	r24, r26
    3752:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3756:	dc 01       	movw	r26, r24
    3758:	cb 01       	movw	r24, r22
    375a:	98 ab       	std	Y+48, r25	; 0x30
    375c:	8f a7       	std	Y+47, r24	; 0x2f
    375e:	0f c0       	rjmp	.+30     	; 0x377e <SM_VoidServo_APP+0x5d8>
    3760:	88 ec       	ldi	r24, 0xC8	; 200
    3762:	90 e0       	ldi	r25, 0x00	; 0
    3764:	9e a7       	std	Y+46, r25	; 0x2e
    3766:	8d a7       	std	Y+45, r24	; 0x2d
    3768:	8d a5       	ldd	r24, Y+45	; 0x2d
    376a:	9e a5       	ldd	r25, Y+46	; 0x2e
    376c:	01 97       	sbiw	r24, 0x01	; 1
    376e:	f1 f7       	brne	.-4      	; 0x376c <SM_VoidServo_APP+0x5c6>
    3770:	9e a7       	std	Y+46, r25	; 0x2e
    3772:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3774:	8f a5       	ldd	r24, Y+47	; 0x2f
    3776:	98 a9       	ldd	r25, Y+48	; 0x30
    3778:	01 97       	sbiw	r24, 0x01	; 1
    377a:	98 ab       	std	Y+48, r25	; 0x30
    377c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    377e:	8f a5       	ldd	r24, Y+47	; 0x2f
    3780:	98 a9       	ldd	r25, Y+48	; 0x30
    3782:	00 97       	sbiw	r24, 0x00	; 0
    3784:	69 f7       	brne	.-38     	; 0x3760 <SM_VoidServo_APP+0x5ba>
    3786:	14 c0       	rjmp	.+40     	; 0x37b0 <SM_VoidServo_APP+0x60a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3788:	69 a9       	ldd	r22, Y+49	; 0x31
    378a:	7a a9       	ldd	r23, Y+50	; 0x32
    378c:	8b a9       	ldd	r24, Y+51	; 0x33
    378e:	9c a9       	ldd	r25, Y+52	; 0x34
    3790:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3794:	dc 01       	movw	r26, r24
    3796:	cb 01       	movw	r24, r22
    3798:	98 ab       	std	Y+48, r25	; 0x30
    379a:	8f a7       	std	Y+47, r24	; 0x2f
    379c:	8f a5       	ldd	r24, Y+47	; 0x2f
    379e:	98 a9       	ldd	r25, Y+48	; 0x30
    37a0:	9c a7       	std	Y+44, r25	; 0x2c
    37a2:	8b a7       	std	Y+43, r24	; 0x2b
    37a4:	8b a5       	ldd	r24, Y+43	; 0x2b
    37a6:	9c a5       	ldd	r25, Y+44	; 0x2c
    37a8:	01 97       	sbiw	r24, 0x01	; 1
    37aa:	f1 f7       	brne	.-4      	; 0x37a8 <SM_VoidServo_APP+0x602>
    37ac:	9c a7       	std	Y+44, r25	; 0x2c
    37ae:	8b a7       	std	Y+43, r24	; 0x2b
        	  _delay_ms(500);
        	 LCD_u8WriteString("WRONG CHOICE");
    37b0:	8c e7       	ldi	r24, 0x7C	; 124
    37b2:	90 e0       	ldi	r25, 0x00	; 0
    37b4:	0e 94 3d 17 	call	0x2e7a	; 0x2e7a <LCD_u8WriteString>
    37b8:	80 e0       	ldi	r24, 0x00	; 0
    37ba:	90 e0       	ldi	r25, 0x00	; 0
    37bc:	a8 ec       	ldi	r26, 0xC8	; 200
    37be:	b3 e4       	ldi	r27, 0x43	; 67
    37c0:	8f a3       	std	Y+39, r24	; 0x27
    37c2:	98 a7       	std	Y+40, r25	; 0x28
    37c4:	a9 a7       	std	Y+41, r26	; 0x29
    37c6:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    37c8:	6f a1       	ldd	r22, Y+39	; 0x27
    37ca:	78 a5       	ldd	r23, Y+40	; 0x28
    37cc:	89 a5       	ldd	r24, Y+41	; 0x29
    37ce:	9a a5       	ldd	r25, Y+42	; 0x2a
    37d0:	20 e0       	ldi	r18, 0x00	; 0
    37d2:	30 e0       	ldi	r19, 0x00	; 0
    37d4:	4a ef       	ldi	r20, 0xFA	; 250
    37d6:	54 e4       	ldi	r21, 0x44	; 68
    37d8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    37dc:	dc 01       	movw	r26, r24
    37de:	cb 01       	movw	r24, r22
    37e0:	8b a3       	std	Y+35, r24	; 0x23
    37e2:	9c a3       	std	Y+36, r25	; 0x24
    37e4:	ad a3       	std	Y+37, r26	; 0x25
    37e6:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    37e8:	6b a1       	ldd	r22, Y+35	; 0x23
    37ea:	7c a1       	ldd	r23, Y+36	; 0x24
    37ec:	8d a1       	ldd	r24, Y+37	; 0x25
    37ee:	9e a1       	ldd	r25, Y+38	; 0x26
    37f0:	20 e0       	ldi	r18, 0x00	; 0
    37f2:	30 e0       	ldi	r19, 0x00	; 0
    37f4:	40 e8       	ldi	r20, 0x80	; 128
    37f6:	5f e3       	ldi	r21, 0x3F	; 63
    37f8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    37fc:	88 23       	and	r24, r24
    37fe:	2c f4       	brge	.+10     	; 0x380a <SM_VoidServo_APP+0x664>
		__ticks = 1;
    3800:	81 e0       	ldi	r24, 0x01	; 1
    3802:	90 e0       	ldi	r25, 0x00	; 0
    3804:	9a a3       	std	Y+34, r25	; 0x22
    3806:	89 a3       	std	Y+33, r24	; 0x21
    3808:	3f c0       	rjmp	.+126    	; 0x3888 <SM_VoidServo_APP+0x6e2>
	else if (__tmp > 65535)
    380a:	6b a1       	ldd	r22, Y+35	; 0x23
    380c:	7c a1       	ldd	r23, Y+36	; 0x24
    380e:	8d a1       	ldd	r24, Y+37	; 0x25
    3810:	9e a1       	ldd	r25, Y+38	; 0x26
    3812:	20 e0       	ldi	r18, 0x00	; 0
    3814:	3f ef       	ldi	r19, 0xFF	; 255
    3816:	4f e7       	ldi	r20, 0x7F	; 127
    3818:	57 e4       	ldi	r21, 0x47	; 71
    381a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    381e:	18 16       	cp	r1, r24
    3820:	4c f5       	brge	.+82     	; 0x3874 <SM_VoidServo_APP+0x6ce>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3822:	6f a1       	ldd	r22, Y+39	; 0x27
    3824:	78 a5       	ldd	r23, Y+40	; 0x28
    3826:	89 a5       	ldd	r24, Y+41	; 0x29
    3828:	9a a5       	ldd	r25, Y+42	; 0x2a
    382a:	20 e0       	ldi	r18, 0x00	; 0
    382c:	30 e0       	ldi	r19, 0x00	; 0
    382e:	40 e2       	ldi	r20, 0x20	; 32
    3830:	51 e4       	ldi	r21, 0x41	; 65
    3832:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3836:	dc 01       	movw	r26, r24
    3838:	cb 01       	movw	r24, r22
    383a:	bc 01       	movw	r22, r24
    383c:	cd 01       	movw	r24, r26
    383e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3842:	dc 01       	movw	r26, r24
    3844:	cb 01       	movw	r24, r22
    3846:	9a a3       	std	Y+34, r25	; 0x22
    3848:	89 a3       	std	Y+33, r24	; 0x21
    384a:	0f c0       	rjmp	.+30     	; 0x386a <SM_VoidServo_APP+0x6c4>
    384c:	88 ec       	ldi	r24, 0xC8	; 200
    384e:	90 e0       	ldi	r25, 0x00	; 0
    3850:	98 a3       	std	Y+32, r25	; 0x20
    3852:	8f 8f       	std	Y+31, r24	; 0x1f
    3854:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3856:	98 a1       	ldd	r25, Y+32	; 0x20
    3858:	01 97       	sbiw	r24, 0x01	; 1
    385a:	f1 f7       	brne	.-4      	; 0x3858 <SM_VoidServo_APP+0x6b2>
    385c:	98 a3       	std	Y+32, r25	; 0x20
    385e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3860:	89 a1       	ldd	r24, Y+33	; 0x21
    3862:	9a a1       	ldd	r25, Y+34	; 0x22
    3864:	01 97       	sbiw	r24, 0x01	; 1
    3866:	9a a3       	std	Y+34, r25	; 0x22
    3868:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    386a:	89 a1       	ldd	r24, Y+33	; 0x21
    386c:	9a a1       	ldd	r25, Y+34	; 0x22
    386e:	00 97       	sbiw	r24, 0x00	; 0
    3870:	69 f7       	brne	.-38     	; 0x384c <SM_VoidServo_APP+0x6a6>
    3872:	14 c0       	rjmp	.+40     	; 0x389c <SM_VoidServo_APP+0x6f6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3874:	6b a1       	ldd	r22, Y+35	; 0x23
    3876:	7c a1       	ldd	r23, Y+36	; 0x24
    3878:	8d a1       	ldd	r24, Y+37	; 0x25
    387a:	9e a1       	ldd	r25, Y+38	; 0x26
    387c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3880:	dc 01       	movw	r26, r24
    3882:	cb 01       	movw	r24, r22
    3884:	9a a3       	std	Y+34, r25	; 0x22
    3886:	89 a3       	std	Y+33, r24	; 0x21
    3888:	89 a1       	ldd	r24, Y+33	; 0x21
    388a:	9a a1       	ldd	r25, Y+34	; 0x22
    388c:	9e 8f       	std	Y+30, r25	; 0x1e
    388e:	8d 8f       	std	Y+29, r24	; 0x1d
    3890:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3892:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3894:	01 97       	sbiw	r24, 0x01	; 1
    3896:	f1 f7       	brne	.-4      	; 0x3894 <SM_VoidServo_APP+0x6ee>
    3898:	9e 8f       	std	Y+30, r25	; 0x1e
    389a:	8d 8f       	std	Y+29, r24	; 0x1d
        	 _delay_ms(400);
        	 LCD_VoidGoToRowCol(1,0);
    389c:	81 e0       	ldi	r24, 0x01	; 1
    389e:	60 e0       	ldi	r22, 0x00	; 0
    38a0:	0e 94 85 16 	call	0x2d0a	; 0x2d0a <LCD_VoidGoToRowCol>
        	 LCD_u8WriteString("RANGE -90:90");
    38a4:	89 e8       	ldi	r24, 0x89	; 137
    38a6:	90 e0       	ldi	r25, 0x00	; 0
    38a8:	0e 94 3d 17 	call	0x2e7a	; 0x2e7a <LCD_u8WriteString>
    38ac:	80 e0       	ldi	r24, 0x00	; 0
    38ae:	90 e0       	ldi	r25, 0x00	; 0
    38b0:	a6 e9       	ldi	r26, 0x96	; 150
    38b2:	b3 e4       	ldi	r27, 0x43	; 67
    38b4:	89 8f       	std	Y+25, r24	; 0x19
    38b6:	9a 8f       	std	Y+26, r25	; 0x1a
    38b8:	ab 8f       	std	Y+27, r26	; 0x1b
    38ba:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    38bc:	69 8d       	ldd	r22, Y+25	; 0x19
    38be:	7a 8d       	ldd	r23, Y+26	; 0x1a
    38c0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    38c2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    38c4:	20 e0       	ldi	r18, 0x00	; 0
    38c6:	30 e0       	ldi	r19, 0x00	; 0
    38c8:	4a ef       	ldi	r20, 0xFA	; 250
    38ca:	54 e4       	ldi	r21, 0x44	; 68
    38cc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    38d0:	dc 01       	movw	r26, r24
    38d2:	cb 01       	movw	r24, r22
    38d4:	8d 8b       	std	Y+21, r24	; 0x15
    38d6:	9e 8b       	std	Y+22, r25	; 0x16
    38d8:	af 8b       	std	Y+23, r26	; 0x17
    38da:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    38dc:	6d 89       	ldd	r22, Y+21	; 0x15
    38de:	7e 89       	ldd	r23, Y+22	; 0x16
    38e0:	8f 89       	ldd	r24, Y+23	; 0x17
    38e2:	98 8d       	ldd	r25, Y+24	; 0x18
    38e4:	20 e0       	ldi	r18, 0x00	; 0
    38e6:	30 e0       	ldi	r19, 0x00	; 0
    38e8:	40 e8       	ldi	r20, 0x80	; 128
    38ea:	5f e3       	ldi	r21, 0x3F	; 63
    38ec:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    38f0:	88 23       	and	r24, r24
    38f2:	2c f4       	brge	.+10     	; 0x38fe <SM_VoidServo_APP+0x758>
		__ticks = 1;
    38f4:	81 e0       	ldi	r24, 0x01	; 1
    38f6:	90 e0       	ldi	r25, 0x00	; 0
    38f8:	9c 8b       	std	Y+20, r25	; 0x14
    38fa:	8b 8b       	std	Y+19, r24	; 0x13
    38fc:	3f c0       	rjmp	.+126    	; 0x397c <SM_VoidServo_APP+0x7d6>
	else if (__tmp > 65535)
    38fe:	6d 89       	ldd	r22, Y+21	; 0x15
    3900:	7e 89       	ldd	r23, Y+22	; 0x16
    3902:	8f 89       	ldd	r24, Y+23	; 0x17
    3904:	98 8d       	ldd	r25, Y+24	; 0x18
    3906:	20 e0       	ldi	r18, 0x00	; 0
    3908:	3f ef       	ldi	r19, 0xFF	; 255
    390a:	4f e7       	ldi	r20, 0x7F	; 127
    390c:	57 e4       	ldi	r21, 0x47	; 71
    390e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3912:	18 16       	cp	r1, r24
    3914:	4c f5       	brge	.+82     	; 0x3968 <SM_VoidServo_APP+0x7c2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3916:	69 8d       	ldd	r22, Y+25	; 0x19
    3918:	7a 8d       	ldd	r23, Y+26	; 0x1a
    391a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    391c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    391e:	20 e0       	ldi	r18, 0x00	; 0
    3920:	30 e0       	ldi	r19, 0x00	; 0
    3922:	40 e2       	ldi	r20, 0x20	; 32
    3924:	51 e4       	ldi	r21, 0x41	; 65
    3926:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    392a:	dc 01       	movw	r26, r24
    392c:	cb 01       	movw	r24, r22
    392e:	bc 01       	movw	r22, r24
    3930:	cd 01       	movw	r24, r26
    3932:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3936:	dc 01       	movw	r26, r24
    3938:	cb 01       	movw	r24, r22
    393a:	9c 8b       	std	Y+20, r25	; 0x14
    393c:	8b 8b       	std	Y+19, r24	; 0x13
    393e:	0f c0       	rjmp	.+30     	; 0x395e <SM_VoidServo_APP+0x7b8>
    3940:	88 ec       	ldi	r24, 0xC8	; 200
    3942:	90 e0       	ldi	r25, 0x00	; 0
    3944:	9a 8b       	std	Y+18, r25	; 0x12
    3946:	89 8b       	std	Y+17, r24	; 0x11
    3948:	89 89       	ldd	r24, Y+17	; 0x11
    394a:	9a 89       	ldd	r25, Y+18	; 0x12
    394c:	01 97       	sbiw	r24, 0x01	; 1
    394e:	f1 f7       	brne	.-4      	; 0x394c <SM_VoidServo_APP+0x7a6>
    3950:	9a 8b       	std	Y+18, r25	; 0x12
    3952:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3954:	8b 89       	ldd	r24, Y+19	; 0x13
    3956:	9c 89       	ldd	r25, Y+20	; 0x14
    3958:	01 97       	sbiw	r24, 0x01	; 1
    395a:	9c 8b       	std	Y+20, r25	; 0x14
    395c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    395e:	8b 89       	ldd	r24, Y+19	; 0x13
    3960:	9c 89       	ldd	r25, Y+20	; 0x14
    3962:	00 97       	sbiw	r24, 0x00	; 0
    3964:	69 f7       	brne	.-38     	; 0x3940 <SM_VoidServo_APP+0x79a>
    3966:	14 c0       	rjmp	.+40     	; 0x3990 <SM_VoidServo_APP+0x7ea>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3968:	6d 89       	ldd	r22, Y+21	; 0x15
    396a:	7e 89       	ldd	r23, Y+22	; 0x16
    396c:	8f 89       	ldd	r24, Y+23	; 0x17
    396e:	98 8d       	ldd	r25, Y+24	; 0x18
    3970:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3974:	dc 01       	movw	r26, r24
    3976:	cb 01       	movw	r24, r22
    3978:	9c 8b       	std	Y+20, r25	; 0x14
    397a:	8b 8b       	std	Y+19, r24	; 0x13
    397c:	8b 89       	ldd	r24, Y+19	; 0x13
    397e:	9c 89       	ldd	r25, Y+20	; 0x14
    3980:	98 8b       	std	Y+16, r25	; 0x10
    3982:	8f 87       	std	Y+15, r24	; 0x0f
    3984:	8f 85       	ldd	r24, Y+15	; 0x0f
    3986:	98 89       	ldd	r25, Y+16	; 0x10
    3988:	01 97       	sbiw	r24, 0x01	; 1
    398a:	f1 f7       	brne	.-4      	; 0x3988 <SM_VoidServo_APP+0x7e2>
    398c:	98 8b       	std	Y+16, r25	; 0x10
    398e:	8f 87       	std	Y+15, r24	; 0x0f
        	 _delay_ms(300);
        	  mine =0;
    3990:	10 92 96 03 	sts	0x0396, r1
    3994:	10 92 95 03 	sts	0x0395, r1
    3998:	80 e0       	ldi	r24, 0x00	; 0
    399a:	90 e0       	ldi	r25, 0x00	; 0
    399c:	aa ef       	ldi	r26, 0xFA	; 250
    399e:	b3 e4       	ldi	r27, 0x43	; 67
    39a0:	8b 87       	std	Y+11, r24	; 0x0b
    39a2:	9c 87       	std	Y+12, r25	; 0x0c
    39a4:	ad 87       	std	Y+13, r26	; 0x0d
    39a6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    39a8:	6b 85       	ldd	r22, Y+11	; 0x0b
    39aa:	7c 85       	ldd	r23, Y+12	; 0x0c
    39ac:	8d 85       	ldd	r24, Y+13	; 0x0d
    39ae:	9e 85       	ldd	r25, Y+14	; 0x0e
    39b0:	20 e0       	ldi	r18, 0x00	; 0
    39b2:	30 e0       	ldi	r19, 0x00	; 0
    39b4:	4a ef       	ldi	r20, 0xFA	; 250
    39b6:	54 e4       	ldi	r21, 0x44	; 68
    39b8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    39bc:	dc 01       	movw	r26, r24
    39be:	cb 01       	movw	r24, r22
    39c0:	8f 83       	std	Y+7, r24	; 0x07
    39c2:	98 87       	std	Y+8, r25	; 0x08
    39c4:	a9 87       	std	Y+9, r26	; 0x09
    39c6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    39c8:	6f 81       	ldd	r22, Y+7	; 0x07
    39ca:	78 85       	ldd	r23, Y+8	; 0x08
    39cc:	89 85       	ldd	r24, Y+9	; 0x09
    39ce:	9a 85       	ldd	r25, Y+10	; 0x0a
    39d0:	20 e0       	ldi	r18, 0x00	; 0
    39d2:	30 e0       	ldi	r19, 0x00	; 0
    39d4:	40 e8       	ldi	r20, 0x80	; 128
    39d6:	5f e3       	ldi	r21, 0x3F	; 63
    39d8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    39dc:	88 23       	and	r24, r24
    39de:	2c f4       	brge	.+10     	; 0x39ea <SM_VoidServo_APP+0x844>
		__ticks = 1;
    39e0:	81 e0       	ldi	r24, 0x01	; 1
    39e2:	90 e0       	ldi	r25, 0x00	; 0
    39e4:	9e 83       	std	Y+6, r25	; 0x06
    39e6:	8d 83       	std	Y+5, r24	; 0x05
    39e8:	3f c0       	rjmp	.+126    	; 0x3a68 <SM_VoidServo_APP+0x8c2>
	else if (__tmp > 65535)
    39ea:	6f 81       	ldd	r22, Y+7	; 0x07
    39ec:	78 85       	ldd	r23, Y+8	; 0x08
    39ee:	89 85       	ldd	r24, Y+9	; 0x09
    39f0:	9a 85       	ldd	r25, Y+10	; 0x0a
    39f2:	20 e0       	ldi	r18, 0x00	; 0
    39f4:	3f ef       	ldi	r19, 0xFF	; 255
    39f6:	4f e7       	ldi	r20, 0x7F	; 127
    39f8:	57 e4       	ldi	r21, 0x47	; 71
    39fa:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    39fe:	18 16       	cp	r1, r24
    3a00:	4c f5       	brge	.+82     	; 0x3a54 <SM_VoidServo_APP+0x8ae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3a02:	6b 85       	ldd	r22, Y+11	; 0x0b
    3a04:	7c 85       	ldd	r23, Y+12	; 0x0c
    3a06:	8d 85       	ldd	r24, Y+13	; 0x0d
    3a08:	9e 85       	ldd	r25, Y+14	; 0x0e
    3a0a:	20 e0       	ldi	r18, 0x00	; 0
    3a0c:	30 e0       	ldi	r19, 0x00	; 0
    3a0e:	40 e2       	ldi	r20, 0x20	; 32
    3a10:	51 e4       	ldi	r21, 0x41	; 65
    3a12:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a16:	dc 01       	movw	r26, r24
    3a18:	cb 01       	movw	r24, r22
    3a1a:	bc 01       	movw	r22, r24
    3a1c:	cd 01       	movw	r24, r26
    3a1e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a22:	dc 01       	movw	r26, r24
    3a24:	cb 01       	movw	r24, r22
    3a26:	9e 83       	std	Y+6, r25	; 0x06
    3a28:	8d 83       	std	Y+5, r24	; 0x05
    3a2a:	0f c0       	rjmp	.+30     	; 0x3a4a <SM_VoidServo_APP+0x8a4>
    3a2c:	88 ec       	ldi	r24, 0xC8	; 200
    3a2e:	90 e0       	ldi	r25, 0x00	; 0
    3a30:	9c 83       	std	Y+4, r25	; 0x04
    3a32:	8b 83       	std	Y+3, r24	; 0x03
    3a34:	8b 81       	ldd	r24, Y+3	; 0x03
    3a36:	9c 81       	ldd	r25, Y+4	; 0x04
    3a38:	01 97       	sbiw	r24, 0x01	; 1
    3a3a:	f1 f7       	brne	.-4      	; 0x3a38 <SM_VoidServo_APP+0x892>
    3a3c:	9c 83       	std	Y+4, r25	; 0x04
    3a3e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3a40:	8d 81       	ldd	r24, Y+5	; 0x05
    3a42:	9e 81       	ldd	r25, Y+6	; 0x06
    3a44:	01 97       	sbiw	r24, 0x01	; 1
    3a46:	9e 83       	std	Y+6, r25	; 0x06
    3a48:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3a4a:	8d 81       	ldd	r24, Y+5	; 0x05
    3a4c:	9e 81       	ldd	r25, Y+6	; 0x06
    3a4e:	00 97       	sbiw	r24, 0x00	; 0
    3a50:	69 f7       	brne	.-38     	; 0x3a2c <SM_VoidServo_APP+0x886>
    3a52:	14 c0       	rjmp	.+40     	; 0x3a7c <SM_VoidServo_APP+0x8d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3a54:	6f 81       	ldd	r22, Y+7	; 0x07
    3a56:	78 85       	ldd	r23, Y+8	; 0x08
    3a58:	89 85       	ldd	r24, Y+9	; 0x09
    3a5a:	9a 85       	ldd	r25, Y+10	; 0x0a
    3a5c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a60:	dc 01       	movw	r26, r24
    3a62:	cb 01       	movw	r24, r22
    3a64:	9e 83       	std	Y+6, r25	; 0x06
    3a66:	8d 83       	std	Y+5, r24	; 0x05
    3a68:	8d 81       	ldd	r24, Y+5	; 0x05
    3a6a:	9e 81       	ldd	r25, Y+6	; 0x06
    3a6c:	9a 83       	std	Y+2, r25	; 0x02
    3a6e:	89 83       	std	Y+1, r24	; 0x01
    3a70:	89 81       	ldd	r24, Y+1	; 0x01
    3a72:	9a 81       	ldd	r25, Y+2	; 0x02
    3a74:	01 97       	sbiw	r24, 0x01	; 1
    3a76:	f1 f7       	brne	.-4      	; 0x3a74 <SM_VoidServo_APP+0x8ce>
    3a78:	9a 83       	std	Y+2, r25	; 0x02
    3a7a:	89 83       	std	Y+1, r24	; 0x01
			 _delay_ms(500);
			 LCD_VoidSendCommand(1);
    3a7c:	81 e0       	ldi	r24, 0x01	; 1
    3a7e:	0e 94 86 0e 	call	0x1d0c	; 0x1d0c <LCD_VoidSendCommand>
			 LCD_u8WriteString("CHOOSE ANGLE: ");
    3a82:	8d e6       	ldi	r24, 0x6D	; 109
    3a84:	90 e0       	ldi	r25, 0x00	; 0
    3a86:	0e 94 3d 17 	call	0x2e7a	; 0x2e7a <LCD_u8WriteString>
    3a8a:	9a cb       	rjmp	.-2252   	; 0x31c0 <SM_VoidServo_APP+0x1a>
			 goto serv;
        }
    }
    else if (Pressed_Key == 'c')
    3a8c:	fe 01       	movw	r30, r28
    3a8e:	ec 59       	subi	r30, 0x9C	; 156
    3a90:	ff 4f       	sbci	r31, 0xFF	; 255
    3a92:	80 81       	ld	r24, Z
    3a94:	83 36       	cpi	r24, 0x63	; 99
    3a96:	09 f0       	breq	.+2      	; 0x3a9a <SM_VoidServo_APP+0x8f4>
    3a98:	93 cb       	rjmp	.-2266   	; 0x31c0 <SM_VoidServo_APP+0x1a>
    {  // if clear
        LCD_VoidSendCommand(1);
    3a9a:	81 e0       	ldi	r24, 0x01	; 1
    3a9c:	0e 94 86 0e 	call	0x1d0c	; 0x1d0c <LCD_VoidSendCommand>
        mine = 0;
    3aa0:	10 92 96 03 	sts	0x0396, r1
    3aa4:	10 92 95 03 	sts	0x0395, r1
        isNegative = 0;
    3aa8:	10 92 83 03 	sts	0x0383, r1
        break;

    }
	}
    3aac:	cc 59       	subi	r28, 0x9C	; 156
    3aae:	df 4f       	sbci	r29, 0xFF	; 255
    3ab0:	0f b6       	in	r0, 0x3f	; 63
    3ab2:	f8 94       	cli
    3ab4:	de bf       	out	0x3e, r29	; 62
    3ab6:	0f be       	out	0x3f, r0	; 63
    3ab8:	cd bf       	out	0x3d, r28	; 61
    3aba:	cf 91       	pop	r28
    3abc:	df 91       	pop	r29
    3abe:	1f 91       	pop	r17
    3ac0:	0f 91       	pop	r16
    3ac2:	08 95       	ret

00003ac4 <SM_U8LoginSys>:

}

	static u8 Select=0;
	u8 SM_U8LoginSys(void)
	 {
    3ac4:	0f 93       	push	r16
    3ac6:	1f 93       	push	r17
    3ac8:	df 93       	push	r29
    3aca:	cf 93       	push	r28
    3acc:	cd b7       	in	r28, 0x3d	; 61
    3ace:	de b7       	in	r29, 0x3e	; 62
    3ad0:	c8 5d       	subi	r28, 0xD8	; 216
    3ad2:	d0 40       	sbci	r29, 0x00	; 0
    3ad4:	0f b6       	in	r0, 0x3f	; 63
    3ad6:	f8 94       	cli
    3ad8:	de bf       	out	0x3e, r29	; 62
    3ada:	0f be       	out	0x3f, r0	; 63
    3adc:	cd bf       	out	0x3d, r28	; 61
		static u8 Local_U8ErrorState = ERROR_STATE_NOK;
		static u16 User_Pass=0;
	lable:	LCD_u8WriteString("USER NUMBER = ");
    3ade:	86 e9       	ldi	r24, 0x96	; 150
    3ae0:	90 e0       	ldi	r25, 0x00	; 0
    3ae2:	0e 94 3d 17 	call	0x2e7a	; 0x2e7a <LCD_u8WriteString>
    3ae6:	fe 01       	movw	r30, r28
    3ae8:	e1 53       	subi	r30, 0x31	; 49
    3aea:	ff 4f       	sbci	r31, 0xFF	; 255
    3aec:	80 e0       	ldi	r24, 0x00	; 0
    3aee:	90 e0       	ldi	r25, 0x00	; 0
    3af0:	af e2       	ldi	r26, 0x2F	; 47
    3af2:	b4 e4       	ldi	r27, 0x44	; 68
    3af4:	80 83       	st	Z, r24
    3af6:	91 83       	std	Z+1, r25	; 0x01
    3af8:	a2 83       	std	Z+2, r26	; 0x02
    3afa:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3afc:	8e 01       	movw	r16, r28
    3afe:	05 53       	subi	r16, 0x35	; 53
    3b00:	1f 4f       	sbci	r17, 0xFF	; 255
    3b02:	fe 01       	movw	r30, r28
    3b04:	e1 53       	subi	r30, 0x31	; 49
    3b06:	ff 4f       	sbci	r31, 0xFF	; 255
    3b08:	60 81       	ld	r22, Z
    3b0a:	71 81       	ldd	r23, Z+1	; 0x01
    3b0c:	82 81       	ldd	r24, Z+2	; 0x02
    3b0e:	93 81       	ldd	r25, Z+3	; 0x03
    3b10:	20 e0       	ldi	r18, 0x00	; 0
    3b12:	30 e0       	ldi	r19, 0x00	; 0
    3b14:	4a ef       	ldi	r20, 0xFA	; 250
    3b16:	54 e4       	ldi	r21, 0x44	; 68
    3b18:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b1c:	dc 01       	movw	r26, r24
    3b1e:	cb 01       	movw	r24, r22
    3b20:	f8 01       	movw	r30, r16
    3b22:	80 83       	st	Z, r24
    3b24:	91 83       	std	Z+1, r25	; 0x01
    3b26:	a2 83       	std	Z+2, r26	; 0x02
    3b28:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3b2a:	fe 01       	movw	r30, r28
    3b2c:	e5 53       	subi	r30, 0x35	; 53
    3b2e:	ff 4f       	sbci	r31, 0xFF	; 255
    3b30:	60 81       	ld	r22, Z
    3b32:	71 81       	ldd	r23, Z+1	; 0x01
    3b34:	82 81       	ldd	r24, Z+2	; 0x02
    3b36:	93 81       	ldd	r25, Z+3	; 0x03
    3b38:	20 e0       	ldi	r18, 0x00	; 0
    3b3a:	30 e0       	ldi	r19, 0x00	; 0
    3b3c:	40 e8       	ldi	r20, 0x80	; 128
    3b3e:	5f e3       	ldi	r21, 0x3F	; 63
    3b40:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3b44:	88 23       	and	r24, r24
    3b46:	44 f4       	brge	.+16     	; 0x3b58 <SM_U8LoginSys+0x94>
		__ticks = 1;
    3b48:	fe 01       	movw	r30, r28
    3b4a:	e7 53       	subi	r30, 0x37	; 55
    3b4c:	ff 4f       	sbci	r31, 0xFF	; 255
    3b4e:	81 e0       	ldi	r24, 0x01	; 1
    3b50:	90 e0       	ldi	r25, 0x00	; 0
    3b52:	91 83       	std	Z+1, r25	; 0x01
    3b54:	80 83       	st	Z, r24
    3b56:	64 c0       	rjmp	.+200    	; 0x3c20 <SM_U8LoginSys+0x15c>
	else if (__tmp > 65535)
    3b58:	fe 01       	movw	r30, r28
    3b5a:	e5 53       	subi	r30, 0x35	; 53
    3b5c:	ff 4f       	sbci	r31, 0xFF	; 255
    3b5e:	60 81       	ld	r22, Z
    3b60:	71 81       	ldd	r23, Z+1	; 0x01
    3b62:	82 81       	ldd	r24, Z+2	; 0x02
    3b64:	93 81       	ldd	r25, Z+3	; 0x03
    3b66:	20 e0       	ldi	r18, 0x00	; 0
    3b68:	3f ef       	ldi	r19, 0xFF	; 255
    3b6a:	4f e7       	ldi	r20, 0x7F	; 127
    3b6c:	57 e4       	ldi	r21, 0x47	; 71
    3b6e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3b72:	18 16       	cp	r1, r24
    3b74:	0c f0       	brlt	.+2      	; 0x3b78 <SM_U8LoginSys+0xb4>
    3b76:	43 c0       	rjmp	.+134    	; 0x3bfe <SM_U8LoginSys+0x13a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3b78:	fe 01       	movw	r30, r28
    3b7a:	e1 53       	subi	r30, 0x31	; 49
    3b7c:	ff 4f       	sbci	r31, 0xFF	; 255
    3b7e:	60 81       	ld	r22, Z
    3b80:	71 81       	ldd	r23, Z+1	; 0x01
    3b82:	82 81       	ldd	r24, Z+2	; 0x02
    3b84:	93 81       	ldd	r25, Z+3	; 0x03
    3b86:	20 e0       	ldi	r18, 0x00	; 0
    3b88:	30 e0       	ldi	r19, 0x00	; 0
    3b8a:	40 e2       	ldi	r20, 0x20	; 32
    3b8c:	51 e4       	ldi	r21, 0x41	; 65
    3b8e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b92:	dc 01       	movw	r26, r24
    3b94:	cb 01       	movw	r24, r22
    3b96:	8e 01       	movw	r16, r28
    3b98:	07 53       	subi	r16, 0x37	; 55
    3b9a:	1f 4f       	sbci	r17, 0xFF	; 255
    3b9c:	bc 01       	movw	r22, r24
    3b9e:	cd 01       	movw	r24, r26
    3ba0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3ba4:	dc 01       	movw	r26, r24
    3ba6:	cb 01       	movw	r24, r22
    3ba8:	f8 01       	movw	r30, r16
    3baa:	91 83       	std	Z+1, r25	; 0x01
    3bac:	80 83       	st	Z, r24
    3bae:	1f c0       	rjmp	.+62     	; 0x3bee <SM_U8LoginSys+0x12a>
    3bb0:	fe 01       	movw	r30, r28
    3bb2:	e9 53       	subi	r30, 0x39	; 57
    3bb4:	ff 4f       	sbci	r31, 0xFF	; 255
    3bb6:	88 ec       	ldi	r24, 0xC8	; 200
    3bb8:	90 e0       	ldi	r25, 0x00	; 0
    3bba:	91 83       	std	Z+1, r25	; 0x01
    3bbc:	80 83       	st	Z, r24
    3bbe:	fe 01       	movw	r30, r28
    3bc0:	e9 53       	subi	r30, 0x39	; 57
    3bc2:	ff 4f       	sbci	r31, 0xFF	; 255
    3bc4:	80 81       	ld	r24, Z
    3bc6:	91 81       	ldd	r25, Z+1	; 0x01
    3bc8:	01 97       	sbiw	r24, 0x01	; 1
    3bca:	f1 f7       	brne	.-4      	; 0x3bc8 <SM_U8LoginSys+0x104>
    3bcc:	fe 01       	movw	r30, r28
    3bce:	e9 53       	subi	r30, 0x39	; 57
    3bd0:	ff 4f       	sbci	r31, 0xFF	; 255
    3bd2:	91 83       	std	Z+1, r25	; 0x01
    3bd4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3bd6:	de 01       	movw	r26, r28
    3bd8:	a7 53       	subi	r26, 0x37	; 55
    3bda:	bf 4f       	sbci	r27, 0xFF	; 255
    3bdc:	fe 01       	movw	r30, r28
    3bde:	e7 53       	subi	r30, 0x37	; 55
    3be0:	ff 4f       	sbci	r31, 0xFF	; 255
    3be2:	80 81       	ld	r24, Z
    3be4:	91 81       	ldd	r25, Z+1	; 0x01
    3be6:	01 97       	sbiw	r24, 0x01	; 1
    3be8:	11 96       	adiw	r26, 0x01	; 1
    3bea:	9c 93       	st	X, r25
    3bec:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3bee:	fe 01       	movw	r30, r28
    3bf0:	e7 53       	subi	r30, 0x37	; 55
    3bf2:	ff 4f       	sbci	r31, 0xFF	; 255
    3bf4:	80 81       	ld	r24, Z
    3bf6:	91 81       	ldd	r25, Z+1	; 0x01
    3bf8:	00 97       	sbiw	r24, 0x00	; 0
    3bfa:	d1 f6       	brne	.-76     	; 0x3bb0 <SM_U8LoginSys+0xec>
    3bfc:	27 c0       	rjmp	.+78     	; 0x3c4c <SM_U8LoginSys+0x188>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3bfe:	8e 01       	movw	r16, r28
    3c00:	07 53       	subi	r16, 0x37	; 55
    3c02:	1f 4f       	sbci	r17, 0xFF	; 255
    3c04:	fe 01       	movw	r30, r28
    3c06:	e5 53       	subi	r30, 0x35	; 53
    3c08:	ff 4f       	sbci	r31, 0xFF	; 255
    3c0a:	60 81       	ld	r22, Z
    3c0c:	71 81       	ldd	r23, Z+1	; 0x01
    3c0e:	82 81       	ldd	r24, Z+2	; 0x02
    3c10:	93 81       	ldd	r25, Z+3	; 0x03
    3c12:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c16:	dc 01       	movw	r26, r24
    3c18:	cb 01       	movw	r24, r22
    3c1a:	f8 01       	movw	r30, r16
    3c1c:	91 83       	std	Z+1, r25	; 0x01
    3c1e:	80 83       	st	Z, r24
    3c20:	de 01       	movw	r26, r28
    3c22:	ab 53       	subi	r26, 0x3B	; 59
    3c24:	bf 4f       	sbci	r27, 0xFF	; 255
    3c26:	fe 01       	movw	r30, r28
    3c28:	e7 53       	subi	r30, 0x37	; 55
    3c2a:	ff 4f       	sbci	r31, 0xFF	; 255
    3c2c:	80 81       	ld	r24, Z
    3c2e:	91 81       	ldd	r25, Z+1	; 0x01
    3c30:	8d 93       	st	X+, r24
    3c32:	9c 93       	st	X, r25
    3c34:	fe 01       	movw	r30, r28
    3c36:	eb 53       	subi	r30, 0x3B	; 59
    3c38:	ff 4f       	sbci	r31, 0xFF	; 255
    3c3a:	80 81       	ld	r24, Z
    3c3c:	91 81       	ldd	r25, Z+1	; 0x01
    3c3e:	01 97       	sbiw	r24, 0x01	; 1
    3c40:	f1 f7       	brne	.-4      	; 0x3c3e <SM_U8LoginSys+0x17a>
    3c42:	fe 01       	movw	r30, r28
    3c44:	eb 53       	subi	r30, 0x3B	; 59
    3c46:	ff 4f       	sbci	r31, 0xFF	; 255
    3c48:	91 83       	std	Z+1, r25	; 0x01
    3c4a:	80 83       	st	Z, r24
		_delay_ms(700);


		while(1)
		{
		KPAD_U8GetPressedKey(&Select);
    3c4c:	87 e9       	ldi	r24, 0x97	; 151
    3c4e:	93 e0       	ldi	r25, 0x03	; 3
    3c50:	0e 94 54 0d 	call	0x1aa8	; 0x1aa8 <KPAD_U8GetPressedKey>

		if((Select !=255) &&(Select != '='))
    3c54:	80 91 97 03 	lds	r24, 0x0397
    3c58:	8f 3f       	cpi	r24, 0xFF	; 255
    3c5a:	c1 f3       	breq	.-16     	; 0x3c4c <SM_U8LoginSys+0x188>
    3c5c:	80 91 97 03 	lds	r24, 0x0397
    3c60:	8d 33       	cpi	r24, 0x3D	; 61
    3c62:	a1 f3       	breq	.-24     	; 0x3c4c <SM_U8LoginSys+0x188>
		{

			if((Select != 'c'))
    3c64:	80 91 97 03 	lds	r24, 0x0397
    3c68:	83 36       	cpi	r24, 0x63	; 99
    3c6a:	21 f0       	breq	.+8      	; 0x3c74 <SM_U8LoginSys+0x1b0>
			{
				LCD_VoidSendData(Select);
    3c6c:	80 91 97 03 	lds	r24, 0x0397
    3c70:	0e 94 00 13 	call	0x2600	; 0x2600 <LCD_VoidSendData>
			}


			switch(Select)
    3c74:	80 91 97 03 	lds	r24, 0x0397
    3c78:	28 2f       	mov	r18, r24
    3c7a:	30 e0       	ldi	r19, 0x00	; 0
    3c7c:	c9 52       	subi	r28, 0x29	; 41
    3c7e:	df 4f       	sbci	r29, 0xFF	; 255
    3c80:	39 83       	std	Y+1, r19	; 0x01
    3c82:	28 83       	st	Y, r18
    3c84:	c7 5d       	subi	r28, 0xD7	; 215
    3c86:	d0 40       	sbci	r29, 0x00	; 0
    3c88:	c9 52       	subi	r28, 0x29	; 41
    3c8a:	df 4f       	sbci	r29, 0xFF	; 255
    3c8c:	88 81       	ld	r24, Y
    3c8e:	99 81       	ldd	r25, Y+1	; 0x01
    3c90:	c7 5d       	subi	r28, 0xD7	; 215
    3c92:	d0 40       	sbci	r29, 0x00	; 0
    3c94:	81 33       	cpi	r24, 0x31	; 49
    3c96:	91 05       	cpc	r25, r1
    3c98:	09 f4       	brne	.+2      	; 0x3c9c <SM_U8LoginSys+0x1d8>
    3c9a:	75 c3       	rjmp	.+1770   	; 0x4386 <SM_U8LoginSys+0x8c2>
    3c9c:	c9 52       	subi	r28, 0x29	; 41
    3c9e:	df 4f       	sbci	r29, 0xFF	; 255
    3ca0:	e8 81       	ld	r30, Y
    3ca2:	f9 81       	ldd	r31, Y+1	; 0x01
    3ca4:	c7 5d       	subi	r28, 0xD7	; 215
    3ca6:	d0 40       	sbci	r29, 0x00	; 0
    3ca8:	e2 33       	cpi	r30, 0x32	; 50
    3caa:	f1 05       	cpc	r31, r1
    3cac:	5c f4       	brge	.+22     	; 0x3cc4 <SM_U8LoginSys+0x200>
    3cae:	c9 52       	subi	r28, 0x29	; 41
    3cb0:	df 4f       	sbci	r29, 0xFF	; 255
    3cb2:	28 81       	ld	r18, Y
    3cb4:	39 81       	ldd	r19, Y+1	; 0x01
    3cb6:	c7 5d       	subi	r28, 0xD7	; 215
    3cb8:	d0 40       	sbci	r29, 0x00	; 0
    3cba:	20 33       	cpi	r18, 0x30	; 48
    3cbc:	31 05       	cpc	r19, r1
    3cbe:	c9 f0       	breq	.+50     	; 0x3cf2 <SM_U8LoginSys+0x22e>
    3cc0:	0c 94 1d 28 	jmp	0x503a	; 0x503a <SM_U8LoginSys+0x1576>
    3cc4:	c9 52       	subi	r28, 0x29	; 41
    3cc6:	df 4f       	sbci	r29, 0xFF	; 255
    3cc8:	88 81       	ld	r24, Y
    3cca:	99 81       	ldd	r25, Y+1	; 0x01
    3ccc:	c7 5d       	subi	r28, 0xD7	; 215
    3cce:	d0 40       	sbci	r29, 0x00	; 0
    3cd0:	82 33       	cpi	r24, 0x32	; 50
    3cd2:	91 05       	cpc	r25, r1
    3cd4:	09 f4       	brne	.+2      	; 0x3cd8 <SM_U8LoginSys+0x214>
    3cd6:	a0 c6       	rjmp	.+3392   	; 0x4a18 <SM_U8LoginSys+0xf54>
    3cd8:	c9 52       	subi	r28, 0x29	; 41
    3cda:	df 4f       	sbci	r29, 0xFF	; 255
    3cdc:	e8 81       	ld	r30, Y
    3cde:	f9 81       	ldd	r31, Y+1	; 0x01
    3ce0:	c7 5d       	subi	r28, 0xD7	; 215
    3ce2:	d0 40       	sbci	r29, 0x00	; 0
    3ce4:	e3 36       	cpi	r30, 0x63	; 99
    3ce6:	f1 05       	cpc	r31, r1
    3ce8:	11 f4       	brne	.+4      	; 0x3cee <SM_U8LoginSys+0x22a>
    3cea:	0c 94 a6 27 	jmp	0x4f4c	; 0x4f4c <SM_U8LoginSys+0x1488>
    3cee:	0c 94 1d 28 	jmp	0x503a	; 0x503a <SM_U8LoginSys+0x1576>
			{
				case '0':
				{
					LCD_VoidGoToRowCol(1,0);
    3cf2:	81 e0       	ldi	r24, 0x01	; 1
    3cf4:	60 e0       	ldi	r22, 0x00	; 0
    3cf6:	0e 94 85 16 	call	0x2d0a	; 0x2d0a <LCD_VoidGoToRowCol>
					LCD_u8WriteString("WELCOME USER_0");
    3cfa:	85 ea       	ldi	r24, 0xA5	; 165
    3cfc:	90 e0       	ldi	r25, 0x00	; 0
    3cfe:	0e 94 3d 17 	call	0x2e7a	; 0x2e7a <LCD_u8WriteString>
    3d02:	fe 01       	movw	r30, r28
    3d04:	ef 53       	subi	r30, 0x3F	; 63
    3d06:	ff 4f       	sbci	r31, 0xFF	; 255
    3d08:	80 e0       	ldi	r24, 0x00	; 0
    3d0a:	90 e0       	ldi	r25, 0x00	; 0
    3d0c:	aa e7       	ldi	r26, 0x7A	; 122
    3d0e:	b4 e4       	ldi	r27, 0x44	; 68
    3d10:	80 83       	st	Z, r24
    3d12:	91 83       	std	Z+1, r25	; 0x01
    3d14:	a2 83       	std	Z+2, r26	; 0x02
    3d16:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3d18:	8e 01       	movw	r16, r28
    3d1a:	03 54       	subi	r16, 0x43	; 67
    3d1c:	1f 4f       	sbci	r17, 0xFF	; 255
    3d1e:	fe 01       	movw	r30, r28
    3d20:	ef 53       	subi	r30, 0x3F	; 63
    3d22:	ff 4f       	sbci	r31, 0xFF	; 255
    3d24:	60 81       	ld	r22, Z
    3d26:	71 81       	ldd	r23, Z+1	; 0x01
    3d28:	82 81       	ldd	r24, Z+2	; 0x02
    3d2a:	93 81       	ldd	r25, Z+3	; 0x03
    3d2c:	20 e0       	ldi	r18, 0x00	; 0
    3d2e:	30 e0       	ldi	r19, 0x00	; 0
    3d30:	4a ef       	ldi	r20, 0xFA	; 250
    3d32:	54 e4       	ldi	r21, 0x44	; 68
    3d34:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3d38:	dc 01       	movw	r26, r24
    3d3a:	cb 01       	movw	r24, r22
    3d3c:	f8 01       	movw	r30, r16
    3d3e:	80 83       	st	Z, r24
    3d40:	91 83       	std	Z+1, r25	; 0x01
    3d42:	a2 83       	std	Z+2, r26	; 0x02
    3d44:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3d46:	fe 01       	movw	r30, r28
    3d48:	e3 54       	subi	r30, 0x43	; 67
    3d4a:	ff 4f       	sbci	r31, 0xFF	; 255
    3d4c:	60 81       	ld	r22, Z
    3d4e:	71 81       	ldd	r23, Z+1	; 0x01
    3d50:	82 81       	ldd	r24, Z+2	; 0x02
    3d52:	93 81       	ldd	r25, Z+3	; 0x03
    3d54:	20 e0       	ldi	r18, 0x00	; 0
    3d56:	30 e0       	ldi	r19, 0x00	; 0
    3d58:	40 e8       	ldi	r20, 0x80	; 128
    3d5a:	5f e3       	ldi	r21, 0x3F	; 63
    3d5c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3d60:	88 23       	and	r24, r24
    3d62:	44 f4       	brge	.+16     	; 0x3d74 <SM_U8LoginSys+0x2b0>
		__ticks = 1;
    3d64:	fe 01       	movw	r30, r28
    3d66:	e5 54       	subi	r30, 0x45	; 69
    3d68:	ff 4f       	sbci	r31, 0xFF	; 255
    3d6a:	81 e0       	ldi	r24, 0x01	; 1
    3d6c:	90 e0       	ldi	r25, 0x00	; 0
    3d6e:	91 83       	std	Z+1, r25	; 0x01
    3d70:	80 83       	st	Z, r24
    3d72:	64 c0       	rjmp	.+200    	; 0x3e3c <SM_U8LoginSys+0x378>
	else if (__tmp > 65535)
    3d74:	fe 01       	movw	r30, r28
    3d76:	e3 54       	subi	r30, 0x43	; 67
    3d78:	ff 4f       	sbci	r31, 0xFF	; 255
    3d7a:	60 81       	ld	r22, Z
    3d7c:	71 81       	ldd	r23, Z+1	; 0x01
    3d7e:	82 81       	ldd	r24, Z+2	; 0x02
    3d80:	93 81       	ldd	r25, Z+3	; 0x03
    3d82:	20 e0       	ldi	r18, 0x00	; 0
    3d84:	3f ef       	ldi	r19, 0xFF	; 255
    3d86:	4f e7       	ldi	r20, 0x7F	; 127
    3d88:	57 e4       	ldi	r21, 0x47	; 71
    3d8a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3d8e:	18 16       	cp	r1, r24
    3d90:	0c f0       	brlt	.+2      	; 0x3d94 <SM_U8LoginSys+0x2d0>
    3d92:	43 c0       	rjmp	.+134    	; 0x3e1a <SM_U8LoginSys+0x356>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3d94:	fe 01       	movw	r30, r28
    3d96:	ef 53       	subi	r30, 0x3F	; 63
    3d98:	ff 4f       	sbci	r31, 0xFF	; 255
    3d9a:	60 81       	ld	r22, Z
    3d9c:	71 81       	ldd	r23, Z+1	; 0x01
    3d9e:	82 81       	ldd	r24, Z+2	; 0x02
    3da0:	93 81       	ldd	r25, Z+3	; 0x03
    3da2:	20 e0       	ldi	r18, 0x00	; 0
    3da4:	30 e0       	ldi	r19, 0x00	; 0
    3da6:	40 e2       	ldi	r20, 0x20	; 32
    3da8:	51 e4       	ldi	r21, 0x41	; 65
    3daa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3dae:	dc 01       	movw	r26, r24
    3db0:	cb 01       	movw	r24, r22
    3db2:	8e 01       	movw	r16, r28
    3db4:	05 54       	subi	r16, 0x45	; 69
    3db6:	1f 4f       	sbci	r17, 0xFF	; 255
    3db8:	bc 01       	movw	r22, r24
    3dba:	cd 01       	movw	r24, r26
    3dbc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3dc0:	dc 01       	movw	r26, r24
    3dc2:	cb 01       	movw	r24, r22
    3dc4:	f8 01       	movw	r30, r16
    3dc6:	91 83       	std	Z+1, r25	; 0x01
    3dc8:	80 83       	st	Z, r24
    3dca:	1f c0       	rjmp	.+62     	; 0x3e0a <SM_U8LoginSys+0x346>
    3dcc:	fe 01       	movw	r30, r28
    3dce:	e7 54       	subi	r30, 0x47	; 71
    3dd0:	ff 4f       	sbci	r31, 0xFF	; 255
    3dd2:	88 ec       	ldi	r24, 0xC8	; 200
    3dd4:	90 e0       	ldi	r25, 0x00	; 0
    3dd6:	91 83       	std	Z+1, r25	; 0x01
    3dd8:	80 83       	st	Z, r24
    3dda:	fe 01       	movw	r30, r28
    3ddc:	e7 54       	subi	r30, 0x47	; 71
    3dde:	ff 4f       	sbci	r31, 0xFF	; 255
    3de0:	80 81       	ld	r24, Z
    3de2:	91 81       	ldd	r25, Z+1	; 0x01
    3de4:	01 97       	sbiw	r24, 0x01	; 1
    3de6:	f1 f7       	brne	.-4      	; 0x3de4 <SM_U8LoginSys+0x320>
    3de8:	fe 01       	movw	r30, r28
    3dea:	e7 54       	subi	r30, 0x47	; 71
    3dec:	ff 4f       	sbci	r31, 0xFF	; 255
    3dee:	91 83       	std	Z+1, r25	; 0x01
    3df0:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3df2:	de 01       	movw	r26, r28
    3df4:	a5 54       	subi	r26, 0x45	; 69
    3df6:	bf 4f       	sbci	r27, 0xFF	; 255
    3df8:	fe 01       	movw	r30, r28
    3dfa:	e5 54       	subi	r30, 0x45	; 69
    3dfc:	ff 4f       	sbci	r31, 0xFF	; 255
    3dfe:	80 81       	ld	r24, Z
    3e00:	91 81       	ldd	r25, Z+1	; 0x01
    3e02:	01 97       	sbiw	r24, 0x01	; 1
    3e04:	11 96       	adiw	r26, 0x01	; 1
    3e06:	9c 93       	st	X, r25
    3e08:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3e0a:	fe 01       	movw	r30, r28
    3e0c:	e5 54       	subi	r30, 0x45	; 69
    3e0e:	ff 4f       	sbci	r31, 0xFF	; 255
    3e10:	80 81       	ld	r24, Z
    3e12:	91 81       	ldd	r25, Z+1	; 0x01
    3e14:	00 97       	sbiw	r24, 0x00	; 0
    3e16:	d1 f6       	brne	.-76     	; 0x3dcc <SM_U8LoginSys+0x308>
    3e18:	27 c0       	rjmp	.+78     	; 0x3e68 <SM_U8LoginSys+0x3a4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3e1a:	8e 01       	movw	r16, r28
    3e1c:	05 54       	subi	r16, 0x45	; 69
    3e1e:	1f 4f       	sbci	r17, 0xFF	; 255
    3e20:	fe 01       	movw	r30, r28
    3e22:	e3 54       	subi	r30, 0x43	; 67
    3e24:	ff 4f       	sbci	r31, 0xFF	; 255
    3e26:	60 81       	ld	r22, Z
    3e28:	71 81       	ldd	r23, Z+1	; 0x01
    3e2a:	82 81       	ldd	r24, Z+2	; 0x02
    3e2c:	93 81       	ldd	r25, Z+3	; 0x03
    3e2e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3e32:	dc 01       	movw	r26, r24
    3e34:	cb 01       	movw	r24, r22
    3e36:	f8 01       	movw	r30, r16
    3e38:	91 83       	std	Z+1, r25	; 0x01
    3e3a:	80 83       	st	Z, r24
    3e3c:	de 01       	movw	r26, r28
    3e3e:	a9 54       	subi	r26, 0x49	; 73
    3e40:	bf 4f       	sbci	r27, 0xFF	; 255
    3e42:	fe 01       	movw	r30, r28
    3e44:	e5 54       	subi	r30, 0x45	; 69
    3e46:	ff 4f       	sbci	r31, 0xFF	; 255
    3e48:	80 81       	ld	r24, Z
    3e4a:	91 81       	ldd	r25, Z+1	; 0x01
    3e4c:	8d 93       	st	X+, r24
    3e4e:	9c 93       	st	X, r25
    3e50:	fe 01       	movw	r30, r28
    3e52:	e9 54       	subi	r30, 0x49	; 73
    3e54:	ff 4f       	sbci	r31, 0xFF	; 255
    3e56:	80 81       	ld	r24, Z
    3e58:	91 81       	ldd	r25, Z+1	; 0x01
    3e5a:	01 97       	sbiw	r24, 0x01	; 1
    3e5c:	f1 f7       	brne	.-4      	; 0x3e5a <SM_U8LoginSys+0x396>
    3e5e:	fe 01       	movw	r30, r28
    3e60:	e9 54       	subi	r30, 0x49	; 73
    3e62:	ff 4f       	sbci	r31, 0xFF	; 255
    3e64:	91 83       	std	Z+1, r25	; 0x01
    3e66:	80 83       	st	Z, r24

					_delay_ms(1000);
					LCD_VoidSendCommand(1);
    3e68:	81 e0       	ldi	r24, 0x01	; 1
    3e6a:	0e 94 86 0e 	call	0x1d0c	; 0x1d0c <LCD_VoidSendCommand>
					for(u8 i=0;i<3;i++)
    3e6e:	fe 01       	movw	r30, r28
    3e70:	eb 52       	subi	r30, 0x2B	; 43
    3e72:	ff 4f       	sbci	r31, 0xFF	; 255
    3e74:	10 82       	st	Z, r1
    3e76:	7f c2       	rjmp	.+1278   	; 0x4376 <SM_U8LoginSys+0x8b2>
					{
						LCD_u8WriteString("ENTER YOUR PASS");
    3e78:	84 eb       	ldi	r24, 0xB4	; 180
    3e7a:	90 e0       	ldi	r25, 0x00	; 0
    3e7c:	0e 94 3d 17 	call	0x2e7a	; 0x2e7a <LCD_u8WriteString>
    3e80:	fe 01       	movw	r30, r28
    3e82:	ed 54       	subi	r30, 0x4D	; 77
    3e84:	ff 4f       	sbci	r31, 0xFF	; 255
    3e86:	80 e0       	ldi	r24, 0x00	; 0
    3e88:	90 e0       	ldi	r25, 0x00	; 0
    3e8a:	af e2       	ldi	r26, 0x2F	; 47
    3e8c:	b4 e4       	ldi	r27, 0x44	; 68
    3e8e:	80 83       	st	Z, r24
    3e90:	91 83       	std	Z+1, r25	; 0x01
    3e92:	a2 83       	std	Z+2, r26	; 0x02
    3e94:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3e96:	8e 01       	movw	r16, r28
    3e98:	01 55       	subi	r16, 0x51	; 81
    3e9a:	1f 4f       	sbci	r17, 0xFF	; 255
    3e9c:	fe 01       	movw	r30, r28
    3e9e:	ed 54       	subi	r30, 0x4D	; 77
    3ea0:	ff 4f       	sbci	r31, 0xFF	; 255
    3ea2:	60 81       	ld	r22, Z
    3ea4:	71 81       	ldd	r23, Z+1	; 0x01
    3ea6:	82 81       	ldd	r24, Z+2	; 0x02
    3ea8:	93 81       	ldd	r25, Z+3	; 0x03
    3eaa:	20 e0       	ldi	r18, 0x00	; 0
    3eac:	30 e0       	ldi	r19, 0x00	; 0
    3eae:	4a ef       	ldi	r20, 0xFA	; 250
    3eb0:	54 e4       	ldi	r21, 0x44	; 68
    3eb2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3eb6:	dc 01       	movw	r26, r24
    3eb8:	cb 01       	movw	r24, r22
    3eba:	f8 01       	movw	r30, r16
    3ebc:	80 83       	st	Z, r24
    3ebe:	91 83       	std	Z+1, r25	; 0x01
    3ec0:	a2 83       	std	Z+2, r26	; 0x02
    3ec2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3ec4:	fe 01       	movw	r30, r28
    3ec6:	e1 55       	subi	r30, 0x51	; 81
    3ec8:	ff 4f       	sbci	r31, 0xFF	; 255
    3eca:	60 81       	ld	r22, Z
    3ecc:	71 81       	ldd	r23, Z+1	; 0x01
    3ece:	82 81       	ldd	r24, Z+2	; 0x02
    3ed0:	93 81       	ldd	r25, Z+3	; 0x03
    3ed2:	20 e0       	ldi	r18, 0x00	; 0
    3ed4:	30 e0       	ldi	r19, 0x00	; 0
    3ed6:	40 e8       	ldi	r20, 0x80	; 128
    3ed8:	5f e3       	ldi	r21, 0x3F	; 63
    3eda:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3ede:	88 23       	and	r24, r24
    3ee0:	44 f4       	brge	.+16     	; 0x3ef2 <SM_U8LoginSys+0x42e>
		__ticks = 1;
    3ee2:	fe 01       	movw	r30, r28
    3ee4:	e3 55       	subi	r30, 0x53	; 83
    3ee6:	ff 4f       	sbci	r31, 0xFF	; 255
    3ee8:	81 e0       	ldi	r24, 0x01	; 1
    3eea:	90 e0       	ldi	r25, 0x00	; 0
    3eec:	91 83       	std	Z+1, r25	; 0x01
    3eee:	80 83       	st	Z, r24
    3ef0:	64 c0       	rjmp	.+200    	; 0x3fba <SM_U8LoginSys+0x4f6>
	else if (__tmp > 65535)
    3ef2:	fe 01       	movw	r30, r28
    3ef4:	e1 55       	subi	r30, 0x51	; 81
    3ef6:	ff 4f       	sbci	r31, 0xFF	; 255
    3ef8:	60 81       	ld	r22, Z
    3efa:	71 81       	ldd	r23, Z+1	; 0x01
    3efc:	82 81       	ldd	r24, Z+2	; 0x02
    3efe:	93 81       	ldd	r25, Z+3	; 0x03
    3f00:	20 e0       	ldi	r18, 0x00	; 0
    3f02:	3f ef       	ldi	r19, 0xFF	; 255
    3f04:	4f e7       	ldi	r20, 0x7F	; 127
    3f06:	57 e4       	ldi	r21, 0x47	; 71
    3f08:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3f0c:	18 16       	cp	r1, r24
    3f0e:	0c f0       	brlt	.+2      	; 0x3f12 <SM_U8LoginSys+0x44e>
    3f10:	43 c0       	rjmp	.+134    	; 0x3f98 <SM_U8LoginSys+0x4d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3f12:	fe 01       	movw	r30, r28
    3f14:	ed 54       	subi	r30, 0x4D	; 77
    3f16:	ff 4f       	sbci	r31, 0xFF	; 255
    3f18:	60 81       	ld	r22, Z
    3f1a:	71 81       	ldd	r23, Z+1	; 0x01
    3f1c:	82 81       	ldd	r24, Z+2	; 0x02
    3f1e:	93 81       	ldd	r25, Z+3	; 0x03
    3f20:	20 e0       	ldi	r18, 0x00	; 0
    3f22:	30 e0       	ldi	r19, 0x00	; 0
    3f24:	40 e2       	ldi	r20, 0x20	; 32
    3f26:	51 e4       	ldi	r21, 0x41	; 65
    3f28:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3f2c:	dc 01       	movw	r26, r24
    3f2e:	cb 01       	movw	r24, r22
    3f30:	8e 01       	movw	r16, r28
    3f32:	03 55       	subi	r16, 0x53	; 83
    3f34:	1f 4f       	sbci	r17, 0xFF	; 255
    3f36:	bc 01       	movw	r22, r24
    3f38:	cd 01       	movw	r24, r26
    3f3a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3f3e:	dc 01       	movw	r26, r24
    3f40:	cb 01       	movw	r24, r22
    3f42:	f8 01       	movw	r30, r16
    3f44:	91 83       	std	Z+1, r25	; 0x01
    3f46:	80 83       	st	Z, r24
    3f48:	1f c0       	rjmp	.+62     	; 0x3f88 <SM_U8LoginSys+0x4c4>
    3f4a:	fe 01       	movw	r30, r28
    3f4c:	e5 55       	subi	r30, 0x55	; 85
    3f4e:	ff 4f       	sbci	r31, 0xFF	; 255
    3f50:	88 ec       	ldi	r24, 0xC8	; 200
    3f52:	90 e0       	ldi	r25, 0x00	; 0
    3f54:	91 83       	std	Z+1, r25	; 0x01
    3f56:	80 83       	st	Z, r24
    3f58:	fe 01       	movw	r30, r28
    3f5a:	e5 55       	subi	r30, 0x55	; 85
    3f5c:	ff 4f       	sbci	r31, 0xFF	; 255
    3f5e:	80 81       	ld	r24, Z
    3f60:	91 81       	ldd	r25, Z+1	; 0x01
    3f62:	01 97       	sbiw	r24, 0x01	; 1
    3f64:	f1 f7       	brne	.-4      	; 0x3f62 <SM_U8LoginSys+0x49e>
    3f66:	fe 01       	movw	r30, r28
    3f68:	e5 55       	subi	r30, 0x55	; 85
    3f6a:	ff 4f       	sbci	r31, 0xFF	; 255
    3f6c:	91 83       	std	Z+1, r25	; 0x01
    3f6e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3f70:	de 01       	movw	r26, r28
    3f72:	a3 55       	subi	r26, 0x53	; 83
    3f74:	bf 4f       	sbci	r27, 0xFF	; 255
    3f76:	fe 01       	movw	r30, r28
    3f78:	e3 55       	subi	r30, 0x53	; 83
    3f7a:	ff 4f       	sbci	r31, 0xFF	; 255
    3f7c:	80 81       	ld	r24, Z
    3f7e:	91 81       	ldd	r25, Z+1	; 0x01
    3f80:	01 97       	sbiw	r24, 0x01	; 1
    3f82:	11 96       	adiw	r26, 0x01	; 1
    3f84:	9c 93       	st	X, r25
    3f86:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3f88:	fe 01       	movw	r30, r28
    3f8a:	e3 55       	subi	r30, 0x53	; 83
    3f8c:	ff 4f       	sbci	r31, 0xFF	; 255
    3f8e:	80 81       	ld	r24, Z
    3f90:	91 81       	ldd	r25, Z+1	; 0x01
    3f92:	00 97       	sbiw	r24, 0x00	; 0
    3f94:	d1 f6       	brne	.-76     	; 0x3f4a <SM_U8LoginSys+0x486>
    3f96:	27 c0       	rjmp	.+78     	; 0x3fe6 <SM_U8LoginSys+0x522>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3f98:	8e 01       	movw	r16, r28
    3f9a:	03 55       	subi	r16, 0x53	; 83
    3f9c:	1f 4f       	sbci	r17, 0xFF	; 255
    3f9e:	fe 01       	movw	r30, r28
    3fa0:	e1 55       	subi	r30, 0x51	; 81
    3fa2:	ff 4f       	sbci	r31, 0xFF	; 255
    3fa4:	60 81       	ld	r22, Z
    3fa6:	71 81       	ldd	r23, Z+1	; 0x01
    3fa8:	82 81       	ldd	r24, Z+2	; 0x02
    3faa:	93 81       	ldd	r25, Z+3	; 0x03
    3fac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3fb0:	dc 01       	movw	r26, r24
    3fb2:	cb 01       	movw	r24, r22
    3fb4:	f8 01       	movw	r30, r16
    3fb6:	91 83       	std	Z+1, r25	; 0x01
    3fb8:	80 83       	st	Z, r24
    3fba:	de 01       	movw	r26, r28
    3fbc:	a7 55       	subi	r26, 0x57	; 87
    3fbe:	bf 4f       	sbci	r27, 0xFF	; 255
    3fc0:	fe 01       	movw	r30, r28
    3fc2:	e3 55       	subi	r30, 0x53	; 83
    3fc4:	ff 4f       	sbci	r31, 0xFF	; 255
    3fc6:	80 81       	ld	r24, Z
    3fc8:	91 81       	ldd	r25, Z+1	; 0x01
    3fca:	8d 93       	st	X+, r24
    3fcc:	9c 93       	st	X, r25
    3fce:	fe 01       	movw	r30, r28
    3fd0:	e7 55       	subi	r30, 0x57	; 87
    3fd2:	ff 4f       	sbci	r31, 0xFF	; 255
    3fd4:	80 81       	ld	r24, Z
    3fd6:	91 81       	ldd	r25, Z+1	; 0x01
    3fd8:	01 97       	sbiw	r24, 0x01	; 1
    3fda:	f1 f7       	brne	.-4      	; 0x3fd8 <SM_U8LoginSys+0x514>
    3fdc:	fe 01       	movw	r30, r28
    3fde:	e7 55       	subi	r30, 0x57	; 87
    3fe0:	ff 4f       	sbci	r31, 0xFF	; 255
    3fe2:	91 83       	std	Z+1, r25	; 0x01
    3fe4:	80 83       	st	Z, r24
						_delay_ms(700);
						LCD_VoidGoToRowCol(1,0);
    3fe6:	81 e0       	ldi	r24, 0x01	; 1
    3fe8:	60 e0       	ldi	r22, 0x00	; 0
    3fea:	0e 94 85 16 	call	0x2d0a	; 0x2d0a <LCD_VoidGoToRowCol>
						User_Pass= SM_U16EnterPassword();
    3fee:	0e 94 ac 28 	call	0x5158	; 0x5158 <SM_U16EnterPassword>
    3ff2:	90 93 99 03 	sts	0x0399, r25
    3ff6:	80 93 98 03 	sts	0x0398, r24
						if(User_Pass ==1111)
    3ffa:	80 91 98 03 	lds	r24, 0x0398
    3ffe:	90 91 99 03 	lds	r25, 0x0399
    4002:	f4 e0       	ldi	r31, 0x04	; 4
    4004:	87 35       	cpi	r24, 0x57	; 87
    4006:	9f 07       	cpc	r25, r31
    4008:	81 f4       	brne	.+32     	; 0x402a <SM_U8LoginSys+0x566>
						{

							LCD_u8WriteString("WELCOME ALI");
    400a:	84 ec       	ldi	r24, 0xC4	; 196
    400c:	90 e0       	ldi	r25, 0x00	; 0
    400e:	0e 94 3d 17 	call	0x2e7a	; 0x2e7a <LCD_u8WriteString>
							Local_U8ErrorState = ERROR_STATE_OK;
    4012:	81 e0       	ldi	r24, 0x01	; 1
    4014:	80 93 9a 03 	sts	0x039A, r24
							 return Local_U8ErrorState;
    4018:	20 91 9a 03 	lds	r18, 0x039A
    401c:	ca 52       	subi	r28, 0x2A	; 42
    401e:	df 4f       	sbci	r29, 0xFF	; 255
    4020:	28 83       	st	Y, r18
    4022:	c6 5d       	subi	r28, 0xD6	; 214
    4024:	d0 40       	sbci	r29, 0x00	; 0
    4026:	0c 94 9b 28 	jmp	0x5136	; 0x5136 <SM_U8LoginSys+0x1672>
						}
						else
						{
							LCD_u8WriteString("INCORRECT PASS");
    402a:	80 ed       	ldi	r24, 0xD0	; 208
    402c:	90 e0       	ldi	r25, 0x00	; 0
    402e:	0e 94 3d 17 	call	0x2e7a	; 0x2e7a <LCD_u8WriteString>
							LCD_VoidGoToRowCol(1,0);
    4032:	81 e0       	ldi	r24, 0x01	; 1
    4034:	60 e0       	ldi	r22, 0x00	; 0
    4036:	0e 94 85 16 	call	0x2d0a	; 0x2d0a <LCD_VoidGoToRowCol>
							LCD_u8WriteString("TRY AGAIN");
    403a:	8f ed       	ldi	r24, 0xDF	; 223
    403c:	90 e0       	ldi	r25, 0x00	; 0
    403e:	0e 94 3d 17 	call	0x2e7a	; 0x2e7a <LCD_u8WriteString>
    4042:	fe 01       	movw	r30, r28
    4044:	eb 55       	subi	r30, 0x5B	; 91
    4046:	ff 4f       	sbci	r31, 0xFF	; 255
    4048:	80 e0       	ldi	r24, 0x00	; 0
    404a:	90 e0       	ldi	r25, 0x00	; 0
    404c:	af e2       	ldi	r26, 0x2F	; 47
    404e:	b4 e4       	ldi	r27, 0x44	; 68
    4050:	80 83       	st	Z, r24
    4052:	91 83       	std	Z+1, r25	; 0x01
    4054:	a2 83       	std	Z+2, r26	; 0x02
    4056:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4058:	8e 01       	movw	r16, r28
    405a:	0f 55       	subi	r16, 0x5F	; 95
    405c:	1f 4f       	sbci	r17, 0xFF	; 255
    405e:	fe 01       	movw	r30, r28
    4060:	eb 55       	subi	r30, 0x5B	; 91
    4062:	ff 4f       	sbci	r31, 0xFF	; 255
    4064:	60 81       	ld	r22, Z
    4066:	71 81       	ldd	r23, Z+1	; 0x01
    4068:	82 81       	ldd	r24, Z+2	; 0x02
    406a:	93 81       	ldd	r25, Z+3	; 0x03
    406c:	20 e0       	ldi	r18, 0x00	; 0
    406e:	30 e0       	ldi	r19, 0x00	; 0
    4070:	4a ef       	ldi	r20, 0xFA	; 250
    4072:	54 e4       	ldi	r21, 0x44	; 68
    4074:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4078:	dc 01       	movw	r26, r24
    407a:	cb 01       	movw	r24, r22
    407c:	f8 01       	movw	r30, r16
    407e:	80 83       	st	Z, r24
    4080:	91 83       	std	Z+1, r25	; 0x01
    4082:	a2 83       	std	Z+2, r26	; 0x02
    4084:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4086:	fe 01       	movw	r30, r28
    4088:	ef 55       	subi	r30, 0x5F	; 95
    408a:	ff 4f       	sbci	r31, 0xFF	; 255
    408c:	60 81       	ld	r22, Z
    408e:	71 81       	ldd	r23, Z+1	; 0x01
    4090:	82 81       	ldd	r24, Z+2	; 0x02
    4092:	93 81       	ldd	r25, Z+3	; 0x03
    4094:	20 e0       	ldi	r18, 0x00	; 0
    4096:	30 e0       	ldi	r19, 0x00	; 0
    4098:	40 e8       	ldi	r20, 0x80	; 128
    409a:	5f e3       	ldi	r21, 0x3F	; 63
    409c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    40a0:	88 23       	and	r24, r24
    40a2:	44 f4       	brge	.+16     	; 0x40b4 <SM_U8LoginSys+0x5f0>
		__ticks = 1;
    40a4:	fe 01       	movw	r30, r28
    40a6:	e1 56       	subi	r30, 0x61	; 97
    40a8:	ff 4f       	sbci	r31, 0xFF	; 255
    40aa:	81 e0       	ldi	r24, 0x01	; 1
    40ac:	90 e0       	ldi	r25, 0x00	; 0
    40ae:	91 83       	std	Z+1, r25	; 0x01
    40b0:	80 83       	st	Z, r24
    40b2:	64 c0       	rjmp	.+200    	; 0x417c <SM_U8LoginSys+0x6b8>
	else if (__tmp > 65535)
    40b4:	fe 01       	movw	r30, r28
    40b6:	ef 55       	subi	r30, 0x5F	; 95
    40b8:	ff 4f       	sbci	r31, 0xFF	; 255
    40ba:	60 81       	ld	r22, Z
    40bc:	71 81       	ldd	r23, Z+1	; 0x01
    40be:	82 81       	ldd	r24, Z+2	; 0x02
    40c0:	93 81       	ldd	r25, Z+3	; 0x03
    40c2:	20 e0       	ldi	r18, 0x00	; 0
    40c4:	3f ef       	ldi	r19, 0xFF	; 255
    40c6:	4f e7       	ldi	r20, 0x7F	; 127
    40c8:	57 e4       	ldi	r21, 0x47	; 71
    40ca:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    40ce:	18 16       	cp	r1, r24
    40d0:	0c f0       	brlt	.+2      	; 0x40d4 <SM_U8LoginSys+0x610>
    40d2:	43 c0       	rjmp	.+134    	; 0x415a <SM_U8LoginSys+0x696>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    40d4:	fe 01       	movw	r30, r28
    40d6:	eb 55       	subi	r30, 0x5B	; 91
    40d8:	ff 4f       	sbci	r31, 0xFF	; 255
    40da:	60 81       	ld	r22, Z
    40dc:	71 81       	ldd	r23, Z+1	; 0x01
    40de:	82 81       	ldd	r24, Z+2	; 0x02
    40e0:	93 81       	ldd	r25, Z+3	; 0x03
    40e2:	20 e0       	ldi	r18, 0x00	; 0
    40e4:	30 e0       	ldi	r19, 0x00	; 0
    40e6:	40 e2       	ldi	r20, 0x20	; 32
    40e8:	51 e4       	ldi	r21, 0x41	; 65
    40ea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    40ee:	dc 01       	movw	r26, r24
    40f0:	cb 01       	movw	r24, r22
    40f2:	8e 01       	movw	r16, r28
    40f4:	01 56       	subi	r16, 0x61	; 97
    40f6:	1f 4f       	sbci	r17, 0xFF	; 255
    40f8:	bc 01       	movw	r22, r24
    40fa:	cd 01       	movw	r24, r26
    40fc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4100:	dc 01       	movw	r26, r24
    4102:	cb 01       	movw	r24, r22
    4104:	f8 01       	movw	r30, r16
    4106:	91 83       	std	Z+1, r25	; 0x01
    4108:	80 83       	st	Z, r24
    410a:	1f c0       	rjmp	.+62     	; 0x414a <SM_U8LoginSys+0x686>
    410c:	fe 01       	movw	r30, r28
    410e:	e3 56       	subi	r30, 0x63	; 99
    4110:	ff 4f       	sbci	r31, 0xFF	; 255
    4112:	88 ec       	ldi	r24, 0xC8	; 200
    4114:	90 e0       	ldi	r25, 0x00	; 0
    4116:	91 83       	std	Z+1, r25	; 0x01
    4118:	80 83       	st	Z, r24
    411a:	fe 01       	movw	r30, r28
    411c:	e3 56       	subi	r30, 0x63	; 99
    411e:	ff 4f       	sbci	r31, 0xFF	; 255
    4120:	80 81       	ld	r24, Z
    4122:	91 81       	ldd	r25, Z+1	; 0x01
    4124:	01 97       	sbiw	r24, 0x01	; 1
    4126:	f1 f7       	brne	.-4      	; 0x4124 <SM_U8LoginSys+0x660>
    4128:	fe 01       	movw	r30, r28
    412a:	e3 56       	subi	r30, 0x63	; 99
    412c:	ff 4f       	sbci	r31, 0xFF	; 255
    412e:	91 83       	std	Z+1, r25	; 0x01
    4130:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4132:	de 01       	movw	r26, r28
    4134:	a1 56       	subi	r26, 0x61	; 97
    4136:	bf 4f       	sbci	r27, 0xFF	; 255
    4138:	fe 01       	movw	r30, r28
    413a:	e1 56       	subi	r30, 0x61	; 97
    413c:	ff 4f       	sbci	r31, 0xFF	; 255
    413e:	80 81       	ld	r24, Z
    4140:	91 81       	ldd	r25, Z+1	; 0x01
    4142:	01 97       	sbiw	r24, 0x01	; 1
    4144:	11 96       	adiw	r26, 0x01	; 1
    4146:	9c 93       	st	X, r25
    4148:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    414a:	fe 01       	movw	r30, r28
    414c:	e1 56       	subi	r30, 0x61	; 97
    414e:	ff 4f       	sbci	r31, 0xFF	; 255
    4150:	80 81       	ld	r24, Z
    4152:	91 81       	ldd	r25, Z+1	; 0x01
    4154:	00 97       	sbiw	r24, 0x00	; 0
    4156:	d1 f6       	brne	.-76     	; 0x410c <SM_U8LoginSys+0x648>
    4158:	27 c0       	rjmp	.+78     	; 0x41a8 <SM_U8LoginSys+0x6e4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    415a:	8e 01       	movw	r16, r28
    415c:	01 56       	subi	r16, 0x61	; 97
    415e:	1f 4f       	sbci	r17, 0xFF	; 255
    4160:	fe 01       	movw	r30, r28
    4162:	ef 55       	subi	r30, 0x5F	; 95
    4164:	ff 4f       	sbci	r31, 0xFF	; 255
    4166:	60 81       	ld	r22, Z
    4168:	71 81       	ldd	r23, Z+1	; 0x01
    416a:	82 81       	ldd	r24, Z+2	; 0x02
    416c:	93 81       	ldd	r25, Z+3	; 0x03
    416e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4172:	dc 01       	movw	r26, r24
    4174:	cb 01       	movw	r24, r22
    4176:	f8 01       	movw	r30, r16
    4178:	91 83       	std	Z+1, r25	; 0x01
    417a:	80 83       	st	Z, r24
    417c:	de 01       	movw	r26, r28
    417e:	a5 56       	subi	r26, 0x65	; 101
    4180:	bf 4f       	sbci	r27, 0xFF	; 255
    4182:	fe 01       	movw	r30, r28
    4184:	e1 56       	subi	r30, 0x61	; 97
    4186:	ff 4f       	sbci	r31, 0xFF	; 255
    4188:	80 81       	ld	r24, Z
    418a:	91 81       	ldd	r25, Z+1	; 0x01
    418c:	8d 93       	st	X+, r24
    418e:	9c 93       	st	X, r25
    4190:	fe 01       	movw	r30, r28
    4192:	e5 56       	subi	r30, 0x65	; 101
    4194:	ff 4f       	sbci	r31, 0xFF	; 255
    4196:	80 81       	ld	r24, Z
    4198:	91 81       	ldd	r25, Z+1	; 0x01
    419a:	01 97       	sbiw	r24, 0x01	; 1
    419c:	f1 f7       	brne	.-4      	; 0x419a <SM_U8LoginSys+0x6d6>
    419e:	fe 01       	movw	r30, r28
    41a0:	e5 56       	subi	r30, 0x65	; 101
    41a2:	ff 4f       	sbci	r31, 0xFF	; 255
    41a4:	91 83       	std	Z+1, r25	; 0x01
    41a6:	80 83       	st	Z, r24
							_delay_ms(700);
							LCD_VoidSendCommand(1);
    41a8:	81 e0       	ldi	r24, 0x01	; 1
    41aa:	0e 94 86 0e 	call	0x1d0c	; 0x1d0c <LCD_VoidSendCommand>
							if(i==2)
    41ae:	fe 01       	movw	r30, r28
    41b0:	eb 52       	subi	r30, 0x2B	; 43
    41b2:	ff 4f       	sbci	r31, 0xFF	; 255
    41b4:	80 81       	ld	r24, Z
    41b6:	82 30       	cpi	r24, 0x02	; 2
    41b8:	09 f0       	breq	.+2      	; 0x41bc <SM_U8LoginSys+0x6f8>
    41ba:	d4 c0       	rjmp	.+424    	; 0x4364 <SM_U8LoginSys+0x8a0>
							{
							LCD_VoidGoToRowCol(1,0);
    41bc:	81 e0       	ldi	r24, 0x01	; 1
    41be:	60 e0       	ldi	r22, 0x00	; 0
    41c0:	0e 94 85 16 	call	0x2d0a	; 0x2d0a <LCD_VoidGoToRowCol>
							LCD_u8WriteString("U entered 3 times");
    41c4:	89 ee       	ldi	r24, 0xE9	; 233
    41c6:	90 e0       	ldi	r25, 0x00	; 0
    41c8:	0e 94 3d 17 	call	0x2e7a	; 0x2e7a <LCD_u8WriteString>
							DIO_U8SetPinDirection(DIO_PORTB,DIO_PIN7,DIO_HIGH);
    41cc:	81 e0       	ldi	r24, 0x01	; 1
    41ce:	67 e0       	ldi	r22, 0x07	; 7
    41d0:	41 e0       	ldi	r20, 0x01	; 1
    41d2:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <DIO_U8SetPinDirection>
							DIO_U8SetPinValue(DIO_PORTB,DIO_PIN7,DIO_HIGH);
    41d6:	81 e0       	ldi	r24, 0x01	; 1
    41d8:	67 e0       	ldi	r22, 0x07	; 7
    41da:	41 e0       	ldi	r20, 0x01	; 1
    41dc:	0e 94 15 08 	call	0x102a	; 0x102a <DIO_U8SetPinValue>
    41e0:	fe 01       	movw	r30, r28
    41e2:	e9 56       	subi	r30, 0x69	; 105
    41e4:	ff 4f       	sbci	r31, 0xFF	; 255
    41e6:	80 e0       	ldi	r24, 0x00	; 0
    41e8:	90 e0       	ldi	r25, 0x00	; 0
    41ea:	aa ef       	ldi	r26, 0xFA	; 250
    41ec:	b3 e4       	ldi	r27, 0x43	; 67
    41ee:	80 83       	st	Z, r24
    41f0:	91 83       	std	Z+1, r25	; 0x01
    41f2:	a2 83       	std	Z+2, r26	; 0x02
    41f4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    41f6:	8e 01       	movw	r16, r28
    41f8:	0d 56       	subi	r16, 0x6D	; 109
    41fa:	1f 4f       	sbci	r17, 0xFF	; 255
    41fc:	fe 01       	movw	r30, r28
    41fe:	e9 56       	subi	r30, 0x69	; 105
    4200:	ff 4f       	sbci	r31, 0xFF	; 255
    4202:	60 81       	ld	r22, Z
    4204:	71 81       	ldd	r23, Z+1	; 0x01
    4206:	82 81       	ldd	r24, Z+2	; 0x02
    4208:	93 81       	ldd	r25, Z+3	; 0x03
    420a:	20 e0       	ldi	r18, 0x00	; 0
    420c:	30 e0       	ldi	r19, 0x00	; 0
    420e:	4a ef       	ldi	r20, 0xFA	; 250
    4210:	54 e4       	ldi	r21, 0x44	; 68
    4212:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4216:	dc 01       	movw	r26, r24
    4218:	cb 01       	movw	r24, r22
    421a:	f8 01       	movw	r30, r16
    421c:	80 83       	st	Z, r24
    421e:	91 83       	std	Z+1, r25	; 0x01
    4220:	a2 83       	std	Z+2, r26	; 0x02
    4222:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4224:	fe 01       	movw	r30, r28
    4226:	ed 56       	subi	r30, 0x6D	; 109
    4228:	ff 4f       	sbci	r31, 0xFF	; 255
    422a:	60 81       	ld	r22, Z
    422c:	71 81       	ldd	r23, Z+1	; 0x01
    422e:	82 81       	ldd	r24, Z+2	; 0x02
    4230:	93 81       	ldd	r25, Z+3	; 0x03
    4232:	20 e0       	ldi	r18, 0x00	; 0
    4234:	30 e0       	ldi	r19, 0x00	; 0
    4236:	40 e8       	ldi	r20, 0x80	; 128
    4238:	5f e3       	ldi	r21, 0x3F	; 63
    423a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    423e:	88 23       	and	r24, r24
    4240:	44 f4       	brge	.+16     	; 0x4252 <SM_U8LoginSys+0x78e>
		__ticks = 1;
    4242:	fe 01       	movw	r30, r28
    4244:	ef 56       	subi	r30, 0x6F	; 111
    4246:	ff 4f       	sbci	r31, 0xFF	; 255
    4248:	81 e0       	ldi	r24, 0x01	; 1
    424a:	90 e0       	ldi	r25, 0x00	; 0
    424c:	91 83       	std	Z+1, r25	; 0x01
    424e:	80 83       	st	Z, r24
    4250:	64 c0       	rjmp	.+200    	; 0x431a <SM_U8LoginSys+0x856>
	else if (__tmp > 65535)
    4252:	fe 01       	movw	r30, r28
    4254:	ed 56       	subi	r30, 0x6D	; 109
    4256:	ff 4f       	sbci	r31, 0xFF	; 255
    4258:	60 81       	ld	r22, Z
    425a:	71 81       	ldd	r23, Z+1	; 0x01
    425c:	82 81       	ldd	r24, Z+2	; 0x02
    425e:	93 81       	ldd	r25, Z+3	; 0x03
    4260:	20 e0       	ldi	r18, 0x00	; 0
    4262:	3f ef       	ldi	r19, 0xFF	; 255
    4264:	4f e7       	ldi	r20, 0x7F	; 127
    4266:	57 e4       	ldi	r21, 0x47	; 71
    4268:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    426c:	18 16       	cp	r1, r24
    426e:	0c f0       	brlt	.+2      	; 0x4272 <SM_U8LoginSys+0x7ae>
    4270:	43 c0       	rjmp	.+134    	; 0x42f8 <SM_U8LoginSys+0x834>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4272:	fe 01       	movw	r30, r28
    4274:	e9 56       	subi	r30, 0x69	; 105
    4276:	ff 4f       	sbci	r31, 0xFF	; 255
    4278:	60 81       	ld	r22, Z
    427a:	71 81       	ldd	r23, Z+1	; 0x01
    427c:	82 81       	ldd	r24, Z+2	; 0x02
    427e:	93 81       	ldd	r25, Z+3	; 0x03
    4280:	20 e0       	ldi	r18, 0x00	; 0
    4282:	30 e0       	ldi	r19, 0x00	; 0
    4284:	40 e2       	ldi	r20, 0x20	; 32
    4286:	51 e4       	ldi	r21, 0x41	; 65
    4288:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    428c:	dc 01       	movw	r26, r24
    428e:	cb 01       	movw	r24, r22
    4290:	8e 01       	movw	r16, r28
    4292:	0f 56       	subi	r16, 0x6F	; 111
    4294:	1f 4f       	sbci	r17, 0xFF	; 255
    4296:	bc 01       	movw	r22, r24
    4298:	cd 01       	movw	r24, r26
    429a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    429e:	dc 01       	movw	r26, r24
    42a0:	cb 01       	movw	r24, r22
    42a2:	f8 01       	movw	r30, r16
    42a4:	91 83       	std	Z+1, r25	; 0x01
    42a6:	80 83       	st	Z, r24
    42a8:	1f c0       	rjmp	.+62     	; 0x42e8 <SM_U8LoginSys+0x824>
    42aa:	fe 01       	movw	r30, r28
    42ac:	e1 57       	subi	r30, 0x71	; 113
    42ae:	ff 4f       	sbci	r31, 0xFF	; 255
    42b0:	88 ec       	ldi	r24, 0xC8	; 200
    42b2:	90 e0       	ldi	r25, 0x00	; 0
    42b4:	91 83       	std	Z+1, r25	; 0x01
    42b6:	80 83       	st	Z, r24
    42b8:	fe 01       	movw	r30, r28
    42ba:	e1 57       	subi	r30, 0x71	; 113
    42bc:	ff 4f       	sbci	r31, 0xFF	; 255
    42be:	80 81       	ld	r24, Z
    42c0:	91 81       	ldd	r25, Z+1	; 0x01
    42c2:	01 97       	sbiw	r24, 0x01	; 1
    42c4:	f1 f7       	brne	.-4      	; 0x42c2 <SM_U8LoginSys+0x7fe>
    42c6:	fe 01       	movw	r30, r28
    42c8:	e1 57       	subi	r30, 0x71	; 113
    42ca:	ff 4f       	sbci	r31, 0xFF	; 255
    42cc:	91 83       	std	Z+1, r25	; 0x01
    42ce:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    42d0:	de 01       	movw	r26, r28
    42d2:	af 56       	subi	r26, 0x6F	; 111
    42d4:	bf 4f       	sbci	r27, 0xFF	; 255
    42d6:	fe 01       	movw	r30, r28
    42d8:	ef 56       	subi	r30, 0x6F	; 111
    42da:	ff 4f       	sbci	r31, 0xFF	; 255
    42dc:	80 81       	ld	r24, Z
    42de:	91 81       	ldd	r25, Z+1	; 0x01
    42e0:	01 97       	sbiw	r24, 0x01	; 1
    42e2:	11 96       	adiw	r26, 0x01	; 1
    42e4:	9c 93       	st	X, r25
    42e6:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    42e8:	fe 01       	movw	r30, r28
    42ea:	ef 56       	subi	r30, 0x6F	; 111
    42ec:	ff 4f       	sbci	r31, 0xFF	; 255
    42ee:	80 81       	ld	r24, Z
    42f0:	91 81       	ldd	r25, Z+1	; 0x01
    42f2:	00 97       	sbiw	r24, 0x00	; 0
    42f4:	d1 f6       	brne	.-76     	; 0x42aa <SM_U8LoginSys+0x7e6>
    42f6:	27 c0       	rjmp	.+78     	; 0x4346 <SM_U8LoginSys+0x882>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    42f8:	8e 01       	movw	r16, r28
    42fa:	0f 56       	subi	r16, 0x6F	; 111
    42fc:	1f 4f       	sbci	r17, 0xFF	; 255
    42fe:	fe 01       	movw	r30, r28
    4300:	ed 56       	subi	r30, 0x6D	; 109
    4302:	ff 4f       	sbci	r31, 0xFF	; 255
    4304:	60 81       	ld	r22, Z
    4306:	71 81       	ldd	r23, Z+1	; 0x01
    4308:	82 81       	ldd	r24, Z+2	; 0x02
    430a:	93 81       	ldd	r25, Z+3	; 0x03
    430c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4310:	dc 01       	movw	r26, r24
    4312:	cb 01       	movw	r24, r22
    4314:	f8 01       	movw	r30, r16
    4316:	91 83       	std	Z+1, r25	; 0x01
    4318:	80 83       	st	Z, r24
    431a:	de 01       	movw	r26, r28
    431c:	a3 57       	subi	r26, 0x73	; 115
    431e:	bf 4f       	sbci	r27, 0xFF	; 255
    4320:	fe 01       	movw	r30, r28
    4322:	ef 56       	subi	r30, 0x6F	; 111
    4324:	ff 4f       	sbci	r31, 0xFF	; 255
    4326:	80 81       	ld	r24, Z
    4328:	91 81       	ldd	r25, Z+1	; 0x01
    432a:	8d 93       	st	X+, r24
    432c:	9c 93       	st	X, r25
    432e:	fe 01       	movw	r30, r28
    4330:	e3 57       	subi	r30, 0x73	; 115
    4332:	ff 4f       	sbci	r31, 0xFF	; 255
    4334:	80 81       	ld	r24, Z
    4336:	91 81       	ldd	r25, Z+1	; 0x01
    4338:	01 97       	sbiw	r24, 0x01	; 1
    433a:	f1 f7       	brne	.-4      	; 0x4338 <SM_U8LoginSys+0x874>
    433c:	fe 01       	movw	r30, r28
    433e:	e3 57       	subi	r30, 0x73	; 115
    4340:	ff 4f       	sbci	r31, 0xFF	; 255
    4342:	91 83       	std	Z+1, r25	; 0x01
    4344:	80 83       	st	Z, r24
							_delay_ms(500);
							DIO_U8SetPinValue(DIO_PORTB,DIO_PIN7,DIO_LOW);
    4346:	81 e0       	ldi	r24, 0x01	; 1
    4348:	67 e0       	ldi	r22, 0x07	; 7
    434a:	40 e0       	ldi	r20, 0x00	; 0
    434c:	0e 94 15 08 	call	0x102a	; 0x102a <DIO_U8SetPinValue>
							Local_U8ErrorState = ERROR_STATE_NOK;
    4350:	10 92 9a 03 	sts	0x039A, r1
							 return Local_U8ErrorState;
    4354:	f0 91 9a 03 	lds	r31, 0x039A
    4358:	ca 52       	subi	r28, 0x2A	; 42
    435a:	df 4f       	sbci	r29, 0xFF	; 255
    435c:	f8 83       	st	Y, r31
    435e:	c6 5d       	subi	r28, 0xD6	; 214
    4360:	d0 40       	sbci	r29, 0x00	; 0
    4362:	e9 c6       	rjmp	.+3538   	; 0x5136 <SM_U8LoginSys+0x1672>
					LCD_VoidGoToRowCol(1,0);
					LCD_u8WriteString("WELCOME USER_0");

					_delay_ms(1000);
					LCD_VoidSendCommand(1);
					for(u8 i=0;i<3;i++)
    4364:	de 01       	movw	r26, r28
    4366:	ab 52       	subi	r26, 0x2B	; 43
    4368:	bf 4f       	sbci	r27, 0xFF	; 255
    436a:	fe 01       	movw	r30, r28
    436c:	eb 52       	subi	r30, 0x2B	; 43
    436e:	ff 4f       	sbci	r31, 0xFF	; 255
    4370:	80 81       	ld	r24, Z
    4372:	8f 5f       	subi	r24, 0xFF	; 255
    4374:	8c 93       	st	X, r24
    4376:	fe 01       	movw	r30, r28
    4378:	eb 52       	subi	r30, 0x2B	; 43
    437a:	ff 4f       	sbci	r31, 0xFF	; 255
    437c:	80 81       	ld	r24, Z
    437e:	83 30       	cpi	r24, 0x03	; 3
    4380:	08 f4       	brcc	.+2      	; 0x4384 <SM_U8LoginSys+0x8c0>
    4382:	7a cd       	rjmp	.-1292   	; 0x3e78 <SM_U8LoginSys+0x3b4>
    4384:	63 cc       	rjmp	.-1850   	; 0x3c4c <SM_U8LoginSys+0x188>
						}
					}
				} break;
				case '1':
				{
					LCD_VoidGoToRowCol(1,0);
    4386:	81 e0       	ldi	r24, 0x01	; 1
    4388:	60 e0       	ldi	r22, 0x00	; 0
    438a:	0e 94 85 16 	call	0x2d0a	; 0x2d0a <LCD_VoidGoToRowCol>
					LCD_u8WriteString("WELCOME USER_1");
    438e:	8b ef       	ldi	r24, 0xFB	; 251
    4390:	90 e0       	ldi	r25, 0x00	; 0
    4392:	0e 94 3d 17 	call	0x2e7a	; 0x2e7a <LCD_u8WriteString>
    4396:	fe 01       	movw	r30, r28
    4398:	e7 57       	subi	r30, 0x77	; 119
    439a:	ff 4f       	sbci	r31, 0xFF	; 255
    439c:	80 e0       	ldi	r24, 0x00	; 0
    439e:	90 e0       	ldi	r25, 0x00	; 0
    43a0:	aa e7       	ldi	r26, 0x7A	; 122
    43a2:	b4 e4       	ldi	r27, 0x44	; 68
    43a4:	80 83       	st	Z, r24
    43a6:	91 83       	std	Z+1, r25	; 0x01
    43a8:	a2 83       	std	Z+2, r26	; 0x02
    43aa:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    43ac:	8e 01       	movw	r16, r28
    43ae:	0b 57       	subi	r16, 0x7B	; 123
    43b0:	1f 4f       	sbci	r17, 0xFF	; 255
    43b2:	fe 01       	movw	r30, r28
    43b4:	e7 57       	subi	r30, 0x77	; 119
    43b6:	ff 4f       	sbci	r31, 0xFF	; 255
    43b8:	60 81       	ld	r22, Z
    43ba:	71 81       	ldd	r23, Z+1	; 0x01
    43bc:	82 81       	ldd	r24, Z+2	; 0x02
    43be:	93 81       	ldd	r25, Z+3	; 0x03
    43c0:	20 e0       	ldi	r18, 0x00	; 0
    43c2:	30 e0       	ldi	r19, 0x00	; 0
    43c4:	4a ef       	ldi	r20, 0xFA	; 250
    43c6:	54 e4       	ldi	r21, 0x44	; 68
    43c8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    43cc:	dc 01       	movw	r26, r24
    43ce:	cb 01       	movw	r24, r22
    43d0:	f8 01       	movw	r30, r16
    43d2:	80 83       	st	Z, r24
    43d4:	91 83       	std	Z+1, r25	; 0x01
    43d6:	a2 83       	std	Z+2, r26	; 0x02
    43d8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    43da:	fe 01       	movw	r30, r28
    43dc:	eb 57       	subi	r30, 0x7B	; 123
    43de:	ff 4f       	sbci	r31, 0xFF	; 255
    43e0:	60 81       	ld	r22, Z
    43e2:	71 81       	ldd	r23, Z+1	; 0x01
    43e4:	82 81       	ldd	r24, Z+2	; 0x02
    43e6:	93 81       	ldd	r25, Z+3	; 0x03
    43e8:	20 e0       	ldi	r18, 0x00	; 0
    43ea:	30 e0       	ldi	r19, 0x00	; 0
    43ec:	40 e8       	ldi	r20, 0x80	; 128
    43ee:	5f e3       	ldi	r21, 0x3F	; 63
    43f0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    43f4:	88 23       	and	r24, r24
    43f6:	44 f4       	brge	.+16     	; 0x4408 <SM_U8LoginSys+0x944>
		__ticks = 1;
    43f8:	fe 01       	movw	r30, r28
    43fa:	ed 57       	subi	r30, 0x7D	; 125
    43fc:	ff 4f       	sbci	r31, 0xFF	; 255
    43fe:	81 e0       	ldi	r24, 0x01	; 1
    4400:	90 e0       	ldi	r25, 0x00	; 0
    4402:	91 83       	std	Z+1, r25	; 0x01
    4404:	80 83       	st	Z, r24
    4406:	64 c0       	rjmp	.+200    	; 0x44d0 <SM_U8LoginSys+0xa0c>
	else if (__tmp > 65535)
    4408:	fe 01       	movw	r30, r28
    440a:	eb 57       	subi	r30, 0x7B	; 123
    440c:	ff 4f       	sbci	r31, 0xFF	; 255
    440e:	60 81       	ld	r22, Z
    4410:	71 81       	ldd	r23, Z+1	; 0x01
    4412:	82 81       	ldd	r24, Z+2	; 0x02
    4414:	93 81       	ldd	r25, Z+3	; 0x03
    4416:	20 e0       	ldi	r18, 0x00	; 0
    4418:	3f ef       	ldi	r19, 0xFF	; 255
    441a:	4f e7       	ldi	r20, 0x7F	; 127
    441c:	57 e4       	ldi	r21, 0x47	; 71
    441e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4422:	18 16       	cp	r1, r24
    4424:	0c f0       	brlt	.+2      	; 0x4428 <SM_U8LoginSys+0x964>
    4426:	43 c0       	rjmp	.+134    	; 0x44ae <SM_U8LoginSys+0x9ea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4428:	fe 01       	movw	r30, r28
    442a:	e7 57       	subi	r30, 0x77	; 119
    442c:	ff 4f       	sbci	r31, 0xFF	; 255
    442e:	60 81       	ld	r22, Z
    4430:	71 81       	ldd	r23, Z+1	; 0x01
    4432:	82 81       	ldd	r24, Z+2	; 0x02
    4434:	93 81       	ldd	r25, Z+3	; 0x03
    4436:	20 e0       	ldi	r18, 0x00	; 0
    4438:	30 e0       	ldi	r19, 0x00	; 0
    443a:	40 e2       	ldi	r20, 0x20	; 32
    443c:	51 e4       	ldi	r21, 0x41	; 65
    443e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4442:	dc 01       	movw	r26, r24
    4444:	cb 01       	movw	r24, r22
    4446:	8e 01       	movw	r16, r28
    4448:	0d 57       	subi	r16, 0x7D	; 125
    444a:	1f 4f       	sbci	r17, 0xFF	; 255
    444c:	bc 01       	movw	r22, r24
    444e:	cd 01       	movw	r24, r26
    4450:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4454:	dc 01       	movw	r26, r24
    4456:	cb 01       	movw	r24, r22
    4458:	f8 01       	movw	r30, r16
    445a:	91 83       	std	Z+1, r25	; 0x01
    445c:	80 83       	st	Z, r24
    445e:	1f c0       	rjmp	.+62     	; 0x449e <SM_U8LoginSys+0x9da>
    4460:	fe 01       	movw	r30, r28
    4462:	ef 57       	subi	r30, 0x7F	; 127
    4464:	ff 4f       	sbci	r31, 0xFF	; 255
    4466:	88 ec       	ldi	r24, 0xC8	; 200
    4468:	90 e0       	ldi	r25, 0x00	; 0
    446a:	91 83       	std	Z+1, r25	; 0x01
    446c:	80 83       	st	Z, r24
    446e:	fe 01       	movw	r30, r28
    4470:	ef 57       	subi	r30, 0x7F	; 127
    4472:	ff 4f       	sbci	r31, 0xFF	; 255
    4474:	80 81       	ld	r24, Z
    4476:	91 81       	ldd	r25, Z+1	; 0x01
    4478:	01 97       	sbiw	r24, 0x01	; 1
    447a:	f1 f7       	brne	.-4      	; 0x4478 <SM_U8LoginSys+0x9b4>
    447c:	fe 01       	movw	r30, r28
    447e:	ef 57       	subi	r30, 0x7F	; 127
    4480:	ff 4f       	sbci	r31, 0xFF	; 255
    4482:	91 83       	std	Z+1, r25	; 0x01
    4484:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4486:	de 01       	movw	r26, r28
    4488:	ad 57       	subi	r26, 0x7D	; 125
    448a:	bf 4f       	sbci	r27, 0xFF	; 255
    448c:	fe 01       	movw	r30, r28
    448e:	ed 57       	subi	r30, 0x7D	; 125
    4490:	ff 4f       	sbci	r31, 0xFF	; 255
    4492:	80 81       	ld	r24, Z
    4494:	91 81       	ldd	r25, Z+1	; 0x01
    4496:	01 97       	sbiw	r24, 0x01	; 1
    4498:	11 96       	adiw	r26, 0x01	; 1
    449a:	9c 93       	st	X, r25
    449c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    449e:	fe 01       	movw	r30, r28
    44a0:	ed 57       	subi	r30, 0x7D	; 125
    44a2:	ff 4f       	sbci	r31, 0xFF	; 255
    44a4:	80 81       	ld	r24, Z
    44a6:	91 81       	ldd	r25, Z+1	; 0x01
    44a8:	00 97       	sbiw	r24, 0x00	; 0
    44aa:	d1 f6       	brne	.-76     	; 0x4460 <SM_U8LoginSys+0x99c>
    44ac:	27 c0       	rjmp	.+78     	; 0x44fc <SM_U8LoginSys+0xa38>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    44ae:	8e 01       	movw	r16, r28
    44b0:	0d 57       	subi	r16, 0x7D	; 125
    44b2:	1f 4f       	sbci	r17, 0xFF	; 255
    44b4:	fe 01       	movw	r30, r28
    44b6:	eb 57       	subi	r30, 0x7B	; 123
    44b8:	ff 4f       	sbci	r31, 0xFF	; 255
    44ba:	60 81       	ld	r22, Z
    44bc:	71 81       	ldd	r23, Z+1	; 0x01
    44be:	82 81       	ldd	r24, Z+2	; 0x02
    44c0:	93 81       	ldd	r25, Z+3	; 0x03
    44c2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    44c6:	dc 01       	movw	r26, r24
    44c8:	cb 01       	movw	r24, r22
    44ca:	f8 01       	movw	r30, r16
    44cc:	91 83       	std	Z+1, r25	; 0x01
    44ce:	80 83       	st	Z, r24
    44d0:	de 01       	movw	r26, r28
    44d2:	a1 58       	subi	r26, 0x81	; 129
    44d4:	bf 4f       	sbci	r27, 0xFF	; 255
    44d6:	fe 01       	movw	r30, r28
    44d8:	ed 57       	subi	r30, 0x7D	; 125
    44da:	ff 4f       	sbci	r31, 0xFF	; 255
    44dc:	80 81       	ld	r24, Z
    44de:	91 81       	ldd	r25, Z+1	; 0x01
    44e0:	8d 93       	st	X+, r24
    44e2:	9c 93       	st	X, r25
    44e4:	fe 01       	movw	r30, r28
    44e6:	e1 58       	subi	r30, 0x81	; 129
    44e8:	ff 4f       	sbci	r31, 0xFF	; 255
    44ea:	80 81       	ld	r24, Z
    44ec:	91 81       	ldd	r25, Z+1	; 0x01
    44ee:	01 97       	sbiw	r24, 0x01	; 1
    44f0:	f1 f7       	brne	.-4      	; 0x44ee <SM_U8LoginSys+0xa2a>
    44f2:	fe 01       	movw	r30, r28
    44f4:	e1 58       	subi	r30, 0x81	; 129
    44f6:	ff 4f       	sbci	r31, 0xFF	; 255
    44f8:	91 83       	std	Z+1, r25	; 0x01
    44fa:	80 83       	st	Z, r24

					_delay_ms(1000);
					LCD_VoidSendCommand(1);
    44fc:	81 e0       	ldi	r24, 0x01	; 1
    44fe:	0e 94 86 0e 	call	0x1d0c	; 0x1d0c <LCD_VoidSendCommand>
						for(u8 i=0;i<3;i++)
    4502:	fe 01       	movw	r30, r28
    4504:	ec 52       	subi	r30, 0x2C	; 44
    4506:	ff 4f       	sbci	r31, 0xFF	; 255
    4508:	10 82       	st	Z, r1
    450a:	7e c2       	rjmp	.+1276   	; 0x4a08 <SM_U8LoginSys+0xf44>
					{

						LCD_u8WriteString("ENTER YOUR PASS");
    450c:	84 eb       	ldi	r24, 0xB4	; 180
    450e:	90 e0       	ldi	r25, 0x00	; 0
    4510:	0e 94 3d 17 	call	0x2e7a	; 0x2e7a <LCD_u8WriteString>
    4514:	fe 01       	movw	r30, r28
    4516:	e5 58       	subi	r30, 0x85	; 133
    4518:	ff 4f       	sbci	r31, 0xFF	; 255
    451a:	80 e0       	ldi	r24, 0x00	; 0
    451c:	90 e0       	ldi	r25, 0x00	; 0
    451e:	af e2       	ldi	r26, 0x2F	; 47
    4520:	b4 e4       	ldi	r27, 0x44	; 68
    4522:	80 83       	st	Z, r24
    4524:	91 83       	std	Z+1, r25	; 0x01
    4526:	a2 83       	std	Z+2, r26	; 0x02
    4528:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    452a:	8e 01       	movw	r16, r28
    452c:	09 58       	subi	r16, 0x89	; 137
    452e:	1f 4f       	sbci	r17, 0xFF	; 255
    4530:	fe 01       	movw	r30, r28
    4532:	e5 58       	subi	r30, 0x85	; 133
    4534:	ff 4f       	sbci	r31, 0xFF	; 255
    4536:	60 81       	ld	r22, Z
    4538:	71 81       	ldd	r23, Z+1	; 0x01
    453a:	82 81       	ldd	r24, Z+2	; 0x02
    453c:	93 81       	ldd	r25, Z+3	; 0x03
    453e:	20 e0       	ldi	r18, 0x00	; 0
    4540:	30 e0       	ldi	r19, 0x00	; 0
    4542:	4a ef       	ldi	r20, 0xFA	; 250
    4544:	54 e4       	ldi	r21, 0x44	; 68
    4546:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    454a:	dc 01       	movw	r26, r24
    454c:	cb 01       	movw	r24, r22
    454e:	f8 01       	movw	r30, r16
    4550:	80 83       	st	Z, r24
    4552:	91 83       	std	Z+1, r25	; 0x01
    4554:	a2 83       	std	Z+2, r26	; 0x02
    4556:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4558:	fe 01       	movw	r30, r28
    455a:	e9 58       	subi	r30, 0x89	; 137
    455c:	ff 4f       	sbci	r31, 0xFF	; 255
    455e:	60 81       	ld	r22, Z
    4560:	71 81       	ldd	r23, Z+1	; 0x01
    4562:	82 81       	ldd	r24, Z+2	; 0x02
    4564:	93 81       	ldd	r25, Z+3	; 0x03
    4566:	20 e0       	ldi	r18, 0x00	; 0
    4568:	30 e0       	ldi	r19, 0x00	; 0
    456a:	40 e8       	ldi	r20, 0x80	; 128
    456c:	5f e3       	ldi	r21, 0x3F	; 63
    456e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4572:	88 23       	and	r24, r24
    4574:	44 f4       	brge	.+16     	; 0x4586 <SM_U8LoginSys+0xac2>
		__ticks = 1;
    4576:	fe 01       	movw	r30, r28
    4578:	eb 58       	subi	r30, 0x8B	; 139
    457a:	ff 4f       	sbci	r31, 0xFF	; 255
    457c:	81 e0       	ldi	r24, 0x01	; 1
    457e:	90 e0       	ldi	r25, 0x00	; 0
    4580:	91 83       	std	Z+1, r25	; 0x01
    4582:	80 83       	st	Z, r24
    4584:	64 c0       	rjmp	.+200    	; 0x464e <SM_U8LoginSys+0xb8a>
	else if (__tmp > 65535)
    4586:	fe 01       	movw	r30, r28
    4588:	e9 58       	subi	r30, 0x89	; 137
    458a:	ff 4f       	sbci	r31, 0xFF	; 255
    458c:	60 81       	ld	r22, Z
    458e:	71 81       	ldd	r23, Z+1	; 0x01
    4590:	82 81       	ldd	r24, Z+2	; 0x02
    4592:	93 81       	ldd	r25, Z+3	; 0x03
    4594:	20 e0       	ldi	r18, 0x00	; 0
    4596:	3f ef       	ldi	r19, 0xFF	; 255
    4598:	4f e7       	ldi	r20, 0x7F	; 127
    459a:	57 e4       	ldi	r21, 0x47	; 71
    459c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    45a0:	18 16       	cp	r1, r24
    45a2:	0c f0       	brlt	.+2      	; 0x45a6 <SM_U8LoginSys+0xae2>
    45a4:	43 c0       	rjmp	.+134    	; 0x462c <SM_U8LoginSys+0xb68>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    45a6:	fe 01       	movw	r30, r28
    45a8:	e5 58       	subi	r30, 0x85	; 133
    45aa:	ff 4f       	sbci	r31, 0xFF	; 255
    45ac:	60 81       	ld	r22, Z
    45ae:	71 81       	ldd	r23, Z+1	; 0x01
    45b0:	82 81       	ldd	r24, Z+2	; 0x02
    45b2:	93 81       	ldd	r25, Z+3	; 0x03
    45b4:	20 e0       	ldi	r18, 0x00	; 0
    45b6:	30 e0       	ldi	r19, 0x00	; 0
    45b8:	40 e2       	ldi	r20, 0x20	; 32
    45ba:	51 e4       	ldi	r21, 0x41	; 65
    45bc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    45c0:	dc 01       	movw	r26, r24
    45c2:	cb 01       	movw	r24, r22
    45c4:	8e 01       	movw	r16, r28
    45c6:	0b 58       	subi	r16, 0x8B	; 139
    45c8:	1f 4f       	sbci	r17, 0xFF	; 255
    45ca:	bc 01       	movw	r22, r24
    45cc:	cd 01       	movw	r24, r26
    45ce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    45d2:	dc 01       	movw	r26, r24
    45d4:	cb 01       	movw	r24, r22
    45d6:	f8 01       	movw	r30, r16
    45d8:	91 83       	std	Z+1, r25	; 0x01
    45da:	80 83       	st	Z, r24
    45dc:	1f c0       	rjmp	.+62     	; 0x461c <SM_U8LoginSys+0xb58>
    45de:	fe 01       	movw	r30, r28
    45e0:	ed 58       	subi	r30, 0x8D	; 141
    45e2:	ff 4f       	sbci	r31, 0xFF	; 255
    45e4:	88 ec       	ldi	r24, 0xC8	; 200
    45e6:	90 e0       	ldi	r25, 0x00	; 0
    45e8:	91 83       	std	Z+1, r25	; 0x01
    45ea:	80 83       	st	Z, r24
    45ec:	fe 01       	movw	r30, r28
    45ee:	ed 58       	subi	r30, 0x8D	; 141
    45f0:	ff 4f       	sbci	r31, 0xFF	; 255
    45f2:	80 81       	ld	r24, Z
    45f4:	91 81       	ldd	r25, Z+1	; 0x01
    45f6:	01 97       	sbiw	r24, 0x01	; 1
    45f8:	f1 f7       	brne	.-4      	; 0x45f6 <SM_U8LoginSys+0xb32>
    45fa:	fe 01       	movw	r30, r28
    45fc:	ed 58       	subi	r30, 0x8D	; 141
    45fe:	ff 4f       	sbci	r31, 0xFF	; 255
    4600:	91 83       	std	Z+1, r25	; 0x01
    4602:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4604:	de 01       	movw	r26, r28
    4606:	ab 58       	subi	r26, 0x8B	; 139
    4608:	bf 4f       	sbci	r27, 0xFF	; 255
    460a:	fe 01       	movw	r30, r28
    460c:	eb 58       	subi	r30, 0x8B	; 139
    460e:	ff 4f       	sbci	r31, 0xFF	; 255
    4610:	80 81       	ld	r24, Z
    4612:	91 81       	ldd	r25, Z+1	; 0x01
    4614:	01 97       	sbiw	r24, 0x01	; 1
    4616:	11 96       	adiw	r26, 0x01	; 1
    4618:	9c 93       	st	X, r25
    461a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    461c:	fe 01       	movw	r30, r28
    461e:	eb 58       	subi	r30, 0x8B	; 139
    4620:	ff 4f       	sbci	r31, 0xFF	; 255
    4622:	80 81       	ld	r24, Z
    4624:	91 81       	ldd	r25, Z+1	; 0x01
    4626:	00 97       	sbiw	r24, 0x00	; 0
    4628:	d1 f6       	brne	.-76     	; 0x45de <SM_U8LoginSys+0xb1a>
    462a:	27 c0       	rjmp	.+78     	; 0x467a <SM_U8LoginSys+0xbb6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    462c:	8e 01       	movw	r16, r28
    462e:	0b 58       	subi	r16, 0x8B	; 139
    4630:	1f 4f       	sbci	r17, 0xFF	; 255
    4632:	fe 01       	movw	r30, r28
    4634:	e9 58       	subi	r30, 0x89	; 137
    4636:	ff 4f       	sbci	r31, 0xFF	; 255
    4638:	60 81       	ld	r22, Z
    463a:	71 81       	ldd	r23, Z+1	; 0x01
    463c:	82 81       	ldd	r24, Z+2	; 0x02
    463e:	93 81       	ldd	r25, Z+3	; 0x03
    4640:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4644:	dc 01       	movw	r26, r24
    4646:	cb 01       	movw	r24, r22
    4648:	f8 01       	movw	r30, r16
    464a:	91 83       	std	Z+1, r25	; 0x01
    464c:	80 83       	st	Z, r24
    464e:	de 01       	movw	r26, r28
    4650:	af 58       	subi	r26, 0x8F	; 143
    4652:	bf 4f       	sbci	r27, 0xFF	; 255
    4654:	fe 01       	movw	r30, r28
    4656:	eb 58       	subi	r30, 0x8B	; 139
    4658:	ff 4f       	sbci	r31, 0xFF	; 255
    465a:	80 81       	ld	r24, Z
    465c:	91 81       	ldd	r25, Z+1	; 0x01
    465e:	8d 93       	st	X+, r24
    4660:	9c 93       	st	X, r25
    4662:	fe 01       	movw	r30, r28
    4664:	ef 58       	subi	r30, 0x8F	; 143
    4666:	ff 4f       	sbci	r31, 0xFF	; 255
    4668:	80 81       	ld	r24, Z
    466a:	91 81       	ldd	r25, Z+1	; 0x01
    466c:	01 97       	sbiw	r24, 0x01	; 1
    466e:	f1 f7       	brne	.-4      	; 0x466c <SM_U8LoginSys+0xba8>
    4670:	fe 01       	movw	r30, r28
    4672:	ef 58       	subi	r30, 0x8F	; 143
    4674:	ff 4f       	sbci	r31, 0xFF	; 255
    4676:	91 83       	std	Z+1, r25	; 0x01
    4678:	80 83       	st	Z, r24
						_delay_ms(700);
						LCD_VoidGoToRowCol(1,0);
    467a:	81 e0       	ldi	r24, 0x01	; 1
    467c:	60 e0       	ldi	r22, 0x00	; 0
    467e:	0e 94 85 16 	call	0x2d0a	; 0x2d0a <LCD_VoidGoToRowCol>
						User_Pass= SM_U16EnterPassword();
    4682:	0e 94 ac 28 	call	0x5158	; 0x5158 <SM_U16EnterPassword>
    4686:	90 93 99 03 	sts	0x0399, r25
    468a:	80 93 98 03 	sts	0x0398, r24
						if(User_Pass ==2222)
    468e:	80 91 98 03 	lds	r24, 0x0398
    4692:	90 91 99 03 	lds	r25, 0x0399
    4696:	f8 e0       	ldi	r31, 0x08	; 8
    4698:	8e 3a       	cpi	r24, 0xAE	; 174
    469a:	9f 07       	cpc	r25, r31
    469c:	79 f4       	brne	.+30     	; 0x46bc <SM_U8LoginSys+0xbf8>
						{

							LCD_u8WriteString("WELCOME ALAA");
    469e:	8a e0       	ldi	r24, 0x0A	; 10
    46a0:	91 e0       	ldi	r25, 0x01	; 1
    46a2:	0e 94 3d 17 	call	0x2e7a	; 0x2e7a <LCD_u8WriteString>
							Local_U8ErrorState = ERROR_STATE_OK;
    46a6:	81 e0       	ldi	r24, 0x01	; 1
    46a8:	80 93 9a 03 	sts	0x039A, r24
							 return Local_U8ErrorState;
    46ac:	20 91 9a 03 	lds	r18, 0x039A
    46b0:	ca 52       	subi	r28, 0x2A	; 42
    46b2:	df 4f       	sbci	r29, 0xFF	; 255
    46b4:	28 83       	st	Y, r18
    46b6:	c6 5d       	subi	r28, 0xD6	; 214
    46b8:	d0 40       	sbci	r29, 0x00	; 0
    46ba:	3d c5       	rjmp	.+2682   	; 0x5136 <SM_U8LoginSys+0x1672>
						}
						else
						{
							LCD_u8WriteString("INCORRECT PASS");
    46bc:	80 ed       	ldi	r24, 0xD0	; 208
    46be:	90 e0       	ldi	r25, 0x00	; 0
    46c0:	0e 94 3d 17 	call	0x2e7a	; 0x2e7a <LCD_u8WriteString>
							LCD_VoidGoToRowCol(1,0);
    46c4:	81 e0       	ldi	r24, 0x01	; 1
    46c6:	60 e0       	ldi	r22, 0x00	; 0
    46c8:	0e 94 85 16 	call	0x2d0a	; 0x2d0a <LCD_VoidGoToRowCol>
							LCD_u8WriteString("TRY AGAIN");
    46cc:	8f ed       	ldi	r24, 0xDF	; 223
    46ce:	90 e0       	ldi	r25, 0x00	; 0
    46d0:	0e 94 3d 17 	call	0x2e7a	; 0x2e7a <LCD_u8WriteString>
    46d4:	fe 01       	movw	r30, r28
    46d6:	e3 59       	subi	r30, 0x93	; 147
    46d8:	ff 4f       	sbci	r31, 0xFF	; 255
    46da:	80 e0       	ldi	r24, 0x00	; 0
    46dc:	90 e0       	ldi	r25, 0x00	; 0
    46de:	af e2       	ldi	r26, 0x2F	; 47
    46e0:	b4 e4       	ldi	r27, 0x44	; 68
    46e2:	80 83       	st	Z, r24
    46e4:	91 83       	std	Z+1, r25	; 0x01
    46e6:	a2 83       	std	Z+2, r26	; 0x02
    46e8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    46ea:	8e 01       	movw	r16, r28
    46ec:	07 59       	subi	r16, 0x97	; 151
    46ee:	1f 4f       	sbci	r17, 0xFF	; 255
    46f0:	fe 01       	movw	r30, r28
    46f2:	e3 59       	subi	r30, 0x93	; 147
    46f4:	ff 4f       	sbci	r31, 0xFF	; 255
    46f6:	60 81       	ld	r22, Z
    46f8:	71 81       	ldd	r23, Z+1	; 0x01
    46fa:	82 81       	ldd	r24, Z+2	; 0x02
    46fc:	93 81       	ldd	r25, Z+3	; 0x03
    46fe:	20 e0       	ldi	r18, 0x00	; 0
    4700:	30 e0       	ldi	r19, 0x00	; 0
    4702:	4a ef       	ldi	r20, 0xFA	; 250
    4704:	54 e4       	ldi	r21, 0x44	; 68
    4706:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    470a:	dc 01       	movw	r26, r24
    470c:	cb 01       	movw	r24, r22
    470e:	f8 01       	movw	r30, r16
    4710:	80 83       	st	Z, r24
    4712:	91 83       	std	Z+1, r25	; 0x01
    4714:	a2 83       	std	Z+2, r26	; 0x02
    4716:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4718:	fe 01       	movw	r30, r28
    471a:	e7 59       	subi	r30, 0x97	; 151
    471c:	ff 4f       	sbci	r31, 0xFF	; 255
    471e:	60 81       	ld	r22, Z
    4720:	71 81       	ldd	r23, Z+1	; 0x01
    4722:	82 81       	ldd	r24, Z+2	; 0x02
    4724:	93 81       	ldd	r25, Z+3	; 0x03
    4726:	20 e0       	ldi	r18, 0x00	; 0
    4728:	30 e0       	ldi	r19, 0x00	; 0
    472a:	40 e8       	ldi	r20, 0x80	; 128
    472c:	5f e3       	ldi	r21, 0x3F	; 63
    472e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4732:	88 23       	and	r24, r24
    4734:	44 f4       	brge	.+16     	; 0x4746 <SM_U8LoginSys+0xc82>
		__ticks = 1;
    4736:	fe 01       	movw	r30, r28
    4738:	e9 59       	subi	r30, 0x99	; 153
    473a:	ff 4f       	sbci	r31, 0xFF	; 255
    473c:	81 e0       	ldi	r24, 0x01	; 1
    473e:	90 e0       	ldi	r25, 0x00	; 0
    4740:	91 83       	std	Z+1, r25	; 0x01
    4742:	80 83       	st	Z, r24
    4744:	64 c0       	rjmp	.+200    	; 0x480e <SM_U8LoginSys+0xd4a>
	else if (__tmp > 65535)
    4746:	fe 01       	movw	r30, r28
    4748:	e7 59       	subi	r30, 0x97	; 151
    474a:	ff 4f       	sbci	r31, 0xFF	; 255
    474c:	60 81       	ld	r22, Z
    474e:	71 81       	ldd	r23, Z+1	; 0x01
    4750:	82 81       	ldd	r24, Z+2	; 0x02
    4752:	93 81       	ldd	r25, Z+3	; 0x03
    4754:	20 e0       	ldi	r18, 0x00	; 0
    4756:	3f ef       	ldi	r19, 0xFF	; 255
    4758:	4f e7       	ldi	r20, 0x7F	; 127
    475a:	57 e4       	ldi	r21, 0x47	; 71
    475c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4760:	18 16       	cp	r1, r24
    4762:	0c f0       	brlt	.+2      	; 0x4766 <SM_U8LoginSys+0xca2>
    4764:	43 c0       	rjmp	.+134    	; 0x47ec <SM_U8LoginSys+0xd28>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4766:	fe 01       	movw	r30, r28
    4768:	e3 59       	subi	r30, 0x93	; 147
    476a:	ff 4f       	sbci	r31, 0xFF	; 255
    476c:	60 81       	ld	r22, Z
    476e:	71 81       	ldd	r23, Z+1	; 0x01
    4770:	82 81       	ldd	r24, Z+2	; 0x02
    4772:	93 81       	ldd	r25, Z+3	; 0x03
    4774:	20 e0       	ldi	r18, 0x00	; 0
    4776:	30 e0       	ldi	r19, 0x00	; 0
    4778:	40 e2       	ldi	r20, 0x20	; 32
    477a:	51 e4       	ldi	r21, 0x41	; 65
    477c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4780:	dc 01       	movw	r26, r24
    4782:	cb 01       	movw	r24, r22
    4784:	8e 01       	movw	r16, r28
    4786:	09 59       	subi	r16, 0x99	; 153
    4788:	1f 4f       	sbci	r17, 0xFF	; 255
    478a:	bc 01       	movw	r22, r24
    478c:	cd 01       	movw	r24, r26
    478e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4792:	dc 01       	movw	r26, r24
    4794:	cb 01       	movw	r24, r22
    4796:	f8 01       	movw	r30, r16
    4798:	91 83       	std	Z+1, r25	; 0x01
    479a:	80 83       	st	Z, r24
    479c:	1f c0       	rjmp	.+62     	; 0x47dc <SM_U8LoginSys+0xd18>
    479e:	fe 01       	movw	r30, r28
    47a0:	eb 59       	subi	r30, 0x9B	; 155
    47a2:	ff 4f       	sbci	r31, 0xFF	; 255
    47a4:	88 ec       	ldi	r24, 0xC8	; 200
    47a6:	90 e0       	ldi	r25, 0x00	; 0
    47a8:	91 83       	std	Z+1, r25	; 0x01
    47aa:	80 83       	st	Z, r24
    47ac:	fe 01       	movw	r30, r28
    47ae:	eb 59       	subi	r30, 0x9B	; 155
    47b0:	ff 4f       	sbci	r31, 0xFF	; 255
    47b2:	80 81       	ld	r24, Z
    47b4:	91 81       	ldd	r25, Z+1	; 0x01
    47b6:	01 97       	sbiw	r24, 0x01	; 1
    47b8:	f1 f7       	brne	.-4      	; 0x47b6 <SM_U8LoginSys+0xcf2>
    47ba:	fe 01       	movw	r30, r28
    47bc:	eb 59       	subi	r30, 0x9B	; 155
    47be:	ff 4f       	sbci	r31, 0xFF	; 255
    47c0:	91 83       	std	Z+1, r25	; 0x01
    47c2:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    47c4:	de 01       	movw	r26, r28
    47c6:	a9 59       	subi	r26, 0x99	; 153
    47c8:	bf 4f       	sbci	r27, 0xFF	; 255
    47ca:	fe 01       	movw	r30, r28
    47cc:	e9 59       	subi	r30, 0x99	; 153
    47ce:	ff 4f       	sbci	r31, 0xFF	; 255
    47d0:	80 81       	ld	r24, Z
    47d2:	91 81       	ldd	r25, Z+1	; 0x01
    47d4:	01 97       	sbiw	r24, 0x01	; 1
    47d6:	11 96       	adiw	r26, 0x01	; 1
    47d8:	9c 93       	st	X, r25
    47da:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    47dc:	fe 01       	movw	r30, r28
    47de:	e9 59       	subi	r30, 0x99	; 153
    47e0:	ff 4f       	sbci	r31, 0xFF	; 255
    47e2:	80 81       	ld	r24, Z
    47e4:	91 81       	ldd	r25, Z+1	; 0x01
    47e6:	00 97       	sbiw	r24, 0x00	; 0
    47e8:	d1 f6       	brne	.-76     	; 0x479e <SM_U8LoginSys+0xcda>
    47ea:	27 c0       	rjmp	.+78     	; 0x483a <SM_U8LoginSys+0xd76>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    47ec:	8e 01       	movw	r16, r28
    47ee:	09 59       	subi	r16, 0x99	; 153
    47f0:	1f 4f       	sbci	r17, 0xFF	; 255
    47f2:	fe 01       	movw	r30, r28
    47f4:	e7 59       	subi	r30, 0x97	; 151
    47f6:	ff 4f       	sbci	r31, 0xFF	; 255
    47f8:	60 81       	ld	r22, Z
    47fa:	71 81       	ldd	r23, Z+1	; 0x01
    47fc:	82 81       	ldd	r24, Z+2	; 0x02
    47fe:	93 81       	ldd	r25, Z+3	; 0x03
    4800:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4804:	dc 01       	movw	r26, r24
    4806:	cb 01       	movw	r24, r22
    4808:	f8 01       	movw	r30, r16
    480a:	91 83       	std	Z+1, r25	; 0x01
    480c:	80 83       	st	Z, r24
    480e:	de 01       	movw	r26, r28
    4810:	ad 59       	subi	r26, 0x9D	; 157
    4812:	bf 4f       	sbci	r27, 0xFF	; 255
    4814:	fe 01       	movw	r30, r28
    4816:	e9 59       	subi	r30, 0x99	; 153
    4818:	ff 4f       	sbci	r31, 0xFF	; 255
    481a:	80 81       	ld	r24, Z
    481c:	91 81       	ldd	r25, Z+1	; 0x01
    481e:	8d 93       	st	X+, r24
    4820:	9c 93       	st	X, r25
    4822:	fe 01       	movw	r30, r28
    4824:	ed 59       	subi	r30, 0x9D	; 157
    4826:	ff 4f       	sbci	r31, 0xFF	; 255
    4828:	80 81       	ld	r24, Z
    482a:	91 81       	ldd	r25, Z+1	; 0x01
    482c:	01 97       	sbiw	r24, 0x01	; 1
    482e:	f1 f7       	brne	.-4      	; 0x482c <SM_U8LoginSys+0xd68>
    4830:	fe 01       	movw	r30, r28
    4832:	ed 59       	subi	r30, 0x9D	; 157
    4834:	ff 4f       	sbci	r31, 0xFF	; 255
    4836:	91 83       	std	Z+1, r25	; 0x01
    4838:	80 83       	st	Z, r24
							_delay_ms(700);
							LCD_VoidSendCommand(1);
    483a:	81 e0       	ldi	r24, 0x01	; 1
    483c:	0e 94 86 0e 	call	0x1d0c	; 0x1d0c <LCD_VoidSendCommand>
							if(i==2)
    4840:	fe 01       	movw	r30, r28
    4842:	ec 52       	subi	r30, 0x2C	; 44
    4844:	ff 4f       	sbci	r31, 0xFF	; 255
    4846:	80 81       	ld	r24, Z
    4848:	82 30       	cpi	r24, 0x02	; 2
    484a:	09 f0       	breq	.+2      	; 0x484e <SM_U8LoginSys+0xd8a>
    484c:	d4 c0       	rjmp	.+424    	; 0x49f6 <SM_U8LoginSys+0xf32>
							{
								LCD_VoidGoToRowCol(1,0);
    484e:	81 e0       	ldi	r24, 0x01	; 1
    4850:	60 e0       	ldi	r22, 0x00	; 0
    4852:	0e 94 85 16 	call	0x2d0a	; 0x2d0a <LCD_VoidGoToRowCol>
								LCD_u8WriteString("U entered 3 times");
    4856:	89 ee       	ldi	r24, 0xE9	; 233
    4858:	90 e0       	ldi	r25, 0x00	; 0
    485a:	0e 94 3d 17 	call	0x2e7a	; 0x2e7a <LCD_u8WriteString>

							DIO_U8SetPinDirection(DIO_PORTB,DIO_PIN7,DIO_HIGH);
    485e:	81 e0       	ldi	r24, 0x01	; 1
    4860:	67 e0       	ldi	r22, 0x07	; 7
    4862:	41 e0       	ldi	r20, 0x01	; 1
    4864:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <DIO_U8SetPinDirection>
							DIO_U8SetPinValue(DIO_PORTB,DIO_PIN7,DIO_HIGH);
    4868:	81 e0       	ldi	r24, 0x01	; 1
    486a:	67 e0       	ldi	r22, 0x07	; 7
    486c:	41 e0       	ldi	r20, 0x01	; 1
    486e:	0e 94 15 08 	call	0x102a	; 0x102a <DIO_U8SetPinValue>
    4872:	fe 01       	movw	r30, r28
    4874:	e1 5a       	subi	r30, 0xA1	; 161
    4876:	ff 4f       	sbci	r31, 0xFF	; 255
    4878:	80 e0       	ldi	r24, 0x00	; 0
    487a:	90 e0       	ldi	r25, 0x00	; 0
    487c:	aa ef       	ldi	r26, 0xFA	; 250
    487e:	b3 e4       	ldi	r27, 0x43	; 67
    4880:	80 83       	st	Z, r24
    4882:	91 83       	std	Z+1, r25	; 0x01
    4884:	a2 83       	std	Z+2, r26	; 0x02
    4886:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4888:	8e 01       	movw	r16, r28
    488a:	05 5a       	subi	r16, 0xA5	; 165
    488c:	1f 4f       	sbci	r17, 0xFF	; 255
    488e:	fe 01       	movw	r30, r28
    4890:	e1 5a       	subi	r30, 0xA1	; 161
    4892:	ff 4f       	sbci	r31, 0xFF	; 255
    4894:	60 81       	ld	r22, Z
    4896:	71 81       	ldd	r23, Z+1	; 0x01
    4898:	82 81       	ldd	r24, Z+2	; 0x02
    489a:	93 81       	ldd	r25, Z+3	; 0x03
    489c:	20 e0       	ldi	r18, 0x00	; 0
    489e:	30 e0       	ldi	r19, 0x00	; 0
    48a0:	4a ef       	ldi	r20, 0xFA	; 250
    48a2:	54 e4       	ldi	r21, 0x44	; 68
    48a4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    48a8:	dc 01       	movw	r26, r24
    48aa:	cb 01       	movw	r24, r22
    48ac:	f8 01       	movw	r30, r16
    48ae:	80 83       	st	Z, r24
    48b0:	91 83       	std	Z+1, r25	; 0x01
    48b2:	a2 83       	std	Z+2, r26	; 0x02
    48b4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    48b6:	fe 01       	movw	r30, r28
    48b8:	e5 5a       	subi	r30, 0xA5	; 165
    48ba:	ff 4f       	sbci	r31, 0xFF	; 255
    48bc:	60 81       	ld	r22, Z
    48be:	71 81       	ldd	r23, Z+1	; 0x01
    48c0:	82 81       	ldd	r24, Z+2	; 0x02
    48c2:	93 81       	ldd	r25, Z+3	; 0x03
    48c4:	20 e0       	ldi	r18, 0x00	; 0
    48c6:	30 e0       	ldi	r19, 0x00	; 0
    48c8:	40 e8       	ldi	r20, 0x80	; 128
    48ca:	5f e3       	ldi	r21, 0x3F	; 63
    48cc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    48d0:	88 23       	and	r24, r24
    48d2:	44 f4       	brge	.+16     	; 0x48e4 <SM_U8LoginSys+0xe20>
		__ticks = 1;
    48d4:	fe 01       	movw	r30, r28
    48d6:	e7 5a       	subi	r30, 0xA7	; 167
    48d8:	ff 4f       	sbci	r31, 0xFF	; 255
    48da:	81 e0       	ldi	r24, 0x01	; 1
    48dc:	90 e0       	ldi	r25, 0x00	; 0
    48de:	91 83       	std	Z+1, r25	; 0x01
    48e0:	80 83       	st	Z, r24
    48e2:	64 c0       	rjmp	.+200    	; 0x49ac <SM_U8LoginSys+0xee8>
	else if (__tmp > 65535)
    48e4:	fe 01       	movw	r30, r28
    48e6:	e5 5a       	subi	r30, 0xA5	; 165
    48e8:	ff 4f       	sbci	r31, 0xFF	; 255
    48ea:	60 81       	ld	r22, Z
    48ec:	71 81       	ldd	r23, Z+1	; 0x01
    48ee:	82 81       	ldd	r24, Z+2	; 0x02
    48f0:	93 81       	ldd	r25, Z+3	; 0x03
    48f2:	20 e0       	ldi	r18, 0x00	; 0
    48f4:	3f ef       	ldi	r19, 0xFF	; 255
    48f6:	4f e7       	ldi	r20, 0x7F	; 127
    48f8:	57 e4       	ldi	r21, 0x47	; 71
    48fa:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    48fe:	18 16       	cp	r1, r24
    4900:	0c f0       	brlt	.+2      	; 0x4904 <SM_U8LoginSys+0xe40>
    4902:	43 c0       	rjmp	.+134    	; 0x498a <SM_U8LoginSys+0xec6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4904:	fe 01       	movw	r30, r28
    4906:	e1 5a       	subi	r30, 0xA1	; 161
    4908:	ff 4f       	sbci	r31, 0xFF	; 255
    490a:	60 81       	ld	r22, Z
    490c:	71 81       	ldd	r23, Z+1	; 0x01
    490e:	82 81       	ldd	r24, Z+2	; 0x02
    4910:	93 81       	ldd	r25, Z+3	; 0x03
    4912:	20 e0       	ldi	r18, 0x00	; 0
    4914:	30 e0       	ldi	r19, 0x00	; 0
    4916:	40 e2       	ldi	r20, 0x20	; 32
    4918:	51 e4       	ldi	r21, 0x41	; 65
    491a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    491e:	dc 01       	movw	r26, r24
    4920:	cb 01       	movw	r24, r22
    4922:	8e 01       	movw	r16, r28
    4924:	07 5a       	subi	r16, 0xA7	; 167
    4926:	1f 4f       	sbci	r17, 0xFF	; 255
    4928:	bc 01       	movw	r22, r24
    492a:	cd 01       	movw	r24, r26
    492c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4930:	dc 01       	movw	r26, r24
    4932:	cb 01       	movw	r24, r22
    4934:	f8 01       	movw	r30, r16
    4936:	91 83       	std	Z+1, r25	; 0x01
    4938:	80 83       	st	Z, r24
    493a:	1f c0       	rjmp	.+62     	; 0x497a <SM_U8LoginSys+0xeb6>
    493c:	fe 01       	movw	r30, r28
    493e:	e9 5a       	subi	r30, 0xA9	; 169
    4940:	ff 4f       	sbci	r31, 0xFF	; 255
    4942:	88 ec       	ldi	r24, 0xC8	; 200
    4944:	90 e0       	ldi	r25, 0x00	; 0
    4946:	91 83       	std	Z+1, r25	; 0x01
    4948:	80 83       	st	Z, r24
    494a:	fe 01       	movw	r30, r28
    494c:	e9 5a       	subi	r30, 0xA9	; 169
    494e:	ff 4f       	sbci	r31, 0xFF	; 255
    4950:	80 81       	ld	r24, Z
    4952:	91 81       	ldd	r25, Z+1	; 0x01
    4954:	01 97       	sbiw	r24, 0x01	; 1
    4956:	f1 f7       	brne	.-4      	; 0x4954 <SM_U8LoginSys+0xe90>
    4958:	fe 01       	movw	r30, r28
    495a:	e9 5a       	subi	r30, 0xA9	; 169
    495c:	ff 4f       	sbci	r31, 0xFF	; 255
    495e:	91 83       	std	Z+1, r25	; 0x01
    4960:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4962:	de 01       	movw	r26, r28
    4964:	a7 5a       	subi	r26, 0xA7	; 167
    4966:	bf 4f       	sbci	r27, 0xFF	; 255
    4968:	fe 01       	movw	r30, r28
    496a:	e7 5a       	subi	r30, 0xA7	; 167
    496c:	ff 4f       	sbci	r31, 0xFF	; 255
    496e:	80 81       	ld	r24, Z
    4970:	91 81       	ldd	r25, Z+1	; 0x01
    4972:	01 97       	sbiw	r24, 0x01	; 1
    4974:	11 96       	adiw	r26, 0x01	; 1
    4976:	9c 93       	st	X, r25
    4978:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    497a:	fe 01       	movw	r30, r28
    497c:	e7 5a       	subi	r30, 0xA7	; 167
    497e:	ff 4f       	sbci	r31, 0xFF	; 255
    4980:	80 81       	ld	r24, Z
    4982:	91 81       	ldd	r25, Z+1	; 0x01
    4984:	00 97       	sbiw	r24, 0x00	; 0
    4986:	d1 f6       	brne	.-76     	; 0x493c <SM_U8LoginSys+0xe78>
    4988:	27 c0       	rjmp	.+78     	; 0x49d8 <SM_U8LoginSys+0xf14>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    498a:	8e 01       	movw	r16, r28
    498c:	07 5a       	subi	r16, 0xA7	; 167
    498e:	1f 4f       	sbci	r17, 0xFF	; 255
    4990:	fe 01       	movw	r30, r28
    4992:	e5 5a       	subi	r30, 0xA5	; 165
    4994:	ff 4f       	sbci	r31, 0xFF	; 255
    4996:	60 81       	ld	r22, Z
    4998:	71 81       	ldd	r23, Z+1	; 0x01
    499a:	82 81       	ldd	r24, Z+2	; 0x02
    499c:	93 81       	ldd	r25, Z+3	; 0x03
    499e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    49a2:	dc 01       	movw	r26, r24
    49a4:	cb 01       	movw	r24, r22
    49a6:	f8 01       	movw	r30, r16
    49a8:	91 83       	std	Z+1, r25	; 0x01
    49aa:	80 83       	st	Z, r24
    49ac:	de 01       	movw	r26, r28
    49ae:	ab 5a       	subi	r26, 0xAB	; 171
    49b0:	bf 4f       	sbci	r27, 0xFF	; 255
    49b2:	fe 01       	movw	r30, r28
    49b4:	e7 5a       	subi	r30, 0xA7	; 167
    49b6:	ff 4f       	sbci	r31, 0xFF	; 255
    49b8:	80 81       	ld	r24, Z
    49ba:	91 81       	ldd	r25, Z+1	; 0x01
    49bc:	8d 93       	st	X+, r24
    49be:	9c 93       	st	X, r25
    49c0:	fe 01       	movw	r30, r28
    49c2:	eb 5a       	subi	r30, 0xAB	; 171
    49c4:	ff 4f       	sbci	r31, 0xFF	; 255
    49c6:	80 81       	ld	r24, Z
    49c8:	91 81       	ldd	r25, Z+1	; 0x01
    49ca:	01 97       	sbiw	r24, 0x01	; 1
    49cc:	f1 f7       	brne	.-4      	; 0x49ca <SM_U8LoginSys+0xf06>
    49ce:	fe 01       	movw	r30, r28
    49d0:	eb 5a       	subi	r30, 0xAB	; 171
    49d2:	ff 4f       	sbci	r31, 0xFF	; 255
    49d4:	91 83       	std	Z+1, r25	; 0x01
    49d6:	80 83       	st	Z, r24
							_delay_ms(500);
							DIO_U8SetPinValue(DIO_PORTB,DIO_PIN7,DIO_LOW);
    49d8:	81 e0       	ldi	r24, 0x01	; 1
    49da:	67 e0       	ldi	r22, 0x07	; 7
    49dc:	40 e0       	ldi	r20, 0x00	; 0
    49de:	0e 94 15 08 	call	0x102a	; 0x102a <DIO_U8SetPinValue>
								Local_U8ErrorState = ERROR_STATE_NOK;
    49e2:	10 92 9a 03 	sts	0x039A, r1
								 return Local_U8ErrorState;
    49e6:	f0 91 9a 03 	lds	r31, 0x039A
    49ea:	ca 52       	subi	r28, 0x2A	; 42
    49ec:	df 4f       	sbci	r29, 0xFF	; 255
    49ee:	f8 83       	st	Y, r31
    49f0:	c6 5d       	subi	r28, 0xD6	; 214
    49f2:	d0 40       	sbci	r29, 0x00	; 0
    49f4:	a0 c3       	rjmp	.+1856   	; 0x5136 <SM_U8LoginSys+0x1672>
					LCD_VoidGoToRowCol(1,0);
					LCD_u8WriteString("WELCOME USER_1");

					_delay_ms(1000);
					LCD_VoidSendCommand(1);
						for(u8 i=0;i<3;i++)
    49f6:	de 01       	movw	r26, r28
    49f8:	ac 52       	subi	r26, 0x2C	; 44
    49fa:	bf 4f       	sbci	r27, 0xFF	; 255
    49fc:	fe 01       	movw	r30, r28
    49fe:	ec 52       	subi	r30, 0x2C	; 44
    4a00:	ff 4f       	sbci	r31, 0xFF	; 255
    4a02:	80 81       	ld	r24, Z
    4a04:	8f 5f       	subi	r24, 0xFF	; 255
    4a06:	8c 93       	st	X, r24
    4a08:	fe 01       	movw	r30, r28
    4a0a:	ec 52       	subi	r30, 0x2C	; 44
    4a0c:	ff 4f       	sbci	r31, 0xFF	; 255
    4a0e:	80 81       	ld	r24, Z
    4a10:	83 30       	cpi	r24, 0x03	; 3
    4a12:	08 f4       	brcc	.+2      	; 0x4a16 <SM_U8LoginSys+0xf52>
    4a14:	7b cd       	rjmp	.-1290   	; 0x450c <SM_U8LoginSys+0xa48>
    4a16:	1a c9       	rjmp	.-3532   	; 0x3c4c <SM_U8LoginSys+0x188>
						}
					}
				} break;
				case '2':
				{
					LCD_VoidGoToRowCol(1,0);
    4a18:	81 e0       	ldi	r24, 0x01	; 1
    4a1a:	60 e0       	ldi	r22, 0x00	; 0
    4a1c:	0e 94 85 16 	call	0x2d0a	; 0x2d0a <LCD_VoidGoToRowCol>
					LCD_u8WriteString("WELCOME USER_2");
    4a20:	87 e1       	ldi	r24, 0x17	; 23
    4a22:	91 e0       	ldi	r25, 0x01	; 1
    4a24:	0e 94 3d 17 	call	0x2e7a	; 0x2e7a <LCD_u8WriteString>
    4a28:	fe 01       	movw	r30, r28
    4a2a:	ef 5a       	subi	r30, 0xAF	; 175
    4a2c:	ff 4f       	sbci	r31, 0xFF	; 255
    4a2e:	80 e0       	ldi	r24, 0x00	; 0
    4a30:	90 e0       	ldi	r25, 0x00	; 0
    4a32:	aa e7       	ldi	r26, 0x7A	; 122
    4a34:	b4 e4       	ldi	r27, 0x44	; 68
    4a36:	80 83       	st	Z, r24
    4a38:	91 83       	std	Z+1, r25	; 0x01
    4a3a:	a2 83       	std	Z+2, r26	; 0x02
    4a3c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4a3e:	8e 01       	movw	r16, r28
    4a40:	03 5b       	subi	r16, 0xB3	; 179
    4a42:	1f 4f       	sbci	r17, 0xFF	; 255
    4a44:	fe 01       	movw	r30, r28
    4a46:	ef 5a       	subi	r30, 0xAF	; 175
    4a48:	ff 4f       	sbci	r31, 0xFF	; 255
    4a4a:	60 81       	ld	r22, Z
    4a4c:	71 81       	ldd	r23, Z+1	; 0x01
    4a4e:	82 81       	ldd	r24, Z+2	; 0x02
    4a50:	93 81       	ldd	r25, Z+3	; 0x03
    4a52:	20 e0       	ldi	r18, 0x00	; 0
    4a54:	30 e0       	ldi	r19, 0x00	; 0
    4a56:	4a ef       	ldi	r20, 0xFA	; 250
    4a58:	54 e4       	ldi	r21, 0x44	; 68
    4a5a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4a5e:	dc 01       	movw	r26, r24
    4a60:	cb 01       	movw	r24, r22
    4a62:	f8 01       	movw	r30, r16
    4a64:	80 83       	st	Z, r24
    4a66:	91 83       	std	Z+1, r25	; 0x01
    4a68:	a2 83       	std	Z+2, r26	; 0x02
    4a6a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4a6c:	fe 01       	movw	r30, r28
    4a6e:	e3 5b       	subi	r30, 0xB3	; 179
    4a70:	ff 4f       	sbci	r31, 0xFF	; 255
    4a72:	60 81       	ld	r22, Z
    4a74:	71 81       	ldd	r23, Z+1	; 0x01
    4a76:	82 81       	ldd	r24, Z+2	; 0x02
    4a78:	93 81       	ldd	r25, Z+3	; 0x03
    4a7a:	20 e0       	ldi	r18, 0x00	; 0
    4a7c:	30 e0       	ldi	r19, 0x00	; 0
    4a7e:	40 e8       	ldi	r20, 0x80	; 128
    4a80:	5f e3       	ldi	r21, 0x3F	; 63
    4a82:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4a86:	88 23       	and	r24, r24
    4a88:	44 f4       	brge	.+16     	; 0x4a9a <SM_U8LoginSys+0xfd6>
		__ticks = 1;
    4a8a:	fe 01       	movw	r30, r28
    4a8c:	e5 5b       	subi	r30, 0xB5	; 181
    4a8e:	ff 4f       	sbci	r31, 0xFF	; 255
    4a90:	81 e0       	ldi	r24, 0x01	; 1
    4a92:	90 e0       	ldi	r25, 0x00	; 0
    4a94:	91 83       	std	Z+1, r25	; 0x01
    4a96:	80 83       	st	Z, r24
    4a98:	64 c0       	rjmp	.+200    	; 0x4b62 <SM_U8LoginSys+0x109e>
	else if (__tmp > 65535)
    4a9a:	fe 01       	movw	r30, r28
    4a9c:	e3 5b       	subi	r30, 0xB3	; 179
    4a9e:	ff 4f       	sbci	r31, 0xFF	; 255
    4aa0:	60 81       	ld	r22, Z
    4aa2:	71 81       	ldd	r23, Z+1	; 0x01
    4aa4:	82 81       	ldd	r24, Z+2	; 0x02
    4aa6:	93 81       	ldd	r25, Z+3	; 0x03
    4aa8:	20 e0       	ldi	r18, 0x00	; 0
    4aaa:	3f ef       	ldi	r19, 0xFF	; 255
    4aac:	4f e7       	ldi	r20, 0x7F	; 127
    4aae:	57 e4       	ldi	r21, 0x47	; 71
    4ab0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4ab4:	18 16       	cp	r1, r24
    4ab6:	0c f0       	brlt	.+2      	; 0x4aba <SM_U8LoginSys+0xff6>
    4ab8:	43 c0       	rjmp	.+134    	; 0x4b40 <SM_U8LoginSys+0x107c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4aba:	fe 01       	movw	r30, r28
    4abc:	ef 5a       	subi	r30, 0xAF	; 175
    4abe:	ff 4f       	sbci	r31, 0xFF	; 255
    4ac0:	60 81       	ld	r22, Z
    4ac2:	71 81       	ldd	r23, Z+1	; 0x01
    4ac4:	82 81       	ldd	r24, Z+2	; 0x02
    4ac6:	93 81       	ldd	r25, Z+3	; 0x03
    4ac8:	20 e0       	ldi	r18, 0x00	; 0
    4aca:	30 e0       	ldi	r19, 0x00	; 0
    4acc:	40 e2       	ldi	r20, 0x20	; 32
    4ace:	51 e4       	ldi	r21, 0x41	; 65
    4ad0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4ad4:	dc 01       	movw	r26, r24
    4ad6:	cb 01       	movw	r24, r22
    4ad8:	8e 01       	movw	r16, r28
    4ada:	05 5b       	subi	r16, 0xB5	; 181
    4adc:	1f 4f       	sbci	r17, 0xFF	; 255
    4ade:	bc 01       	movw	r22, r24
    4ae0:	cd 01       	movw	r24, r26
    4ae2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4ae6:	dc 01       	movw	r26, r24
    4ae8:	cb 01       	movw	r24, r22
    4aea:	f8 01       	movw	r30, r16
    4aec:	91 83       	std	Z+1, r25	; 0x01
    4aee:	80 83       	st	Z, r24
    4af0:	1f c0       	rjmp	.+62     	; 0x4b30 <SM_U8LoginSys+0x106c>
    4af2:	fe 01       	movw	r30, r28
    4af4:	e7 5b       	subi	r30, 0xB7	; 183
    4af6:	ff 4f       	sbci	r31, 0xFF	; 255
    4af8:	88 ec       	ldi	r24, 0xC8	; 200
    4afa:	90 e0       	ldi	r25, 0x00	; 0
    4afc:	91 83       	std	Z+1, r25	; 0x01
    4afe:	80 83       	st	Z, r24
    4b00:	fe 01       	movw	r30, r28
    4b02:	e7 5b       	subi	r30, 0xB7	; 183
    4b04:	ff 4f       	sbci	r31, 0xFF	; 255
    4b06:	80 81       	ld	r24, Z
    4b08:	91 81       	ldd	r25, Z+1	; 0x01
    4b0a:	01 97       	sbiw	r24, 0x01	; 1
    4b0c:	f1 f7       	brne	.-4      	; 0x4b0a <SM_U8LoginSys+0x1046>
    4b0e:	fe 01       	movw	r30, r28
    4b10:	e7 5b       	subi	r30, 0xB7	; 183
    4b12:	ff 4f       	sbci	r31, 0xFF	; 255
    4b14:	91 83       	std	Z+1, r25	; 0x01
    4b16:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4b18:	de 01       	movw	r26, r28
    4b1a:	a5 5b       	subi	r26, 0xB5	; 181
    4b1c:	bf 4f       	sbci	r27, 0xFF	; 255
    4b1e:	fe 01       	movw	r30, r28
    4b20:	e5 5b       	subi	r30, 0xB5	; 181
    4b22:	ff 4f       	sbci	r31, 0xFF	; 255
    4b24:	80 81       	ld	r24, Z
    4b26:	91 81       	ldd	r25, Z+1	; 0x01
    4b28:	01 97       	sbiw	r24, 0x01	; 1
    4b2a:	11 96       	adiw	r26, 0x01	; 1
    4b2c:	9c 93       	st	X, r25
    4b2e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4b30:	fe 01       	movw	r30, r28
    4b32:	e5 5b       	subi	r30, 0xB5	; 181
    4b34:	ff 4f       	sbci	r31, 0xFF	; 255
    4b36:	80 81       	ld	r24, Z
    4b38:	91 81       	ldd	r25, Z+1	; 0x01
    4b3a:	00 97       	sbiw	r24, 0x00	; 0
    4b3c:	d1 f6       	brne	.-76     	; 0x4af2 <SM_U8LoginSys+0x102e>
    4b3e:	27 c0       	rjmp	.+78     	; 0x4b8e <SM_U8LoginSys+0x10ca>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4b40:	8e 01       	movw	r16, r28
    4b42:	05 5b       	subi	r16, 0xB5	; 181
    4b44:	1f 4f       	sbci	r17, 0xFF	; 255
    4b46:	fe 01       	movw	r30, r28
    4b48:	e3 5b       	subi	r30, 0xB3	; 179
    4b4a:	ff 4f       	sbci	r31, 0xFF	; 255
    4b4c:	60 81       	ld	r22, Z
    4b4e:	71 81       	ldd	r23, Z+1	; 0x01
    4b50:	82 81       	ldd	r24, Z+2	; 0x02
    4b52:	93 81       	ldd	r25, Z+3	; 0x03
    4b54:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4b58:	dc 01       	movw	r26, r24
    4b5a:	cb 01       	movw	r24, r22
    4b5c:	f8 01       	movw	r30, r16
    4b5e:	91 83       	std	Z+1, r25	; 0x01
    4b60:	80 83       	st	Z, r24
    4b62:	de 01       	movw	r26, r28
    4b64:	a9 5b       	subi	r26, 0xB9	; 185
    4b66:	bf 4f       	sbci	r27, 0xFF	; 255
    4b68:	fe 01       	movw	r30, r28
    4b6a:	e5 5b       	subi	r30, 0xB5	; 181
    4b6c:	ff 4f       	sbci	r31, 0xFF	; 255
    4b6e:	80 81       	ld	r24, Z
    4b70:	91 81       	ldd	r25, Z+1	; 0x01
    4b72:	8d 93       	st	X+, r24
    4b74:	9c 93       	st	X, r25
    4b76:	fe 01       	movw	r30, r28
    4b78:	e9 5b       	subi	r30, 0xB9	; 185
    4b7a:	ff 4f       	sbci	r31, 0xFF	; 255
    4b7c:	80 81       	ld	r24, Z
    4b7e:	91 81       	ldd	r25, Z+1	; 0x01
    4b80:	01 97       	sbiw	r24, 0x01	; 1
    4b82:	f1 f7       	brne	.-4      	; 0x4b80 <SM_U8LoginSys+0x10bc>
    4b84:	fe 01       	movw	r30, r28
    4b86:	e9 5b       	subi	r30, 0xB9	; 185
    4b88:	ff 4f       	sbci	r31, 0xFF	; 255
    4b8a:	91 83       	std	Z+1, r25	; 0x01
    4b8c:	80 83       	st	Z, r24

					_delay_ms(1000);
					LCD_VoidSendCommand(1);
    4b8e:	81 e0       	ldi	r24, 0x01	; 1
    4b90:	0e 94 86 0e 	call	0x1d0c	; 0x1d0c <LCD_VoidSendCommand>
						for(u8 i=0;i<3;i++)
    4b94:	fe 01       	movw	r30, r28
    4b96:	ed 52       	subi	r30, 0x2D	; 45
    4b98:	ff 4f       	sbci	r31, 0xFF	; 255
    4b9a:	10 82       	st	Z, r1
    4b9c:	ce c1       	rjmp	.+924    	; 0x4f3a <SM_U8LoginSys+0x1476>
					{

						LCD_u8WriteString("ENTER YOUR PASS");
    4b9e:	84 eb       	ldi	r24, 0xB4	; 180
    4ba0:	90 e0       	ldi	r25, 0x00	; 0
    4ba2:	0e 94 3d 17 	call	0x2e7a	; 0x2e7a <LCD_u8WriteString>
    4ba6:	fe 01       	movw	r30, r28
    4ba8:	ed 5b       	subi	r30, 0xBD	; 189
    4baa:	ff 4f       	sbci	r31, 0xFF	; 255
    4bac:	80 e0       	ldi	r24, 0x00	; 0
    4bae:	90 e0       	ldi	r25, 0x00	; 0
    4bb0:	af e2       	ldi	r26, 0x2F	; 47
    4bb2:	b4 e4       	ldi	r27, 0x44	; 68
    4bb4:	80 83       	st	Z, r24
    4bb6:	91 83       	std	Z+1, r25	; 0x01
    4bb8:	a2 83       	std	Z+2, r26	; 0x02
    4bba:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4bbc:	8e 01       	movw	r16, r28
    4bbe:	01 5c       	subi	r16, 0xC1	; 193
    4bc0:	1f 4f       	sbci	r17, 0xFF	; 255
    4bc2:	fe 01       	movw	r30, r28
    4bc4:	ed 5b       	subi	r30, 0xBD	; 189
    4bc6:	ff 4f       	sbci	r31, 0xFF	; 255
    4bc8:	60 81       	ld	r22, Z
    4bca:	71 81       	ldd	r23, Z+1	; 0x01
    4bcc:	82 81       	ldd	r24, Z+2	; 0x02
    4bce:	93 81       	ldd	r25, Z+3	; 0x03
    4bd0:	20 e0       	ldi	r18, 0x00	; 0
    4bd2:	30 e0       	ldi	r19, 0x00	; 0
    4bd4:	4a ef       	ldi	r20, 0xFA	; 250
    4bd6:	54 e4       	ldi	r21, 0x44	; 68
    4bd8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4bdc:	dc 01       	movw	r26, r24
    4bde:	cb 01       	movw	r24, r22
    4be0:	f8 01       	movw	r30, r16
    4be2:	80 83       	st	Z, r24
    4be4:	91 83       	std	Z+1, r25	; 0x01
    4be6:	a2 83       	std	Z+2, r26	; 0x02
    4be8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4bea:	fe 01       	movw	r30, r28
    4bec:	ff 96       	adiw	r30, 0x3f	; 63
    4bee:	60 81       	ld	r22, Z
    4bf0:	71 81       	ldd	r23, Z+1	; 0x01
    4bf2:	82 81       	ldd	r24, Z+2	; 0x02
    4bf4:	93 81       	ldd	r25, Z+3	; 0x03
    4bf6:	20 e0       	ldi	r18, 0x00	; 0
    4bf8:	30 e0       	ldi	r19, 0x00	; 0
    4bfa:	40 e8       	ldi	r20, 0x80	; 128
    4bfc:	5f e3       	ldi	r21, 0x3F	; 63
    4bfe:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4c02:	88 23       	and	r24, r24
    4c04:	2c f4       	brge	.+10     	; 0x4c10 <SM_U8LoginSys+0x114c>
		__ticks = 1;
    4c06:	81 e0       	ldi	r24, 0x01	; 1
    4c08:	90 e0       	ldi	r25, 0x00	; 0
    4c0a:	9e af       	std	Y+62, r25	; 0x3e
    4c0c:	8d af       	std	Y+61, r24	; 0x3d
    4c0e:	46 c0       	rjmp	.+140    	; 0x4c9c <SM_U8LoginSys+0x11d8>
	else if (__tmp > 65535)
    4c10:	fe 01       	movw	r30, r28
    4c12:	ff 96       	adiw	r30, 0x3f	; 63
    4c14:	60 81       	ld	r22, Z
    4c16:	71 81       	ldd	r23, Z+1	; 0x01
    4c18:	82 81       	ldd	r24, Z+2	; 0x02
    4c1a:	93 81       	ldd	r25, Z+3	; 0x03
    4c1c:	20 e0       	ldi	r18, 0x00	; 0
    4c1e:	3f ef       	ldi	r19, 0xFF	; 255
    4c20:	4f e7       	ldi	r20, 0x7F	; 127
    4c22:	57 e4       	ldi	r21, 0x47	; 71
    4c24:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4c28:	18 16       	cp	r1, r24
    4c2a:	64 f5       	brge	.+88     	; 0x4c84 <SM_U8LoginSys+0x11c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4c2c:	fe 01       	movw	r30, r28
    4c2e:	ed 5b       	subi	r30, 0xBD	; 189
    4c30:	ff 4f       	sbci	r31, 0xFF	; 255
    4c32:	60 81       	ld	r22, Z
    4c34:	71 81       	ldd	r23, Z+1	; 0x01
    4c36:	82 81       	ldd	r24, Z+2	; 0x02
    4c38:	93 81       	ldd	r25, Z+3	; 0x03
    4c3a:	20 e0       	ldi	r18, 0x00	; 0
    4c3c:	30 e0       	ldi	r19, 0x00	; 0
    4c3e:	40 e2       	ldi	r20, 0x20	; 32
    4c40:	51 e4       	ldi	r21, 0x41	; 65
    4c42:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4c46:	dc 01       	movw	r26, r24
    4c48:	cb 01       	movw	r24, r22
    4c4a:	bc 01       	movw	r22, r24
    4c4c:	cd 01       	movw	r24, r26
    4c4e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4c52:	dc 01       	movw	r26, r24
    4c54:	cb 01       	movw	r24, r22
    4c56:	9e af       	std	Y+62, r25	; 0x3e
    4c58:	8d af       	std	Y+61, r24	; 0x3d
    4c5a:	0f c0       	rjmp	.+30     	; 0x4c7a <SM_U8LoginSys+0x11b6>
    4c5c:	88 ec       	ldi	r24, 0xC8	; 200
    4c5e:	90 e0       	ldi	r25, 0x00	; 0
    4c60:	9c af       	std	Y+60, r25	; 0x3c
    4c62:	8b af       	std	Y+59, r24	; 0x3b
    4c64:	8b ad       	ldd	r24, Y+59	; 0x3b
    4c66:	9c ad       	ldd	r25, Y+60	; 0x3c
    4c68:	01 97       	sbiw	r24, 0x01	; 1
    4c6a:	f1 f7       	brne	.-4      	; 0x4c68 <SM_U8LoginSys+0x11a4>
    4c6c:	9c af       	std	Y+60, r25	; 0x3c
    4c6e:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4c70:	8d ad       	ldd	r24, Y+61	; 0x3d
    4c72:	9e ad       	ldd	r25, Y+62	; 0x3e
    4c74:	01 97       	sbiw	r24, 0x01	; 1
    4c76:	9e af       	std	Y+62, r25	; 0x3e
    4c78:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4c7a:	8d ad       	ldd	r24, Y+61	; 0x3d
    4c7c:	9e ad       	ldd	r25, Y+62	; 0x3e
    4c7e:	00 97       	sbiw	r24, 0x00	; 0
    4c80:	69 f7       	brne	.-38     	; 0x4c5c <SM_U8LoginSys+0x1198>
    4c82:	16 c0       	rjmp	.+44     	; 0x4cb0 <SM_U8LoginSys+0x11ec>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4c84:	fe 01       	movw	r30, r28
    4c86:	ff 96       	adiw	r30, 0x3f	; 63
    4c88:	60 81       	ld	r22, Z
    4c8a:	71 81       	ldd	r23, Z+1	; 0x01
    4c8c:	82 81       	ldd	r24, Z+2	; 0x02
    4c8e:	93 81       	ldd	r25, Z+3	; 0x03
    4c90:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4c94:	dc 01       	movw	r26, r24
    4c96:	cb 01       	movw	r24, r22
    4c98:	9e af       	std	Y+62, r25	; 0x3e
    4c9a:	8d af       	std	Y+61, r24	; 0x3d
    4c9c:	8d ad       	ldd	r24, Y+61	; 0x3d
    4c9e:	9e ad       	ldd	r25, Y+62	; 0x3e
    4ca0:	9a af       	std	Y+58, r25	; 0x3a
    4ca2:	89 af       	std	Y+57, r24	; 0x39
    4ca4:	89 ad       	ldd	r24, Y+57	; 0x39
    4ca6:	9a ad       	ldd	r25, Y+58	; 0x3a
    4ca8:	01 97       	sbiw	r24, 0x01	; 1
    4caa:	f1 f7       	brne	.-4      	; 0x4ca8 <SM_U8LoginSys+0x11e4>
    4cac:	9a af       	std	Y+58, r25	; 0x3a
    4cae:	89 af       	std	Y+57, r24	; 0x39
						_delay_ms(700);
						LCD_VoidGoToRowCol(1,0);
    4cb0:	81 e0       	ldi	r24, 0x01	; 1
    4cb2:	60 e0       	ldi	r22, 0x00	; 0
    4cb4:	0e 94 85 16 	call	0x2d0a	; 0x2d0a <LCD_VoidGoToRowCol>
						User_Pass= SM_U16EnterPassword();
    4cb8:	0e 94 ac 28 	call	0x5158	; 0x5158 <SM_U16EnterPassword>
    4cbc:	90 93 99 03 	sts	0x0399, r25
    4cc0:	80 93 98 03 	sts	0x0398, r24
						if(User_Pass ==3333)
    4cc4:	80 91 98 03 	lds	r24, 0x0398
    4cc8:	90 91 99 03 	lds	r25, 0x0399
    4ccc:	fd e0       	ldi	r31, 0x0D	; 13
    4cce:	85 30       	cpi	r24, 0x05	; 5
    4cd0:	9f 07       	cpc	r25, r31
    4cd2:	79 f4       	brne	.+30     	; 0x4cf2 <SM_U8LoginSys+0x122e>
						{

							LCD_u8WriteString("WELCOME MAI");
    4cd4:	86 e2       	ldi	r24, 0x26	; 38
    4cd6:	91 e0       	ldi	r25, 0x01	; 1
    4cd8:	0e 94 3d 17 	call	0x2e7a	; 0x2e7a <LCD_u8WriteString>

							Local_U8ErrorState = ERROR_STATE_OK;
    4cdc:	81 e0       	ldi	r24, 0x01	; 1
    4cde:	80 93 9a 03 	sts	0x039A, r24
							 return Local_U8ErrorState;
    4ce2:	20 91 9a 03 	lds	r18, 0x039A
    4ce6:	ca 52       	subi	r28, 0x2A	; 42
    4ce8:	df 4f       	sbci	r29, 0xFF	; 255
    4cea:	28 83       	st	Y, r18
    4cec:	c6 5d       	subi	r28, 0xD6	; 214
    4cee:	d0 40       	sbci	r29, 0x00	; 0
    4cf0:	22 c2       	rjmp	.+1092   	; 0x5136 <SM_U8LoginSys+0x1672>

						}
						else
						{
							LCD_u8WriteString("INCORRECT PASS");
    4cf2:	80 ed       	ldi	r24, 0xD0	; 208
    4cf4:	90 e0       	ldi	r25, 0x00	; 0
    4cf6:	0e 94 3d 17 	call	0x2e7a	; 0x2e7a <LCD_u8WriteString>
							LCD_VoidGoToRowCol(1,0);
    4cfa:	81 e0       	ldi	r24, 0x01	; 1
    4cfc:	60 e0       	ldi	r22, 0x00	; 0
    4cfe:	0e 94 85 16 	call	0x2d0a	; 0x2d0a <LCD_VoidGoToRowCol>
							LCD_u8WriteString("TRY AGAIN");
    4d02:	8f ed       	ldi	r24, 0xDF	; 223
    4d04:	90 e0       	ldi	r25, 0x00	; 0
    4d06:	0e 94 3d 17 	call	0x2e7a	; 0x2e7a <LCD_u8WriteString>
    4d0a:	80 e0       	ldi	r24, 0x00	; 0
    4d0c:	90 e0       	ldi	r25, 0x00	; 0
    4d0e:	af e2       	ldi	r26, 0x2F	; 47
    4d10:	b4 e4       	ldi	r27, 0x44	; 68
    4d12:	8d ab       	std	Y+53, r24	; 0x35
    4d14:	9e ab       	std	Y+54, r25	; 0x36
    4d16:	af ab       	std	Y+55, r26	; 0x37
    4d18:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4d1a:	6d a9       	ldd	r22, Y+53	; 0x35
    4d1c:	7e a9       	ldd	r23, Y+54	; 0x36
    4d1e:	8f a9       	ldd	r24, Y+55	; 0x37
    4d20:	98 ad       	ldd	r25, Y+56	; 0x38
    4d22:	20 e0       	ldi	r18, 0x00	; 0
    4d24:	30 e0       	ldi	r19, 0x00	; 0
    4d26:	4a ef       	ldi	r20, 0xFA	; 250
    4d28:	54 e4       	ldi	r21, 0x44	; 68
    4d2a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4d2e:	dc 01       	movw	r26, r24
    4d30:	cb 01       	movw	r24, r22
    4d32:	89 ab       	std	Y+49, r24	; 0x31
    4d34:	9a ab       	std	Y+50, r25	; 0x32
    4d36:	ab ab       	std	Y+51, r26	; 0x33
    4d38:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    4d3a:	69 a9       	ldd	r22, Y+49	; 0x31
    4d3c:	7a a9       	ldd	r23, Y+50	; 0x32
    4d3e:	8b a9       	ldd	r24, Y+51	; 0x33
    4d40:	9c a9       	ldd	r25, Y+52	; 0x34
    4d42:	20 e0       	ldi	r18, 0x00	; 0
    4d44:	30 e0       	ldi	r19, 0x00	; 0
    4d46:	40 e8       	ldi	r20, 0x80	; 128
    4d48:	5f e3       	ldi	r21, 0x3F	; 63
    4d4a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4d4e:	88 23       	and	r24, r24
    4d50:	2c f4       	brge	.+10     	; 0x4d5c <SM_U8LoginSys+0x1298>
		__ticks = 1;
    4d52:	81 e0       	ldi	r24, 0x01	; 1
    4d54:	90 e0       	ldi	r25, 0x00	; 0
    4d56:	98 ab       	std	Y+48, r25	; 0x30
    4d58:	8f a7       	std	Y+47, r24	; 0x2f
    4d5a:	3f c0       	rjmp	.+126    	; 0x4dda <SM_U8LoginSys+0x1316>
	else if (__tmp > 65535)
    4d5c:	69 a9       	ldd	r22, Y+49	; 0x31
    4d5e:	7a a9       	ldd	r23, Y+50	; 0x32
    4d60:	8b a9       	ldd	r24, Y+51	; 0x33
    4d62:	9c a9       	ldd	r25, Y+52	; 0x34
    4d64:	20 e0       	ldi	r18, 0x00	; 0
    4d66:	3f ef       	ldi	r19, 0xFF	; 255
    4d68:	4f e7       	ldi	r20, 0x7F	; 127
    4d6a:	57 e4       	ldi	r21, 0x47	; 71
    4d6c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4d70:	18 16       	cp	r1, r24
    4d72:	4c f5       	brge	.+82     	; 0x4dc6 <SM_U8LoginSys+0x1302>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4d74:	6d a9       	ldd	r22, Y+53	; 0x35
    4d76:	7e a9       	ldd	r23, Y+54	; 0x36
    4d78:	8f a9       	ldd	r24, Y+55	; 0x37
    4d7a:	98 ad       	ldd	r25, Y+56	; 0x38
    4d7c:	20 e0       	ldi	r18, 0x00	; 0
    4d7e:	30 e0       	ldi	r19, 0x00	; 0
    4d80:	40 e2       	ldi	r20, 0x20	; 32
    4d82:	51 e4       	ldi	r21, 0x41	; 65
    4d84:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4d88:	dc 01       	movw	r26, r24
    4d8a:	cb 01       	movw	r24, r22
    4d8c:	bc 01       	movw	r22, r24
    4d8e:	cd 01       	movw	r24, r26
    4d90:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4d94:	dc 01       	movw	r26, r24
    4d96:	cb 01       	movw	r24, r22
    4d98:	98 ab       	std	Y+48, r25	; 0x30
    4d9a:	8f a7       	std	Y+47, r24	; 0x2f
    4d9c:	0f c0       	rjmp	.+30     	; 0x4dbc <SM_U8LoginSys+0x12f8>
    4d9e:	88 ec       	ldi	r24, 0xC8	; 200
    4da0:	90 e0       	ldi	r25, 0x00	; 0
    4da2:	9e a7       	std	Y+46, r25	; 0x2e
    4da4:	8d a7       	std	Y+45, r24	; 0x2d
    4da6:	8d a5       	ldd	r24, Y+45	; 0x2d
    4da8:	9e a5       	ldd	r25, Y+46	; 0x2e
    4daa:	01 97       	sbiw	r24, 0x01	; 1
    4dac:	f1 f7       	brne	.-4      	; 0x4daa <SM_U8LoginSys+0x12e6>
    4dae:	9e a7       	std	Y+46, r25	; 0x2e
    4db0:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4db2:	8f a5       	ldd	r24, Y+47	; 0x2f
    4db4:	98 a9       	ldd	r25, Y+48	; 0x30
    4db6:	01 97       	sbiw	r24, 0x01	; 1
    4db8:	98 ab       	std	Y+48, r25	; 0x30
    4dba:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4dbc:	8f a5       	ldd	r24, Y+47	; 0x2f
    4dbe:	98 a9       	ldd	r25, Y+48	; 0x30
    4dc0:	00 97       	sbiw	r24, 0x00	; 0
    4dc2:	69 f7       	brne	.-38     	; 0x4d9e <SM_U8LoginSys+0x12da>
    4dc4:	14 c0       	rjmp	.+40     	; 0x4dee <SM_U8LoginSys+0x132a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4dc6:	69 a9       	ldd	r22, Y+49	; 0x31
    4dc8:	7a a9       	ldd	r23, Y+50	; 0x32
    4dca:	8b a9       	ldd	r24, Y+51	; 0x33
    4dcc:	9c a9       	ldd	r25, Y+52	; 0x34
    4dce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4dd2:	dc 01       	movw	r26, r24
    4dd4:	cb 01       	movw	r24, r22
    4dd6:	98 ab       	std	Y+48, r25	; 0x30
    4dd8:	8f a7       	std	Y+47, r24	; 0x2f
    4dda:	8f a5       	ldd	r24, Y+47	; 0x2f
    4ddc:	98 a9       	ldd	r25, Y+48	; 0x30
    4dde:	9c a7       	std	Y+44, r25	; 0x2c
    4de0:	8b a7       	std	Y+43, r24	; 0x2b
    4de2:	8b a5       	ldd	r24, Y+43	; 0x2b
    4de4:	9c a5       	ldd	r25, Y+44	; 0x2c
    4de6:	01 97       	sbiw	r24, 0x01	; 1
    4de8:	f1 f7       	brne	.-4      	; 0x4de6 <SM_U8LoginSys+0x1322>
    4dea:	9c a7       	std	Y+44, r25	; 0x2c
    4dec:	8b a7       	std	Y+43, r24	; 0x2b
							_delay_ms(700);
							LCD_VoidSendCommand(1);
    4dee:	81 e0       	ldi	r24, 0x01	; 1
    4df0:	0e 94 86 0e 	call	0x1d0c	; 0x1d0c <LCD_VoidSendCommand>
							if(i==2)
    4df4:	fe 01       	movw	r30, r28
    4df6:	ed 52       	subi	r30, 0x2D	; 45
    4df8:	ff 4f       	sbci	r31, 0xFF	; 255
    4dfa:	80 81       	ld	r24, Z
    4dfc:	82 30       	cpi	r24, 0x02	; 2
    4dfe:	09 f0       	breq	.+2      	; 0x4e02 <SM_U8LoginSys+0x133e>
    4e00:	93 c0       	rjmp	.+294    	; 0x4f28 <SM_U8LoginSys+0x1464>
							{
								LCD_VoidGoToRowCol(1,0);
    4e02:	81 e0       	ldi	r24, 0x01	; 1
    4e04:	60 e0       	ldi	r22, 0x00	; 0
    4e06:	0e 94 85 16 	call	0x2d0a	; 0x2d0a <LCD_VoidGoToRowCol>
								LCD_u8WriteString("U entered 3 times");
    4e0a:	89 ee       	ldi	r24, 0xE9	; 233
    4e0c:	90 e0       	ldi	r25, 0x00	; 0
    4e0e:	0e 94 3d 17 	call	0x2e7a	; 0x2e7a <LCD_u8WriteString>
								DIO_U8SetPinDirection(DIO_PORTB,DIO_PIN7,DIO_HIGH);
    4e12:	81 e0       	ldi	r24, 0x01	; 1
    4e14:	67 e0       	ldi	r22, 0x07	; 7
    4e16:	41 e0       	ldi	r20, 0x01	; 1
    4e18:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <DIO_U8SetPinDirection>
								DIO_U8SetPinValue(DIO_PORTB,DIO_PIN7,DIO_HIGH);
    4e1c:	81 e0       	ldi	r24, 0x01	; 1
    4e1e:	67 e0       	ldi	r22, 0x07	; 7
    4e20:	41 e0       	ldi	r20, 0x01	; 1
    4e22:	0e 94 15 08 	call	0x102a	; 0x102a <DIO_U8SetPinValue>
    4e26:	80 e0       	ldi	r24, 0x00	; 0
    4e28:	90 e0       	ldi	r25, 0x00	; 0
    4e2a:	aa ef       	ldi	r26, 0xFA	; 250
    4e2c:	b3 e4       	ldi	r27, 0x43	; 67
    4e2e:	8f a3       	std	Y+39, r24	; 0x27
    4e30:	98 a7       	std	Y+40, r25	; 0x28
    4e32:	a9 a7       	std	Y+41, r26	; 0x29
    4e34:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4e36:	6f a1       	ldd	r22, Y+39	; 0x27
    4e38:	78 a5       	ldd	r23, Y+40	; 0x28
    4e3a:	89 a5       	ldd	r24, Y+41	; 0x29
    4e3c:	9a a5       	ldd	r25, Y+42	; 0x2a
    4e3e:	20 e0       	ldi	r18, 0x00	; 0
    4e40:	30 e0       	ldi	r19, 0x00	; 0
    4e42:	4a ef       	ldi	r20, 0xFA	; 250
    4e44:	54 e4       	ldi	r21, 0x44	; 68
    4e46:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4e4a:	dc 01       	movw	r26, r24
    4e4c:	cb 01       	movw	r24, r22
    4e4e:	8b a3       	std	Y+35, r24	; 0x23
    4e50:	9c a3       	std	Y+36, r25	; 0x24
    4e52:	ad a3       	std	Y+37, r26	; 0x25
    4e54:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    4e56:	6b a1       	ldd	r22, Y+35	; 0x23
    4e58:	7c a1       	ldd	r23, Y+36	; 0x24
    4e5a:	8d a1       	ldd	r24, Y+37	; 0x25
    4e5c:	9e a1       	ldd	r25, Y+38	; 0x26
    4e5e:	20 e0       	ldi	r18, 0x00	; 0
    4e60:	30 e0       	ldi	r19, 0x00	; 0
    4e62:	40 e8       	ldi	r20, 0x80	; 128
    4e64:	5f e3       	ldi	r21, 0x3F	; 63
    4e66:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4e6a:	88 23       	and	r24, r24
    4e6c:	2c f4       	brge	.+10     	; 0x4e78 <SM_U8LoginSys+0x13b4>
		__ticks = 1;
    4e6e:	81 e0       	ldi	r24, 0x01	; 1
    4e70:	90 e0       	ldi	r25, 0x00	; 0
    4e72:	9a a3       	std	Y+34, r25	; 0x22
    4e74:	89 a3       	std	Y+33, r24	; 0x21
    4e76:	3f c0       	rjmp	.+126    	; 0x4ef6 <SM_U8LoginSys+0x1432>
	else if (__tmp > 65535)
    4e78:	6b a1       	ldd	r22, Y+35	; 0x23
    4e7a:	7c a1       	ldd	r23, Y+36	; 0x24
    4e7c:	8d a1       	ldd	r24, Y+37	; 0x25
    4e7e:	9e a1       	ldd	r25, Y+38	; 0x26
    4e80:	20 e0       	ldi	r18, 0x00	; 0
    4e82:	3f ef       	ldi	r19, 0xFF	; 255
    4e84:	4f e7       	ldi	r20, 0x7F	; 127
    4e86:	57 e4       	ldi	r21, 0x47	; 71
    4e88:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4e8c:	18 16       	cp	r1, r24
    4e8e:	4c f5       	brge	.+82     	; 0x4ee2 <SM_U8LoginSys+0x141e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4e90:	6f a1       	ldd	r22, Y+39	; 0x27
    4e92:	78 a5       	ldd	r23, Y+40	; 0x28
    4e94:	89 a5       	ldd	r24, Y+41	; 0x29
    4e96:	9a a5       	ldd	r25, Y+42	; 0x2a
    4e98:	20 e0       	ldi	r18, 0x00	; 0
    4e9a:	30 e0       	ldi	r19, 0x00	; 0
    4e9c:	40 e2       	ldi	r20, 0x20	; 32
    4e9e:	51 e4       	ldi	r21, 0x41	; 65
    4ea0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4ea4:	dc 01       	movw	r26, r24
    4ea6:	cb 01       	movw	r24, r22
    4ea8:	bc 01       	movw	r22, r24
    4eaa:	cd 01       	movw	r24, r26
    4eac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4eb0:	dc 01       	movw	r26, r24
    4eb2:	cb 01       	movw	r24, r22
    4eb4:	9a a3       	std	Y+34, r25	; 0x22
    4eb6:	89 a3       	std	Y+33, r24	; 0x21
    4eb8:	0f c0       	rjmp	.+30     	; 0x4ed8 <SM_U8LoginSys+0x1414>
    4eba:	88 ec       	ldi	r24, 0xC8	; 200
    4ebc:	90 e0       	ldi	r25, 0x00	; 0
    4ebe:	98 a3       	std	Y+32, r25	; 0x20
    4ec0:	8f 8f       	std	Y+31, r24	; 0x1f
    4ec2:	8f 8d       	ldd	r24, Y+31	; 0x1f
    4ec4:	98 a1       	ldd	r25, Y+32	; 0x20
    4ec6:	01 97       	sbiw	r24, 0x01	; 1
    4ec8:	f1 f7       	brne	.-4      	; 0x4ec6 <SM_U8LoginSys+0x1402>
    4eca:	98 a3       	std	Y+32, r25	; 0x20
    4ecc:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4ece:	89 a1       	ldd	r24, Y+33	; 0x21
    4ed0:	9a a1       	ldd	r25, Y+34	; 0x22
    4ed2:	01 97       	sbiw	r24, 0x01	; 1
    4ed4:	9a a3       	std	Y+34, r25	; 0x22
    4ed6:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4ed8:	89 a1       	ldd	r24, Y+33	; 0x21
    4eda:	9a a1       	ldd	r25, Y+34	; 0x22
    4edc:	00 97       	sbiw	r24, 0x00	; 0
    4ede:	69 f7       	brne	.-38     	; 0x4eba <SM_U8LoginSys+0x13f6>
    4ee0:	14 c0       	rjmp	.+40     	; 0x4f0a <SM_U8LoginSys+0x1446>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4ee2:	6b a1       	ldd	r22, Y+35	; 0x23
    4ee4:	7c a1       	ldd	r23, Y+36	; 0x24
    4ee6:	8d a1       	ldd	r24, Y+37	; 0x25
    4ee8:	9e a1       	ldd	r25, Y+38	; 0x26
    4eea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4eee:	dc 01       	movw	r26, r24
    4ef0:	cb 01       	movw	r24, r22
    4ef2:	9a a3       	std	Y+34, r25	; 0x22
    4ef4:	89 a3       	std	Y+33, r24	; 0x21
    4ef6:	89 a1       	ldd	r24, Y+33	; 0x21
    4ef8:	9a a1       	ldd	r25, Y+34	; 0x22
    4efa:	9e 8f       	std	Y+30, r25	; 0x1e
    4efc:	8d 8f       	std	Y+29, r24	; 0x1d
    4efe:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4f00:	9e 8d       	ldd	r25, Y+30	; 0x1e
    4f02:	01 97       	sbiw	r24, 0x01	; 1
    4f04:	f1 f7       	brne	.-4      	; 0x4f02 <SM_U8LoginSys+0x143e>
    4f06:	9e 8f       	std	Y+30, r25	; 0x1e
    4f08:	8d 8f       	std	Y+29, r24	; 0x1d
								_delay_ms(500);
								DIO_U8SetPinValue(DIO_PORTB,DIO_PIN7,DIO_LOW);
    4f0a:	81 e0       	ldi	r24, 0x01	; 1
    4f0c:	67 e0       	ldi	r22, 0x07	; 7
    4f0e:	40 e0       	ldi	r20, 0x00	; 0
    4f10:	0e 94 15 08 	call	0x102a	; 0x102a <DIO_U8SetPinValue>
								Local_U8ErrorState = ERROR_STATE_NOK;
    4f14:	10 92 9a 03 	sts	0x039A, r1
								 return Local_U8ErrorState;
    4f18:	30 91 9a 03 	lds	r19, 0x039A
    4f1c:	ca 52       	subi	r28, 0x2A	; 42
    4f1e:	df 4f       	sbci	r29, 0xFF	; 255
    4f20:	38 83       	st	Y, r19
    4f22:	c6 5d       	subi	r28, 0xD6	; 214
    4f24:	d0 40       	sbci	r29, 0x00	; 0
    4f26:	07 c1       	rjmp	.+526    	; 0x5136 <SM_U8LoginSys+0x1672>
					LCD_VoidGoToRowCol(1,0);
					LCD_u8WriteString("WELCOME USER_2");

					_delay_ms(1000);
					LCD_VoidSendCommand(1);
						for(u8 i=0;i<3;i++)
    4f28:	de 01       	movw	r26, r28
    4f2a:	ad 52       	subi	r26, 0x2D	; 45
    4f2c:	bf 4f       	sbci	r27, 0xFF	; 255
    4f2e:	fe 01       	movw	r30, r28
    4f30:	ed 52       	subi	r30, 0x2D	; 45
    4f32:	ff 4f       	sbci	r31, 0xFF	; 255
    4f34:	80 81       	ld	r24, Z
    4f36:	8f 5f       	subi	r24, 0xFF	; 255
    4f38:	8c 93       	st	X, r24
    4f3a:	fe 01       	movw	r30, r28
    4f3c:	ed 52       	subi	r30, 0x2D	; 45
    4f3e:	ff 4f       	sbci	r31, 0xFF	; 255
    4f40:	80 81       	ld	r24, Z
    4f42:	83 30       	cpi	r24, 0x03	; 3
    4f44:	08 f4       	brcc	.+2      	; 0x4f48 <SM_U8LoginSys+0x1484>
    4f46:	2b ce       	rjmp	.-938    	; 0x4b9e <SM_U8LoginSys+0x10da>
    4f48:	0c 94 26 1e 	jmp	0x3c4c	; 0x3c4c <SM_U8LoginSys+0x188>
								Local_U8ErrorState = ERROR_STATE_NOK;
								 return Local_U8ErrorState;
							}
						}
					}
				} break;
    4f4c:	80 e0       	ldi	r24, 0x00	; 0
    4f4e:	90 e0       	ldi	r25, 0x00	; 0
    4f50:	a8 e4       	ldi	r26, 0x48	; 72
    4f52:	b2 e4       	ldi	r27, 0x42	; 66
    4f54:	89 8f       	std	Y+25, r24	; 0x19
    4f56:	9a 8f       	std	Y+26, r25	; 0x1a
    4f58:	ab 8f       	std	Y+27, r26	; 0x1b
    4f5a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4f5c:	69 8d       	ldd	r22, Y+25	; 0x19
    4f5e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4f60:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4f62:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4f64:	20 e0       	ldi	r18, 0x00	; 0
    4f66:	30 e0       	ldi	r19, 0x00	; 0
    4f68:	4a ef       	ldi	r20, 0xFA	; 250
    4f6a:	54 e4       	ldi	r21, 0x44	; 68
    4f6c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4f70:	dc 01       	movw	r26, r24
    4f72:	cb 01       	movw	r24, r22
    4f74:	8d 8b       	std	Y+21, r24	; 0x15
    4f76:	9e 8b       	std	Y+22, r25	; 0x16
    4f78:	af 8b       	std	Y+23, r26	; 0x17
    4f7a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    4f7c:	6d 89       	ldd	r22, Y+21	; 0x15
    4f7e:	7e 89       	ldd	r23, Y+22	; 0x16
    4f80:	8f 89       	ldd	r24, Y+23	; 0x17
    4f82:	98 8d       	ldd	r25, Y+24	; 0x18
    4f84:	20 e0       	ldi	r18, 0x00	; 0
    4f86:	30 e0       	ldi	r19, 0x00	; 0
    4f88:	40 e8       	ldi	r20, 0x80	; 128
    4f8a:	5f e3       	ldi	r21, 0x3F	; 63
    4f8c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4f90:	88 23       	and	r24, r24
    4f92:	2c f4       	brge	.+10     	; 0x4f9e <SM_U8LoginSys+0x14da>
		__ticks = 1;
    4f94:	81 e0       	ldi	r24, 0x01	; 1
    4f96:	90 e0       	ldi	r25, 0x00	; 0
    4f98:	9c 8b       	std	Y+20, r25	; 0x14
    4f9a:	8b 8b       	std	Y+19, r24	; 0x13
    4f9c:	3f c0       	rjmp	.+126    	; 0x501c <SM_U8LoginSys+0x1558>
	else if (__tmp > 65535)
    4f9e:	6d 89       	ldd	r22, Y+21	; 0x15
    4fa0:	7e 89       	ldd	r23, Y+22	; 0x16
    4fa2:	8f 89       	ldd	r24, Y+23	; 0x17
    4fa4:	98 8d       	ldd	r25, Y+24	; 0x18
    4fa6:	20 e0       	ldi	r18, 0x00	; 0
    4fa8:	3f ef       	ldi	r19, 0xFF	; 255
    4faa:	4f e7       	ldi	r20, 0x7F	; 127
    4fac:	57 e4       	ldi	r21, 0x47	; 71
    4fae:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4fb2:	18 16       	cp	r1, r24
    4fb4:	4c f5       	brge	.+82     	; 0x5008 <SM_U8LoginSys+0x1544>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4fb6:	69 8d       	ldd	r22, Y+25	; 0x19
    4fb8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4fba:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4fbc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4fbe:	20 e0       	ldi	r18, 0x00	; 0
    4fc0:	30 e0       	ldi	r19, 0x00	; 0
    4fc2:	40 e2       	ldi	r20, 0x20	; 32
    4fc4:	51 e4       	ldi	r21, 0x41	; 65
    4fc6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4fca:	dc 01       	movw	r26, r24
    4fcc:	cb 01       	movw	r24, r22
    4fce:	bc 01       	movw	r22, r24
    4fd0:	cd 01       	movw	r24, r26
    4fd2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4fd6:	dc 01       	movw	r26, r24
    4fd8:	cb 01       	movw	r24, r22
    4fda:	9c 8b       	std	Y+20, r25	; 0x14
    4fdc:	8b 8b       	std	Y+19, r24	; 0x13
    4fde:	0f c0       	rjmp	.+30     	; 0x4ffe <SM_U8LoginSys+0x153a>
    4fe0:	88 ec       	ldi	r24, 0xC8	; 200
    4fe2:	90 e0       	ldi	r25, 0x00	; 0
    4fe4:	9a 8b       	std	Y+18, r25	; 0x12
    4fe6:	89 8b       	std	Y+17, r24	; 0x11
    4fe8:	89 89       	ldd	r24, Y+17	; 0x11
    4fea:	9a 89       	ldd	r25, Y+18	; 0x12
    4fec:	01 97       	sbiw	r24, 0x01	; 1
    4fee:	f1 f7       	brne	.-4      	; 0x4fec <SM_U8LoginSys+0x1528>
    4ff0:	9a 8b       	std	Y+18, r25	; 0x12
    4ff2:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4ff4:	8b 89       	ldd	r24, Y+19	; 0x13
    4ff6:	9c 89       	ldd	r25, Y+20	; 0x14
    4ff8:	01 97       	sbiw	r24, 0x01	; 1
    4ffa:	9c 8b       	std	Y+20, r25	; 0x14
    4ffc:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4ffe:	8b 89       	ldd	r24, Y+19	; 0x13
    5000:	9c 89       	ldd	r25, Y+20	; 0x14
    5002:	00 97       	sbiw	r24, 0x00	; 0
    5004:	69 f7       	brne	.-38     	; 0x4fe0 <SM_U8LoginSys+0x151c>
    5006:	14 c0       	rjmp	.+40     	; 0x5030 <SM_U8LoginSys+0x156c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5008:	6d 89       	ldd	r22, Y+21	; 0x15
    500a:	7e 89       	ldd	r23, Y+22	; 0x16
    500c:	8f 89       	ldd	r24, Y+23	; 0x17
    500e:	98 8d       	ldd	r25, Y+24	; 0x18
    5010:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5014:	dc 01       	movw	r26, r24
    5016:	cb 01       	movw	r24, r22
    5018:	9c 8b       	std	Y+20, r25	; 0x14
    501a:	8b 8b       	std	Y+19, r24	; 0x13
    501c:	8b 89       	ldd	r24, Y+19	; 0x13
    501e:	9c 89       	ldd	r25, Y+20	; 0x14
    5020:	98 8b       	std	Y+16, r25	; 0x10
    5022:	8f 87       	std	Y+15, r24	; 0x0f
    5024:	8f 85       	ldd	r24, Y+15	; 0x0f
    5026:	98 89       	ldd	r25, Y+16	; 0x10
    5028:	01 97       	sbiw	r24, 0x01	; 1
    502a:	f1 f7       	brne	.-4      	; 0x5028 <SM_U8LoginSys+0x1564>
    502c:	98 8b       	std	Y+16, r25	; 0x10
    502e:	8f 87       	std	Y+15, r24	; 0x0f

				case 'c':
				{
					_delay_ms(50);
					LCD_VoidSendCommand(1);
    5030:	81 e0       	ldi	r24, 0x01	; 1
    5032:	0e 94 86 0e 	call	0x1d0c	; 0x1d0c <LCD_VoidSendCommand>
    5036:	0c 94 26 1e 	jmp	0x3c4c	; 0x3c4c <SM_U8LoginSys+0x188>
				} break;
				default :
					LCD_VoidSendCommand(1);
    503a:	81 e0       	ldi	r24, 0x01	; 1
    503c:	0e 94 86 0e 	call	0x1d0c	; 0x1d0c <LCD_VoidSendCommand>

					LCD_u8WriteString("INVALID USER");
    5040:	82 e3       	ldi	r24, 0x32	; 50
    5042:	91 e0       	ldi	r25, 0x01	; 1
    5044:	0e 94 3d 17 	call	0x2e7a	; 0x2e7a <LCD_u8WriteString>
    5048:	80 e0       	ldi	r24, 0x00	; 0
    504a:	90 e0       	ldi	r25, 0x00	; 0
    504c:	af e2       	ldi	r26, 0x2F	; 47
    504e:	b4 e4       	ldi	r27, 0x44	; 68
    5050:	8b 87       	std	Y+11, r24	; 0x0b
    5052:	9c 87       	std	Y+12, r25	; 0x0c
    5054:	ad 87       	std	Y+13, r26	; 0x0d
    5056:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5058:	6b 85       	ldd	r22, Y+11	; 0x0b
    505a:	7c 85       	ldd	r23, Y+12	; 0x0c
    505c:	8d 85       	ldd	r24, Y+13	; 0x0d
    505e:	9e 85       	ldd	r25, Y+14	; 0x0e
    5060:	20 e0       	ldi	r18, 0x00	; 0
    5062:	30 e0       	ldi	r19, 0x00	; 0
    5064:	4a ef       	ldi	r20, 0xFA	; 250
    5066:	54 e4       	ldi	r21, 0x44	; 68
    5068:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    506c:	dc 01       	movw	r26, r24
    506e:	cb 01       	movw	r24, r22
    5070:	8f 83       	std	Y+7, r24	; 0x07
    5072:	98 87       	std	Y+8, r25	; 0x08
    5074:	a9 87       	std	Y+9, r26	; 0x09
    5076:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    5078:	6f 81       	ldd	r22, Y+7	; 0x07
    507a:	78 85       	ldd	r23, Y+8	; 0x08
    507c:	89 85       	ldd	r24, Y+9	; 0x09
    507e:	9a 85       	ldd	r25, Y+10	; 0x0a
    5080:	20 e0       	ldi	r18, 0x00	; 0
    5082:	30 e0       	ldi	r19, 0x00	; 0
    5084:	40 e8       	ldi	r20, 0x80	; 128
    5086:	5f e3       	ldi	r21, 0x3F	; 63
    5088:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    508c:	88 23       	and	r24, r24
    508e:	2c f4       	brge	.+10     	; 0x509a <SM_U8LoginSys+0x15d6>
		__ticks = 1;
    5090:	81 e0       	ldi	r24, 0x01	; 1
    5092:	90 e0       	ldi	r25, 0x00	; 0
    5094:	9e 83       	std	Y+6, r25	; 0x06
    5096:	8d 83       	std	Y+5, r24	; 0x05
    5098:	3f c0       	rjmp	.+126    	; 0x5118 <SM_U8LoginSys+0x1654>
	else if (__tmp > 65535)
    509a:	6f 81       	ldd	r22, Y+7	; 0x07
    509c:	78 85       	ldd	r23, Y+8	; 0x08
    509e:	89 85       	ldd	r24, Y+9	; 0x09
    50a0:	9a 85       	ldd	r25, Y+10	; 0x0a
    50a2:	20 e0       	ldi	r18, 0x00	; 0
    50a4:	3f ef       	ldi	r19, 0xFF	; 255
    50a6:	4f e7       	ldi	r20, 0x7F	; 127
    50a8:	57 e4       	ldi	r21, 0x47	; 71
    50aa:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    50ae:	18 16       	cp	r1, r24
    50b0:	4c f5       	brge	.+82     	; 0x5104 <SM_U8LoginSys+0x1640>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    50b2:	6b 85       	ldd	r22, Y+11	; 0x0b
    50b4:	7c 85       	ldd	r23, Y+12	; 0x0c
    50b6:	8d 85       	ldd	r24, Y+13	; 0x0d
    50b8:	9e 85       	ldd	r25, Y+14	; 0x0e
    50ba:	20 e0       	ldi	r18, 0x00	; 0
    50bc:	30 e0       	ldi	r19, 0x00	; 0
    50be:	40 e2       	ldi	r20, 0x20	; 32
    50c0:	51 e4       	ldi	r21, 0x41	; 65
    50c2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    50c6:	dc 01       	movw	r26, r24
    50c8:	cb 01       	movw	r24, r22
    50ca:	bc 01       	movw	r22, r24
    50cc:	cd 01       	movw	r24, r26
    50ce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    50d2:	dc 01       	movw	r26, r24
    50d4:	cb 01       	movw	r24, r22
    50d6:	9e 83       	std	Y+6, r25	; 0x06
    50d8:	8d 83       	std	Y+5, r24	; 0x05
    50da:	0f c0       	rjmp	.+30     	; 0x50fa <SM_U8LoginSys+0x1636>
    50dc:	88 ec       	ldi	r24, 0xC8	; 200
    50de:	90 e0       	ldi	r25, 0x00	; 0
    50e0:	9c 83       	std	Y+4, r25	; 0x04
    50e2:	8b 83       	std	Y+3, r24	; 0x03
    50e4:	8b 81       	ldd	r24, Y+3	; 0x03
    50e6:	9c 81       	ldd	r25, Y+4	; 0x04
    50e8:	01 97       	sbiw	r24, 0x01	; 1
    50ea:	f1 f7       	brne	.-4      	; 0x50e8 <SM_U8LoginSys+0x1624>
    50ec:	9c 83       	std	Y+4, r25	; 0x04
    50ee:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    50f0:	8d 81       	ldd	r24, Y+5	; 0x05
    50f2:	9e 81       	ldd	r25, Y+6	; 0x06
    50f4:	01 97       	sbiw	r24, 0x01	; 1
    50f6:	9e 83       	std	Y+6, r25	; 0x06
    50f8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    50fa:	8d 81       	ldd	r24, Y+5	; 0x05
    50fc:	9e 81       	ldd	r25, Y+6	; 0x06
    50fe:	00 97       	sbiw	r24, 0x00	; 0
    5100:	69 f7       	brne	.-38     	; 0x50dc <SM_U8LoginSys+0x1618>
    5102:	14 c0       	rjmp	.+40     	; 0x512c <SM_U8LoginSys+0x1668>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5104:	6f 81       	ldd	r22, Y+7	; 0x07
    5106:	78 85       	ldd	r23, Y+8	; 0x08
    5108:	89 85       	ldd	r24, Y+9	; 0x09
    510a:	9a 85       	ldd	r25, Y+10	; 0x0a
    510c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5110:	dc 01       	movw	r26, r24
    5112:	cb 01       	movw	r24, r22
    5114:	9e 83       	std	Y+6, r25	; 0x06
    5116:	8d 83       	std	Y+5, r24	; 0x05
    5118:	8d 81       	ldd	r24, Y+5	; 0x05
    511a:	9e 81       	ldd	r25, Y+6	; 0x06
    511c:	9a 83       	std	Y+2, r25	; 0x02
    511e:	89 83       	std	Y+1, r24	; 0x01
    5120:	89 81       	ldd	r24, Y+1	; 0x01
    5122:	9a 81       	ldd	r25, Y+2	; 0x02
    5124:	01 97       	sbiw	r24, 0x01	; 1
    5126:	f1 f7       	brne	.-4      	; 0x5124 <SM_U8LoginSys+0x1660>
    5128:	9a 83       	std	Y+2, r25	; 0x02
    512a:	89 83       	std	Y+1, r24	; 0x01
					_delay_ms(700);
					LCD_VoidSendCommand(1);
    512c:	81 e0       	ldi	r24, 0x01	; 1
    512e:	0e 94 86 0e 	call	0x1d0c	; 0x1d0c <LCD_VoidSendCommand>
    5132:	0c 94 6f 1d 	jmp	0x3ade	; 0x3ade <SM_U8LoginSys+0x1a>
					goto lable;
					break;
			}
		}
		}
    5136:	ca 52       	subi	r28, 0x2A	; 42
    5138:	df 4f       	sbci	r29, 0xFF	; 255
    513a:	88 81       	ld	r24, Y
    513c:	c6 5d       	subi	r28, 0xD6	; 214
    513e:	d0 40       	sbci	r29, 0x00	; 0

		  return Local_U8ErrorState;

	 }
    5140:	c8 52       	subi	r28, 0x28	; 40
    5142:	df 4f       	sbci	r29, 0xFF	; 255
    5144:	0f b6       	in	r0, 0x3f	; 63
    5146:	f8 94       	cli
    5148:	de bf       	out	0x3e, r29	; 62
    514a:	0f be       	out	0x3f, r0	; 63
    514c:	cd bf       	out	0x3d, r28	; 61
    514e:	cf 91       	pop	r28
    5150:	df 91       	pop	r29
    5152:	1f 91       	pop	r17
    5154:	0f 91       	pop	r16
    5156:	08 95       	ret

00005158 <SM_U16EnterPassword>:


	u16 SM_U16EnterPassword(void)
	 {
    5158:	df 93       	push	r29
    515a:	cf 93       	push	r28
    515c:	00 d0       	rcall	.+0      	; 0x515e <SM_U16EnterPassword+0x6>
    515e:	0f 92       	push	r0
    5160:	cd b7       	in	r28, 0x3d	; 61
    5162:	de b7       	in	r29, 0x3e	; 62
		static u8 Local_U8EnteredPass =0;
		 u16 Returned_Password=0;
    5164:	1b 82       	std	Y+3, r1	; 0x03
    5166:	1a 82       	std	Y+2, r1	; 0x02
		while(1)
		{

		 KPAD_U8GetPressedKey(&Local_U8EnteredPass);
    5168:	8b e9       	ldi	r24, 0x9B	; 155
    516a:	93 e0       	ldi	r25, 0x03	; 3
    516c:	0e 94 54 0d 	call	0x1aa8	; 0x1aa8 <KPAD_U8GetPressedKey>

			if ((Local_U8EnteredPass >= '0') && (Local_U8EnteredPass <= '9')) {
    5170:	80 91 9b 03 	lds	r24, 0x039B
    5174:	80 33       	cpi	r24, 0x30	; 48
    5176:	f8 f0       	brcs	.+62     	; 0x51b6 <SM_U16EnterPassword+0x5e>
    5178:	80 91 9b 03 	lds	r24, 0x039B
    517c:	8a 33       	cpi	r24, 0x3A	; 58
    517e:	d8 f4       	brcc	.+54     	; 0x51b6 <SM_U16EnterPassword+0x5e>
				LCD_VoidSendData('*');
    5180:	8a e2       	ldi	r24, 0x2A	; 42
    5182:	0e 94 00 13 	call	0x2600	; 0x2600 <LCD_VoidSendData>
				u8 pass = Local_U8EnteredPass - '0';
    5186:	80 91 9b 03 	lds	r24, 0x039B
    518a:	80 53       	subi	r24, 0x30	; 48
    518c:	89 83       	std	Y+1, r24	; 0x01
				Returned_Password = Returned_Password * 10 + pass;
    518e:	8a 81       	ldd	r24, Y+2	; 0x02
    5190:	9b 81       	ldd	r25, Y+3	; 0x03
    5192:	9c 01       	movw	r18, r24
    5194:	22 0f       	add	r18, r18
    5196:	33 1f       	adc	r19, r19
    5198:	c9 01       	movw	r24, r18
    519a:	88 0f       	add	r24, r24
    519c:	99 1f       	adc	r25, r25
    519e:	88 0f       	add	r24, r24
    51a0:	99 1f       	adc	r25, r25
    51a2:	28 0f       	add	r18, r24
    51a4:	39 1f       	adc	r19, r25
    51a6:	89 81       	ldd	r24, Y+1	; 0x01
    51a8:	88 2f       	mov	r24, r24
    51aa:	90 e0       	ldi	r25, 0x00	; 0
    51ac:	82 0f       	add	r24, r18
    51ae:	93 1f       	adc	r25, r19
    51b0:	9b 83       	std	Y+3, r25	; 0x03
    51b2:	8a 83       	std	Y+2, r24	; 0x02
    51b4:	d9 cf       	rjmp	.-78     	; 0x5168 <SM_U16EnterPassword+0x10>
			}
			else if (Local_U8EnteredPass == '=')
    51b6:	80 91 9b 03 	lds	r24, 0x039B
    51ba:	8d 33       	cpi	r24, 0x3D	; 61
    51bc:	59 f4       	brne	.+22     	; 0x51d4 <SM_U16EnterPassword+0x7c>
			{
				LCD_VoidSendCommand(1);
    51be:	81 e0       	ldi	r24, 0x01	; 1
    51c0:	0e 94 86 0e 	call	0x1d0c	; 0x1d0c <LCD_VoidSendCommand>
				LCD_VoidSendCommand(1);
				Returned_Password=0;
			}
		}

		 return Returned_Password;
    51c4:	8a 81       	ldd	r24, Y+2	; 0x02
    51c6:	9b 81       	ldd	r25, Y+3	; 0x03
	 }
    51c8:	0f 90       	pop	r0
    51ca:	0f 90       	pop	r0
    51cc:	0f 90       	pop	r0
    51ce:	cf 91       	pop	r28
    51d0:	df 91       	pop	r29
    51d2:	08 95       	ret
			{
				LCD_VoidSendCommand(1);
				break;

			}
			else if (Local_U8EnteredPass == 'c')
    51d4:	80 91 9b 03 	lds	r24, 0x039B
    51d8:	83 36       	cpi	r24, 0x63	; 99
    51da:	31 f6       	brne	.-116    	; 0x5168 <SM_U16EnterPassword+0x10>
			{
				LCD_VoidSendCommand(1);
    51dc:	81 e0       	ldi	r24, 0x01	; 1
    51de:	0e 94 86 0e 	call	0x1d0c	; 0x1d0c <LCD_VoidSendCommand>
				Returned_Password=0;
    51e2:	1b 82       	std	Y+3, r1	; 0x03
    51e4:	1a 82       	std	Y+2, r1	; 0x02
    51e6:	c0 cf       	rjmp	.-128    	; 0x5168 <SM_U16EnterPassword+0x10>

000051e8 <SM_VoidDCMotor>:

		 return Returned_Password;
	 }

void SM_VoidDCMotor(void)
{
    51e8:	df 93       	push	r29
    51ea:	cf 93       	push	r28
    51ec:	cd b7       	in	r28, 0x3d	; 61
    51ee:	de b7       	in	r29, 0x3e	; 62
    51f0:	ad 97       	sbiw	r28, 0x2d	; 45
    51f2:	0f b6       	in	r0, 0x3f	; 63
    51f4:	f8 94       	cli
    51f6:	de bf       	out	0x3e, r29	; 62
    51f8:	0f be       	out	0x3f, r0	; 63
    51fa:	cd bf       	out	0x3d, r28	; 61
    u8 Pressed_Key;
	LCD_VoidSendCommand(1);
    51fc:	81 e0       	ldi	r24, 0x01	; 1
    51fe:	0e 94 86 0e 	call	0x1d0c	; 0x1d0c <LCD_VoidSendCommand>
	LCD_VoidGoToRowCol(0, 0);
    5202:	80 e0       	ldi	r24, 0x00	; 0
    5204:	60 e0       	ldi	r22, 0x00	; 0
    5206:	0e 94 85 16 	call	0x2d0a	; 0x2d0a <LCD_VoidGoToRowCol>
	LCD_u8WriteString("1-Clock Wise 2-Anti-CW");
    520a:	8f e3       	ldi	r24, 0x3F	; 63
    520c:	91 e0       	ldi	r25, 0x01	; 1
    520e:	0e 94 3d 17 	call	0x2e7a	; 0x2e7a <LCD_u8WriteString>
	LCD_VoidGoToRowCol(1, 0);
    5212:	81 e0       	ldi	r24, 0x01	; 1
    5214:	60 e0       	ldi	r22, 0x00	; 0
    5216:	0e 94 85 16 	call	0x2d0a	; 0x2d0a <LCD_VoidGoToRowCol>
	LCD_u8WriteString("3-Stop  4-Return");
    521a:	86 e5       	ldi	r24, 0x56	; 86
    521c:	91 e0       	ldi	r25, 0x01	; 1
    521e:	0e 94 3d 17 	call	0x2e7a	; 0x2e7a <LCD_u8WriteString>
	while(1)
	{
	    KPAD_U8GetPressedKey(&Pressed_Key);
    5222:	ce 01       	movw	r24, r28
    5224:	8b 96       	adiw	r24, 0x2b	; 43
    5226:	0e 94 54 0d 	call	0x1aa8	; 0x1aa8 <KPAD_U8GetPressedKey>
	    if((Pressed_Key >= '1') && (Pressed_Key <= '3'))
    522a:	8b a5       	ldd	r24, Y+43	; 0x2b
    522c:	81 33       	cpi	r24, 0x31	; 49
    522e:	08 f4       	brcc	.+2      	; 0x5232 <SM_VoidDCMotor+0x4a>
    5230:	91 c1       	rjmp	.+802    	; 0x5554 <SM_VoidDCMotor+0x36c>
    5232:	8b a5       	ldd	r24, Y+43	; 0x2b
    5234:	84 33       	cpi	r24, 0x34	; 52
    5236:	08 f0       	brcs	.+2      	; 0x523a <SM_VoidDCMotor+0x52>
    5238:	8d c1       	rjmp	.+794    	; 0x5554 <SM_VoidDCMotor+0x36c>
	    {
	    	switch(Pressed_Key)
    523a:	8b a5       	ldd	r24, Y+43	; 0x2b
    523c:	28 2f       	mov	r18, r24
    523e:	30 e0       	ldi	r19, 0x00	; 0
    5240:	3d a7       	std	Y+45, r19	; 0x2d
    5242:	2c a7       	std	Y+44, r18	; 0x2c
    5244:	8c a5       	ldd	r24, Y+44	; 0x2c
    5246:	9d a5       	ldd	r25, Y+45	; 0x2d
    5248:	82 33       	cpi	r24, 0x32	; 50
    524a:	91 05       	cpc	r25, r1
    524c:	09 f4       	brne	.+2      	; 0x5250 <SM_VoidDCMotor+0x68>
    524e:	88 c0       	rjmp	.+272    	; 0x5360 <SM_VoidDCMotor+0x178>
    5250:	2c a5       	ldd	r18, Y+44	; 0x2c
    5252:	3d a5       	ldd	r19, Y+45	; 0x2d
    5254:	23 33       	cpi	r18, 0x33	; 51
    5256:	31 05       	cpc	r19, r1
    5258:	09 f4       	brne	.+2      	; 0x525c <SM_VoidDCMotor+0x74>
    525a:	ff c0       	rjmp	.+510    	; 0x545a <SM_VoidDCMotor+0x272>
    525c:	8c a5       	ldd	r24, Y+44	; 0x2c
    525e:	9d a5       	ldd	r25, Y+45	; 0x2d
    5260:	81 33       	cpi	r24, 0x31	; 49
    5262:	91 05       	cpc	r25, r1
    5264:	f1 f6       	brne	.-68     	; 0x5222 <SM_VoidDCMotor+0x3a>
			{
	    		case '1':  	/* Send Data to Slave_2 */
							I2C_VidStartCondition();
    5266:	0e 94 6f 0c 	call	0x18de	; 0x18de <I2C_VidStartCondition>
							I2C_VidSlaveAddressWrite(5);
    526a:	85 e0       	ldi	r24, 0x05	; 5
    526c:	0e 94 9e 0c 	call	0x193c	; 0x193c <I2C_VidSlaveAddressWrite>
							I2C_VidMastarSendData('2');   /* send 1 and wait 500ms then send 2 and will check for that in slave */
    5270:	82 e3       	ldi	r24, 0x32	; 50
    5272:	0e 94 f0 0c 	call	0x19e0	; 0x19e0 <I2C_VidMastarSendData>
							I2C_VidStopCondition();
    5276:	0e 94 89 0c 	call	0x1912	; 0x1912 <I2C_VidStopCondition>
    527a:	80 e0       	ldi	r24, 0x00	; 0
    527c:	90 e0       	ldi	r25, 0x00	; 0
    527e:	aa ef       	ldi	r26, 0xFA	; 250
    5280:	b3 e4       	ldi	r27, 0x43	; 67
    5282:	8f a3       	std	Y+39, r24	; 0x27
    5284:	98 a7       	std	Y+40, r25	; 0x28
    5286:	a9 a7       	std	Y+41, r26	; 0x29
    5288:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    528a:	6f a1       	ldd	r22, Y+39	; 0x27
    528c:	78 a5       	ldd	r23, Y+40	; 0x28
    528e:	89 a5       	ldd	r24, Y+41	; 0x29
    5290:	9a a5       	ldd	r25, Y+42	; 0x2a
    5292:	20 e0       	ldi	r18, 0x00	; 0
    5294:	30 e0       	ldi	r19, 0x00	; 0
    5296:	4a ef       	ldi	r20, 0xFA	; 250
    5298:	54 e4       	ldi	r21, 0x44	; 68
    529a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    529e:	dc 01       	movw	r26, r24
    52a0:	cb 01       	movw	r24, r22
    52a2:	8b a3       	std	Y+35, r24	; 0x23
    52a4:	9c a3       	std	Y+36, r25	; 0x24
    52a6:	ad a3       	std	Y+37, r26	; 0x25
    52a8:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    52aa:	6b a1       	ldd	r22, Y+35	; 0x23
    52ac:	7c a1       	ldd	r23, Y+36	; 0x24
    52ae:	8d a1       	ldd	r24, Y+37	; 0x25
    52b0:	9e a1       	ldd	r25, Y+38	; 0x26
    52b2:	20 e0       	ldi	r18, 0x00	; 0
    52b4:	30 e0       	ldi	r19, 0x00	; 0
    52b6:	40 e8       	ldi	r20, 0x80	; 128
    52b8:	5f e3       	ldi	r21, 0x3F	; 63
    52ba:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    52be:	88 23       	and	r24, r24
    52c0:	2c f4       	brge	.+10     	; 0x52cc <SM_VoidDCMotor+0xe4>
		__ticks = 1;
    52c2:	81 e0       	ldi	r24, 0x01	; 1
    52c4:	90 e0       	ldi	r25, 0x00	; 0
    52c6:	9a a3       	std	Y+34, r25	; 0x22
    52c8:	89 a3       	std	Y+33, r24	; 0x21
    52ca:	3f c0       	rjmp	.+126    	; 0x534a <SM_VoidDCMotor+0x162>
	else if (__tmp > 65535)
    52cc:	6b a1       	ldd	r22, Y+35	; 0x23
    52ce:	7c a1       	ldd	r23, Y+36	; 0x24
    52d0:	8d a1       	ldd	r24, Y+37	; 0x25
    52d2:	9e a1       	ldd	r25, Y+38	; 0x26
    52d4:	20 e0       	ldi	r18, 0x00	; 0
    52d6:	3f ef       	ldi	r19, 0xFF	; 255
    52d8:	4f e7       	ldi	r20, 0x7F	; 127
    52da:	57 e4       	ldi	r21, 0x47	; 71
    52dc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    52e0:	18 16       	cp	r1, r24
    52e2:	4c f5       	brge	.+82     	; 0x5336 <SM_VoidDCMotor+0x14e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    52e4:	6f a1       	ldd	r22, Y+39	; 0x27
    52e6:	78 a5       	ldd	r23, Y+40	; 0x28
    52e8:	89 a5       	ldd	r24, Y+41	; 0x29
    52ea:	9a a5       	ldd	r25, Y+42	; 0x2a
    52ec:	20 e0       	ldi	r18, 0x00	; 0
    52ee:	30 e0       	ldi	r19, 0x00	; 0
    52f0:	40 e2       	ldi	r20, 0x20	; 32
    52f2:	51 e4       	ldi	r21, 0x41	; 65
    52f4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    52f8:	dc 01       	movw	r26, r24
    52fa:	cb 01       	movw	r24, r22
    52fc:	bc 01       	movw	r22, r24
    52fe:	cd 01       	movw	r24, r26
    5300:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5304:	dc 01       	movw	r26, r24
    5306:	cb 01       	movw	r24, r22
    5308:	9a a3       	std	Y+34, r25	; 0x22
    530a:	89 a3       	std	Y+33, r24	; 0x21
    530c:	0f c0       	rjmp	.+30     	; 0x532c <SM_VoidDCMotor+0x144>
    530e:	88 ec       	ldi	r24, 0xC8	; 200
    5310:	90 e0       	ldi	r25, 0x00	; 0
    5312:	98 a3       	std	Y+32, r25	; 0x20
    5314:	8f 8f       	std	Y+31, r24	; 0x1f
    5316:	8f 8d       	ldd	r24, Y+31	; 0x1f
    5318:	98 a1       	ldd	r25, Y+32	; 0x20
    531a:	01 97       	sbiw	r24, 0x01	; 1
    531c:	f1 f7       	brne	.-4      	; 0x531a <SM_VoidDCMotor+0x132>
    531e:	98 a3       	std	Y+32, r25	; 0x20
    5320:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5322:	89 a1       	ldd	r24, Y+33	; 0x21
    5324:	9a a1       	ldd	r25, Y+34	; 0x22
    5326:	01 97       	sbiw	r24, 0x01	; 1
    5328:	9a a3       	std	Y+34, r25	; 0x22
    532a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    532c:	89 a1       	ldd	r24, Y+33	; 0x21
    532e:	9a a1       	ldd	r25, Y+34	; 0x22
    5330:	00 97       	sbiw	r24, 0x00	; 0
    5332:	69 f7       	brne	.-38     	; 0x530e <SM_VoidDCMotor+0x126>
    5334:	76 cf       	rjmp	.-276    	; 0x5222 <SM_VoidDCMotor+0x3a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5336:	6b a1       	ldd	r22, Y+35	; 0x23
    5338:	7c a1       	ldd	r23, Y+36	; 0x24
    533a:	8d a1       	ldd	r24, Y+37	; 0x25
    533c:	9e a1       	ldd	r25, Y+38	; 0x26
    533e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5342:	dc 01       	movw	r26, r24
    5344:	cb 01       	movw	r24, r22
    5346:	9a a3       	std	Y+34, r25	; 0x22
    5348:	89 a3       	std	Y+33, r24	; 0x21
    534a:	89 a1       	ldd	r24, Y+33	; 0x21
    534c:	9a a1       	ldd	r25, Y+34	; 0x22
    534e:	9e 8f       	std	Y+30, r25	; 0x1e
    5350:	8d 8f       	std	Y+29, r24	; 0x1d
    5352:	8d 8d       	ldd	r24, Y+29	; 0x1d
    5354:	9e 8d       	ldd	r25, Y+30	; 0x1e
    5356:	01 97       	sbiw	r24, 0x01	; 1
    5358:	f1 f7       	brne	.-4      	; 0x5356 <SM_VoidDCMotor+0x16e>
    535a:	9e 8f       	std	Y+30, r25	; 0x1e
    535c:	8d 8f       	std	Y+29, r24	; 0x1d
    535e:	61 cf       	rjmp	.-318    	; 0x5222 <SM_VoidDCMotor+0x3a>
							_delay_ms(500);
							break;
	    		case '2':   /* Send Data to Slave_2 */
							I2C_VidStartCondition();
    5360:	0e 94 6f 0c 	call	0x18de	; 0x18de <I2C_VidStartCondition>
							I2C_VidSlaveAddressWrite(5);
    5364:	85 e0       	ldi	r24, 0x05	; 5
    5366:	0e 94 9e 0c 	call	0x193c	; 0x193c <I2C_VidSlaveAddressWrite>
							I2C_VidMastarSendData('1');   /* send 1 and wait 500ms then send 2 and will check for that in slave */
    536a:	81 e3       	ldi	r24, 0x31	; 49
    536c:	0e 94 f0 0c 	call	0x19e0	; 0x19e0 <I2C_VidMastarSendData>
							I2C_VidStopCondition();
    5370:	0e 94 89 0c 	call	0x1912	; 0x1912 <I2C_VidStopCondition>
    5374:	80 e0       	ldi	r24, 0x00	; 0
    5376:	90 e0       	ldi	r25, 0x00	; 0
    5378:	aa ef       	ldi	r26, 0xFA	; 250
    537a:	b3 e4       	ldi	r27, 0x43	; 67
    537c:	89 8f       	std	Y+25, r24	; 0x19
    537e:	9a 8f       	std	Y+26, r25	; 0x1a
    5380:	ab 8f       	std	Y+27, r26	; 0x1b
    5382:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5384:	69 8d       	ldd	r22, Y+25	; 0x19
    5386:	7a 8d       	ldd	r23, Y+26	; 0x1a
    5388:	8b 8d       	ldd	r24, Y+27	; 0x1b
    538a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    538c:	20 e0       	ldi	r18, 0x00	; 0
    538e:	30 e0       	ldi	r19, 0x00	; 0
    5390:	4a ef       	ldi	r20, 0xFA	; 250
    5392:	54 e4       	ldi	r21, 0x44	; 68
    5394:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5398:	dc 01       	movw	r26, r24
    539a:	cb 01       	movw	r24, r22
    539c:	8d 8b       	std	Y+21, r24	; 0x15
    539e:	9e 8b       	std	Y+22, r25	; 0x16
    53a0:	af 8b       	std	Y+23, r26	; 0x17
    53a2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    53a4:	6d 89       	ldd	r22, Y+21	; 0x15
    53a6:	7e 89       	ldd	r23, Y+22	; 0x16
    53a8:	8f 89       	ldd	r24, Y+23	; 0x17
    53aa:	98 8d       	ldd	r25, Y+24	; 0x18
    53ac:	20 e0       	ldi	r18, 0x00	; 0
    53ae:	30 e0       	ldi	r19, 0x00	; 0
    53b0:	40 e8       	ldi	r20, 0x80	; 128
    53b2:	5f e3       	ldi	r21, 0x3F	; 63
    53b4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    53b8:	88 23       	and	r24, r24
    53ba:	2c f4       	brge	.+10     	; 0x53c6 <SM_VoidDCMotor+0x1de>
		__ticks = 1;
    53bc:	81 e0       	ldi	r24, 0x01	; 1
    53be:	90 e0       	ldi	r25, 0x00	; 0
    53c0:	9c 8b       	std	Y+20, r25	; 0x14
    53c2:	8b 8b       	std	Y+19, r24	; 0x13
    53c4:	3f c0       	rjmp	.+126    	; 0x5444 <SM_VoidDCMotor+0x25c>
	else if (__tmp > 65535)
    53c6:	6d 89       	ldd	r22, Y+21	; 0x15
    53c8:	7e 89       	ldd	r23, Y+22	; 0x16
    53ca:	8f 89       	ldd	r24, Y+23	; 0x17
    53cc:	98 8d       	ldd	r25, Y+24	; 0x18
    53ce:	20 e0       	ldi	r18, 0x00	; 0
    53d0:	3f ef       	ldi	r19, 0xFF	; 255
    53d2:	4f e7       	ldi	r20, 0x7F	; 127
    53d4:	57 e4       	ldi	r21, 0x47	; 71
    53d6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    53da:	18 16       	cp	r1, r24
    53dc:	4c f5       	brge	.+82     	; 0x5430 <SM_VoidDCMotor+0x248>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    53de:	69 8d       	ldd	r22, Y+25	; 0x19
    53e0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    53e2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    53e4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    53e6:	20 e0       	ldi	r18, 0x00	; 0
    53e8:	30 e0       	ldi	r19, 0x00	; 0
    53ea:	40 e2       	ldi	r20, 0x20	; 32
    53ec:	51 e4       	ldi	r21, 0x41	; 65
    53ee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    53f2:	dc 01       	movw	r26, r24
    53f4:	cb 01       	movw	r24, r22
    53f6:	bc 01       	movw	r22, r24
    53f8:	cd 01       	movw	r24, r26
    53fa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    53fe:	dc 01       	movw	r26, r24
    5400:	cb 01       	movw	r24, r22
    5402:	9c 8b       	std	Y+20, r25	; 0x14
    5404:	8b 8b       	std	Y+19, r24	; 0x13
    5406:	0f c0       	rjmp	.+30     	; 0x5426 <SM_VoidDCMotor+0x23e>
    5408:	88 ec       	ldi	r24, 0xC8	; 200
    540a:	90 e0       	ldi	r25, 0x00	; 0
    540c:	9a 8b       	std	Y+18, r25	; 0x12
    540e:	89 8b       	std	Y+17, r24	; 0x11
    5410:	89 89       	ldd	r24, Y+17	; 0x11
    5412:	9a 89       	ldd	r25, Y+18	; 0x12
    5414:	01 97       	sbiw	r24, 0x01	; 1
    5416:	f1 f7       	brne	.-4      	; 0x5414 <SM_VoidDCMotor+0x22c>
    5418:	9a 8b       	std	Y+18, r25	; 0x12
    541a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    541c:	8b 89       	ldd	r24, Y+19	; 0x13
    541e:	9c 89       	ldd	r25, Y+20	; 0x14
    5420:	01 97       	sbiw	r24, 0x01	; 1
    5422:	9c 8b       	std	Y+20, r25	; 0x14
    5424:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5426:	8b 89       	ldd	r24, Y+19	; 0x13
    5428:	9c 89       	ldd	r25, Y+20	; 0x14
    542a:	00 97       	sbiw	r24, 0x00	; 0
    542c:	69 f7       	brne	.-38     	; 0x5408 <SM_VoidDCMotor+0x220>
    542e:	f9 ce       	rjmp	.-526    	; 0x5222 <SM_VoidDCMotor+0x3a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5430:	6d 89       	ldd	r22, Y+21	; 0x15
    5432:	7e 89       	ldd	r23, Y+22	; 0x16
    5434:	8f 89       	ldd	r24, Y+23	; 0x17
    5436:	98 8d       	ldd	r25, Y+24	; 0x18
    5438:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    543c:	dc 01       	movw	r26, r24
    543e:	cb 01       	movw	r24, r22
    5440:	9c 8b       	std	Y+20, r25	; 0x14
    5442:	8b 8b       	std	Y+19, r24	; 0x13
    5444:	8b 89       	ldd	r24, Y+19	; 0x13
    5446:	9c 89       	ldd	r25, Y+20	; 0x14
    5448:	98 8b       	std	Y+16, r25	; 0x10
    544a:	8f 87       	std	Y+15, r24	; 0x0f
    544c:	8f 85       	ldd	r24, Y+15	; 0x0f
    544e:	98 89       	ldd	r25, Y+16	; 0x10
    5450:	01 97       	sbiw	r24, 0x01	; 1
    5452:	f1 f7       	brne	.-4      	; 0x5450 <SM_VoidDCMotor+0x268>
    5454:	98 8b       	std	Y+16, r25	; 0x10
    5456:	8f 87       	std	Y+15, r24	; 0x0f
    5458:	e4 ce       	rjmp	.-568    	; 0x5222 <SM_VoidDCMotor+0x3a>
							_delay_ms(500);
							break;
	    		case '3':   /* Send Data to Slave_2 */
							I2C_VidStartCondition();
    545a:	0e 94 6f 0c 	call	0x18de	; 0x18de <I2C_VidStartCondition>
							I2C_VidSlaveAddressWrite(5);
    545e:	85 e0       	ldi	r24, 0x05	; 5
    5460:	0e 94 9e 0c 	call	0x193c	; 0x193c <I2C_VidSlaveAddressWrite>
							I2C_VidMastarSendData('3');   /* send 1 and wait 500ms then send 2 and will check for that in slave */
    5464:	83 e3       	ldi	r24, 0x33	; 51
    5466:	0e 94 f0 0c 	call	0x19e0	; 0x19e0 <I2C_VidMastarSendData>
							I2C_VidStopCondition();
    546a:	0e 94 89 0c 	call	0x1912	; 0x1912 <I2C_VidStopCondition>
    546e:	80 e0       	ldi	r24, 0x00	; 0
    5470:	90 e0       	ldi	r25, 0x00	; 0
    5472:	aa ef       	ldi	r26, 0xFA	; 250
    5474:	b3 e4       	ldi	r27, 0x43	; 67
    5476:	8b 87       	std	Y+11, r24	; 0x0b
    5478:	9c 87       	std	Y+12, r25	; 0x0c
    547a:	ad 87       	std	Y+13, r26	; 0x0d
    547c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    547e:	6b 85       	ldd	r22, Y+11	; 0x0b
    5480:	7c 85       	ldd	r23, Y+12	; 0x0c
    5482:	8d 85       	ldd	r24, Y+13	; 0x0d
    5484:	9e 85       	ldd	r25, Y+14	; 0x0e
    5486:	20 e0       	ldi	r18, 0x00	; 0
    5488:	30 e0       	ldi	r19, 0x00	; 0
    548a:	4a ef       	ldi	r20, 0xFA	; 250
    548c:	54 e4       	ldi	r21, 0x44	; 68
    548e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5492:	dc 01       	movw	r26, r24
    5494:	cb 01       	movw	r24, r22
    5496:	8f 83       	std	Y+7, r24	; 0x07
    5498:	98 87       	std	Y+8, r25	; 0x08
    549a:	a9 87       	std	Y+9, r26	; 0x09
    549c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    549e:	6f 81       	ldd	r22, Y+7	; 0x07
    54a0:	78 85       	ldd	r23, Y+8	; 0x08
    54a2:	89 85       	ldd	r24, Y+9	; 0x09
    54a4:	9a 85       	ldd	r25, Y+10	; 0x0a
    54a6:	20 e0       	ldi	r18, 0x00	; 0
    54a8:	30 e0       	ldi	r19, 0x00	; 0
    54aa:	40 e8       	ldi	r20, 0x80	; 128
    54ac:	5f e3       	ldi	r21, 0x3F	; 63
    54ae:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    54b2:	88 23       	and	r24, r24
    54b4:	2c f4       	brge	.+10     	; 0x54c0 <SM_VoidDCMotor+0x2d8>
		__ticks = 1;
    54b6:	81 e0       	ldi	r24, 0x01	; 1
    54b8:	90 e0       	ldi	r25, 0x00	; 0
    54ba:	9e 83       	std	Y+6, r25	; 0x06
    54bc:	8d 83       	std	Y+5, r24	; 0x05
    54be:	3f c0       	rjmp	.+126    	; 0x553e <SM_VoidDCMotor+0x356>
	else if (__tmp > 65535)
    54c0:	6f 81       	ldd	r22, Y+7	; 0x07
    54c2:	78 85       	ldd	r23, Y+8	; 0x08
    54c4:	89 85       	ldd	r24, Y+9	; 0x09
    54c6:	9a 85       	ldd	r25, Y+10	; 0x0a
    54c8:	20 e0       	ldi	r18, 0x00	; 0
    54ca:	3f ef       	ldi	r19, 0xFF	; 255
    54cc:	4f e7       	ldi	r20, 0x7F	; 127
    54ce:	57 e4       	ldi	r21, 0x47	; 71
    54d0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    54d4:	18 16       	cp	r1, r24
    54d6:	4c f5       	brge	.+82     	; 0x552a <SM_VoidDCMotor+0x342>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    54d8:	6b 85       	ldd	r22, Y+11	; 0x0b
    54da:	7c 85       	ldd	r23, Y+12	; 0x0c
    54dc:	8d 85       	ldd	r24, Y+13	; 0x0d
    54de:	9e 85       	ldd	r25, Y+14	; 0x0e
    54e0:	20 e0       	ldi	r18, 0x00	; 0
    54e2:	30 e0       	ldi	r19, 0x00	; 0
    54e4:	40 e2       	ldi	r20, 0x20	; 32
    54e6:	51 e4       	ldi	r21, 0x41	; 65
    54e8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    54ec:	dc 01       	movw	r26, r24
    54ee:	cb 01       	movw	r24, r22
    54f0:	bc 01       	movw	r22, r24
    54f2:	cd 01       	movw	r24, r26
    54f4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    54f8:	dc 01       	movw	r26, r24
    54fa:	cb 01       	movw	r24, r22
    54fc:	9e 83       	std	Y+6, r25	; 0x06
    54fe:	8d 83       	std	Y+5, r24	; 0x05
    5500:	0f c0       	rjmp	.+30     	; 0x5520 <SM_VoidDCMotor+0x338>
    5502:	88 ec       	ldi	r24, 0xC8	; 200
    5504:	90 e0       	ldi	r25, 0x00	; 0
    5506:	9c 83       	std	Y+4, r25	; 0x04
    5508:	8b 83       	std	Y+3, r24	; 0x03
    550a:	8b 81       	ldd	r24, Y+3	; 0x03
    550c:	9c 81       	ldd	r25, Y+4	; 0x04
    550e:	01 97       	sbiw	r24, 0x01	; 1
    5510:	f1 f7       	brne	.-4      	; 0x550e <SM_VoidDCMotor+0x326>
    5512:	9c 83       	std	Y+4, r25	; 0x04
    5514:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5516:	8d 81       	ldd	r24, Y+5	; 0x05
    5518:	9e 81       	ldd	r25, Y+6	; 0x06
    551a:	01 97       	sbiw	r24, 0x01	; 1
    551c:	9e 83       	std	Y+6, r25	; 0x06
    551e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5520:	8d 81       	ldd	r24, Y+5	; 0x05
    5522:	9e 81       	ldd	r25, Y+6	; 0x06
    5524:	00 97       	sbiw	r24, 0x00	; 0
    5526:	69 f7       	brne	.-38     	; 0x5502 <SM_VoidDCMotor+0x31a>
    5528:	7c ce       	rjmp	.-776    	; 0x5222 <SM_VoidDCMotor+0x3a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    552a:	6f 81       	ldd	r22, Y+7	; 0x07
    552c:	78 85       	ldd	r23, Y+8	; 0x08
    552e:	89 85       	ldd	r24, Y+9	; 0x09
    5530:	9a 85       	ldd	r25, Y+10	; 0x0a
    5532:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5536:	dc 01       	movw	r26, r24
    5538:	cb 01       	movw	r24, r22
    553a:	9e 83       	std	Y+6, r25	; 0x06
    553c:	8d 83       	std	Y+5, r24	; 0x05
    553e:	8d 81       	ldd	r24, Y+5	; 0x05
    5540:	9e 81       	ldd	r25, Y+6	; 0x06
    5542:	9a 83       	std	Y+2, r25	; 0x02
    5544:	89 83       	std	Y+1, r24	; 0x01
    5546:	89 81       	ldd	r24, Y+1	; 0x01
    5548:	9a 81       	ldd	r25, Y+2	; 0x02
    554a:	01 97       	sbiw	r24, 0x01	; 1
    554c:	f1 f7       	brne	.-4      	; 0x554a <SM_VoidDCMotor+0x362>
    554e:	9a 83       	std	Y+2, r25	; 0x02
    5550:	89 83       	std	Y+1, r24	; 0x01
    5552:	67 ce       	rjmp	.-818    	; 0x5222 <SM_VoidDCMotor+0x3a>
							_delay_ms(500);
							break;
			}
	    }
	    else if(Pressed_Key == '4')
    5554:	8b a5       	ldd	r24, Y+43	; 0x2b
    5556:	84 33       	cpi	r24, 0x34	; 52
    5558:	09 f0       	breq	.+2      	; 0x555c <SM_VoidDCMotor+0x374>
    555a:	63 ce       	rjmp	.-826    	; 0x5222 <SM_VoidDCMotor+0x3a>
	    {
	    	break;
	    }
	}
}
    555c:	ad 96       	adiw	r28, 0x2d	; 45
    555e:	0f b6       	in	r0, 0x3f	; 63
    5560:	f8 94       	cli
    5562:	de bf       	out	0x3e, r29	; 62
    5564:	0f be       	out	0x3f, r0	; 63
    5566:	cd bf       	out	0x3d, r28	; 61
    5568:	cf 91       	pop	r28
    556a:	df 91       	pop	r29
    556c:	08 95       	ret

0000556e <SM_VoidStepper>:

void SM_VoidStepper(void)
{
    556e:	df 93       	push	r29
    5570:	cf 93       	push	r28
    5572:	cd b7       	in	r28, 0x3d	; 61
    5574:	de b7       	in	r29, 0x3e	; 62
    5576:	a1 97       	sbiw	r28, 0x21	; 33
    5578:	0f b6       	in	r0, 0x3f	; 63
    557a:	f8 94       	cli
    557c:	de bf       	out	0x3e, r29	; 62
    557e:	0f be       	out	0x3f, r0	; 63
    5580:	cd bf       	out	0x3d, r28	; 61
    u8 Pressed_Key;
    s16 num = 0;
    5582:	1e 8e       	std	Y+30, r1	; 0x1e
    5584:	1d 8e       	std	Y+29, r1	; 0x1d

    Stepper:
	LCD_VoidSendCommand(1);
    5586:	81 e0       	ldi	r24, 0x01	; 1
    5588:	0e 94 86 0e 	call	0x1d0c	; 0x1d0c <LCD_VoidSendCommand>
	LCD_VoidGoToRowCol(0, 0);
    558c:	80 e0       	ldi	r24, 0x00	; 0
    558e:	60 e0       	ldi	r22, 0x00	; 0
    5590:	0e 94 85 16 	call	0x2d0a	; 0x2d0a <LCD_VoidGoToRowCol>
	LCD_u8WriteString("1-Clock Wise  2-Anti-CW");
    5594:	87 e6       	ldi	r24, 0x67	; 103
    5596:	91 e0       	ldi	r25, 0x01	; 1
    5598:	0e 94 3d 17 	call	0x2e7a	; 0x2e7a <LCD_u8WriteString>
	LCD_VoidGoToRowCol(1,0);
    559c:	81 e0       	ldi	r24, 0x01	; 1
    559e:	60 e0       	ldi	r22, 0x00	; 0
    55a0:	0e 94 85 16 	call	0x2d0a	; 0x2d0a <LCD_VoidGoToRowCol>
	LCD_u8WriteString("3-Return");
    55a4:	8f e7       	ldi	r24, 0x7F	; 127
    55a6:	91 e0       	ldi	r25, 0x01	; 1
    55a8:	0e 94 3d 17 	call	0x2e7a	; 0x2e7a <LCD_u8WriteString>
	while(1)
	{
	    KPAD_U8GetPressedKey(&Pressed_Key);
    55ac:	ce 01       	movw	r24, r28
    55ae:	4f 96       	adiw	r24, 0x1f	; 31
    55b0:	0e 94 54 0d 	call	0x1aa8	; 0x1aa8 <KPAD_U8GetPressedKey>
	    if((Pressed_Key >= '1') && (Pressed_Key <= '2'))
    55b4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    55b6:	81 33       	cpi	r24, 0x31	; 49
    55b8:	08 f4       	brcc	.+2      	; 0x55bc <SM_VoidStepper+0x4e>
    55ba:	97 c1       	rjmp	.+814    	; 0x58ea <SM_VoidStepper+0x37c>
    55bc:	8f 8d       	ldd	r24, Y+31	; 0x1f
    55be:	83 33       	cpi	r24, 0x33	; 51
    55c0:	08 f0       	brcs	.+2      	; 0x55c4 <SM_VoidStepper+0x56>
    55c2:	93 c1       	rjmp	.+806    	; 0x58ea <SM_VoidStepper+0x37c>
	    {
	    	switch(Pressed_Key)
    55c4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    55c6:	28 2f       	mov	r18, r24
    55c8:	30 e0       	ldi	r19, 0x00	; 0
    55ca:	39 a3       	std	Y+33, r19	; 0x21
    55cc:	28 a3       	std	Y+32, r18	; 0x20
    55ce:	88 a1       	ldd	r24, Y+32	; 0x20
    55d0:	99 a1       	ldd	r25, Y+33	; 0x21
    55d2:	81 33       	cpi	r24, 0x31	; 49
    55d4:	91 05       	cpc	r25, r1
    55d6:	39 f0       	breq	.+14     	; 0x55e6 <SM_VoidStepper+0x78>
    55d8:	28 a1       	ldd	r18, Y+32	; 0x20
    55da:	39 a1       	ldd	r19, Y+33	; 0x21
    55dc:	22 33       	cpi	r18, 0x32	; 50
    55de:	31 05       	cpc	r19, r1
    55e0:	09 f4       	brne	.+2      	; 0x55e4 <SM_VoidStepper+0x76>
    55e2:	c2 c0       	rjmp	.+388    	; 0x5768 <SM_VoidStepper+0x1fa>
    55e4:	e3 cf       	rjmp	.-58     	; 0x55ac <SM_VoidStepper+0x3e>
	    	{
	    		case '1':   //CW
							LCD_VoidSendCommand(1);
    55e6:	81 e0       	ldi	r24, 0x01	; 1
    55e8:	0e 94 86 0e 	call	0x1d0c	; 0x1d0c <LCD_VoidSendCommand>
							LCD_VoidGoToRowCol(0, 0);
    55ec:	80 e0       	ldi	r24, 0x00	; 0
    55ee:	60 e0       	ldi	r22, 0x00	; 0
    55f0:	0e 94 85 16 	call	0x2d0a	; 0x2d0a <LCD_VoidGoToRowCol>
							LCD_u8WriteString("Choose Angle:0 ->360");
    55f4:	88 e8       	ldi	r24, 0x88	; 136
    55f6:	91 e0       	ldi	r25, 0x01	; 1
    55f8:	0e 94 3d 17 	call	0x2e7a	; 0x2e7a <LCD_u8WriteString>
							LCD_VoidGoToRowCol(1, 0);
    55fc:	81 e0       	ldi	r24, 0x01	; 1
    55fe:	60 e0       	ldi	r22, 0x00	; 0
    5600:	0e 94 85 16 	call	0x2d0a	; 0x2d0a <LCD_VoidGoToRowCol>
							while(1)
							{
								KPAD_U8GetPressedKey(&Pressed_Key);
    5604:	ce 01       	movw	r24, r28
    5606:	4f 96       	adiw	r24, 0x1f	; 31
    5608:	0e 94 54 0d 	call	0x1aa8	; 0x1aa8 <KPAD_U8GetPressedKey>
								if((Pressed_Key >= '0') && (Pressed_Key <= '9') && num <= 360 )
    560c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    560e:	80 33       	cpi	r24, 0x30	; 48
    5610:	08 f1       	brcs	.+66     	; 0x5654 <SM_VoidStepper+0xe6>
    5612:	8f 8d       	ldd	r24, Y+31	; 0x1f
    5614:	8a 33       	cpi	r24, 0x3A	; 58
    5616:	f0 f4       	brcc	.+60     	; 0x5654 <SM_VoidStepper+0xe6>
    5618:	8d 8d       	ldd	r24, Y+29	; 0x1d
    561a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    561c:	31 e0       	ldi	r19, 0x01	; 1
    561e:	89 36       	cpi	r24, 0x69	; 105
    5620:	93 07       	cpc	r25, r19
    5622:	c4 f4       	brge	.+48     	; 0x5654 <SM_VoidStepper+0xe6>
								{
									LCD_VoidSendData(Pressed_Key);
    5624:	8f 8d       	ldd	r24, Y+31	; 0x1f
    5626:	0e 94 00 13 	call	0x2600	; 0x2600 <LCD_VoidSendData>
									num =  num * 10 + (Pressed_Key - '0');
    562a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    562c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    562e:	9c 01       	movw	r18, r24
    5630:	22 0f       	add	r18, r18
    5632:	33 1f       	adc	r19, r19
    5634:	c9 01       	movw	r24, r18
    5636:	88 0f       	add	r24, r24
    5638:	99 1f       	adc	r25, r25
    563a:	88 0f       	add	r24, r24
    563c:	99 1f       	adc	r25, r25
    563e:	28 0f       	add	r18, r24
    5640:	39 1f       	adc	r19, r25
    5642:	8f 8d       	ldd	r24, Y+31	; 0x1f
    5644:	88 2f       	mov	r24, r24
    5646:	90 e0       	ldi	r25, 0x00	; 0
    5648:	c0 97       	sbiw	r24, 0x30	; 48
    564a:	82 0f       	add	r24, r18
    564c:	93 1f       	adc	r25, r19
    564e:	9e 8f       	std	Y+30, r25	; 0x1e
    5650:	8d 8f       	std	Y+29, r24	; 0x1d
    5652:	d8 cf       	rjmp	.-80     	; 0x5604 <SM_VoidStepper+0x96>

								}
								else if(Pressed_Key == '=')
    5654:	8f 8d       	ldd	r24, Y+31	; 0x1f
    5656:	8d 33       	cpi	r24, 0x3D	; 61
    5658:	a9 f6       	brne	.-86     	; 0x5604 <SM_VoidStepper+0x96>
								{
									UART_VoidSendNumber(num);
    565a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    565c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    565e:	aa 27       	eor	r26, r26
    5660:	97 fd       	sbrc	r25, 7
    5662:	a0 95       	com	r26
    5664:	ba 2f       	mov	r27, r26
    5666:	bc 01       	movw	r22, r24
    5668:	cd 01       	movw	r24, r26
    566a:	0e 94 be 34 	call	0x697c	; 0x697c <UART_VoidSendNumber>
									break;
								}
							}
							/* Start the Stepper (Send Data to Slave_2) */
							I2C_VidStartCondition();
    566e:	0e 94 6f 0c 	call	0x18de	; 0x18de <I2C_VidStartCondition>
							I2C_VidSlaveAddressWrite(5);
    5672:	85 e0       	ldi	r24, 0x05	; 5
    5674:	0e 94 9e 0c 	call	0x193c	; 0x193c <I2C_VidSlaveAddressWrite>
							I2C_VidMastarSendData('4');   /* send 1 and wait 500ms then send 2 and will check for that in slave */
    5678:	84 e3       	ldi	r24, 0x34	; 52
    567a:	0e 94 f0 0c 	call	0x19e0	; 0x19e0 <I2C_VidMastarSendData>
							I2C_VidStopCondition();
    567e:	0e 94 89 0c 	call	0x1912	; 0x1912 <I2C_VidStopCondition>
    5682:	80 e0       	ldi	r24, 0x00	; 0
    5684:	90 e0       	ldi	r25, 0x00	; 0
    5686:	aa ef       	ldi	r26, 0xFA	; 250
    5688:	b3 e4       	ldi	r27, 0x43	; 67
    568a:	89 8f       	std	Y+25, r24	; 0x19
    568c:	9a 8f       	std	Y+26, r25	; 0x1a
    568e:	ab 8f       	std	Y+27, r26	; 0x1b
    5690:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5692:	69 8d       	ldd	r22, Y+25	; 0x19
    5694:	7a 8d       	ldd	r23, Y+26	; 0x1a
    5696:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5698:	9c 8d       	ldd	r25, Y+28	; 0x1c
    569a:	20 e0       	ldi	r18, 0x00	; 0
    569c:	30 e0       	ldi	r19, 0x00	; 0
    569e:	4a ef       	ldi	r20, 0xFA	; 250
    56a0:	54 e4       	ldi	r21, 0x44	; 68
    56a2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    56a6:	dc 01       	movw	r26, r24
    56a8:	cb 01       	movw	r24, r22
    56aa:	8d 8b       	std	Y+21, r24	; 0x15
    56ac:	9e 8b       	std	Y+22, r25	; 0x16
    56ae:	af 8b       	std	Y+23, r26	; 0x17
    56b0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    56b2:	6d 89       	ldd	r22, Y+21	; 0x15
    56b4:	7e 89       	ldd	r23, Y+22	; 0x16
    56b6:	8f 89       	ldd	r24, Y+23	; 0x17
    56b8:	98 8d       	ldd	r25, Y+24	; 0x18
    56ba:	20 e0       	ldi	r18, 0x00	; 0
    56bc:	30 e0       	ldi	r19, 0x00	; 0
    56be:	40 e8       	ldi	r20, 0x80	; 128
    56c0:	5f e3       	ldi	r21, 0x3F	; 63
    56c2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    56c6:	88 23       	and	r24, r24
    56c8:	2c f4       	brge	.+10     	; 0x56d4 <SM_VoidStepper+0x166>
		__ticks = 1;
    56ca:	81 e0       	ldi	r24, 0x01	; 1
    56cc:	90 e0       	ldi	r25, 0x00	; 0
    56ce:	9c 8b       	std	Y+20, r25	; 0x14
    56d0:	8b 8b       	std	Y+19, r24	; 0x13
    56d2:	3f c0       	rjmp	.+126    	; 0x5752 <SM_VoidStepper+0x1e4>
	else if (__tmp > 65535)
    56d4:	6d 89       	ldd	r22, Y+21	; 0x15
    56d6:	7e 89       	ldd	r23, Y+22	; 0x16
    56d8:	8f 89       	ldd	r24, Y+23	; 0x17
    56da:	98 8d       	ldd	r25, Y+24	; 0x18
    56dc:	20 e0       	ldi	r18, 0x00	; 0
    56de:	3f ef       	ldi	r19, 0xFF	; 255
    56e0:	4f e7       	ldi	r20, 0x7F	; 127
    56e2:	57 e4       	ldi	r21, 0x47	; 71
    56e4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    56e8:	18 16       	cp	r1, r24
    56ea:	4c f5       	brge	.+82     	; 0x573e <SM_VoidStepper+0x1d0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    56ec:	69 8d       	ldd	r22, Y+25	; 0x19
    56ee:	7a 8d       	ldd	r23, Y+26	; 0x1a
    56f0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    56f2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    56f4:	20 e0       	ldi	r18, 0x00	; 0
    56f6:	30 e0       	ldi	r19, 0x00	; 0
    56f8:	40 e2       	ldi	r20, 0x20	; 32
    56fa:	51 e4       	ldi	r21, 0x41	; 65
    56fc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5700:	dc 01       	movw	r26, r24
    5702:	cb 01       	movw	r24, r22
    5704:	bc 01       	movw	r22, r24
    5706:	cd 01       	movw	r24, r26
    5708:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    570c:	dc 01       	movw	r26, r24
    570e:	cb 01       	movw	r24, r22
    5710:	9c 8b       	std	Y+20, r25	; 0x14
    5712:	8b 8b       	std	Y+19, r24	; 0x13
    5714:	0f c0       	rjmp	.+30     	; 0x5734 <SM_VoidStepper+0x1c6>
    5716:	88 ec       	ldi	r24, 0xC8	; 200
    5718:	90 e0       	ldi	r25, 0x00	; 0
    571a:	9a 8b       	std	Y+18, r25	; 0x12
    571c:	89 8b       	std	Y+17, r24	; 0x11
    571e:	89 89       	ldd	r24, Y+17	; 0x11
    5720:	9a 89       	ldd	r25, Y+18	; 0x12
    5722:	01 97       	sbiw	r24, 0x01	; 1
    5724:	f1 f7       	brne	.-4      	; 0x5722 <SM_VoidStepper+0x1b4>
    5726:	9a 8b       	std	Y+18, r25	; 0x12
    5728:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    572a:	8b 89       	ldd	r24, Y+19	; 0x13
    572c:	9c 89       	ldd	r25, Y+20	; 0x14
    572e:	01 97       	sbiw	r24, 0x01	; 1
    5730:	9c 8b       	std	Y+20, r25	; 0x14
    5732:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5734:	8b 89       	ldd	r24, Y+19	; 0x13
    5736:	9c 89       	ldd	r25, Y+20	; 0x14
    5738:	00 97       	sbiw	r24, 0x00	; 0
    573a:	69 f7       	brne	.-38     	; 0x5716 <SM_VoidStepper+0x1a8>
    573c:	24 cf       	rjmp	.-440    	; 0x5586 <SM_VoidStepper+0x18>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    573e:	6d 89       	ldd	r22, Y+21	; 0x15
    5740:	7e 89       	ldd	r23, Y+22	; 0x16
    5742:	8f 89       	ldd	r24, Y+23	; 0x17
    5744:	98 8d       	ldd	r25, Y+24	; 0x18
    5746:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    574a:	dc 01       	movw	r26, r24
    574c:	cb 01       	movw	r24, r22
    574e:	9c 8b       	std	Y+20, r25	; 0x14
    5750:	8b 8b       	std	Y+19, r24	; 0x13
    5752:	8b 89       	ldd	r24, Y+19	; 0x13
    5754:	9c 89       	ldd	r25, Y+20	; 0x14
    5756:	98 8b       	std	Y+16, r25	; 0x10
    5758:	8f 87       	std	Y+15, r24	; 0x0f
    575a:	8f 85       	ldd	r24, Y+15	; 0x0f
    575c:	98 89       	ldd	r25, Y+16	; 0x10
    575e:	01 97       	sbiw	r24, 0x01	; 1
    5760:	f1 f7       	brne	.-4      	; 0x575e <SM_VoidStepper+0x1f0>
    5762:	98 8b       	std	Y+16, r25	; 0x10
    5764:	8f 87       	std	Y+15, r24	; 0x0f
    5766:	0f cf       	rjmp	.-482    	; 0x5586 <SM_VoidStepper+0x18>
							_delay_ms(500);
							goto Stepper;
							break;
	    		case '2':	//ACW
							LCD_VoidSendCommand(1);
    5768:	81 e0       	ldi	r24, 0x01	; 1
    576a:	0e 94 86 0e 	call	0x1d0c	; 0x1d0c <LCD_VoidSendCommand>
							LCD_VoidGoToRowCol(0, 0);
    576e:	80 e0       	ldi	r24, 0x00	; 0
    5770:	60 e0       	ldi	r22, 0x00	; 0
    5772:	0e 94 85 16 	call	0x2d0a	; 0x2d0a <LCD_VoidGoToRowCol>
							LCD_u8WriteString("Choose Angle:0 ->360");
    5776:	88 e8       	ldi	r24, 0x88	; 136
    5778:	91 e0       	ldi	r25, 0x01	; 1
    577a:	0e 94 3d 17 	call	0x2e7a	; 0x2e7a <LCD_u8WriteString>
							LCD_VoidGoToRowCol(1, 0);
    577e:	81 e0       	ldi	r24, 0x01	; 1
    5780:	60 e0       	ldi	r22, 0x00	; 0
    5782:	0e 94 85 16 	call	0x2d0a	; 0x2d0a <LCD_VoidGoToRowCol>
							while(1)
							{
								KPAD_U8GetPressedKey(&Pressed_Key);
    5786:	ce 01       	movw	r24, r28
    5788:	4f 96       	adiw	r24, 0x1f	; 31
    578a:	0e 94 54 0d 	call	0x1aa8	; 0x1aa8 <KPAD_U8GetPressedKey>
								if((Pressed_Key >= '0') && (Pressed_Key <= '9') && num <= 360 )
    578e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    5790:	80 33       	cpi	r24, 0x30	; 48
    5792:	08 f1       	brcs	.+66     	; 0x57d6 <SM_VoidStepper+0x268>
    5794:	8f 8d       	ldd	r24, Y+31	; 0x1f
    5796:	8a 33       	cpi	r24, 0x3A	; 58
    5798:	f0 f4       	brcc	.+60     	; 0x57d6 <SM_VoidStepper+0x268>
    579a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    579c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    579e:	21 e0       	ldi	r18, 0x01	; 1
    57a0:	89 36       	cpi	r24, 0x69	; 105
    57a2:	92 07       	cpc	r25, r18
    57a4:	c4 f4       	brge	.+48     	; 0x57d6 <SM_VoidStepper+0x268>
								{
									LCD_VoidSendData(Pressed_Key);
    57a6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    57a8:	0e 94 00 13 	call	0x2600	; 0x2600 <LCD_VoidSendData>
									num =  num * 10 + (Pressed_Key - '0');
    57ac:	8d 8d       	ldd	r24, Y+29	; 0x1d
    57ae:	9e 8d       	ldd	r25, Y+30	; 0x1e
    57b0:	9c 01       	movw	r18, r24
    57b2:	22 0f       	add	r18, r18
    57b4:	33 1f       	adc	r19, r19
    57b6:	c9 01       	movw	r24, r18
    57b8:	88 0f       	add	r24, r24
    57ba:	99 1f       	adc	r25, r25
    57bc:	88 0f       	add	r24, r24
    57be:	99 1f       	adc	r25, r25
    57c0:	28 0f       	add	r18, r24
    57c2:	39 1f       	adc	r19, r25
    57c4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    57c6:	88 2f       	mov	r24, r24
    57c8:	90 e0       	ldi	r25, 0x00	; 0
    57ca:	c0 97       	sbiw	r24, 0x30	; 48
    57cc:	82 0f       	add	r24, r18
    57ce:	93 1f       	adc	r25, r19
    57d0:	9e 8f       	std	Y+30, r25	; 0x1e
    57d2:	8d 8f       	std	Y+29, r24	; 0x1d
    57d4:	d8 cf       	rjmp	.-80     	; 0x5786 <SM_VoidStepper+0x218>

								}
								else if(Pressed_Key == '=')
    57d6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    57d8:	8d 33       	cpi	r24, 0x3D	; 61
    57da:	a9 f6       	brne	.-86     	; 0x5786 <SM_VoidStepper+0x218>
								{
									UART_VoidSendNumber(num);
    57dc:	8d 8d       	ldd	r24, Y+29	; 0x1d
    57de:	9e 8d       	ldd	r25, Y+30	; 0x1e
    57e0:	aa 27       	eor	r26, r26
    57e2:	97 fd       	sbrc	r25, 7
    57e4:	a0 95       	com	r26
    57e6:	ba 2f       	mov	r27, r26
    57e8:	bc 01       	movw	r22, r24
    57ea:	cd 01       	movw	r24, r26
    57ec:	0e 94 be 34 	call	0x697c	; 0x697c <UART_VoidSendNumber>
									break;
								}
							}
							/* Start the Stepper (Send Data to Slave_2) */
							I2C_VidStartCondition();
    57f0:	0e 94 6f 0c 	call	0x18de	; 0x18de <I2C_VidStartCondition>
							I2C_VidSlaveAddressWrite(5);
    57f4:	85 e0       	ldi	r24, 0x05	; 5
    57f6:	0e 94 9e 0c 	call	0x193c	; 0x193c <I2C_VidSlaveAddressWrite>
							I2C_VidMastarSendData('5');   /* send 1 and wait 500ms then send 2 and will check for that in slave */
    57fa:	85 e3       	ldi	r24, 0x35	; 53
    57fc:	0e 94 f0 0c 	call	0x19e0	; 0x19e0 <I2C_VidMastarSendData>
							I2C_VidStopCondition();
    5800:	0e 94 89 0c 	call	0x1912	; 0x1912 <I2C_VidStopCondition>
    5804:	80 e0       	ldi	r24, 0x00	; 0
    5806:	90 e0       	ldi	r25, 0x00	; 0
    5808:	aa ef       	ldi	r26, 0xFA	; 250
    580a:	b3 e4       	ldi	r27, 0x43	; 67
    580c:	8b 87       	std	Y+11, r24	; 0x0b
    580e:	9c 87       	std	Y+12, r25	; 0x0c
    5810:	ad 87       	std	Y+13, r26	; 0x0d
    5812:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5814:	6b 85       	ldd	r22, Y+11	; 0x0b
    5816:	7c 85       	ldd	r23, Y+12	; 0x0c
    5818:	8d 85       	ldd	r24, Y+13	; 0x0d
    581a:	9e 85       	ldd	r25, Y+14	; 0x0e
    581c:	20 e0       	ldi	r18, 0x00	; 0
    581e:	30 e0       	ldi	r19, 0x00	; 0
    5820:	4a ef       	ldi	r20, 0xFA	; 250
    5822:	54 e4       	ldi	r21, 0x44	; 68
    5824:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5828:	dc 01       	movw	r26, r24
    582a:	cb 01       	movw	r24, r22
    582c:	8f 83       	std	Y+7, r24	; 0x07
    582e:	98 87       	std	Y+8, r25	; 0x08
    5830:	a9 87       	std	Y+9, r26	; 0x09
    5832:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    5834:	6f 81       	ldd	r22, Y+7	; 0x07
    5836:	78 85       	ldd	r23, Y+8	; 0x08
    5838:	89 85       	ldd	r24, Y+9	; 0x09
    583a:	9a 85       	ldd	r25, Y+10	; 0x0a
    583c:	20 e0       	ldi	r18, 0x00	; 0
    583e:	30 e0       	ldi	r19, 0x00	; 0
    5840:	40 e8       	ldi	r20, 0x80	; 128
    5842:	5f e3       	ldi	r21, 0x3F	; 63
    5844:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5848:	88 23       	and	r24, r24
    584a:	2c f4       	brge	.+10     	; 0x5856 <SM_VoidStepper+0x2e8>
		__ticks = 1;
    584c:	81 e0       	ldi	r24, 0x01	; 1
    584e:	90 e0       	ldi	r25, 0x00	; 0
    5850:	9e 83       	std	Y+6, r25	; 0x06
    5852:	8d 83       	std	Y+5, r24	; 0x05
    5854:	3f c0       	rjmp	.+126    	; 0x58d4 <SM_VoidStepper+0x366>
	else if (__tmp > 65535)
    5856:	6f 81       	ldd	r22, Y+7	; 0x07
    5858:	78 85       	ldd	r23, Y+8	; 0x08
    585a:	89 85       	ldd	r24, Y+9	; 0x09
    585c:	9a 85       	ldd	r25, Y+10	; 0x0a
    585e:	20 e0       	ldi	r18, 0x00	; 0
    5860:	3f ef       	ldi	r19, 0xFF	; 255
    5862:	4f e7       	ldi	r20, 0x7F	; 127
    5864:	57 e4       	ldi	r21, 0x47	; 71
    5866:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    586a:	18 16       	cp	r1, r24
    586c:	4c f5       	brge	.+82     	; 0x58c0 <SM_VoidStepper+0x352>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    586e:	6b 85       	ldd	r22, Y+11	; 0x0b
    5870:	7c 85       	ldd	r23, Y+12	; 0x0c
    5872:	8d 85       	ldd	r24, Y+13	; 0x0d
    5874:	9e 85       	ldd	r25, Y+14	; 0x0e
    5876:	20 e0       	ldi	r18, 0x00	; 0
    5878:	30 e0       	ldi	r19, 0x00	; 0
    587a:	40 e2       	ldi	r20, 0x20	; 32
    587c:	51 e4       	ldi	r21, 0x41	; 65
    587e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5882:	dc 01       	movw	r26, r24
    5884:	cb 01       	movw	r24, r22
    5886:	bc 01       	movw	r22, r24
    5888:	cd 01       	movw	r24, r26
    588a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    588e:	dc 01       	movw	r26, r24
    5890:	cb 01       	movw	r24, r22
    5892:	9e 83       	std	Y+6, r25	; 0x06
    5894:	8d 83       	std	Y+5, r24	; 0x05
    5896:	0f c0       	rjmp	.+30     	; 0x58b6 <SM_VoidStepper+0x348>
    5898:	88 ec       	ldi	r24, 0xC8	; 200
    589a:	90 e0       	ldi	r25, 0x00	; 0
    589c:	9c 83       	std	Y+4, r25	; 0x04
    589e:	8b 83       	std	Y+3, r24	; 0x03
    58a0:	8b 81       	ldd	r24, Y+3	; 0x03
    58a2:	9c 81       	ldd	r25, Y+4	; 0x04
    58a4:	01 97       	sbiw	r24, 0x01	; 1
    58a6:	f1 f7       	brne	.-4      	; 0x58a4 <SM_VoidStepper+0x336>
    58a8:	9c 83       	std	Y+4, r25	; 0x04
    58aa:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    58ac:	8d 81       	ldd	r24, Y+5	; 0x05
    58ae:	9e 81       	ldd	r25, Y+6	; 0x06
    58b0:	01 97       	sbiw	r24, 0x01	; 1
    58b2:	9e 83       	std	Y+6, r25	; 0x06
    58b4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    58b6:	8d 81       	ldd	r24, Y+5	; 0x05
    58b8:	9e 81       	ldd	r25, Y+6	; 0x06
    58ba:	00 97       	sbiw	r24, 0x00	; 0
    58bc:	69 f7       	brne	.-38     	; 0x5898 <SM_VoidStepper+0x32a>
    58be:	63 ce       	rjmp	.-826    	; 0x5586 <SM_VoidStepper+0x18>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    58c0:	6f 81       	ldd	r22, Y+7	; 0x07
    58c2:	78 85       	ldd	r23, Y+8	; 0x08
    58c4:	89 85       	ldd	r24, Y+9	; 0x09
    58c6:	9a 85       	ldd	r25, Y+10	; 0x0a
    58c8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    58cc:	dc 01       	movw	r26, r24
    58ce:	cb 01       	movw	r24, r22
    58d0:	9e 83       	std	Y+6, r25	; 0x06
    58d2:	8d 83       	std	Y+5, r24	; 0x05
    58d4:	8d 81       	ldd	r24, Y+5	; 0x05
    58d6:	9e 81       	ldd	r25, Y+6	; 0x06
    58d8:	9a 83       	std	Y+2, r25	; 0x02
    58da:	89 83       	std	Y+1, r24	; 0x01
    58dc:	89 81       	ldd	r24, Y+1	; 0x01
    58de:	9a 81       	ldd	r25, Y+2	; 0x02
    58e0:	01 97       	sbiw	r24, 0x01	; 1
    58e2:	f1 f7       	brne	.-4      	; 0x58e0 <SM_VoidStepper+0x372>
    58e4:	9a 83       	std	Y+2, r25	; 0x02
    58e6:	89 83       	std	Y+1, r24	; 0x01
    58e8:	4e ce       	rjmp	.-868    	; 0x5586 <SM_VoidStepper+0x18>
							_delay_ms(500);
							goto Stepper;
							break;
	    	}
	    }
	    else if(Pressed_Key == '3')
    58ea:	8f 8d       	ldd	r24, Y+31	; 0x1f
    58ec:	83 33       	cpi	r24, 0x33	; 51
    58ee:	09 f0       	breq	.+2      	; 0x58f2 <SM_VoidStepper+0x384>
    58f0:	5d ce       	rjmp	.-838    	; 0x55ac <SM_VoidStepper+0x3e>
	    {
	    		break;
	    }
	}
}
    58f2:	a1 96       	adiw	r28, 0x21	; 33
    58f4:	0f b6       	in	r0, 0x3f	; 63
    58f6:	f8 94       	cli
    58f8:	de bf       	out	0x3e, r29	; 62
    58fa:	0f be       	out	0x3f, r0	; 63
    58fc:	cd bf       	out	0x3d, r28	; 61
    58fe:	cf 91       	pop	r28
    5900:	df 91       	pop	r29
    5902:	08 95       	ret

00005904 <Turn_Led>:

void Turn_Led(void)
{
    5904:	df 93       	push	r29
    5906:	cf 93       	push	r28
    5908:	cd b7       	in	r28, 0x3d	; 61
    590a:	de b7       	in	r29, 0x3e	; 62
    590c:	6e 97       	sbiw	r28, 0x1e	; 30
    590e:	0f b6       	in	r0, 0x3f	; 63
    5910:	f8 94       	cli
    5912:	de bf       	out	0x3e, r29	; 62
    5914:	0f be       	out	0x3f, r0	; 63
    5916:	cd bf       	out	0x3d, r28	; 61
	static u8 Led_Flag=0;
	DIO_U8SetPinDirection(DIO_PORTB,DIO_PIN0,DIO_PIN_OUT);
    5918:	81 e0       	ldi	r24, 0x01	; 1
    591a:	60 e0       	ldi	r22, 0x00	; 0
    591c:	41 e0       	ldi	r20, 0x01	; 1
    591e:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <DIO_U8SetPinDirection>
LED:	LCD_u8WriteString("1-Turn On   2- Turn OFF");
    5922:	8d e9       	ldi	r24, 0x9D	; 157
    5924:	91 e0       	ldi	r25, 0x01	; 1
    5926:	0e 94 3d 17 	call	0x2e7a	; 0x2e7a <LCD_u8WriteString>
	LCD_VoidGoToRowCol(1,0);
    592a:	81 e0       	ldi	r24, 0x01	; 1
    592c:	60 e0       	ldi	r22, 0x00	; 0
    592e:	0e 94 85 16 	call	0x2d0a	; 0x2d0a <LCD_VoidGoToRowCol>
	LCD_u8WriteString("3-Return");
    5932:	8f e7       	ldi	r24, 0x7F	; 127
    5934:	91 e0       	ldi	r25, 0x01	; 1
    5936:	0e 94 3d 17 	call	0x2e7a	; 0x2e7a <LCD_u8WriteString>
	static u8 Pressed;
	while(1)
		{
			KPAD_U8GetPressedKey(&Pressed);
    593a:	8c e9       	ldi	r24, 0x9C	; 156
    593c:	93 e0       	ldi	r25, 0x03	; 3
    593e:	0e 94 54 0d 	call	0x1aa8	; 0x1aa8 <KPAD_U8GetPressedKey>
			if((Pressed >='1') && (Pressed <='6'))
    5942:	80 91 9c 03 	lds	r24, 0x039C
    5946:	81 33       	cpi	r24, 0x31	; 49
    5948:	08 f4       	brcc	.+2      	; 0x594c <Turn_Led+0x48>
    594a:	27 c1       	rjmp	.+590    	; 0x5b9a <Turn_Led+0x296>
    594c:	80 91 9c 03 	lds	r24, 0x039C
    5950:	87 33       	cpi	r24, 0x37	; 55
    5952:	08 f0       	brcs	.+2      	; 0x5956 <Turn_Led+0x52>
    5954:	22 c1       	rjmp	.+580    	; 0x5b9a <Turn_Led+0x296>
			{
				switch(Pressed)
    5956:	80 91 9c 03 	lds	r24, 0x039C
    595a:	28 2f       	mov	r18, r24
    595c:	30 e0       	ldi	r19, 0x00	; 0
    595e:	3e 8f       	std	Y+30, r19	; 0x1e
    5960:	2d 8f       	std	Y+29, r18	; 0x1d
    5962:	8d 8d       	ldd	r24, Y+29	; 0x1d
    5964:	9e 8d       	ldd	r25, Y+30	; 0x1e
    5966:	82 33       	cpi	r24, 0x32	; 50
    5968:	91 05       	cpc	r25, r1
    596a:	09 f4       	brne	.+2      	; 0x596e <Turn_Led+0x6a>
    596c:	8e c0       	rjmp	.+284    	; 0x5a8a <Turn_Led+0x186>
    596e:	2d 8d       	ldd	r18, Y+29	; 0x1d
    5970:	3e 8d       	ldd	r19, Y+30	; 0x1e
    5972:	23 33       	cpi	r18, 0x33	; 51
    5974:	31 05       	cpc	r19, r1
    5976:	09 f4       	brne	.+2      	; 0x597a <Turn_Led+0x76>
    5978:	0a c1       	rjmp	.+532    	; 0x5b8e <Turn_Led+0x28a>
    597a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    597c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    597e:	81 33       	cpi	r24, 0x31	; 49
    5980:	91 05       	cpc	r25, r1
    5982:	09 f0       	breq	.+2      	; 0x5986 <Turn_Led+0x82>
    5984:	0a c1       	rjmp	.+532    	; 0x5b9a <Turn_Led+0x296>
				{
					case '1':
						LCD_VoidSendCommand(1);
    5986:	81 e0       	ldi	r24, 0x01	; 1
    5988:	0e 94 86 0e 	call	0x1d0c	; 0x1d0c <LCD_VoidSendCommand>
						LCD_u8WriteString("Led is ON ");
    598c:	85 eb       	ldi	r24, 0xB5	; 181
    598e:	91 e0       	ldi	r25, 0x01	; 1
    5990:	0e 94 3d 17 	call	0x2e7a	; 0x2e7a <LCD_u8WriteString>
						DIO_U8SetPinValue(DIO_PORTB,DIO_PIN0,HIGH);
    5994:	81 e0       	ldi	r24, 0x01	; 1
    5996:	60 e0       	ldi	r22, 0x00	; 0
    5998:	41 e0       	ldi	r20, 0x01	; 1
    599a:	0e 94 15 08 	call	0x102a	; 0x102a <DIO_U8SetPinValue>
    599e:	80 e0       	ldi	r24, 0x00	; 0
    59a0:	90 e0       	ldi	r25, 0x00	; 0
    59a2:	aa ef       	ldi	r26, 0xFA	; 250
    59a4:	b3 e4       	ldi	r27, 0x43	; 67
    59a6:	89 8f       	std	Y+25, r24	; 0x19
    59a8:	9a 8f       	std	Y+26, r25	; 0x1a
    59aa:	ab 8f       	std	Y+27, r26	; 0x1b
    59ac:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    59ae:	69 8d       	ldd	r22, Y+25	; 0x19
    59b0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    59b2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    59b4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    59b6:	20 e0       	ldi	r18, 0x00	; 0
    59b8:	30 e0       	ldi	r19, 0x00	; 0
    59ba:	4a ef       	ldi	r20, 0xFA	; 250
    59bc:	54 e4       	ldi	r21, 0x44	; 68
    59be:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    59c2:	dc 01       	movw	r26, r24
    59c4:	cb 01       	movw	r24, r22
    59c6:	8d 8b       	std	Y+21, r24	; 0x15
    59c8:	9e 8b       	std	Y+22, r25	; 0x16
    59ca:	af 8b       	std	Y+23, r26	; 0x17
    59cc:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    59ce:	6d 89       	ldd	r22, Y+21	; 0x15
    59d0:	7e 89       	ldd	r23, Y+22	; 0x16
    59d2:	8f 89       	ldd	r24, Y+23	; 0x17
    59d4:	98 8d       	ldd	r25, Y+24	; 0x18
    59d6:	20 e0       	ldi	r18, 0x00	; 0
    59d8:	30 e0       	ldi	r19, 0x00	; 0
    59da:	40 e8       	ldi	r20, 0x80	; 128
    59dc:	5f e3       	ldi	r21, 0x3F	; 63
    59de:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    59e2:	88 23       	and	r24, r24
    59e4:	2c f4       	brge	.+10     	; 0x59f0 <Turn_Led+0xec>
		__ticks = 1;
    59e6:	81 e0       	ldi	r24, 0x01	; 1
    59e8:	90 e0       	ldi	r25, 0x00	; 0
    59ea:	9c 8b       	std	Y+20, r25	; 0x14
    59ec:	8b 8b       	std	Y+19, r24	; 0x13
    59ee:	3f c0       	rjmp	.+126    	; 0x5a6e <Turn_Led+0x16a>
	else if (__tmp > 65535)
    59f0:	6d 89       	ldd	r22, Y+21	; 0x15
    59f2:	7e 89       	ldd	r23, Y+22	; 0x16
    59f4:	8f 89       	ldd	r24, Y+23	; 0x17
    59f6:	98 8d       	ldd	r25, Y+24	; 0x18
    59f8:	20 e0       	ldi	r18, 0x00	; 0
    59fa:	3f ef       	ldi	r19, 0xFF	; 255
    59fc:	4f e7       	ldi	r20, 0x7F	; 127
    59fe:	57 e4       	ldi	r21, 0x47	; 71
    5a00:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5a04:	18 16       	cp	r1, r24
    5a06:	4c f5       	brge	.+82     	; 0x5a5a <Turn_Led+0x156>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5a08:	69 8d       	ldd	r22, Y+25	; 0x19
    5a0a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    5a0c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5a0e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    5a10:	20 e0       	ldi	r18, 0x00	; 0
    5a12:	30 e0       	ldi	r19, 0x00	; 0
    5a14:	40 e2       	ldi	r20, 0x20	; 32
    5a16:	51 e4       	ldi	r21, 0x41	; 65
    5a18:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5a1c:	dc 01       	movw	r26, r24
    5a1e:	cb 01       	movw	r24, r22
    5a20:	bc 01       	movw	r22, r24
    5a22:	cd 01       	movw	r24, r26
    5a24:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5a28:	dc 01       	movw	r26, r24
    5a2a:	cb 01       	movw	r24, r22
    5a2c:	9c 8b       	std	Y+20, r25	; 0x14
    5a2e:	8b 8b       	std	Y+19, r24	; 0x13
    5a30:	0f c0       	rjmp	.+30     	; 0x5a50 <Turn_Led+0x14c>
    5a32:	88 ec       	ldi	r24, 0xC8	; 200
    5a34:	90 e0       	ldi	r25, 0x00	; 0
    5a36:	9a 8b       	std	Y+18, r25	; 0x12
    5a38:	89 8b       	std	Y+17, r24	; 0x11
    5a3a:	89 89       	ldd	r24, Y+17	; 0x11
    5a3c:	9a 89       	ldd	r25, Y+18	; 0x12
    5a3e:	01 97       	sbiw	r24, 0x01	; 1
    5a40:	f1 f7       	brne	.-4      	; 0x5a3e <Turn_Led+0x13a>
    5a42:	9a 8b       	std	Y+18, r25	; 0x12
    5a44:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5a46:	8b 89       	ldd	r24, Y+19	; 0x13
    5a48:	9c 89       	ldd	r25, Y+20	; 0x14
    5a4a:	01 97       	sbiw	r24, 0x01	; 1
    5a4c:	9c 8b       	std	Y+20, r25	; 0x14
    5a4e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5a50:	8b 89       	ldd	r24, Y+19	; 0x13
    5a52:	9c 89       	ldd	r25, Y+20	; 0x14
    5a54:	00 97       	sbiw	r24, 0x00	; 0
    5a56:	69 f7       	brne	.-38     	; 0x5a32 <Turn_Led+0x12e>
    5a58:	14 c0       	rjmp	.+40     	; 0x5a82 <Turn_Led+0x17e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5a5a:	6d 89       	ldd	r22, Y+21	; 0x15
    5a5c:	7e 89       	ldd	r23, Y+22	; 0x16
    5a5e:	8f 89       	ldd	r24, Y+23	; 0x17
    5a60:	98 8d       	ldd	r25, Y+24	; 0x18
    5a62:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5a66:	dc 01       	movw	r26, r24
    5a68:	cb 01       	movw	r24, r22
    5a6a:	9c 8b       	std	Y+20, r25	; 0x14
    5a6c:	8b 8b       	std	Y+19, r24	; 0x13
    5a6e:	8b 89       	ldd	r24, Y+19	; 0x13
    5a70:	9c 89       	ldd	r25, Y+20	; 0x14
    5a72:	98 8b       	std	Y+16, r25	; 0x10
    5a74:	8f 87       	std	Y+15, r24	; 0x0f
    5a76:	8f 85       	ldd	r24, Y+15	; 0x0f
    5a78:	98 89       	ldd	r25, Y+16	; 0x10
    5a7a:	01 97       	sbiw	r24, 0x01	; 1
    5a7c:	f1 f7       	brne	.-4      	; 0x5a7a <Turn_Led+0x176>
    5a7e:	98 8b       	std	Y+16, r25	; 0x10
    5a80:	8f 87       	std	Y+15, r24	; 0x0f
						_delay_ms(500);
						LCD_VoidSendCommand(1);
    5a82:	81 e0       	ldi	r24, 0x01	; 1
    5a84:	0e 94 86 0e 	call	0x1d0c	; 0x1d0c <LCD_VoidSendCommand>
    5a88:	4c cf       	rjmp	.-360    	; 0x5922 <Turn_Led+0x1e>
						goto LED;
						break;
					case '2':
						LCD_VoidSendCommand(1);
    5a8a:	81 e0       	ldi	r24, 0x01	; 1
    5a8c:	0e 94 86 0e 	call	0x1d0c	; 0x1d0c <LCD_VoidSendCommand>
						LCD_u8WriteString("Led is OFF ");
    5a90:	80 ec       	ldi	r24, 0xC0	; 192
    5a92:	91 e0       	ldi	r25, 0x01	; 1
    5a94:	0e 94 3d 17 	call	0x2e7a	; 0x2e7a <LCD_u8WriteString>
						DIO_U8SetPinValue(DIO_PORTB,DIO_PIN0,LOW);
    5a98:	81 e0       	ldi	r24, 0x01	; 1
    5a9a:	60 e0       	ldi	r22, 0x00	; 0
    5a9c:	40 e0       	ldi	r20, 0x00	; 0
    5a9e:	0e 94 15 08 	call	0x102a	; 0x102a <DIO_U8SetPinValue>
    5aa2:	80 e0       	ldi	r24, 0x00	; 0
    5aa4:	90 e0       	ldi	r25, 0x00	; 0
    5aa6:	aa ef       	ldi	r26, 0xFA	; 250
    5aa8:	b3 e4       	ldi	r27, 0x43	; 67
    5aaa:	8b 87       	std	Y+11, r24	; 0x0b
    5aac:	9c 87       	std	Y+12, r25	; 0x0c
    5aae:	ad 87       	std	Y+13, r26	; 0x0d
    5ab0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5ab2:	6b 85       	ldd	r22, Y+11	; 0x0b
    5ab4:	7c 85       	ldd	r23, Y+12	; 0x0c
    5ab6:	8d 85       	ldd	r24, Y+13	; 0x0d
    5ab8:	9e 85       	ldd	r25, Y+14	; 0x0e
    5aba:	20 e0       	ldi	r18, 0x00	; 0
    5abc:	30 e0       	ldi	r19, 0x00	; 0
    5abe:	4a ef       	ldi	r20, 0xFA	; 250
    5ac0:	54 e4       	ldi	r21, 0x44	; 68
    5ac2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5ac6:	dc 01       	movw	r26, r24
    5ac8:	cb 01       	movw	r24, r22
    5aca:	8f 83       	std	Y+7, r24	; 0x07
    5acc:	98 87       	std	Y+8, r25	; 0x08
    5ace:	a9 87       	std	Y+9, r26	; 0x09
    5ad0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    5ad2:	6f 81       	ldd	r22, Y+7	; 0x07
    5ad4:	78 85       	ldd	r23, Y+8	; 0x08
    5ad6:	89 85       	ldd	r24, Y+9	; 0x09
    5ad8:	9a 85       	ldd	r25, Y+10	; 0x0a
    5ada:	20 e0       	ldi	r18, 0x00	; 0
    5adc:	30 e0       	ldi	r19, 0x00	; 0
    5ade:	40 e8       	ldi	r20, 0x80	; 128
    5ae0:	5f e3       	ldi	r21, 0x3F	; 63
    5ae2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5ae6:	88 23       	and	r24, r24
    5ae8:	2c f4       	brge	.+10     	; 0x5af4 <Turn_Led+0x1f0>
		__ticks = 1;
    5aea:	81 e0       	ldi	r24, 0x01	; 1
    5aec:	90 e0       	ldi	r25, 0x00	; 0
    5aee:	9e 83       	std	Y+6, r25	; 0x06
    5af0:	8d 83       	std	Y+5, r24	; 0x05
    5af2:	3f c0       	rjmp	.+126    	; 0x5b72 <Turn_Led+0x26e>
	else if (__tmp > 65535)
    5af4:	6f 81       	ldd	r22, Y+7	; 0x07
    5af6:	78 85       	ldd	r23, Y+8	; 0x08
    5af8:	89 85       	ldd	r24, Y+9	; 0x09
    5afa:	9a 85       	ldd	r25, Y+10	; 0x0a
    5afc:	20 e0       	ldi	r18, 0x00	; 0
    5afe:	3f ef       	ldi	r19, 0xFF	; 255
    5b00:	4f e7       	ldi	r20, 0x7F	; 127
    5b02:	57 e4       	ldi	r21, 0x47	; 71
    5b04:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5b08:	18 16       	cp	r1, r24
    5b0a:	4c f5       	brge	.+82     	; 0x5b5e <Turn_Led+0x25a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5b0c:	6b 85       	ldd	r22, Y+11	; 0x0b
    5b0e:	7c 85       	ldd	r23, Y+12	; 0x0c
    5b10:	8d 85       	ldd	r24, Y+13	; 0x0d
    5b12:	9e 85       	ldd	r25, Y+14	; 0x0e
    5b14:	20 e0       	ldi	r18, 0x00	; 0
    5b16:	30 e0       	ldi	r19, 0x00	; 0
    5b18:	40 e2       	ldi	r20, 0x20	; 32
    5b1a:	51 e4       	ldi	r21, 0x41	; 65
    5b1c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5b20:	dc 01       	movw	r26, r24
    5b22:	cb 01       	movw	r24, r22
    5b24:	bc 01       	movw	r22, r24
    5b26:	cd 01       	movw	r24, r26
    5b28:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5b2c:	dc 01       	movw	r26, r24
    5b2e:	cb 01       	movw	r24, r22
    5b30:	9e 83       	std	Y+6, r25	; 0x06
    5b32:	8d 83       	std	Y+5, r24	; 0x05
    5b34:	0f c0       	rjmp	.+30     	; 0x5b54 <Turn_Led+0x250>
    5b36:	88 ec       	ldi	r24, 0xC8	; 200
    5b38:	90 e0       	ldi	r25, 0x00	; 0
    5b3a:	9c 83       	std	Y+4, r25	; 0x04
    5b3c:	8b 83       	std	Y+3, r24	; 0x03
    5b3e:	8b 81       	ldd	r24, Y+3	; 0x03
    5b40:	9c 81       	ldd	r25, Y+4	; 0x04
    5b42:	01 97       	sbiw	r24, 0x01	; 1
    5b44:	f1 f7       	brne	.-4      	; 0x5b42 <Turn_Led+0x23e>
    5b46:	9c 83       	std	Y+4, r25	; 0x04
    5b48:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5b4a:	8d 81       	ldd	r24, Y+5	; 0x05
    5b4c:	9e 81       	ldd	r25, Y+6	; 0x06
    5b4e:	01 97       	sbiw	r24, 0x01	; 1
    5b50:	9e 83       	std	Y+6, r25	; 0x06
    5b52:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5b54:	8d 81       	ldd	r24, Y+5	; 0x05
    5b56:	9e 81       	ldd	r25, Y+6	; 0x06
    5b58:	00 97       	sbiw	r24, 0x00	; 0
    5b5a:	69 f7       	brne	.-38     	; 0x5b36 <Turn_Led+0x232>
    5b5c:	14 c0       	rjmp	.+40     	; 0x5b86 <Turn_Led+0x282>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5b5e:	6f 81       	ldd	r22, Y+7	; 0x07
    5b60:	78 85       	ldd	r23, Y+8	; 0x08
    5b62:	89 85       	ldd	r24, Y+9	; 0x09
    5b64:	9a 85       	ldd	r25, Y+10	; 0x0a
    5b66:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5b6a:	dc 01       	movw	r26, r24
    5b6c:	cb 01       	movw	r24, r22
    5b6e:	9e 83       	std	Y+6, r25	; 0x06
    5b70:	8d 83       	std	Y+5, r24	; 0x05
    5b72:	8d 81       	ldd	r24, Y+5	; 0x05
    5b74:	9e 81       	ldd	r25, Y+6	; 0x06
    5b76:	9a 83       	std	Y+2, r25	; 0x02
    5b78:	89 83       	std	Y+1, r24	; 0x01
    5b7a:	89 81       	ldd	r24, Y+1	; 0x01
    5b7c:	9a 81       	ldd	r25, Y+2	; 0x02
    5b7e:	01 97       	sbiw	r24, 0x01	; 1
    5b80:	f1 f7       	brne	.-4      	; 0x5b7e <Turn_Led+0x27a>
    5b82:	9a 83       	std	Y+2, r25	; 0x02
    5b84:	89 83       	std	Y+1, r24	; 0x01
						_delay_ms(500);
						LCD_VoidSendCommand(1);
    5b86:	81 e0       	ldi	r24, 0x01	; 1
    5b88:	0e 94 86 0e 	call	0x1d0c	; 0x1d0c <LCD_VoidSendCommand>
    5b8c:	ca ce       	rjmp	.-620    	; 0x5922 <Turn_Led+0x1e>
						goto LED;
						break;
					case '3':
						LCD_VoidSendCommand(1);
    5b8e:	81 e0       	ldi	r24, 0x01	; 1
    5b90:	0e 94 86 0e 	call	0x1d0c	; 0x1d0c <LCD_VoidSendCommand>
						Led_Flag=1;
    5b94:	81 e0       	ldi	r24, 0x01	; 1
    5b96:	80 93 9d 03 	sts	0x039D, r24
						break;

				}
			}
			if(Led_Flag==1)
    5b9a:	80 91 9d 03 	lds	r24, 0x039D
    5b9e:	81 30       	cpi	r24, 0x01	; 1
    5ba0:	09 f0       	breq	.+2      	; 0x5ba4 <Turn_Led+0x2a0>
    5ba2:	cb ce       	rjmp	.-618    	; 0x593a <Turn_Led+0x36>
			{
				Led_Flag=0;
    5ba4:	10 92 9d 03 	sts	0x039D, r1
				break;
			}

		}
    5ba8:	6e 96       	adiw	r28, 0x1e	; 30
    5baa:	0f b6       	in	r0, 0x3f	; 63
    5bac:	f8 94       	cli
    5bae:	de bf       	out	0x3e, r29	; 62
    5bb0:	0f be       	out	0x3f, r0	; 63
    5bb2:	cd bf       	out	0x3d, r28	; 61
    5bb4:	cf 91       	pop	r28
    5bb6:	df 91       	pop	r29
    5bb8:	08 95       	ret

00005bba <SM_U8RoomSelect>:
}

u8 SM_U8RoomSelect(void)
{
    5bba:	0f 93       	push	r16
    5bbc:	1f 93       	push	r17
    5bbe:	df 93       	push	r29
    5bc0:	cf 93       	push	r28
    5bc2:	cd b7       	in	r28, 0x3d	; 61
    5bc4:	de b7       	in	r29, 0x3e	; 62
    5bc6:	c7 55       	subi	r28, 0x57	; 87
    5bc8:	d0 40       	sbci	r29, 0x00	; 0
    5bca:	0f b6       	in	r0, 0x3f	; 63
    5bcc:	f8 94       	cli
    5bce:	de bf       	out	0x3e, r29	; 62
    5bd0:	0f be       	out	0x3f, r0	; 63
    5bd2:	cd bf       	out	0x3d, r28	; 61
	u8 Local_U8ErrorState=ERROR_STATE_NOK;
    5bd4:	fe 01       	movw	r30, r28
    5bd6:	eb 5a       	subi	r30, 0xAB	; 171
    5bd8:	ff 4f       	sbci	r31, 0xFF	; 255
    5bda:	10 82       	st	Z, r1

	static u8 Pressed;

	Select: /* Select Room */
	LCD_VoidSendCommand(1);
    5bdc:	81 e0       	ldi	r24, 0x01	; 1
    5bde:	0e 94 86 0e 	call	0x1d0c	; 0x1d0c <LCD_VoidSendCommand>
	LCD_VoidGoToRowCol(0,0);
    5be2:	80 e0       	ldi	r24, 0x00	; 0
    5be4:	60 e0       	ldi	r22, 0x00	; 0
    5be6:	0e 94 85 16 	call	0x2d0a	; 0x2d0a <LCD_VoidGoToRowCol>
	LCD_u8WriteString("Select Room");
    5bea:	8c ec       	ldi	r24, 0xCC	; 204
    5bec:	91 e0       	ldi	r25, 0x01	; 1
    5bee:	0e 94 3d 17 	call	0x2e7a	; 0x2e7a <LCD_u8WriteString>
    5bf2:	fe 01       	movw	r30, r28
    5bf4:	ef 5a       	subi	r30, 0xAF	; 175
    5bf6:	ff 4f       	sbci	r31, 0xFF	; 255
    5bf8:	80 e0       	ldi	r24, 0x00	; 0
    5bfa:	90 e0       	ldi	r25, 0x00	; 0
    5bfc:	a8 e4       	ldi	r26, 0x48	; 72
    5bfe:	b4 e4       	ldi	r27, 0x44	; 68
    5c00:	80 83       	st	Z, r24
    5c02:	91 83       	std	Z+1, r25	; 0x01
    5c04:	a2 83       	std	Z+2, r26	; 0x02
    5c06:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5c08:	8e 01       	movw	r16, r28
    5c0a:	03 5b       	subi	r16, 0xB3	; 179
    5c0c:	1f 4f       	sbci	r17, 0xFF	; 255
    5c0e:	fe 01       	movw	r30, r28
    5c10:	ef 5a       	subi	r30, 0xAF	; 175
    5c12:	ff 4f       	sbci	r31, 0xFF	; 255
    5c14:	60 81       	ld	r22, Z
    5c16:	71 81       	ldd	r23, Z+1	; 0x01
    5c18:	82 81       	ldd	r24, Z+2	; 0x02
    5c1a:	93 81       	ldd	r25, Z+3	; 0x03
    5c1c:	20 e0       	ldi	r18, 0x00	; 0
    5c1e:	30 e0       	ldi	r19, 0x00	; 0
    5c20:	4a ef       	ldi	r20, 0xFA	; 250
    5c22:	54 e4       	ldi	r21, 0x44	; 68
    5c24:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5c28:	dc 01       	movw	r26, r24
    5c2a:	cb 01       	movw	r24, r22
    5c2c:	f8 01       	movw	r30, r16
    5c2e:	80 83       	st	Z, r24
    5c30:	91 83       	std	Z+1, r25	; 0x01
    5c32:	a2 83       	std	Z+2, r26	; 0x02
    5c34:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    5c36:	fe 01       	movw	r30, r28
    5c38:	e3 5b       	subi	r30, 0xB3	; 179
    5c3a:	ff 4f       	sbci	r31, 0xFF	; 255
    5c3c:	60 81       	ld	r22, Z
    5c3e:	71 81       	ldd	r23, Z+1	; 0x01
    5c40:	82 81       	ldd	r24, Z+2	; 0x02
    5c42:	93 81       	ldd	r25, Z+3	; 0x03
    5c44:	20 e0       	ldi	r18, 0x00	; 0
    5c46:	30 e0       	ldi	r19, 0x00	; 0
    5c48:	40 e8       	ldi	r20, 0x80	; 128
    5c4a:	5f e3       	ldi	r21, 0x3F	; 63
    5c4c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5c50:	88 23       	and	r24, r24
    5c52:	44 f4       	brge	.+16     	; 0x5c64 <SM_U8RoomSelect+0xaa>
		__ticks = 1;
    5c54:	fe 01       	movw	r30, r28
    5c56:	e5 5b       	subi	r30, 0xB5	; 181
    5c58:	ff 4f       	sbci	r31, 0xFF	; 255
    5c5a:	81 e0       	ldi	r24, 0x01	; 1
    5c5c:	90 e0       	ldi	r25, 0x00	; 0
    5c5e:	91 83       	std	Z+1, r25	; 0x01
    5c60:	80 83       	st	Z, r24
    5c62:	64 c0       	rjmp	.+200    	; 0x5d2c <SM_U8RoomSelect+0x172>
	else if (__tmp > 65535)
    5c64:	fe 01       	movw	r30, r28
    5c66:	e3 5b       	subi	r30, 0xB3	; 179
    5c68:	ff 4f       	sbci	r31, 0xFF	; 255
    5c6a:	60 81       	ld	r22, Z
    5c6c:	71 81       	ldd	r23, Z+1	; 0x01
    5c6e:	82 81       	ldd	r24, Z+2	; 0x02
    5c70:	93 81       	ldd	r25, Z+3	; 0x03
    5c72:	20 e0       	ldi	r18, 0x00	; 0
    5c74:	3f ef       	ldi	r19, 0xFF	; 255
    5c76:	4f e7       	ldi	r20, 0x7F	; 127
    5c78:	57 e4       	ldi	r21, 0x47	; 71
    5c7a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5c7e:	18 16       	cp	r1, r24
    5c80:	0c f0       	brlt	.+2      	; 0x5c84 <SM_U8RoomSelect+0xca>
    5c82:	43 c0       	rjmp	.+134    	; 0x5d0a <SM_U8RoomSelect+0x150>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5c84:	fe 01       	movw	r30, r28
    5c86:	ef 5a       	subi	r30, 0xAF	; 175
    5c88:	ff 4f       	sbci	r31, 0xFF	; 255
    5c8a:	60 81       	ld	r22, Z
    5c8c:	71 81       	ldd	r23, Z+1	; 0x01
    5c8e:	82 81       	ldd	r24, Z+2	; 0x02
    5c90:	93 81       	ldd	r25, Z+3	; 0x03
    5c92:	20 e0       	ldi	r18, 0x00	; 0
    5c94:	30 e0       	ldi	r19, 0x00	; 0
    5c96:	40 e2       	ldi	r20, 0x20	; 32
    5c98:	51 e4       	ldi	r21, 0x41	; 65
    5c9a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5c9e:	dc 01       	movw	r26, r24
    5ca0:	cb 01       	movw	r24, r22
    5ca2:	8e 01       	movw	r16, r28
    5ca4:	05 5b       	subi	r16, 0xB5	; 181
    5ca6:	1f 4f       	sbci	r17, 0xFF	; 255
    5ca8:	bc 01       	movw	r22, r24
    5caa:	cd 01       	movw	r24, r26
    5cac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5cb0:	dc 01       	movw	r26, r24
    5cb2:	cb 01       	movw	r24, r22
    5cb4:	f8 01       	movw	r30, r16
    5cb6:	91 83       	std	Z+1, r25	; 0x01
    5cb8:	80 83       	st	Z, r24
    5cba:	1f c0       	rjmp	.+62     	; 0x5cfa <SM_U8RoomSelect+0x140>
    5cbc:	fe 01       	movw	r30, r28
    5cbe:	e7 5b       	subi	r30, 0xB7	; 183
    5cc0:	ff 4f       	sbci	r31, 0xFF	; 255
    5cc2:	88 ec       	ldi	r24, 0xC8	; 200
    5cc4:	90 e0       	ldi	r25, 0x00	; 0
    5cc6:	91 83       	std	Z+1, r25	; 0x01
    5cc8:	80 83       	st	Z, r24
    5cca:	fe 01       	movw	r30, r28
    5ccc:	e7 5b       	subi	r30, 0xB7	; 183
    5cce:	ff 4f       	sbci	r31, 0xFF	; 255
    5cd0:	80 81       	ld	r24, Z
    5cd2:	91 81       	ldd	r25, Z+1	; 0x01
    5cd4:	01 97       	sbiw	r24, 0x01	; 1
    5cd6:	f1 f7       	brne	.-4      	; 0x5cd4 <SM_U8RoomSelect+0x11a>
    5cd8:	fe 01       	movw	r30, r28
    5cda:	e7 5b       	subi	r30, 0xB7	; 183
    5cdc:	ff 4f       	sbci	r31, 0xFF	; 255
    5cde:	91 83       	std	Z+1, r25	; 0x01
    5ce0:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5ce2:	de 01       	movw	r26, r28
    5ce4:	a5 5b       	subi	r26, 0xB5	; 181
    5ce6:	bf 4f       	sbci	r27, 0xFF	; 255
    5ce8:	fe 01       	movw	r30, r28
    5cea:	e5 5b       	subi	r30, 0xB5	; 181
    5cec:	ff 4f       	sbci	r31, 0xFF	; 255
    5cee:	80 81       	ld	r24, Z
    5cf0:	91 81       	ldd	r25, Z+1	; 0x01
    5cf2:	01 97       	sbiw	r24, 0x01	; 1
    5cf4:	11 96       	adiw	r26, 0x01	; 1
    5cf6:	9c 93       	st	X, r25
    5cf8:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5cfa:	fe 01       	movw	r30, r28
    5cfc:	e5 5b       	subi	r30, 0xB5	; 181
    5cfe:	ff 4f       	sbci	r31, 0xFF	; 255
    5d00:	80 81       	ld	r24, Z
    5d02:	91 81       	ldd	r25, Z+1	; 0x01
    5d04:	00 97       	sbiw	r24, 0x00	; 0
    5d06:	d1 f6       	brne	.-76     	; 0x5cbc <SM_U8RoomSelect+0x102>
    5d08:	27 c0       	rjmp	.+78     	; 0x5d58 <SM_U8RoomSelect+0x19e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5d0a:	8e 01       	movw	r16, r28
    5d0c:	05 5b       	subi	r16, 0xB5	; 181
    5d0e:	1f 4f       	sbci	r17, 0xFF	; 255
    5d10:	fe 01       	movw	r30, r28
    5d12:	e3 5b       	subi	r30, 0xB3	; 179
    5d14:	ff 4f       	sbci	r31, 0xFF	; 255
    5d16:	60 81       	ld	r22, Z
    5d18:	71 81       	ldd	r23, Z+1	; 0x01
    5d1a:	82 81       	ldd	r24, Z+2	; 0x02
    5d1c:	93 81       	ldd	r25, Z+3	; 0x03
    5d1e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5d22:	dc 01       	movw	r26, r24
    5d24:	cb 01       	movw	r24, r22
    5d26:	f8 01       	movw	r30, r16
    5d28:	91 83       	std	Z+1, r25	; 0x01
    5d2a:	80 83       	st	Z, r24
    5d2c:	de 01       	movw	r26, r28
    5d2e:	a9 5b       	subi	r26, 0xB9	; 185
    5d30:	bf 4f       	sbci	r27, 0xFF	; 255
    5d32:	fe 01       	movw	r30, r28
    5d34:	e5 5b       	subi	r30, 0xB5	; 181
    5d36:	ff 4f       	sbci	r31, 0xFF	; 255
    5d38:	80 81       	ld	r24, Z
    5d3a:	91 81       	ldd	r25, Z+1	; 0x01
    5d3c:	8d 93       	st	X+, r24
    5d3e:	9c 93       	st	X, r25
    5d40:	fe 01       	movw	r30, r28
    5d42:	e9 5b       	subi	r30, 0xB9	; 185
    5d44:	ff 4f       	sbci	r31, 0xFF	; 255
    5d46:	80 81       	ld	r24, Z
    5d48:	91 81       	ldd	r25, Z+1	; 0x01
    5d4a:	01 97       	sbiw	r24, 0x01	; 1
    5d4c:	f1 f7       	brne	.-4      	; 0x5d4a <SM_U8RoomSelect+0x190>
    5d4e:	fe 01       	movw	r30, r28
    5d50:	e9 5b       	subi	r30, 0xB9	; 185
    5d52:	ff 4f       	sbci	r31, 0xFF	; 255
    5d54:	91 83       	std	Z+1, r25	; 0x01
    5d56:	80 83       	st	Z, r24
	_delay_ms(800);
	LCD_VoidSendCommand(1);
    5d58:	81 e0       	ldi	r24, 0x01	; 1
    5d5a:	0e 94 86 0e 	call	0x1d0c	; 0x1d0c <LCD_VoidSendCommand>
	LCD_VoidGoToRowCol(0,0);
    5d5e:	80 e0       	ldi	r24, 0x00	; 0
    5d60:	60 e0       	ldi	r22, 0x00	; 0
    5d62:	0e 94 85 16 	call	0x2d0a	; 0x2d0a <LCD_VoidGoToRowCol>
	LCD_u8WriteString("1-Servo 2-DC  3-led");
    5d66:	88 ed       	ldi	r24, 0xD8	; 216
    5d68:	91 e0       	ldi	r25, 0x01	; 1
    5d6a:	0e 94 3d 17 	call	0x2e7a	; 0x2e7a <LCD_u8WriteString>
	LCD_VoidGoToRowCol(1,0);
    5d6e:	81 e0       	ldi	r24, 0x01	; 1
    5d70:	60 e0       	ldi	r22, 0x00	; 0
    5d72:	0e 94 85 16 	call	0x2d0a	; 0x2d0a <LCD_VoidGoToRowCol>
	LCD_u8WriteString("4-Calc  5-TL  6-SM");
    5d76:	8c ee       	ldi	r24, 0xEC	; 236
    5d78:	91 e0       	ldi	r25, 0x01	; 1
    5d7a:	0e 94 3d 17 	call	0x2e7a	; 0x2e7a <LCD_u8WriteString>


	while(1)
	{
		KPAD_U8GetPressedKey(&Pressed);
    5d7e:	8e e9       	ldi	r24, 0x9E	; 158
    5d80:	93 e0       	ldi	r25, 0x03	; 3
    5d82:	0e 94 54 0d 	call	0x1aa8	; 0x1aa8 <KPAD_U8GetPressedKey>
		if((Pressed >='1') && (Pressed <='6'))
    5d86:	80 91 9e 03 	lds	r24, 0x039E
    5d8a:	81 33       	cpi	r24, 0x31	; 49
    5d8c:	c0 f3       	brcs	.-16     	; 0x5d7e <SM_U8RoomSelect+0x1c4>
    5d8e:	80 91 9e 03 	lds	r24, 0x039E
    5d92:	87 33       	cpi	r24, 0x37	; 55
    5d94:	a0 f7       	brcc	.-24     	; 0x5d7e <SM_U8RoomSelect+0x1c4>
		{
			switch(Pressed)
    5d96:	80 91 9e 03 	lds	r24, 0x039E
    5d9a:	28 2f       	mov	r18, r24
    5d9c:	30 e0       	ldi	r19, 0x00	; 0
    5d9e:	68 96       	adiw	r28, 0x18	; 24
    5da0:	3f af       	std	Y+63, r19	; 0x3f
    5da2:	2e af       	std	Y+62, r18	; 0x3e
    5da4:	68 97       	sbiw	r28, 0x18	; 24
    5da6:	68 96       	adiw	r28, 0x18	; 24
    5da8:	8e ad       	ldd	r24, Y+62	; 0x3e
    5daa:	9f ad       	ldd	r25, Y+63	; 0x3f
    5dac:	68 97       	sbiw	r28, 0x18	; 24
    5dae:	83 33       	cpi	r24, 0x33	; 51
    5db0:	91 05       	cpc	r25, r1
    5db2:	09 f4       	brne	.+2      	; 0x5db6 <SM_U8RoomSelect+0x1fc>
    5db4:	c8 c0       	rjmp	.+400    	; 0x5f46 <SM_U8RoomSelect+0x38c>
    5db6:	68 96       	adiw	r28, 0x18	; 24
    5db8:	ee ad       	ldd	r30, Y+62	; 0x3e
    5dba:	ff ad       	ldd	r31, Y+63	; 0x3f
    5dbc:	68 97       	sbiw	r28, 0x18	; 24
    5dbe:	e4 33       	cpi	r30, 0x34	; 52
    5dc0:	f1 05       	cpc	r31, r1
    5dc2:	7c f4       	brge	.+30     	; 0x5de2 <SM_U8RoomSelect+0x228>
    5dc4:	68 96       	adiw	r28, 0x18	; 24
    5dc6:	2e ad       	ldd	r18, Y+62	; 0x3e
    5dc8:	3f ad       	ldd	r19, Y+63	; 0x3f
    5dca:	68 97       	sbiw	r28, 0x18	; 24
    5dcc:	21 33       	cpi	r18, 0x31	; 49
    5dce:	31 05       	cpc	r19, r1
    5dd0:	09 f1       	breq	.+66     	; 0x5e14 <SM_U8RoomSelect+0x25a>
    5dd2:	68 96       	adiw	r28, 0x18	; 24
    5dd4:	8e ad       	ldd	r24, Y+62	; 0x3e
    5dd6:	9f ad       	ldd	r25, Y+63	; 0x3f
    5dd8:	68 97       	sbiw	r28, 0x18	; 24
    5dda:	82 33       	cpi	r24, 0x32	; 50
    5ddc:	91 05       	cpc	r25, r1
    5dde:	21 f1       	breq	.+72     	; 0x5e28 <SM_U8RoomSelect+0x26e>
    5de0:	ce cf       	rjmp	.-100    	; 0x5d7e <SM_U8RoomSelect+0x1c4>
    5de2:	68 96       	adiw	r28, 0x18	; 24
    5de4:	ee ad       	ldd	r30, Y+62	; 0x3e
    5de6:	ff ad       	ldd	r31, Y+63	; 0x3f
    5de8:	68 97       	sbiw	r28, 0x18	; 24
    5dea:	e5 33       	cpi	r30, 0x35	; 53
    5dec:	f1 05       	cpc	r31, r1
    5dee:	09 f4       	brne	.+2      	; 0x5df2 <SM_U8RoomSelect+0x238>
    5df0:	22 c2       	rjmp	.+1092   	; 0x6236 <SM_U8RoomSelect+0x67c>
    5df2:	68 96       	adiw	r28, 0x18	; 24
    5df4:	2e ad       	ldd	r18, Y+62	; 0x3e
    5df6:	3f ad       	ldd	r19, Y+63	; 0x3f
    5df8:	68 97       	sbiw	r28, 0x18	; 24
    5dfa:	25 33       	cpi	r18, 0x35	; 53
    5dfc:	31 05       	cpc	r19, r1
    5dfe:	0c f4       	brge	.+2      	; 0x5e02 <SM_U8RoomSelect+0x248>
    5e00:	21 c1       	rjmp	.+578    	; 0x6044 <SM_U8RoomSelect+0x48a>
    5e02:	68 96       	adiw	r28, 0x18	; 24
    5e04:	8e ad       	ldd	r24, Y+62	; 0x3e
    5e06:	9f ad       	ldd	r25, Y+63	; 0x3f
    5e08:	68 97       	sbiw	r28, 0x18	; 24
    5e0a:	86 33       	cpi	r24, 0x36	; 54
    5e0c:	91 05       	cpc	r25, r1
    5e0e:	09 f4       	brne	.+2      	; 0x5e12 <SM_U8RoomSelect+0x258>
    5e10:	28 c2       	rjmp	.+1104   	; 0x6262 <SM_U8RoomSelect+0x6a8>
    5e12:	b5 cf       	rjmp	.-150    	; 0x5d7e <SM_U8RoomSelect+0x1c4>
			{
				case '1':
				LCD_VoidSendCommand(1);
    5e14:	81 e0       	ldi	r24, 0x01	; 1
    5e16:	0e 94 86 0e 	call	0x1d0c	; 0x1d0c <LCD_VoidSendCommand>
				LCD_u8WriteString("CHOOSE ANGLE: ");
    5e1a:	8d e6       	ldi	r24, 0x6D	; 109
    5e1c:	90 e0       	ldi	r25, 0x00	; 0
    5e1e:	0e 94 3d 17 	call	0x2e7a	; 0x2e7a <LCD_u8WriteString>
				SM_VoidServo_APP();
    5e22:	0e 94 d3 18 	call	0x31a6	; 0x31a6 <SM_VoidServo_APP>
    5e26:	da ce       	rjmp	.-588    	; 0x5bdc <SM_U8RoomSelect+0x22>
				goto Select;
				break;
				case '2':
							LCD_VoidSendCommand(1);
    5e28:	81 e0       	ldi	r24, 0x01	; 1
    5e2a:	0e 94 86 0e 	call	0x1d0c	; 0x1d0c <LCD_VoidSendCommand>
							LCD_u8WriteString("DC Motor is On");
    5e2e:	8f ef       	ldi	r24, 0xFF	; 255
    5e30:	91 e0       	ldi	r25, 0x01	; 1
    5e32:	0e 94 3d 17 	call	0x2e7a	; 0x2e7a <LCD_u8WriteString>
    5e36:	fe 01       	movw	r30, r28
    5e38:	ed 5b       	subi	r30, 0xBD	; 189
    5e3a:	ff 4f       	sbci	r31, 0xFF	; 255
    5e3c:	80 e0       	ldi	r24, 0x00	; 0
    5e3e:	90 e0       	ldi	r25, 0x00	; 0
    5e40:	a6 e9       	ldi	r26, 0x96	; 150
    5e42:	b3 e4       	ldi	r27, 0x43	; 67
    5e44:	80 83       	st	Z, r24
    5e46:	91 83       	std	Z+1, r25	; 0x01
    5e48:	a2 83       	std	Z+2, r26	; 0x02
    5e4a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5e4c:	8e 01       	movw	r16, r28
    5e4e:	01 5c       	subi	r16, 0xC1	; 193
    5e50:	1f 4f       	sbci	r17, 0xFF	; 255
    5e52:	fe 01       	movw	r30, r28
    5e54:	ed 5b       	subi	r30, 0xBD	; 189
    5e56:	ff 4f       	sbci	r31, 0xFF	; 255
    5e58:	60 81       	ld	r22, Z
    5e5a:	71 81       	ldd	r23, Z+1	; 0x01
    5e5c:	82 81       	ldd	r24, Z+2	; 0x02
    5e5e:	93 81       	ldd	r25, Z+3	; 0x03
    5e60:	20 e0       	ldi	r18, 0x00	; 0
    5e62:	30 e0       	ldi	r19, 0x00	; 0
    5e64:	4a ef       	ldi	r20, 0xFA	; 250
    5e66:	54 e4       	ldi	r21, 0x44	; 68
    5e68:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5e6c:	dc 01       	movw	r26, r24
    5e6e:	cb 01       	movw	r24, r22
    5e70:	f8 01       	movw	r30, r16
    5e72:	80 83       	st	Z, r24
    5e74:	91 83       	std	Z+1, r25	; 0x01
    5e76:	a2 83       	std	Z+2, r26	; 0x02
    5e78:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    5e7a:	fe 01       	movw	r30, r28
    5e7c:	ff 96       	adiw	r30, 0x3f	; 63
    5e7e:	60 81       	ld	r22, Z
    5e80:	71 81       	ldd	r23, Z+1	; 0x01
    5e82:	82 81       	ldd	r24, Z+2	; 0x02
    5e84:	93 81       	ldd	r25, Z+3	; 0x03
    5e86:	20 e0       	ldi	r18, 0x00	; 0
    5e88:	30 e0       	ldi	r19, 0x00	; 0
    5e8a:	40 e8       	ldi	r20, 0x80	; 128
    5e8c:	5f e3       	ldi	r21, 0x3F	; 63
    5e8e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5e92:	88 23       	and	r24, r24
    5e94:	2c f4       	brge	.+10     	; 0x5ea0 <SM_U8RoomSelect+0x2e6>
		__ticks = 1;
    5e96:	81 e0       	ldi	r24, 0x01	; 1
    5e98:	90 e0       	ldi	r25, 0x00	; 0
    5e9a:	9e af       	std	Y+62, r25	; 0x3e
    5e9c:	8d af       	std	Y+61, r24	; 0x3d
    5e9e:	46 c0       	rjmp	.+140    	; 0x5f2c <SM_U8RoomSelect+0x372>
	else if (__tmp > 65535)
    5ea0:	fe 01       	movw	r30, r28
    5ea2:	ff 96       	adiw	r30, 0x3f	; 63
    5ea4:	60 81       	ld	r22, Z
    5ea6:	71 81       	ldd	r23, Z+1	; 0x01
    5ea8:	82 81       	ldd	r24, Z+2	; 0x02
    5eaa:	93 81       	ldd	r25, Z+3	; 0x03
    5eac:	20 e0       	ldi	r18, 0x00	; 0
    5eae:	3f ef       	ldi	r19, 0xFF	; 255
    5eb0:	4f e7       	ldi	r20, 0x7F	; 127
    5eb2:	57 e4       	ldi	r21, 0x47	; 71
    5eb4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5eb8:	18 16       	cp	r1, r24
    5eba:	64 f5       	brge	.+88     	; 0x5f14 <SM_U8RoomSelect+0x35a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5ebc:	fe 01       	movw	r30, r28
    5ebe:	ed 5b       	subi	r30, 0xBD	; 189
    5ec0:	ff 4f       	sbci	r31, 0xFF	; 255
    5ec2:	60 81       	ld	r22, Z
    5ec4:	71 81       	ldd	r23, Z+1	; 0x01
    5ec6:	82 81       	ldd	r24, Z+2	; 0x02
    5ec8:	93 81       	ldd	r25, Z+3	; 0x03
    5eca:	20 e0       	ldi	r18, 0x00	; 0
    5ecc:	30 e0       	ldi	r19, 0x00	; 0
    5ece:	40 e2       	ldi	r20, 0x20	; 32
    5ed0:	51 e4       	ldi	r21, 0x41	; 65
    5ed2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5ed6:	dc 01       	movw	r26, r24
    5ed8:	cb 01       	movw	r24, r22
    5eda:	bc 01       	movw	r22, r24
    5edc:	cd 01       	movw	r24, r26
    5ede:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5ee2:	dc 01       	movw	r26, r24
    5ee4:	cb 01       	movw	r24, r22
    5ee6:	9e af       	std	Y+62, r25	; 0x3e
    5ee8:	8d af       	std	Y+61, r24	; 0x3d
    5eea:	0f c0       	rjmp	.+30     	; 0x5f0a <SM_U8RoomSelect+0x350>
    5eec:	88 ec       	ldi	r24, 0xC8	; 200
    5eee:	90 e0       	ldi	r25, 0x00	; 0
    5ef0:	9c af       	std	Y+60, r25	; 0x3c
    5ef2:	8b af       	std	Y+59, r24	; 0x3b
    5ef4:	8b ad       	ldd	r24, Y+59	; 0x3b
    5ef6:	9c ad       	ldd	r25, Y+60	; 0x3c
    5ef8:	01 97       	sbiw	r24, 0x01	; 1
    5efa:	f1 f7       	brne	.-4      	; 0x5ef8 <SM_U8RoomSelect+0x33e>
    5efc:	9c af       	std	Y+60, r25	; 0x3c
    5efe:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5f00:	8d ad       	ldd	r24, Y+61	; 0x3d
    5f02:	9e ad       	ldd	r25, Y+62	; 0x3e
    5f04:	01 97       	sbiw	r24, 0x01	; 1
    5f06:	9e af       	std	Y+62, r25	; 0x3e
    5f08:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5f0a:	8d ad       	ldd	r24, Y+61	; 0x3d
    5f0c:	9e ad       	ldd	r25, Y+62	; 0x3e
    5f0e:	00 97       	sbiw	r24, 0x00	; 0
    5f10:	69 f7       	brne	.-38     	; 0x5eec <SM_U8RoomSelect+0x332>
    5f12:	16 c0       	rjmp	.+44     	; 0x5f40 <SM_U8RoomSelect+0x386>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5f14:	fe 01       	movw	r30, r28
    5f16:	ff 96       	adiw	r30, 0x3f	; 63
    5f18:	60 81       	ld	r22, Z
    5f1a:	71 81       	ldd	r23, Z+1	; 0x01
    5f1c:	82 81       	ldd	r24, Z+2	; 0x02
    5f1e:	93 81       	ldd	r25, Z+3	; 0x03
    5f20:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5f24:	dc 01       	movw	r26, r24
    5f26:	cb 01       	movw	r24, r22
    5f28:	9e af       	std	Y+62, r25	; 0x3e
    5f2a:	8d af       	std	Y+61, r24	; 0x3d
    5f2c:	8d ad       	ldd	r24, Y+61	; 0x3d
    5f2e:	9e ad       	ldd	r25, Y+62	; 0x3e
    5f30:	9a af       	std	Y+58, r25	; 0x3a
    5f32:	89 af       	std	Y+57, r24	; 0x39
    5f34:	89 ad       	ldd	r24, Y+57	; 0x39
    5f36:	9a ad       	ldd	r25, Y+58	; 0x3a
    5f38:	01 97       	sbiw	r24, 0x01	; 1
    5f3a:	f1 f7       	brne	.-4      	; 0x5f38 <SM_U8RoomSelect+0x37e>
    5f3c:	9a af       	std	Y+58, r25	; 0x3a
    5f3e:	89 af       	std	Y+57, r24	; 0x39
							_delay_ms(300);
							SM_VoidDCMotor();
    5f40:	0e 94 f4 28 	call	0x51e8	; 0x51e8 <SM_VoidDCMotor>
    5f44:	4b ce       	rjmp	.-874    	; 0x5bdc <SM_U8RoomSelect+0x22>
							goto Select;
							break;
				case '3':
							LCD_VoidSendCommand(1);
    5f46:	81 e0       	ldi	r24, 0x01	; 1
    5f48:	0e 94 86 0e 	call	0x1d0c	; 0x1d0c <LCD_VoidSendCommand>
							LCD_u8WriteString("Control Led ");
    5f4c:	8e e0       	ldi	r24, 0x0E	; 14
    5f4e:	92 e0       	ldi	r25, 0x02	; 2
    5f50:	0e 94 3d 17 	call	0x2e7a	; 0x2e7a <LCD_u8WriteString>
    5f54:	80 e0       	ldi	r24, 0x00	; 0
    5f56:	90 e0       	ldi	r25, 0x00	; 0
    5f58:	a6 e9       	ldi	r26, 0x96	; 150
    5f5a:	b3 e4       	ldi	r27, 0x43	; 67
    5f5c:	8d ab       	std	Y+53, r24	; 0x35
    5f5e:	9e ab       	std	Y+54, r25	; 0x36
    5f60:	af ab       	std	Y+55, r26	; 0x37
    5f62:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5f64:	6d a9       	ldd	r22, Y+53	; 0x35
    5f66:	7e a9       	ldd	r23, Y+54	; 0x36
    5f68:	8f a9       	ldd	r24, Y+55	; 0x37
    5f6a:	98 ad       	ldd	r25, Y+56	; 0x38
    5f6c:	20 e0       	ldi	r18, 0x00	; 0
    5f6e:	30 e0       	ldi	r19, 0x00	; 0
    5f70:	4a ef       	ldi	r20, 0xFA	; 250
    5f72:	54 e4       	ldi	r21, 0x44	; 68
    5f74:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5f78:	dc 01       	movw	r26, r24
    5f7a:	cb 01       	movw	r24, r22
    5f7c:	89 ab       	std	Y+49, r24	; 0x31
    5f7e:	9a ab       	std	Y+50, r25	; 0x32
    5f80:	ab ab       	std	Y+51, r26	; 0x33
    5f82:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    5f84:	69 a9       	ldd	r22, Y+49	; 0x31
    5f86:	7a a9       	ldd	r23, Y+50	; 0x32
    5f88:	8b a9       	ldd	r24, Y+51	; 0x33
    5f8a:	9c a9       	ldd	r25, Y+52	; 0x34
    5f8c:	20 e0       	ldi	r18, 0x00	; 0
    5f8e:	30 e0       	ldi	r19, 0x00	; 0
    5f90:	40 e8       	ldi	r20, 0x80	; 128
    5f92:	5f e3       	ldi	r21, 0x3F	; 63
    5f94:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5f98:	88 23       	and	r24, r24
    5f9a:	2c f4       	brge	.+10     	; 0x5fa6 <SM_U8RoomSelect+0x3ec>
		__ticks = 1;
    5f9c:	81 e0       	ldi	r24, 0x01	; 1
    5f9e:	90 e0       	ldi	r25, 0x00	; 0
    5fa0:	98 ab       	std	Y+48, r25	; 0x30
    5fa2:	8f a7       	std	Y+47, r24	; 0x2f
    5fa4:	3f c0       	rjmp	.+126    	; 0x6024 <SM_U8RoomSelect+0x46a>
	else if (__tmp > 65535)
    5fa6:	69 a9       	ldd	r22, Y+49	; 0x31
    5fa8:	7a a9       	ldd	r23, Y+50	; 0x32
    5faa:	8b a9       	ldd	r24, Y+51	; 0x33
    5fac:	9c a9       	ldd	r25, Y+52	; 0x34
    5fae:	20 e0       	ldi	r18, 0x00	; 0
    5fb0:	3f ef       	ldi	r19, 0xFF	; 255
    5fb2:	4f e7       	ldi	r20, 0x7F	; 127
    5fb4:	57 e4       	ldi	r21, 0x47	; 71
    5fb6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5fba:	18 16       	cp	r1, r24
    5fbc:	4c f5       	brge	.+82     	; 0x6010 <SM_U8RoomSelect+0x456>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5fbe:	6d a9       	ldd	r22, Y+53	; 0x35
    5fc0:	7e a9       	ldd	r23, Y+54	; 0x36
    5fc2:	8f a9       	ldd	r24, Y+55	; 0x37
    5fc4:	98 ad       	ldd	r25, Y+56	; 0x38
    5fc6:	20 e0       	ldi	r18, 0x00	; 0
    5fc8:	30 e0       	ldi	r19, 0x00	; 0
    5fca:	40 e2       	ldi	r20, 0x20	; 32
    5fcc:	51 e4       	ldi	r21, 0x41	; 65
    5fce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5fd2:	dc 01       	movw	r26, r24
    5fd4:	cb 01       	movw	r24, r22
    5fd6:	bc 01       	movw	r22, r24
    5fd8:	cd 01       	movw	r24, r26
    5fda:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5fde:	dc 01       	movw	r26, r24
    5fe0:	cb 01       	movw	r24, r22
    5fe2:	98 ab       	std	Y+48, r25	; 0x30
    5fe4:	8f a7       	std	Y+47, r24	; 0x2f
    5fe6:	0f c0       	rjmp	.+30     	; 0x6006 <SM_U8RoomSelect+0x44c>
    5fe8:	88 ec       	ldi	r24, 0xC8	; 200
    5fea:	90 e0       	ldi	r25, 0x00	; 0
    5fec:	9e a7       	std	Y+46, r25	; 0x2e
    5fee:	8d a7       	std	Y+45, r24	; 0x2d
    5ff0:	8d a5       	ldd	r24, Y+45	; 0x2d
    5ff2:	9e a5       	ldd	r25, Y+46	; 0x2e
    5ff4:	01 97       	sbiw	r24, 0x01	; 1
    5ff6:	f1 f7       	brne	.-4      	; 0x5ff4 <SM_U8RoomSelect+0x43a>
    5ff8:	9e a7       	std	Y+46, r25	; 0x2e
    5ffa:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5ffc:	8f a5       	ldd	r24, Y+47	; 0x2f
    5ffe:	98 a9       	ldd	r25, Y+48	; 0x30
    6000:	01 97       	sbiw	r24, 0x01	; 1
    6002:	98 ab       	std	Y+48, r25	; 0x30
    6004:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6006:	8f a5       	ldd	r24, Y+47	; 0x2f
    6008:	98 a9       	ldd	r25, Y+48	; 0x30
    600a:	00 97       	sbiw	r24, 0x00	; 0
    600c:	69 f7       	brne	.-38     	; 0x5fe8 <SM_U8RoomSelect+0x42e>
    600e:	14 c0       	rjmp	.+40     	; 0x6038 <SM_U8RoomSelect+0x47e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6010:	69 a9       	ldd	r22, Y+49	; 0x31
    6012:	7a a9       	ldd	r23, Y+50	; 0x32
    6014:	8b a9       	ldd	r24, Y+51	; 0x33
    6016:	9c a9       	ldd	r25, Y+52	; 0x34
    6018:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    601c:	dc 01       	movw	r26, r24
    601e:	cb 01       	movw	r24, r22
    6020:	98 ab       	std	Y+48, r25	; 0x30
    6022:	8f a7       	std	Y+47, r24	; 0x2f
    6024:	8f a5       	ldd	r24, Y+47	; 0x2f
    6026:	98 a9       	ldd	r25, Y+48	; 0x30
    6028:	9c a7       	std	Y+44, r25	; 0x2c
    602a:	8b a7       	std	Y+43, r24	; 0x2b
    602c:	8b a5       	ldd	r24, Y+43	; 0x2b
    602e:	9c a5       	ldd	r25, Y+44	; 0x2c
    6030:	01 97       	sbiw	r24, 0x01	; 1
    6032:	f1 f7       	brne	.-4      	; 0x6030 <SM_U8RoomSelect+0x476>
    6034:	9c a7       	std	Y+44, r25	; 0x2c
    6036:	8b a7       	std	Y+43, r24	; 0x2b
							_delay_ms(300);
							LCD_VoidSendCommand(1);
    6038:	81 e0       	ldi	r24, 0x01	; 1
    603a:	0e 94 86 0e 	call	0x1d0c	; 0x1d0c <LCD_VoidSendCommand>
							Turn_Led();
    603e:	0e 94 82 2c 	call	0x5904	; 0x5904 <Turn_Led>
    6042:	cc cd       	rjmp	.-1128   	; 0x5bdc <SM_U8RoomSelect+0x22>
							goto Select;
							break;

				case '4':
							LCD_VoidSendCommand(1);
    6044:	81 e0       	ldi	r24, 0x01	; 1
    6046:	0e 94 86 0e 	call	0x1d0c	; 0x1d0c <LCD_VoidSendCommand>
							LCD_u8WriteString("welcome in Calc: ");
    604a:	8b e1       	ldi	r24, 0x1B	; 27
    604c:	92 e0       	ldi	r25, 0x02	; 2
    604e:	0e 94 3d 17 	call	0x2e7a	; 0x2e7a <LCD_u8WriteString>
    6052:	80 e0       	ldi	r24, 0x00	; 0
    6054:	90 e0       	ldi	r25, 0x00	; 0
    6056:	aa ef       	ldi	r26, 0xFA	; 250
    6058:	b3 e4       	ldi	r27, 0x43	; 67
    605a:	8f a3       	std	Y+39, r24	; 0x27
    605c:	98 a7       	std	Y+40, r25	; 0x28
    605e:	a9 a7       	std	Y+41, r26	; 0x29
    6060:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    6062:	6f a1       	ldd	r22, Y+39	; 0x27
    6064:	78 a5       	ldd	r23, Y+40	; 0x28
    6066:	89 a5       	ldd	r24, Y+41	; 0x29
    6068:	9a a5       	ldd	r25, Y+42	; 0x2a
    606a:	20 e0       	ldi	r18, 0x00	; 0
    606c:	30 e0       	ldi	r19, 0x00	; 0
    606e:	4a ef       	ldi	r20, 0xFA	; 250
    6070:	54 e4       	ldi	r21, 0x44	; 68
    6072:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6076:	dc 01       	movw	r26, r24
    6078:	cb 01       	movw	r24, r22
    607a:	8b a3       	std	Y+35, r24	; 0x23
    607c:	9c a3       	std	Y+36, r25	; 0x24
    607e:	ad a3       	std	Y+37, r26	; 0x25
    6080:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    6082:	6b a1       	ldd	r22, Y+35	; 0x23
    6084:	7c a1       	ldd	r23, Y+36	; 0x24
    6086:	8d a1       	ldd	r24, Y+37	; 0x25
    6088:	9e a1       	ldd	r25, Y+38	; 0x26
    608a:	20 e0       	ldi	r18, 0x00	; 0
    608c:	30 e0       	ldi	r19, 0x00	; 0
    608e:	40 e8       	ldi	r20, 0x80	; 128
    6090:	5f e3       	ldi	r21, 0x3F	; 63
    6092:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    6096:	88 23       	and	r24, r24
    6098:	2c f4       	brge	.+10     	; 0x60a4 <SM_U8RoomSelect+0x4ea>
		__ticks = 1;
    609a:	81 e0       	ldi	r24, 0x01	; 1
    609c:	90 e0       	ldi	r25, 0x00	; 0
    609e:	9a a3       	std	Y+34, r25	; 0x22
    60a0:	89 a3       	std	Y+33, r24	; 0x21
    60a2:	3f c0       	rjmp	.+126    	; 0x6122 <SM_U8RoomSelect+0x568>
	else if (__tmp > 65535)
    60a4:	6b a1       	ldd	r22, Y+35	; 0x23
    60a6:	7c a1       	ldd	r23, Y+36	; 0x24
    60a8:	8d a1       	ldd	r24, Y+37	; 0x25
    60aa:	9e a1       	ldd	r25, Y+38	; 0x26
    60ac:	20 e0       	ldi	r18, 0x00	; 0
    60ae:	3f ef       	ldi	r19, 0xFF	; 255
    60b0:	4f e7       	ldi	r20, 0x7F	; 127
    60b2:	57 e4       	ldi	r21, 0x47	; 71
    60b4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    60b8:	18 16       	cp	r1, r24
    60ba:	4c f5       	brge	.+82     	; 0x610e <SM_U8RoomSelect+0x554>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    60bc:	6f a1       	ldd	r22, Y+39	; 0x27
    60be:	78 a5       	ldd	r23, Y+40	; 0x28
    60c0:	89 a5       	ldd	r24, Y+41	; 0x29
    60c2:	9a a5       	ldd	r25, Y+42	; 0x2a
    60c4:	20 e0       	ldi	r18, 0x00	; 0
    60c6:	30 e0       	ldi	r19, 0x00	; 0
    60c8:	40 e2       	ldi	r20, 0x20	; 32
    60ca:	51 e4       	ldi	r21, 0x41	; 65
    60cc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    60d0:	dc 01       	movw	r26, r24
    60d2:	cb 01       	movw	r24, r22
    60d4:	bc 01       	movw	r22, r24
    60d6:	cd 01       	movw	r24, r26
    60d8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    60dc:	dc 01       	movw	r26, r24
    60de:	cb 01       	movw	r24, r22
    60e0:	9a a3       	std	Y+34, r25	; 0x22
    60e2:	89 a3       	std	Y+33, r24	; 0x21
    60e4:	0f c0       	rjmp	.+30     	; 0x6104 <SM_U8RoomSelect+0x54a>
    60e6:	88 ec       	ldi	r24, 0xC8	; 200
    60e8:	90 e0       	ldi	r25, 0x00	; 0
    60ea:	98 a3       	std	Y+32, r25	; 0x20
    60ec:	8f 8f       	std	Y+31, r24	; 0x1f
    60ee:	8f 8d       	ldd	r24, Y+31	; 0x1f
    60f0:	98 a1       	ldd	r25, Y+32	; 0x20
    60f2:	01 97       	sbiw	r24, 0x01	; 1
    60f4:	f1 f7       	brne	.-4      	; 0x60f2 <SM_U8RoomSelect+0x538>
    60f6:	98 a3       	std	Y+32, r25	; 0x20
    60f8:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    60fa:	89 a1       	ldd	r24, Y+33	; 0x21
    60fc:	9a a1       	ldd	r25, Y+34	; 0x22
    60fe:	01 97       	sbiw	r24, 0x01	; 1
    6100:	9a a3       	std	Y+34, r25	; 0x22
    6102:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6104:	89 a1       	ldd	r24, Y+33	; 0x21
    6106:	9a a1       	ldd	r25, Y+34	; 0x22
    6108:	00 97       	sbiw	r24, 0x00	; 0
    610a:	69 f7       	brne	.-38     	; 0x60e6 <SM_U8RoomSelect+0x52c>
    610c:	14 c0       	rjmp	.+40     	; 0x6136 <SM_U8RoomSelect+0x57c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    610e:	6b a1       	ldd	r22, Y+35	; 0x23
    6110:	7c a1       	ldd	r23, Y+36	; 0x24
    6112:	8d a1       	ldd	r24, Y+37	; 0x25
    6114:	9e a1       	ldd	r25, Y+38	; 0x26
    6116:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    611a:	dc 01       	movw	r26, r24
    611c:	cb 01       	movw	r24, r22
    611e:	9a a3       	std	Y+34, r25	; 0x22
    6120:	89 a3       	std	Y+33, r24	; 0x21
    6122:	89 a1       	ldd	r24, Y+33	; 0x21
    6124:	9a a1       	ldd	r25, Y+34	; 0x22
    6126:	9e 8f       	std	Y+30, r25	; 0x1e
    6128:	8d 8f       	std	Y+29, r24	; 0x1d
    612a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    612c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    612e:	01 97       	sbiw	r24, 0x01	; 1
    6130:	f1 f7       	brne	.-4      	; 0x612e <SM_U8RoomSelect+0x574>
    6132:	9e 8f       	std	Y+30, r25	; 0x1e
    6134:	8d 8f       	std	Y+29, r24	; 0x1d
							_delay_ms(500);
							LCD_VoidSendCommand(1);
    6136:	81 e0       	ldi	r24, 0x01	; 1
    6138:	0e 94 86 0e 	call	0x1d0c	; 0x1d0c <LCD_VoidSendCommand>

							I2C_VidStartCondition();
    613c:	0e 94 6f 0c 	call	0x18de	; 0x18de <I2C_VidStartCondition>
							I2C_VidSlaveAddressWrite(3);
    6140:	83 e0       	ldi	r24, 0x03	; 3
    6142:	0e 94 9e 0c 	call	0x193c	; 0x193c <I2C_VidSlaveAddressWrite>
							I2C_VidMastarSendData('1');   /* send 1 and wait 500ms then send 2 and will check for that in slave */
    6146:	81 e3       	ldi	r24, 0x31	; 49
    6148:	0e 94 f0 0c 	call	0x19e0	; 0x19e0 <I2C_VidMastarSendData>
							I2C_VidStopCondition();
    614c:	0e 94 89 0c 	call	0x1912	; 0x1912 <I2C_VidStopCondition>
    6150:	80 e0       	ldi	r24, 0x00	; 0
    6152:	90 e0       	ldi	r25, 0x00	; 0
    6154:	aa ef       	ldi	r26, 0xFA	; 250
    6156:	b3 e4       	ldi	r27, 0x43	; 67
    6158:	89 8f       	std	Y+25, r24	; 0x19
    615a:	9a 8f       	std	Y+26, r25	; 0x1a
    615c:	ab 8f       	std	Y+27, r26	; 0x1b
    615e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    6160:	69 8d       	ldd	r22, Y+25	; 0x19
    6162:	7a 8d       	ldd	r23, Y+26	; 0x1a
    6164:	8b 8d       	ldd	r24, Y+27	; 0x1b
    6166:	9c 8d       	ldd	r25, Y+28	; 0x1c
    6168:	20 e0       	ldi	r18, 0x00	; 0
    616a:	30 e0       	ldi	r19, 0x00	; 0
    616c:	4a ef       	ldi	r20, 0xFA	; 250
    616e:	54 e4       	ldi	r21, 0x44	; 68
    6170:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6174:	dc 01       	movw	r26, r24
    6176:	cb 01       	movw	r24, r22
    6178:	8d 8b       	std	Y+21, r24	; 0x15
    617a:	9e 8b       	std	Y+22, r25	; 0x16
    617c:	af 8b       	std	Y+23, r26	; 0x17
    617e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    6180:	6d 89       	ldd	r22, Y+21	; 0x15
    6182:	7e 89       	ldd	r23, Y+22	; 0x16
    6184:	8f 89       	ldd	r24, Y+23	; 0x17
    6186:	98 8d       	ldd	r25, Y+24	; 0x18
    6188:	20 e0       	ldi	r18, 0x00	; 0
    618a:	30 e0       	ldi	r19, 0x00	; 0
    618c:	40 e8       	ldi	r20, 0x80	; 128
    618e:	5f e3       	ldi	r21, 0x3F	; 63
    6190:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    6194:	88 23       	and	r24, r24
    6196:	2c f4       	brge	.+10     	; 0x61a2 <SM_U8RoomSelect+0x5e8>
		__ticks = 1;
    6198:	81 e0       	ldi	r24, 0x01	; 1
    619a:	90 e0       	ldi	r25, 0x00	; 0
    619c:	9c 8b       	std	Y+20, r25	; 0x14
    619e:	8b 8b       	std	Y+19, r24	; 0x13
    61a0:	3f c0       	rjmp	.+126    	; 0x6220 <SM_U8RoomSelect+0x666>
	else if (__tmp > 65535)
    61a2:	6d 89       	ldd	r22, Y+21	; 0x15
    61a4:	7e 89       	ldd	r23, Y+22	; 0x16
    61a6:	8f 89       	ldd	r24, Y+23	; 0x17
    61a8:	98 8d       	ldd	r25, Y+24	; 0x18
    61aa:	20 e0       	ldi	r18, 0x00	; 0
    61ac:	3f ef       	ldi	r19, 0xFF	; 255
    61ae:	4f e7       	ldi	r20, 0x7F	; 127
    61b0:	57 e4       	ldi	r21, 0x47	; 71
    61b2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    61b6:	18 16       	cp	r1, r24
    61b8:	4c f5       	brge	.+82     	; 0x620c <SM_U8RoomSelect+0x652>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    61ba:	69 8d       	ldd	r22, Y+25	; 0x19
    61bc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    61be:	8b 8d       	ldd	r24, Y+27	; 0x1b
    61c0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    61c2:	20 e0       	ldi	r18, 0x00	; 0
    61c4:	30 e0       	ldi	r19, 0x00	; 0
    61c6:	40 e2       	ldi	r20, 0x20	; 32
    61c8:	51 e4       	ldi	r21, 0x41	; 65
    61ca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    61ce:	dc 01       	movw	r26, r24
    61d0:	cb 01       	movw	r24, r22
    61d2:	bc 01       	movw	r22, r24
    61d4:	cd 01       	movw	r24, r26
    61d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    61da:	dc 01       	movw	r26, r24
    61dc:	cb 01       	movw	r24, r22
    61de:	9c 8b       	std	Y+20, r25	; 0x14
    61e0:	8b 8b       	std	Y+19, r24	; 0x13
    61e2:	0f c0       	rjmp	.+30     	; 0x6202 <SM_U8RoomSelect+0x648>
    61e4:	88 ec       	ldi	r24, 0xC8	; 200
    61e6:	90 e0       	ldi	r25, 0x00	; 0
    61e8:	9a 8b       	std	Y+18, r25	; 0x12
    61ea:	89 8b       	std	Y+17, r24	; 0x11
    61ec:	89 89       	ldd	r24, Y+17	; 0x11
    61ee:	9a 89       	ldd	r25, Y+18	; 0x12
    61f0:	01 97       	sbiw	r24, 0x01	; 1
    61f2:	f1 f7       	brne	.-4      	; 0x61f0 <SM_U8RoomSelect+0x636>
    61f4:	9a 8b       	std	Y+18, r25	; 0x12
    61f6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    61f8:	8b 89       	ldd	r24, Y+19	; 0x13
    61fa:	9c 89       	ldd	r25, Y+20	; 0x14
    61fc:	01 97       	sbiw	r24, 0x01	; 1
    61fe:	9c 8b       	std	Y+20, r25	; 0x14
    6200:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6202:	8b 89       	ldd	r24, Y+19	; 0x13
    6204:	9c 89       	ldd	r25, Y+20	; 0x14
    6206:	00 97       	sbiw	r24, 0x00	; 0
    6208:	69 f7       	brne	.-38     	; 0x61e4 <SM_U8RoomSelect+0x62a>
    620a:	e8 cc       	rjmp	.-1584   	; 0x5bdc <SM_U8RoomSelect+0x22>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    620c:	6d 89       	ldd	r22, Y+21	; 0x15
    620e:	7e 89       	ldd	r23, Y+22	; 0x16
    6210:	8f 89       	ldd	r24, Y+23	; 0x17
    6212:	98 8d       	ldd	r25, Y+24	; 0x18
    6214:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6218:	dc 01       	movw	r26, r24
    621a:	cb 01       	movw	r24, r22
    621c:	9c 8b       	std	Y+20, r25	; 0x14
    621e:	8b 8b       	std	Y+19, r24	; 0x13
    6220:	8b 89       	ldd	r24, Y+19	; 0x13
    6222:	9c 89       	ldd	r25, Y+20	; 0x14
    6224:	98 8b       	std	Y+16, r25	; 0x10
    6226:	8f 87       	std	Y+15, r24	; 0x0f
    6228:	8f 85       	ldd	r24, Y+15	; 0x0f
    622a:	98 89       	ldd	r25, Y+16	; 0x10
    622c:	01 97       	sbiw	r24, 0x01	; 1
    622e:	f1 f7       	brne	.-4      	; 0x622c <SM_U8RoomSelect+0x672>
    6230:	98 8b       	std	Y+16, r25	; 0x10
    6232:	8f 87       	std	Y+15, r24	; 0x0f
    6234:	d3 cc       	rjmp	.-1626   	; 0x5bdc <SM_U8RoomSelect+0x22>
							_delay_ms(500);
							goto Select;
							break;
				case '5':
							LCD_VoidSendCommand(1);
    6236:	81 e0       	ldi	r24, 0x01	; 1
    6238:	0e 94 86 0e 	call	0x1d0c	; 0x1d0c <LCD_VoidSendCommand>
							LCD_VoidGoToRowCol(0, 0);
    623c:	80 e0       	ldi	r24, 0x00	; 0
    623e:	60 e0       	ldi	r22, 0x00	; 0
    6240:	0e 94 85 16 	call	0x2d0a	; 0x2d0a <LCD_VoidGoToRowCol>
							LCD_u8WriteString("Seven Segment is On");
    6244:	8d e2       	ldi	r24, 0x2D	; 45
    6246:	92 e0       	ldi	r25, 0x02	; 2
    6248:	0e 94 3d 17 	call	0x2e7a	; 0x2e7a <LCD_u8WriteString>
							/* Send Data to Slave_1 address: 5 */
					    	I2C_VidStartCondition();
    624c:	0e 94 6f 0c 	call	0x18de	; 0x18de <I2C_VidStartCondition>
					    	I2C_VidSlaveAddressWrite(5);
    6250:	85 e0       	ldi	r24, 0x05	; 5
    6252:	0e 94 9e 0c 	call	0x193c	; 0x193c <I2C_VidSlaveAddressWrite>
					    	I2C_VidMastarSendData('0');
    6256:	80 e3       	ldi	r24, 0x30	; 48
    6258:	0e 94 f0 0c 	call	0x19e0	; 0x19e0 <I2C_VidMastarSendData>
					    	I2C_VidStopCondition();
    625c:	0e 94 89 0c 	call	0x1912	; 0x1912 <I2C_VidStopCondition>
    6260:	bd cc       	rjmp	.-1670   	; 0x5bdc <SM_U8RoomSelect+0x22>
					    	goto Select;
					    	break;
				case '6':
							LCD_VoidSendCommand(1);
    6262:	81 e0       	ldi	r24, 0x01	; 1
    6264:	0e 94 86 0e 	call	0x1d0c	; 0x1d0c <LCD_VoidSendCommand>
							LCD_u8WriteString("Stepper Motor is On");
    6268:	81 e4       	ldi	r24, 0x41	; 65
    626a:	92 e0       	ldi	r25, 0x02	; 2
    626c:	0e 94 3d 17 	call	0x2e7a	; 0x2e7a <LCD_u8WriteString>
    6270:	80 e0       	ldi	r24, 0x00	; 0
    6272:	90 e0       	ldi	r25, 0x00	; 0
    6274:	a6 e9       	ldi	r26, 0x96	; 150
    6276:	b3 e4       	ldi	r27, 0x43	; 67
    6278:	8b 87       	std	Y+11, r24	; 0x0b
    627a:	9c 87       	std	Y+12, r25	; 0x0c
    627c:	ad 87       	std	Y+13, r26	; 0x0d
    627e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    6280:	6b 85       	ldd	r22, Y+11	; 0x0b
    6282:	7c 85       	ldd	r23, Y+12	; 0x0c
    6284:	8d 85       	ldd	r24, Y+13	; 0x0d
    6286:	9e 85       	ldd	r25, Y+14	; 0x0e
    6288:	20 e0       	ldi	r18, 0x00	; 0
    628a:	30 e0       	ldi	r19, 0x00	; 0
    628c:	4a ef       	ldi	r20, 0xFA	; 250
    628e:	54 e4       	ldi	r21, 0x44	; 68
    6290:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6294:	dc 01       	movw	r26, r24
    6296:	cb 01       	movw	r24, r22
    6298:	8f 83       	std	Y+7, r24	; 0x07
    629a:	98 87       	std	Y+8, r25	; 0x08
    629c:	a9 87       	std	Y+9, r26	; 0x09
    629e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    62a0:	6f 81       	ldd	r22, Y+7	; 0x07
    62a2:	78 85       	ldd	r23, Y+8	; 0x08
    62a4:	89 85       	ldd	r24, Y+9	; 0x09
    62a6:	9a 85       	ldd	r25, Y+10	; 0x0a
    62a8:	20 e0       	ldi	r18, 0x00	; 0
    62aa:	30 e0       	ldi	r19, 0x00	; 0
    62ac:	40 e8       	ldi	r20, 0x80	; 128
    62ae:	5f e3       	ldi	r21, 0x3F	; 63
    62b0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    62b4:	88 23       	and	r24, r24
    62b6:	2c f4       	brge	.+10     	; 0x62c2 <SM_U8RoomSelect+0x708>
		__ticks = 1;
    62b8:	81 e0       	ldi	r24, 0x01	; 1
    62ba:	90 e0       	ldi	r25, 0x00	; 0
    62bc:	9e 83       	std	Y+6, r25	; 0x06
    62be:	8d 83       	std	Y+5, r24	; 0x05
    62c0:	3f c0       	rjmp	.+126    	; 0x6340 <SM_U8RoomSelect+0x786>
	else if (__tmp > 65535)
    62c2:	6f 81       	ldd	r22, Y+7	; 0x07
    62c4:	78 85       	ldd	r23, Y+8	; 0x08
    62c6:	89 85       	ldd	r24, Y+9	; 0x09
    62c8:	9a 85       	ldd	r25, Y+10	; 0x0a
    62ca:	20 e0       	ldi	r18, 0x00	; 0
    62cc:	3f ef       	ldi	r19, 0xFF	; 255
    62ce:	4f e7       	ldi	r20, 0x7F	; 127
    62d0:	57 e4       	ldi	r21, 0x47	; 71
    62d2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    62d6:	18 16       	cp	r1, r24
    62d8:	4c f5       	brge	.+82     	; 0x632c <SM_U8RoomSelect+0x772>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    62da:	6b 85       	ldd	r22, Y+11	; 0x0b
    62dc:	7c 85       	ldd	r23, Y+12	; 0x0c
    62de:	8d 85       	ldd	r24, Y+13	; 0x0d
    62e0:	9e 85       	ldd	r25, Y+14	; 0x0e
    62e2:	20 e0       	ldi	r18, 0x00	; 0
    62e4:	30 e0       	ldi	r19, 0x00	; 0
    62e6:	40 e2       	ldi	r20, 0x20	; 32
    62e8:	51 e4       	ldi	r21, 0x41	; 65
    62ea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    62ee:	dc 01       	movw	r26, r24
    62f0:	cb 01       	movw	r24, r22
    62f2:	bc 01       	movw	r22, r24
    62f4:	cd 01       	movw	r24, r26
    62f6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    62fa:	dc 01       	movw	r26, r24
    62fc:	cb 01       	movw	r24, r22
    62fe:	9e 83       	std	Y+6, r25	; 0x06
    6300:	8d 83       	std	Y+5, r24	; 0x05
    6302:	0f c0       	rjmp	.+30     	; 0x6322 <SM_U8RoomSelect+0x768>
    6304:	88 ec       	ldi	r24, 0xC8	; 200
    6306:	90 e0       	ldi	r25, 0x00	; 0
    6308:	9c 83       	std	Y+4, r25	; 0x04
    630a:	8b 83       	std	Y+3, r24	; 0x03
    630c:	8b 81       	ldd	r24, Y+3	; 0x03
    630e:	9c 81       	ldd	r25, Y+4	; 0x04
    6310:	01 97       	sbiw	r24, 0x01	; 1
    6312:	f1 f7       	brne	.-4      	; 0x6310 <SM_U8RoomSelect+0x756>
    6314:	9c 83       	std	Y+4, r25	; 0x04
    6316:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6318:	8d 81       	ldd	r24, Y+5	; 0x05
    631a:	9e 81       	ldd	r25, Y+6	; 0x06
    631c:	01 97       	sbiw	r24, 0x01	; 1
    631e:	9e 83       	std	Y+6, r25	; 0x06
    6320:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6322:	8d 81       	ldd	r24, Y+5	; 0x05
    6324:	9e 81       	ldd	r25, Y+6	; 0x06
    6326:	00 97       	sbiw	r24, 0x00	; 0
    6328:	69 f7       	brne	.-38     	; 0x6304 <SM_U8RoomSelect+0x74a>
    632a:	14 c0       	rjmp	.+40     	; 0x6354 <SM_U8RoomSelect+0x79a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    632c:	6f 81       	ldd	r22, Y+7	; 0x07
    632e:	78 85       	ldd	r23, Y+8	; 0x08
    6330:	89 85       	ldd	r24, Y+9	; 0x09
    6332:	9a 85       	ldd	r25, Y+10	; 0x0a
    6334:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6338:	dc 01       	movw	r26, r24
    633a:	cb 01       	movw	r24, r22
    633c:	9e 83       	std	Y+6, r25	; 0x06
    633e:	8d 83       	std	Y+5, r24	; 0x05
    6340:	8d 81       	ldd	r24, Y+5	; 0x05
    6342:	9e 81       	ldd	r25, Y+6	; 0x06
    6344:	9a 83       	std	Y+2, r25	; 0x02
    6346:	89 83       	std	Y+1, r24	; 0x01
    6348:	89 81       	ldd	r24, Y+1	; 0x01
    634a:	9a 81       	ldd	r25, Y+2	; 0x02
    634c:	01 97       	sbiw	r24, 0x01	; 1
    634e:	f1 f7       	brne	.-4      	; 0x634c <SM_U8RoomSelect+0x792>
    6350:	9a 83       	std	Y+2, r25	; 0x02
    6352:	89 83       	std	Y+1, r24	; 0x01
							_delay_ms(300);
							SM_VoidStepper();
    6354:	0e 94 b7 2a 	call	0x556e	; 0x556e <SM_VoidStepper>
    6358:	41 cc       	rjmp	.-1918   	; 0x5bdc <SM_U8RoomSelect+0x22>

0000635a <TIMER_VidOvfInit>:
#include "DIO_Interface.h"
#include <avr/io.h>
#include "Timer.h"

void TIMER_VidOvfInit(void)
{
    635a:	df 93       	push	r29
    635c:	cf 93       	push	r28
    635e:	cd b7       	in	r28, 0x3d	; 61
    6360:	de b7       	in	r29, 0x3e	; 62
	//1- Set the Wave Generation mode as normal
	CLR_BIT(TCCR0, WGM00);
    6362:	a3 e5       	ldi	r26, 0x53	; 83
    6364:	b0 e0       	ldi	r27, 0x00	; 0
    6366:	e3 e5       	ldi	r30, 0x53	; 83
    6368:	f0 e0       	ldi	r31, 0x00	; 0
    636a:	80 81       	ld	r24, Z
    636c:	8f 7b       	andi	r24, 0xBF	; 191
    636e:	8c 93       	st	X, r24
	CLR_BIT(TCCR0, WGM01);
    6370:	a3 e5       	ldi	r26, 0x53	; 83
    6372:	b0 e0       	ldi	r27, 0x00	; 0
    6374:	e3 e5       	ldi	r30, 0x53	; 83
    6376:	f0 e0       	ldi	r31, 0x00	; 0
    6378:	80 81       	ld	r24, Z
    637a:	87 7f       	andi	r24, 0xF7	; 247
    637c:	8c 93       	st	X, r24

	//3- Enable Overflow Interrupt
	SET_BIT(TIMSK, 0);
    637e:	a9 e5       	ldi	r26, 0x59	; 89
    6380:	b0 e0       	ldi	r27, 0x00	; 0
    6382:	e9 e5       	ldi	r30, 0x59	; 89
    6384:	f0 e0       	ldi	r31, 0x00	; 0
    6386:	80 81       	ld	r24, Z
    6388:	81 60       	ori	r24, 0x01	; 1
    638a:	8c 93       	st	X, r24


	//2- Set the prescaler 8Mhz / 8 = 1Mhz --> Timer Freq
	CLR_BIT(TCCR0, CS00);
    638c:	a3 e5       	ldi	r26, 0x53	; 83
    638e:	b0 e0       	ldi	r27, 0x00	; 0
    6390:	e3 e5       	ldi	r30, 0x53	; 83
    6392:	f0 e0       	ldi	r31, 0x00	; 0
    6394:	80 81       	ld	r24, Z
    6396:	8e 7f       	andi	r24, 0xFE	; 254
    6398:	8c 93       	st	X, r24
	SET_BIT(TCCR0, CS01);
    639a:	a3 e5       	ldi	r26, 0x53	; 83
    639c:	b0 e0       	ldi	r27, 0x00	; 0
    639e:	e3 e5       	ldi	r30, 0x53	; 83
    63a0:	f0 e0       	ldi	r31, 0x00	; 0
    63a2:	80 81       	ld	r24, Z
    63a4:	82 60       	ori	r24, 0x02	; 2
    63a6:	8c 93       	st	X, r24
	CLR_BIT(TCCR0, CS02);
    63a8:	a3 e5       	ldi	r26, 0x53	; 83
    63aa:	b0 e0       	ldi	r27, 0x00	; 0
    63ac:	e3 e5       	ldi	r30, 0x53	; 83
    63ae:	f0 e0       	ldi	r31, 0x00	; 0
    63b0:	80 81       	ld	r24, Z
    63b2:	8b 7f       	andi	r24, 0xFB	; 251
    63b4:	8c 93       	st	X, r24


}
    63b6:	cf 91       	pop	r28
    63b8:	df 91       	pop	r29
    63ba:	08 95       	ret

000063bc <TIMER_VidCTCInit>:

void TIMER_VidCTCInit(void)
{
    63bc:	df 93       	push	r29
    63be:	cf 93       	push	r28
    63c0:	cd b7       	in	r28, 0x3d	; 61
    63c2:	de b7       	in	r29, 0x3e	; 62
	//1- Set the Wave Generation mode as normal
	CLR_BIT(TCCR0, WGM00);
    63c4:	a3 e5       	ldi	r26, 0x53	; 83
    63c6:	b0 e0       	ldi	r27, 0x00	; 0
    63c8:	e3 e5       	ldi	r30, 0x53	; 83
    63ca:	f0 e0       	ldi	r31, 0x00	; 0
    63cc:	80 81       	ld	r24, Z
    63ce:	8f 7b       	andi	r24, 0xBF	; 191
    63d0:	8c 93       	st	X, r24
	SET_BIT(TCCR0, WGM01);
    63d2:	a3 e5       	ldi	r26, 0x53	; 83
    63d4:	b0 e0       	ldi	r27, 0x00	; 0
    63d6:	e3 e5       	ldi	r30, 0x53	; 83
    63d8:	f0 e0       	ldi	r31, 0x00	; 0
    63da:	80 81       	ld	r24, Z
    63dc:	88 60       	ori	r24, 0x08	; 8
    63de:	8c 93       	st	X, r24

	//3- Enable CTC Interrupt
	SET_BIT(TIMSK, 1);
    63e0:	a9 e5       	ldi	r26, 0x59	; 89
    63e2:	b0 e0       	ldi	r27, 0x00	; 0
    63e4:	e9 e5       	ldi	r30, 0x59	; 89
    63e6:	f0 e0       	ldi	r31, 0x00	; 0
    63e8:	80 81       	ld	r24, Z
    63ea:	82 60       	ori	r24, 0x02	; 2
    63ec:	8c 93       	st	X, r24

	//2- Set the prescaler 8Mhz / 8 = 1Mhz --> Timer Freq
	SET_BIT(TCCR0, CS00);
    63ee:	a3 e5       	ldi	r26, 0x53	; 83
    63f0:	b0 e0       	ldi	r27, 0x00	; 0
    63f2:	e3 e5       	ldi	r30, 0x53	; 83
    63f4:	f0 e0       	ldi	r31, 0x00	; 0
    63f6:	80 81       	ld	r24, Z
    63f8:	81 60       	ori	r24, 0x01	; 1
    63fa:	8c 93       	st	X, r24
	SET_BIT(TCCR0, CS01);
    63fc:	a3 e5       	ldi	r26, 0x53	; 83
    63fe:	b0 e0       	ldi	r27, 0x00	; 0
    6400:	e3 e5       	ldi	r30, 0x53	; 83
    6402:	f0 e0       	ldi	r31, 0x00	; 0
    6404:	80 81       	ld	r24, Z
    6406:	82 60       	ori	r24, 0x02	; 2
    6408:	8c 93       	st	X, r24
	CLR_BIT(TCCR0, CS02);
    640a:	a3 e5       	ldi	r26, 0x53	; 83
    640c:	b0 e0       	ldi	r27, 0x00	; 0
    640e:	e3 e5       	ldi	r30, 0x53	; 83
    6410:	f0 e0       	ldi	r31, 0x00	; 0
    6412:	80 81       	ld	r24, Z
    6414:	8b 7f       	andi	r24, 0xFB	; 251
    6416:	8c 93       	st	X, r24

}
    6418:	cf 91       	pop	r28
    641a:	df 91       	pop	r29
    641c:	08 95       	ret

0000641e <TIMER_VoidSetPreloadValue>:
void TIMER_VoidSetPreloadValue(u16 Copy_U16PreloadValue)
{
    641e:	df 93       	push	r29
    6420:	cf 93       	push	r28
    6422:	00 d0       	rcall	.+0      	; 0x6424 <TIMER_VoidSetPreloadValue+0x6>
    6424:	cd b7       	in	r28, 0x3d	; 61
    6426:	de b7       	in	r29, 0x3e	; 62
    6428:	9a 83       	std	Y+2, r25	; 0x02
    642a:	89 83       	std	Y+1, r24	; 0x01
	#if TIMER0_MODE  == TIMER_OVERFLOW_MODE
	//4- Set the Preload Value
	TCNT0 =Copy_U16PreloadValue;
	#elif TIMER0_MODE  == TIMER_CTC_MODE
	// Set the OCR Value
	OCR0=Copy_U16PreloadValue;
    642c:	ec e5       	ldi	r30, 0x5C	; 92
    642e:	f0 e0       	ldi	r31, 0x00	; 0
    6430:	89 81       	ldd	r24, Y+1	; 0x01
    6432:	80 83       	st	Z, r24
	#endif

}
    6434:	0f 90       	pop	r0
    6436:	0f 90       	pop	r0
    6438:	cf 91       	pop	r28
    643a:	df 91       	pop	r29
    643c:	08 95       	ret

0000643e <TIMER_VoidPWMInit>:
void TIMER_VoidPWMInit(void)
{
    643e:	df 93       	push	r29
    6440:	cf 93       	push	r28
    6442:	cd b7       	in	r28, 0x3d	; 61
    6444:	de b7       	in	r29, 0x3e	; 62
	//1- Set the Wave Generation mode as PWM
		SET_BIT(TCCR0, WGM00);
    6446:	a3 e5       	ldi	r26, 0x53	; 83
    6448:	b0 e0       	ldi	r27, 0x00	; 0
    644a:	e3 e5       	ldi	r30, 0x53	; 83
    644c:	f0 e0       	ldi	r31, 0x00	; 0
    644e:	80 81       	ld	r24, Z
    6450:	80 64       	ori	r24, 0x40	; 64
    6452:	8c 93       	st	X, r24
		SET_BIT(TCCR0, WGM01);
    6454:	a3 e5       	ldi	r26, 0x53	; 83
    6456:	b0 e0       	ldi	r27, 0x00	; 0
    6458:	e3 e5       	ldi	r30, 0x53	; 83
    645a:	f0 e0       	ldi	r31, 0x00	; 0
    645c:	80 81       	ld	r24, Z
    645e:	88 60       	ori	r24, 0x08	; 8
    6460:	8c 93       	st	X, r24

	#if FAST_PWM_MODE == INVERTED_PWM
		CLR_BIT( TCCR0,COM00);
    6462:	a3 e5       	ldi	r26, 0x53	; 83
    6464:	b0 e0       	ldi	r27, 0x00	; 0
    6466:	e3 e5       	ldi	r30, 0x53	; 83
    6468:	f0 e0       	ldi	r31, 0x00	; 0
    646a:	80 81       	ld	r24, Z
    646c:	8f 7e       	andi	r24, 0xEF	; 239
    646e:	8c 93       	st	X, r24
		SET_BIT( TCCR0,COM01);
    6470:	a3 e5       	ldi	r26, 0x53	; 83
    6472:	b0 e0       	ldi	r27, 0x00	; 0
    6474:	e3 e5       	ldi	r30, 0x53	; 83
    6476:	f0 e0       	ldi	r31, 0x00	; 0
    6478:	80 81       	ld	r24, Z
    647a:	80 62       	ori	r24, 0x20	; 32
    647c:	8c 93       	st	X, r24
	#elif FAST_PWM_MODE ==NONINVERTED_PWM
		SET_BIT( TCCR0,COM00);
		SET_BIT( TCCR0,COM01);
	#endif
	//2- Set the prescaler 8Mhz / 8 = 1Mhz --> Timer Freq
		CLR_BIT(TCCR0, CS00);
    647e:	a3 e5       	ldi	r26, 0x53	; 83
    6480:	b0 e0       	ldi	r27, 0x00	; 0
    6482:	e3 e5       	ldi	r30, 0x53	; 83
    6484:	f0 e0       	ldi	r31, 0x00	; 0
    6486:	80 81       	ld	r24, Z
    6488:	8e 7f       	andi	r24, 0xFE	; 254
    648a:	8c 93       	st	X, r24
		SET_BIT(TCCR0, CS01);
    648c:	a3 e5       	ldi	r26, 0x53	; 83
    648e:	b0 e0       	ldi	r27, 0x00	; 0
    6490:	e3 e5       	ldi	r30, 0x53	; 83
    6492:	f0 e0       	ldi	r31, 0x00	; 0
    6494:	80 81       	ld	r24, Z
    6496:	82 60       	ori	r24, 0x02	; 2
    6498:	8c 93       	st	X, r24
		CLR_BIT(TCCR0, CS02);
    649a:	a3 e5       	ldi	r26, 0x53	; 83
    649c:	b0 e0       	ldi	r27, 0x00	; 0
    649e:	e3 e5       	ldi	r30, 0x53	; 83
    64a0:	f0 e0       	ldi	r31, 0x00	; 0
    64a2:	80 81       	ld	r24, Z
    64a4:	8b 7f       	andi	r24, 0xFB	; 251
    64a6:	8c 93       	st	X, r24

}
    64a8:	cf 91       	pop	r28
    64aa:	df 91       	pop	r29
    64ac:	08 95       	ret

000064ae <TIMER_VoidTimer1Init>:
void TIMER_VoidTimer1Init(void)
{
    64ae:	df 93       	push	r29
    64b0:	cf 93       	push	r28
    64b2:	cd b7       	in	r28, 0x3d	; 61
    64b4:	de b7       	in	r29, 0x3e	; 62
	/* Fast PWM Timer1 */
	CLR_BIT(TCCR1A,WGM10);
    64b6:	af e4       	ldi	r26, 0x4F	; 79
    64b8:	b0 e0       	ldi	r27, 0x00	; 0
    64ba:	ef e4       	ldi	r30, 0x4F	; 79
    64bc:	f0 e0       	ldi	r31, 0x00	; 0
    64be:	80 81       	ld	r24, Z
    64c0:	8e 7f       	andi	r24, 0xFE	; 254
    64c2:	8c 93       	st	X, r24
	SET_BIT(TCCR1A,WGM11);
    64c4:	af e4       	ldi	r26, 0x4F	; 79
    64c6:	b0 e0       	ldi	r27, 0x00	; 0
    64c8:	ef e4       	ldi	r30, 0x4F	; 79
    64ca:	f0 e0       	ldi	r31, 0x00	; 0
    64cc:	80 81       	ld	r24, Z
    64ce:	82 60       	ori	r24, 0x02	; 2
    64d0:	8c 93       	st	X, r24
	SET_BIT(TCCR1B,WGM12);
    64d2:	ae e4       	ldi	r26, 0x4E	; 78
    64d4:	b0 e0       	ldi	r27, 0x00	; 0
    64d6:	ee e4       	ldi	r30, 0x4E	; 78
    64d8:	f0 e0       	ldi	r31, 0x00	; 0
    64da:	80 81       	ld	r24, Z
    64dc:	88 60       	ori	r24, 0x08	; 8
    64de:	8c 93       	st	X, r24
	SET_BIT(TCCR1B,WGM13);
    64e0:	ae e4       	ldi	r26, 0x4E	; 78
    64e2:	b0 e0       	ldi	r27, 0x00	; 0
    64e4:	ee e4       	ldi	r30, 0x4E	; 78
    64e6:	f0 e0       	ldi	r31, 0x00	; 0
    64e8:	80 81       	ld	r24, Z
    64ea:	80 61       	ori	r24, 0x10	; 16
    64ec:	8c 93       	st	X, r24

	/* NonInverted Timer1 Mode */
	CLR_BIT(TCCR1A,COM1A0);
    64ee:	af e4       	ldi	r26, 0x4F	; 79
    64f0:	b0 e0       	ldi	r27, 0x00	; 0
    64f2:	ef e4       	ldi	r30, 0x4F	; 79
    64f4:	f0 e0       	ldi	r31, 0x00	; 0
    64f6:	80 81       	ld	r24, Z
    64f8:	8f 7b       	andi	r24, 0xBF	; 191
    64fa:	8c 93       	st	X, r24
	SET_BIT(TCCR1A,COM1A1);
    64fc:	af e4       	ldi	r26, 0x4F	; 79
    64fe:	b0 e0       	ldi	r27, 0x00	; 0
    6500:	ef e4       	ldi	r30, 0x4F	; 79
    6502:	f0 e0       	ldi	r31, 0x00	; 0
    6504:	80 81       	ld	r24, Z
    6506:	80 68       	ori	r24, 0x80	; 128
    6508:	8c 93       	st	X, r24

	//2- Set the prescaller 8Mhz / 8 = 1Mhz --> Timer Freq
	CLR_BIT(TCCR1B, CS10);
    650a:	ae e4       	ldi	r26, 0x4E	; 78
    650c:	b0 e0       	ldi	r27, 0x00	; 0
    650e:	ee e4       	ldi	r30, 0x4E	; 78
    6510:	f0 e0       	ldi	r31, 0x00	; 0
    6512:	80 81       	ld	r24, Z
    6514:	8e 7f       	andi	r24, 0xFE	; 254
    6516:	8c 93       	st	X, r24
	SET_BIT(TCCR1B, CS11);
    6518:	ae e4       	ldi	r26, 0x4E	; 78
    651a:	b0 e0       	ldi	r27, 0x00	; 0
    651c:	ee e4       	ldi	r30, 0x4E	; 78
    651e:	f0 e0       	ldi	r31, 0x00	; 0
    6520:	80 81       	ld	r24, Z
    6522:	82 60       	ori	r24, 0x02	; 2
    6524:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B, CS12);
    6526:	ae e4       	ldi	r26, 0x4E	; 78
    6528:	b0 e0       	ldi	r27, 0x00	; 0
    652a:	ee e4       	ldi	r30, 0x4E	; 78
    652c:	f0 e0       	ldi	r31, 0x00	; 0
    652e:	80 81       	ld	r24, Z
    6530:	8b 7f       	andi	r24, 0xFB	; 251
    6532:	8c 93       	st	X, r24

}
    6534:	cf 91       	pop	r28
    6536:	df 91       	pop	r29
    6538:	08 95       	ret

0000653a <TIMER_VidCTCTimer1Preload>:
void TIMER_VidCTCTimer1Preload(s16 Copy_U16PreloadValue)
{
    653a:	df 93       	push	r29
    653c:	cf 93       	push	r28
    653e:	00 d0       	rcall	.+0      	; 0x6540 <TIMER_VidCTCTimer1Preload+0x6>
    6540:	cd b7       	in	r28, 0x3d	; 61
    6542:	de b7       	in	r29, 0x3e	; 62
    6544:	9a 83       	std	Y+2, r25	; 0x02
    6546:	89 83       	std	Y+1, r24	; 0x01
	OCR1A=Copy_U16PreloadValue;
    6548:	ea e4       	ldi	r30, 0x4A	; 74
    654a:	f0 e0       	ldi	r31, 0x00	; 0
    654c:	89 81       	ldd	r24, Y+1	; 0x01
    654e:	9a 81       	ldd	r25, Y+2	; 0x02
    6550:	91 83       	std	Z+1, r25	; 0x01
    6552:	80 83       	st	Z, r24
}
    6554:	0f 90       	pop	r0
    6556:	0f 90       	pop	r0
    6558:	cf 91       	pop	r28
    655a:	df 91       	pop	r29
    655c:	08 95       	ret

0000655e <TIMER_VidSetTimer1Preload>:
void TIMER_VidSetTimer1Preload(u16 Copy_U16PreloadValue)
{
    655e:	df 93       	push	r29
    6560:	cf 93       	push	r28
    6562:	00 d0       	rcall	.+0      	; 0x6564 <TIMER_VidSetTimer1Preload+0x6>
    6564:	cd b7       	in	r28, 0x3d	; 61
    6566:	de b7       	in	r29, 0x3e	; 62
    6568:	9a 83       	std	Y+2, r25	; 0x02
    656a:	89 83       	std	Y+1, r24	; 0x01
	ICR1=Copy_U16PreloadValue;
    656c:	e6 e4       	ldi	r30, 0x46	; 70
    656e:	f0 e0       	ldi	r31, 0x00	; 0
    6570:	89 81       	ldd	r24, Y+1	; 0x01
    6572:	9a 81       	ldd	r25, Y+2	; 0x02
    6574:	91 83       	std	Z+1, r25	; 0x01
    6576:	80 83       	st	Z, r24
}
    6578:	0f 90       	pop	r0
    657a:	0f 90       	pop	r0
    657c:	cf 91       	pop	r28
    657e:	df 91       	pop	r29
    6580:	08 95       	ret

00006582 <__vector_11>:
//	}
//}


void __vector_11(void)
{
    6582:	1f 92       	push	r1
    6584:	0f 92       	push	r0
    6586:	0f b6       	in	r0, 0x3f	; 63
    6588:	0f 92       	push	r0
    658a:	11 24       	eor	r1, r1
    658c:	2f 93       	push	r18
    658e:	3f 93       	push	r19
    6590:	4f 93       	push	r20
    6592:	5f 93       	push	r21
    6594:	6f 93       	push	r22
    6596:	7f 93       	push	r23
    6598:	8f 93       	push	r24
    659a:	9f 93       	push	r25
    659c:	af 93       	push	r26
    659e:	bf 93       	push	r27
    65a0:	ef 93       	push	r30
    65a2:	ff 93       	push	r31
    65a4:	df 93       	push	r29
    65a6:	cf 93       	push	r28
    65a8:	cd b7       	in	r28, 0x3d	; 61
    65aa:	de b7       	in	r29, 0x3e	; 62
	//3906.25
	static u16 counter = 0;
	counter++;
    65ac:	80 91 9f 03 	lds	r24, 0x039F
    65b0:	90 91 a0 03 	lds	r25, 0x03A0
    65b4:	01 96       	adiw	r24, 0x01	; 1
    65b6:	90 93 a0 03 	sts	0x03A0, r25
    65ba:	80 93 9f 03 	sts	0x039F, r24
	if(counter == 3907)
    65be:	80 91 9f 03 	lds	r24, 0x039F
    65c2:	90 91 a0 03 	lds	r25, 0x03A0
    65c6:	2f e0       	ldi	r18, 0x0F	; 15
    65c8:	83 34       	cpi	r24, 0x43	; 67
    65ca:	92 07       	cpc	r25, r18
    65cc:	61 f4       	brne	.+24     	; 0x65e6 <__vector_11+0x64>
	{
		counter = 0;
    65ce:	10 92 a0 03 	sts	0x03A0, r1
    65d2:	10 92 9f 03 	sts	0x039F, r1
		TCNT0 = 192;
    65d6:	e2 e5       	ldi	r30, 0x52	; 82
    65d8:	f0 e0       	ldi	r31, 0x00	; 0
    65da:	80 ec       	ldi	r24, 0xC0	; 192
    65dc:	80 83       	st	Z, r24
		//Do Action every 1s
		DIO_U8TogglePin(DIO_PORTA,DIO_PIN0);
    65de:	80 e0       	ldi	r24, 0x00	; 0
    65e0:	60 e0       	ldi	r22, 0x00	; 0
    65e2:	0e 94 c8 09 	call	0x1390	; 0x1390 <DIO_U8TogglePin>
	}
}
    65e6:	cf 91       	pop	r28
    65e8:	df 91       	pop	r29
    65ea:	ff 91       	pop	r31
    65ec:	ef 91       	pop	r30
    65ee:	bf 91       	pop	r27
    65f0:	af 91       	pop	r26
    65f2:	9f 91       	pop	r25
    65f4:	8f 91       	pop	r24
    65f6:	7f 91       	pop	r23
    65f8:	6f 91       	pop	r22
    65fa:	5f 91       	pop	r21
    65fc:	4f 91       	pop	r20
    65fe:	3f 91       	pop	r19
    6600:	2f 91       	pop	r18
    6602:	0f 90       	pop	r0
    6604:	0f be       	out	0x3f, r0	; 63
    6606:	0f 90       	pop	r0
    6608:	1f 90       	pop	r1
    660a:	18 95       	reti

0000660c <UART_VidInit>:
#include "USART_Private.h"
#include "USART_Config.h"
#include <util/delay.h>

void UART_VidInit(void)
{
    660c:	df 93       	push	r29
    660e:	cf 93       	push	r28
    6610:	cd b7       	in	r28, 0x3d	; 61
    6612:	de b7       	in	r29, 0x3e	; 62
	//Access UCSRA Once time for simple configurations
	UART_UCSRC_REG = (1<<UCSRC_URSEL_BIT) | (1<<UCSRC_UCSZ0_BIT) | (1<<UCSRC_UCSZ1_BIT);
    6614:	e0 e4       	ldi	r30, 0x40	; 64
    6616:	f0 e0       	ldi	r31, 0x00	; 0
    6618:	86 e8       	ldi	r24, 0x86	; 134
    661a:	80 83       	st	Z, r24
	UART_UBRRL_REG = 51; 	//9600 Baud rate with 8Mhz Osc.freq to the MCU
    661c:	e9 e2       	ldi	r30, 0x29	; 41
    661e:	f0 e0       	ldi	r31, 0x00	; 0
    6620:	83 e3       	ldi	r24, 0x33	; 51
    6622:	80 83       	st	Z, r24
	SET_BIT(UART_UCSRB_REG, UCSRB_RXEN_BIT);
    6624:	aa e2       	ldi	r26, 0x2A	; 42
    6626:	b0 e0       	ldi	r27, 0x00	; 0
    6628:	ea e2       	ldi	r30, 0x2A	; 42
    662a:	f0 e0       	ldi	r31, 0x00	; 0
    662c:	80 81       	ld	r24, Z
    662e:	80 61       	ori	r24, 0x10	; 16
    6630:	8c 93       	st	X, r24
	SET_BIT(UART_UCSRB_REG, UCSRB_TXEN_BIT);
    6632:	aa e2       	ldi	r26, 0x2A	; 42
    6634:	b0 e0       	ldi	r27, 0x00	; 0
    6636:	ea e2       	ldi	r30, 0x2A	; 42
    6638:	f0 e0       	ldi	r31, 0x00	; 0
    663a:	80 81       	ld	r24, Z
    663c:	88 60       	ori	r24, 0x08	; 8
    663e:	8c 93       	st	X, r24
}
    6640:	cf 91       	pop	r28
    6642:	df 91       	pop	r29
    6644:	08 95       	ret

00006646 <UART_VidTransmitData>:

void UART_VidTransmitData(u8 Copy_U8Data)
{
    6646:	df 93       	push	r29
    6648:	cf 93       	push	r28
    664a:	0f 92       	push	r0
    664c:	cd b7       	in	r28, 0x3d	; 61
    664e:	de b7       	in	r29, 0x3e	; 62
    6650:	89 83       	std	Y+1, r24	; 0x01
	//Waiting for the transmit buffer (UDR) is ready to receive new data
	while((GET_BIT(UART_UCSRA_REG, UCSRA_UDRE_BIT)) != 1);
    6652:	eb e2       	ldi	r30, 0x2B	; 43
    6654:	f0 e0       	ldi	r31, 0x00	; 0
    6656:	80 81       	ld	r24, Z
    6658:	82 95       	swap	r24
    665a:	86 95       	lsr	r24
    665c:	87 70       	andi	r24, 0x07	; 7
    665e:	88 2f       	mov	r24, r24
    6660:	90 e0       	ldi	r25, 0x00	; 0
    6662:	81 70       	andi	r24, 0x01	; 1
    6664:	90 70       	andi	r25, 0x00	; 0
    6666:	00 97       	sbiw	r24, 0x00	; 0
    6668:	a1 f3       	breq	.-24     	; 0x6652 <UART_VidTransmitData+0xc>

	if((GET_BIT(UART_UCSRA_REG, UCSRA_UDRE_BIT)) == 1)
    666a:	eb e2       	ldi	r30, 0x2B	; 43
    666c:	f0 e0       	ldi	r31, 0x00	; 0
    666e:	80 81       	ld	r24, Z
    6670:	82 95       	swap	r24
    6672:	86 95       	lsr	r24
    6674:	87 70       	andi	r24, 0x07	; 7
    6676:	88 2f       	mov	r24, r24
    6678:	90 e0       	ldi	r25, 0x00	; 0
    667a:	81 70       	andi	r24, 0x01	; 1
    667c:	90 70       	andi	r25, 0x00	; 0
    667e:	88 23       	and	r24, r24
    6680:	29 f0       	breq	.+10     	; 0x668c <UART_VidTransmitData+0x46>
	{
		//Send Data to UDR register
		UART_UDR_REG = Copy_U8Data;
    6682:	ec e2       	ldi	r30, 0x2C	; 44
    6684:	f0 e0       	ldi	r31, 0x00	; 0
    6686:	89 81       	ldd	r24, Y+1	; 0x01
    6688:	80 83       	st	Z, r24
    668a:	04 c0       	rjmp	.+8      	; 0x6694 <UART_VidTransmitData+0x4e>
	}
	else
	{
		UART_UDR_REG = 0xff;
    668c:	ec e2       	ldi	r30, 0x2C	; 44
    668e:	f0 e0       	ldi	r31, 0x00	; 0
    6690:	8f ef       	ldi	r24, 0xFF	; 255
    6692:	80 83       	st	Z, r24
	}
}
    6694:	0f 90       	pop	r0
    6696:	cf 91       	pop	r28
    6698:	df 91       	pop	r29
    669a:	08 95       	ret

0000669c <UART_VidReceiveData>:

u8 UART_VidReceiveData(void)
{
    669c:	df 93       	push	r29
    669e:	cf 93       	push	r28
    66a0:	0f 92       	push	r0
    66a2:	cd b7       	in	r28, 0x3d	; 61
    66a4:	de b7       	in	r29, 0x3e	; 62
	u8 Local_U8Data;
	//Waiting for the receive buffer (UDR) is ready to transmit new data
	while((GET_BIT(UART_UCSRA_REG, UCSRA_RXC_BIT)) != 1);
    66a6:	eb e2       	ldi	r30, 0x2B	; 43
    66a8:	f0 e0       	ldi	r31, 0x00	; 0
    66aa:	80 81       	ld	r24, Z
    66ac:	88 1f       	adc	r24, r24
    66ae:	88 27       	eor	r24, r24
    66b0:	88 1f       	adc	r24, r24
    66b2:	81 30       	cpi	r24, 0x01	; 1
    66b4:	c1 f7       	brne	.-16     	; 0x66a6 <UART_VidReceiveData+0xa>

	if((GET_BIT(UART_UCSRA_REG, UCSRA_RXC_BIT)) == 1)
    66b6:	eb e2       	ldi	r30, 0x2B	; 43
    66b8:	f0 e0       	ldi	r31, 0x00	; 0
    66ba:	80 81       	ld	r24, Z
    66bc:	88 1f       	adc	r24, r24
    66be:	88 27       	eor	r24, r24
    66c0:	88 1f       	adc	r24, r24
    66c2:	81 30       	cpi	r24, 0x01	; 1
    66c4:	29 f4       	brne	.+10     	; 0x66d0 <UART_VidReceiveData+0x34>
	{
		Local_U8Data = UART_UDR_REG;
    66c6:	ec e2       	ldi	r30, 0x2C	; 44
    66c8:	f0 e0       	ldi	r31, 0x00	; 0
    66ca:	80 81       	ld	r24, Z
    66cc:	89 83       	std	Y+1, r24	; 0x01
    66ce:	02 c0       	rjmp	.+4      	; 0x66d4 <UART_VidReceiveData+0x38>
	}
	else
	{
		Local_U8Data = 0xff;
    66d0:	8f ef       	ldi	r24, 0xFF	; 255
    66d2:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_U8Data;
    66d4:	89 81       	ldd	r24, Y+1	; 0x01
}
    66d6:	0f 90       	pop	r0
    66d8:	cf 91       	pop	r28
    66da:	df 91       	pop	r29
    66dc:	08 95       	ret

000066de <UART_VidTransmitString>:

void UART_VidTransmitString(u8 *Copy_U8String)
{
    66de:	df 93       	push	r29
    66e0:	cf 93       	push	r28
    66e2:	00 d0       	rcall	.+0      	; 0x66e4 <UART_VidTransmitString+0x6>
    66e4:	cd b7       	in	r28, 0x3d	; 61
    66e6:	de b7       	in	r29, 0x3e	; 62
    66e8:	9a 83       	std	Y+2, r25	; 0x02
    66ea:	89 83       	std	Y+1, r24	; 0x01
    66ec:	0b c0       	rjmp	.+22     	; 0x6704 <UART_VidTransmitString+0x26>
	while(*Copy_U8String > NULL_STR)
	{
		UART_VidTransmitData(*Copy_U8String++);
    66ee:	e9 81       	ldd	r30, Y+1	; 0x01
    66f0:	fa 81       	ldd	r31, Y+2	; 0x02
    66f2:	20 81       	ld	r18, Z
    66f4:	89 81       	ldd	r24, Y+1	; 0x01
    66f6:	9a 81       	ldd	r25, Y+2	; 0x02
    66f8:	01 96       	adiw	r24, 0x01	; 1
    66fa:	9a 83       	std	Y+2, r25	; 0x02
    66fc:	89 83       	std	Y+1, r24	; 0x01
    66fe:	82 2f       	mov	r24, r18
    6700:	0e 94 23 33 	call	0x6646	; 0x6646 <UART_VidTransmitData>
	return Local_U8Data;
}

void UART_VidTransmitString(u8 *Copy_U8String)
{
	while(*Copy_U8String > NULL_STR)
    6704:	e9 81       	ldd	r30, Y+1	; 0x01
    6706:	fa 81       	ldd	r31, Y+2	; 0x02
    6708:	80 81       	ld	r24, Z
    670a:	88 23       	and	r24, r24
    670c:	81 f7       	brne	.-32     	; 0x66ee <UART_VidTransmitString+0x10>
	{
		UART_VidTransmitData(*Copy_U8String++);
	}
}
    670e:	0f 90       	pop	r0
    6710:	0f 90       	pop	r0
    6712:	cf 91       	pop	r28
    6714:	df 91       	pop	r29
    6716:	08 95       	ret

00006718 <UART_VidTransmitSNumber>:

void UART_VidTransmitSNumber(s32 Copy_S32Number)
{
    6718:	0f 93       	push	r16
    671a:	1f 93       	push	r17
    671c:	df 93       	push	r29
    671e:	cf 93       	push	r28
    6720:	cd b7       	in	r28, 0x3d	; 61
    6722:	de b7       	in	r29, 0x3e	; 62
    6724:	60 97       	sbiw	r28, 0x10	; 16
    6726:	0f b6       	in	r0, 0x3f	; 63
    6728:	f8 94       	cli
    672a:	de bf       	out	0x3e, r29	; 62
    672c:	0f be       	out	0x3f, r0	; 63
    672e:	cd bf       	out	0x3d, r28	; 61
    6730:	6d 87       	std	Y+13, r22	; 0x0d
    6732:	7e 87       	std	Y+14, r23	; 0x0e
    6734:	8f 87       	std	Y+15, r24	; 0x0f
    6736:	98 8b       	std	Y+16, r25	; 0x10
	u8 counter = 0;
    6738:	1a 82       	std	Y+2, r1	; 0x02
	u8 number[10];
	//Negative Number
	if(Copy_S32Number < 0)
    673a:	8d 85       	ldd	r24, Y+13	; 0x0d
    673c:	9e 85       	ldd	r25, Y+14	; 0x0e
    673e:	af 85       	ldd	r26, Y+15	; 0x0f
    6740:	b8 89       	ldd	r27, Y+16	; 0x10
    6742:	bb 23       	and	r27, r27
    6744:	9c f4       	brge	.+38     	; 0x676c <UART_VidTransmitSNumber+0x54>
	{
		UART_VidTransmitData('-');
    6746:	8d e2       	ldi	r24, 0x2D	; 45
    6748:	0e 94 23 33 	call	0x6646	; 0x6646 <UART_VidTransmitData>
		Copy_S32Number *= -1;	//make it positive again
    674c:	8d 85       	ldd	r24, Y+13	; 0x0d
    674e:	9e 85       	ldd	r25, Y+14	; 0x0e
    6750:	af 85       	ldd	r26, Y+15	; 0x0f
    6752:	b8 89       	ldd	r27, Y+16	; 0x10
    6754:	b0 95       	com	r27
    6756:	a0 95       	com	r26
    6758:	90 95       	com	r25
    675a:	81 95       	neg	r24
    675c:	9f 4f       	sbci	r25, 0xFF	; 255
    675e:	af 4f       	sbci	r26, 0xFF	; 255
    6760:	bf 4f       	sbci	r27, 0xFF	; 255
    6762:	8d 87       	std	Y+13, r24	; 0x0d
    6764:	9e 87       	std	Y+14, r25	; 0x0e
    6766:	af 87       	std	Y+15, r26	; 0x0f
    6768:	b8 8b       	std	Y+16, r27	; 0x10
    676a:	3a c0       	rjmp	.+116    	; 0x67e0 <UART_VidTransmitSNumber+0xc8>
	}
	//Zero
	else if(Copy_S32Number == 0)
    676c:	8d 85       	ldd	r24, Y+13	; 0x0d
    676e:	9e 85       	ldd	r25, Y+14	; 0x0e
    6770:	af 85       	ldd	r26, Y+15	; 0x0f
    6772:	b8 89       	ldd	r27, Y+16	; 0x10
    6774:	00 97       	sbiw	r24, 0x00	; 0
    6776:	a1 05       	cpc	r26, r1
    6778:	b1 05       	cpc	r27, r1
    677a:	91 f5       	brne	.+100    	; 0x67e0 <UART_VidTransmitSNumber+0xc8>
	{
		UART_VidTransmitData('0');
    677c:	80 e3       	ldi	r24, 0x30	; 48
    677e:	0e 94 23 33 	call	0x6646	; 0x6646 <UART_VidTransmitData>
    6782:	2e c0       	rjmp	.+92     	; 0x67e0 <UART_VidTransmitSNumber+0xc8>
	}
	//Save Positive or Negative Number
	while(Copy_S32Number > 0)
	{
		number[counter++] = (Copy_S32Number%10) + '0';
    6784:	8a 81       	ldd	r24, Y+2	; 0x02
    6786:	08 2f       	mov	r16, r24
    6788:	10 e0       	ldi	r17, 0x00	; 0
    678a:	8d 85       	ldd	r24, Y+13	; 0x0d
    678c:	9e 85       	ldd	r25, Y+14	; 0x0e
    678e:	af 85       	ldd	r26, Y+15	; 0x0f
    6790:	b8 89       	ldd	r27, Y+16	; 0x10
    6792:	2a e0       	ldi	r18, 0x0A	; 10
    6794:	30 e0       	ldi	r19, 0x00	; 0
    6796:	40 e0       	ldi	r20, 0x00	; 0
    6798:	50 e0       	ldi	r21, 0x00	; 0
    679a:	bc 01       	movw	r22, r24
    679c:	cd 01       	movw	r24, r26
    679e:	0e 94 f9 35 	call	0x6bf2	; 0x6bf2 <__divmodsi4>
    67a2:	dc 01       	movw	r26, r24
    67a4:	cb 01       	movw	r24, r22
    67a6:	28 2f       	mov	r18, r24
    67a8:	20 5d       	subi	r18, 0xD0	; 208
    67aa:	ce 01       	movw	r24, r28
    67ac:	03 96       	adiw	r24, 0x03	; 3
    67ae:	fc 01       	movw	r30, r24
    67b0:	e0 0f       	add	r30, r16
    67b2:	f1 1f       	adc	r31, r17
    67b4:	20 83       	st	Z, r18
    67b6:	8a 81       	ldd	r24, Y+2	; 0x02
    67b8:	8f 5f       	subi	r24, 0xFF	; 255
    67ba:	8a 83       	std	Y+2, r24	; 0x02
		Copy_S32Number /= 10;
    67bc:	8d 85       	ldd	r24, Y+13	; 0x0d
    67be:	9e 85       	ldd	r25, Y+14	; 0x0e
    67c0:	af 85       	ldd	r26, Y+15	; 0x0f
    67c2:	b8 89       	ldd	r27, Y+16	; 0x10
    67c4:	2a e0       	ldi	r18, 0x0A	; 10
    67c6:	30 e0       	ldi	r19, 0x00	; 0
    67c8:	40 e0       	ldi	r20, 0x00	; 0
    67ca:	50 e0       	ldi	r21, 0x00	; 0
    67cc:	bc 01       	movw	r22, r24
    67ce:	cd 01       	movw	r24, r26
    67d0:	0e 94 f9 35 	call	0x6bf2	; 0x6bf2 <__divmodsi4>
    67d4:	da 01       	movw	r26, r20
    67d6:	c9 01       	movw	r24, r18
    67d8:	8d 87       	std	Y+13, r24	; 0x0d
    67da:	9e 87       	std	Y+14, r25	; 0x0e
    67dc:	af 87       	std	Y+15, r26	; 0x0f
    67de:	b8 8b       	std	Y+16, r27	; 0x10
	else if(Copy_S32Number == 0)
	{
		UART_VidTransmitData('0');
	}
	//Save Positive or Negative Number
	while(Copy_S32Number > 0)
    67e0:	8d 85       	ldd	r24, Y+13	; 0x0d
    67e2:	9e 85       	ldd	r25, Y+14	; 0x0e
    67e4:	af 85       	ldd	r26, Y+15	; 0x0f
    67e6:	b8 89       	ldd	r27, Y+16	; 0x10
    67e8:	18 16       	cp	r1, r24
    67ea:	19 06       	cpc	r1, r25
    67ec:	1a 06       	cpc	r1, r26
    67ee:	1b 06       	cpc	r1, r27
    67f0:	4c f2       	brlt	.-110    	; 0x6784 <UART_VidTransmitSNumber+0x6c>
	{
		number[counter++] = (Copy_S32Number%10) + '0';
		Copy_S32Number /= 10;
	}
	//Display Numbers by transmit array elements reversely
	for(u8 i = counter; i > 0; i--)
    67f2:	8a 81       	ldd	r24, Y+2	; 0x02
    67f4:	89 83       	std	Y+1, r24	; 0x01
    67f6:	11 c0       	rjmp	.+34     	; 0x681a <UART_VidTransmitSNumber+0x102>
	{
		UART_VidTransmitData(number[i-1]);
    67f8:	89 81       	ldd	r24, Y+1	; 0x01
    67fa:	88 2f       	mov	r24, r24
    67fc:	90 e0       	ldi	r25, 0x00	; 0
    67fe:	9c 01       	movw	r18, r24
    6800:	21 50       	subi	r18, 0x01	; 1
    6802:	30 40       	sbci	r19, 0x00	; 0
    6804:	ce 01       	movw	r24, r28
    6806:	03 96       	adiw	r24, 0x03	; 3
    6808:	fc 01       	movw	r30, r24
    680a:	e2 0f       	add	r30, r18
    680c:	f3 1f       	adc	r31, r19
    680e:	80 81       	ld	r24, Z
    6810:	0e 94 23 33 	call	0x6646	; 0x6646 <UART_VidTransmitData>
	{
		number[counter++] = (Copy_S32Number%10) + '0';
		Copy_S32Number /= 10;
	}
	//Display Numbers by transmit array elements reversely
	for(u8 i = counter; i > 0; i--)
    6814:	89 81       	ldd	r24, Y+1	; 0x01
    6816:	81 50       	subi	r24, 0x01	; 1
    6818:	89 83       	std	Y+1, r24	; 0x01
    681a:	89 81       	ldd	r24, Y+1	; 0x01
    681c:	88 23       	and	r24, r24
    681e:	61 f7       	brne	.-40     	; 0x67f8 <UART_VidTransmitSNumber+0xe0>
	{
		UART_VidTransmitData(number[i-1]);
	}
}
    6820:	60 96       	adiw	r28, 0x10	; 16
    6822:	0f b6       	in	r0, 0x3f	; 63
    6824:	f8 94       	cli
    6826:	de bf       	out	0x3e, r29	; 62
    6828:	0f be       	out	0x3f, r0	; 63
    682a:	cd bf       	out	0x3d, r28	; 61
    682c:	cf 91       	pop	r28
    682e:	df 91       	pop	r29
    6830:	1f 91       	pop	r17
    6832:	0f 91       	pop	r16
    6834:	08 95       	ret

00006836 <UART_VidTerminalPrintChar>:

void UART_VidTerminalPrintChar(u8 Copy_U8Character)
{
    6836:	df 93       	push	r29
    6838:	cf 93       	push	r28
    683a:	cd b7       	in	r28, 0x3d	; 61
    683c:	de b7       	in	r29, 0x3e	; 62
    683e:	2f 97       	sbiw	r28, 0x0f	; 15
    6840:	0f b6       	in	r0, 0x3f	; 63
    6842:	f8 94       	cli
    6844:	de bf       	out	0x3e, r29	; 62
    6846:	0f be       	out	0x3f, r0	; 63
    6848:	cd bf       	out	0x3d, r28	; 61
    684a:	8f 87       	std	Y+15, r24	; 0x0f
	UART_VidTransmitString("Enter Char : ");
    684c:	85 e5       	ldi	r24, 0x55	; 85
    684e:	92 e0       	ldi	r25, 0x02	; 2
    6850:	0e 94 6f 33 	call	0x66de	; 0x66de <UART_VidTransmitString>
	Copy_U8Character = UART_VidReceiveData();
    6854:	0e 94 4e 33 	call	0x669c	; 0x669c <UART_VidReceiveData>
    6858:	8f 87       	std	Y+15, r24	; 0x0f
	if(Copy_U8Character != 0xff)
    685a:	8f 85       	ldd	r24, Y+15	; 0x0f
    685c:	8f 3f       	cpi	r24, 0xFF	; 255
    685e:	99 f0       	breq	.+38     	; 0x6886 <UART_VidTerminalPrintChar+0x50>
	{
		UART_VidTransmitData(Copy_U8Character);
    6860:	8f 85       	ldd	r24, Y+15	; 0x0f
    6862:	0e 94 23 33 	call	0x6646	; 0x6646 <UART_VidTransmitData>
		UART_VidTransmitData('\r');	//Make a new line in the Virtual Terminal
    6866:	8d e0       	ldi	r24, 0x0D	; 13
    6868:	0e 94 23 33 	call	0x6646	; 0x6646 <UART_VidTransmitData>
		UART_VidTransmitString("Printed Char : ");
    686c:	83 e6       	ldi	r24, 0x63	; 99
    686e:	92 e0       	ldi	r25, 0x02	; 2
    6870:	0e 94 6f 33 	call	0x66de	; 0x66de <UART_VidTransmitString>
		UART_VidTransmitData(Copy_U8Character);
    6874:	8f 85       	ldd	r24, Y+15	; 0x0f
    6876:	0e 94 23 33 	call	0x6646	; 0x6646 <UART_VidTransmitData>
		UART_VidTransmitData('\r');	//Make a new line in the Virtual Terminal
    687a:	8d e0       	ldi	r24, 0x0D	; 13
    687c:	0e 94 23 33 	call	0x6646	; 0x6646 <UART_VidTransmitData>
		UART_VidTransmitData('\r');	//Make a new line in the Virtual Terminal
    6880:	8d e0       	ldi	r24, 0x0D	; 13
    6882:	0e 94 23 33 	call	0x6646	; 0x6646 <UART_VidTransmitData>
    6886:	80 e0       	ldi	r24, 0x00	; 0
    6888:	90 e0       	ldi	r25, 0x00	; 0
    688a:	a0 e2       	ldi	r26, 0x20	; 32
    688c:	b1 e4       	ldi	r27, 0x41	; 65
    688e:	8b 87       	std	Y+11, r24	; 0x0b
    6890:	9c 87       	std	Y+12, r25	; 0x0c
    6892:	ad 87       	std	Y+13, r26	; 0x0d
    6894:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    6896:	6b 85       	ldd	r22, Y+11	; 0x0b
    6898:	7c 85       	ldd	r23, Y+12	; 0x0c
    689a:	8d 85       	ldd	r24, Y+13	; 0x0d
    689c:	9e 85       	ldd	r25, Y+14	; 0x0e
    689e:	20 e0       	ldi	r18, 0x00	; 0
    68a0:	30 e0       	ldi	r19, 0x00	; 0
    68a2:	4a ef       	ldi	r20, 0xFA	; 250
    68a4:	54 e4       	ldi	r21, 0x44	; 68
    68a6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    68aa:	dc 01       	movw	r26, r24
    68ac:	cb 01       	movw	r24, r22
    68ae:	8f 83       	std	Y+7, r24	; 0x07
    68b0:	98 87       	std	Y+8, r25	; 0x08
    68b2:	a9 87       	std	Y+9, r26	; 0x09
    68b4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    68b6:	6f 81       	ldd	r22, Y+7	; 0x07
    68b8:	78 85       	ldd	r23, Y+8	; 0x08
    68ba:	89 85       	ldd	r24, Y+9	; 0x09
    68bc:	9a 85       	ldd	r25, Y+10	; 0x0a
    68be:	20 e0       	ldi	r18, 0x00	; 0
    68c0:	30 e0       	ldi	r19, 0x00	; 0
    68c2:	40 e8       	ldi	r20, 0x80	; 128
    68c4:	5f e3       	ldi	r21, 0x3F	; 63
    68c6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    68ca:	88 23       	and	r24, r24
    68cc:	2c f4       	brge	.+10     	; 0x68d8 <UART_VidTerminalPrintChar+0xa2>
		__ticks = 1;
    68ce:	81 e0       	ldi	r24, 0x01	; 1
    68d0:	90 e0       	ldi	r25, 0x00	; 0
    68d2:	9e 83       	std	Y+6, r25	; 0x06
    68d4:	8d 83       	std	Y+5, r24	; 0x05
    68d6:	3f c0       	rjmp	.+126    	; 0x6956 <UART_VidTerminalPrintChar+0x120>
	else if (__tmp > 65535)
    68d8:	6f 81       	ldd	r22, Y+7	; 0x07
    68da:	78 85       	ldd	r23, Y+8	; 0x08
    68dc:	89 85       	ldd	r24, Y+9	; 0x09
    68de:	9a 85       	ldd	r25, Y+10	; 0x0a
    68e0:	20 e0       	ldi	r18, 0x00	; 0
    68e2:	3f ef       	ldi	r19, 0xFF	; 255
    68e4:	4f e7       	ldi	r20, 0x7F	; 127
    68e6:	57 e4       	ldi	r21, 0x47	; 71
    68e8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    68ec:	18 16       	cp	r1, r24
    68ee:	4c f5       	brge	.+82     	; 0x6942 <UART_VidTerminalPrintChar+0x10c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    68f0:	6b 85       	ldd	r22, Y+11	; 0x0b
    68f2:	7c 85       	ldd	r23, Y+12	; 0x0c
    68f4:	8d 85       	ldd	r24, Y+13	; 0x0d
    68f6:	9e 85       	ldd	r25, Y+14	; 0x0e
    68f8:	20 e0       	ldi	r18, 0x00	; 0
    68fa:	30 e0       	ldi	r19, 0x00	; 0
    68fc:	40 e2       	ldi	r20, 0x20	; 32
    68fe:	51 e4       	ldi	r21, 0x41	; 65
    6900:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6904:	dc 01       	movw	r26, r24
    6906:	cb 01       	movw	r24, r22
    6908:	bc 01       	movw	r22, r24
    690a:	cd 01       	movw	r24, r26
    690c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6910:	dc 01       	movw	r26, r24
    6912:	cb 01       	movw	r24, r22
    6914:	9e 83       	std	Y+6, r25	; 0x06
    6916:	8d 83       	std	Y+5, r24	; 0x05
    6918:	0f c0       	rjmp	.+30     	; 0x6938 <UART_VidTerminalPrintChar+0x102>
    691a:	88 ec       	ldi	r24, 0xC8	; 200
    691c:	90 e0       	ldi	r25, 0x00	; 0
    691e:	9c 83       	std	Y+4, r25	; 0x04
    6920:	8b 83       	std	Y+3, r24	; 0x03
    6922:	8b 81       	ldd	r24, Y+3	; 0x03
    6924:	9c 81       	ldd	r25, Y+4	; 0x04
    6926:	01 97       	sbiw	r24, 0x01	; 1
    6928:	f1 f7       	brne	.-4      	; 0x6926 <UART_VidTerminalPrintChar+0xf0>
    692a:	9c 83       	std	Y+4, r25	; 0x04
    692c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    692e:	8d 81       	ldd	r24, Y+5	; 0x05
    6930:	9e 81       	ldd	r25, Y+6	; 0x06
    6932:	01 97       	sbiw	r24, 0x01	; 1
    6934:	9e 83       	std	Y+6, r25	; 0x06
    6936:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6938:	8d 81       	ldd	r24, Y+5	; 0x05
    693a:	9e 81       	ldd	r25, Y+6	; 0x06
    693c:	00 97       	sbiw	r24, 0x00	; 0
    693e:	69 f7       	brne	.-38     	; 0x691a <UART_VidTerminalPrintChar+0xe4>
    6940:	14 c0       	rjmp	.+40     	; 0x696a <UART_VidTerminalPrintChar+0x134>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6942:	6f 81       	ldd	r22, Y+7	; 0x07
    6944:	78 85       	ldd	r23, Y+8	; 0x08
    6946:	89 85       	ldd	r24, Y+9	; 0x09
    6948:	9a 85       	ldd	r25, Y+10	; 0x0a
    694a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    694e:	dc 01       	movw	r26, r24
    6950:	cb 01       	movw	r24, r22
    6952:	9e 83       	std	Y+6, r25	; 0x06
    6954:	8d 83       	std	Y+5, r24	; 0x05
    6956:	8d 81       	ldd	r24, Y+5	; 0x05
    6958:	9e 81       	ldd	r25, Y+6	; 0x06
    695a:	9a 83       	std	Y+2, r25	; 0x02
    695c:	89 83       	std	Y+1, r24	; 0x01
    695e:	89 81       	ldd	r24, Y+1	; 0x01
    6960:	9a 81       	ldd	r25, Y+2	; 0x02
    6962:	01 97       	sbiw	r24, 0x01	; 1
    6964:	f1 f7       	brne	.-4      	; 0x6962 <UART_VidTerminalPrintChar+0x12c>
    6966:	9a 83       	std	Y+2, r25	; 0x02
    6968:	89 83       	std	Y+1, r24	; 0x01
	}
	_delay_ms(10);	//Delay for reading stability
}
    696a:	2f 96       	adiw	r28, 0x0f	; 15
    696c:	0f b6       	in	r0, 0x3f	; 63
    696e:	f8 94       	cli
    6970:	de bf       	out	0x3e, r29	; 62
    6972:	0f be       	out	0x3f, r0	; 63
    6974:	cd bf       	out	0x3d, r28	; 61
    6976:	cf 91       	pop	r28
    6978:	df 91       	pop	r29
    697a:	08 95       	ret

0000697c <UART_VoidSendNumber>:

void UART_VoidSendNumber(s32 Copy_s32Number)
{
    697c:	0f 93       	push	r16
    697e:	1f 93       	push	r17
    6980:	df 93       	push	r29
    6982:	cf 93       	push	r28
    6984:	cd b7       	in	r28, 0x3d	; 61
    6986:	de b7       	in	r29, 0x3e	; 62
    6988:	60 97       	sbiw	r28, 0x10	; 16
    698a:	0f b6       	in	r0, 0x3f	; 63
    698c:	f8 94       	cli
    698e:	de bf       	out	0x3e, r29	; 62
    6990:	0f be       	out	0x3f, r0	; 63
    6992:	cd bf       	out	0x3d, r28	; 61
    6994:	6d 87       	std	Y+13, r22	; 0x0d
    6996:	7e 87       	std	Y+14, r23	; 0x0e
    6998:	8f 87       	std	Y+15, r24	; 0x0f
    699a:	98 8b       	std	Y+16, r25	; 0x10
	   u8 Local_u8Array[11]; // Increased array size to accommodate negative sign
	    s8 Local_counter = 0;
    699c:	19 82       	std	Y+1, r1	; 0x01

	    if (Copy_s32Number < 0)
    699e:	8d 85       	ldd	r24, Y+13	; 0x0d
    69a0:	9e 85       	ldd	r25, Y+14	; 0x0e
    69a2:	af 85       	ldd	r26, Y+15	; 0x0f
    69a4:	b8 89       	ldd	r27, Y+16	; 0x10
    69a6:	bb 23       	and	r27, r27
    69a8:	9c f4       	brge	.+38     	; 0x69d0 <UART_VoidSendNumber+0x54>
	    {
	    	UART_VidTransmitData('-'); // Display negative sign
    69aa:	8d e2       	ldi	r24, 0x2D	; 45
    69ac:	0e 94 23 33 	call	0x6646	; 0x6646 <UART_VidTransmitData>
	    	Copy_s32Number = -Copy_s32Number; // Convert negative number to positive for processing
    69b0:	8d 85       	ldd	r24, Y+13	; 0x0d
    69b2:	9e 85       	ldd	r25, Y+14	; 0x0e
    69b4:	af 85       	ldd	r26, Y+15	; 0x0f
    69b6:	b8 89       	ldd	r27, Y+16	; 0x10
    69b8:	b0 95       	com	r27
    69ba:	a0 95       	com	r26
    69bc:	90 95       	com	r25
    69be:	81 95       	neg	r24
    69c0:	9f 4f       	sbci	r25, 0xFF	; 255
    69c2:	af 4f       	sbci	r26, 0xFF	; 255
    69c4:	bf 4f       	sbci	r27, 0xFF	; 255
    69c6:	8d 87       	std	Y+13, r24	; 0x0d
    69c8:	9e 87       	std	Y+14, r25	; 0x0e
    69ca:	af 87       	std	Y+15, r26	; 0x0f
    69cc:	b8 8b       	std	Y+16, r27	; 0x10
    69ce:	3c c0       	rjmp	.+120    	; 0x6a48 <UART_VoidSendNumber+0xcc>
	    }
	    else if (Copy_s32Number == 0)
    69d0:	8d 85       	ldd	r24, Y+13	; 0x0d
    69d2:	9e 85       	ldd	r25, Y+14	; 0x0e
    69d4:	af 85       	ldd	r26, Y+15	; 0x0f
    69d6:	b8 89       	ldd	r27, Y+16	; 0x10
    69d8:	00 97       	sbiw	r24, 0x00	; 0
    69da:	a1 05       	cpc	r26, r1
    69dc:	b1 05       	cpc	r27, r1
    69de:	a1 f5       	brne	.+104    	; 0x6a48 <UART_VoidSendNumber+0xcc>
	    {
	    	UART_VidTransmitData('0');
    69e0:	80 e3       	ldi	r24, 0x30	; 48
    69e2:	0e 94 23 33 	call	0x6646	; 0x6646 <UART_VidTransmitData>
    69e6:	30 c0       	rjmp	.+96     	; 0x6a48 <UART_VoidSendNumber+0xcc>
	    }

	    while (Copy_s32Number > 0)
	    {
	        Local_u8Array[Local_counter++] = (Copy_s32Number % 10) + 48;
    69e8:	89 81       	ldd	r24, Y+1	; 0x01
    69ea:	08 2f       	mov	r16, r24
    69ec:	11 27       	eor	r17, r17
    69ee:	07 fd       	sbrc	r16, 7
    69f0:	10 95       	com	r17
    69f2:	8d 85       	ldd	r24, Y+13	; 0x0d
    69f4:	9e 85       	ldd	r25, Y+14	; 0x0e
    69f6:	af 85       	ldd	r26, Y+15	; 0x0f
    69f8:	b8 89       	ldd	r27, Y+16	; 0x10
    69fa:	2a e0       	ldi	r18, 0x0A	; 10
    69fc:	30 e0       	ldi	r19, 0x00	; 0
    69fe:	40 e0       	ldi	r20, 0x00	; 0
    6a00:	50 e0       	ldi	r21, 0x00	; 0
    6a02:	bc 01       	movw	r22, r24
    6a04:	cd 01       	movw	r24, r26
    6a06:	0e 94 f9 35 	call	0x6bf2	; 0x6bf2 <__divmodsi4>
    6a0a:	dc 01       	movw	r26, r24
    6a0c:	cb 01       	movw	r24, r22
    6a0e:	28 2f       	mov	r18, r24
    6a10:	20 5d       	subi	r18, 0xD0	; 208
    6a12:	ce 01       	movw	r24, r28
    6a14:	02 96       	adiw	r24, 0x02	; 2
    6a16:	fc 01       	movw	r30, r24
    6a18:	e0 0f       	add	r30, r16
    6a1a:	f1 1f       	adc	r31, r17
    6a1c:	20 83       	st	Z, r18
    6a1e:	89 81       	ldd	r24, Y+1	; 0x01
    6a20:	8f 5f       	subi	r24, 0xFF	; 255
    6a22:	89 83       	std	Y+1, r24	; 0x01
	        Copy_s32Number /= 10;
    6a24:	8d 85       	ldd	r24, Y+13	; 0x0d
    6a26:	9e 85       	ldd	r25, Y+14	; 0x0e
    6a28:	af 85       	ldd	r26, Y+15	; 0x0f
    6a2a:	b8 89       	ldd	r27, Y+16	; 0x10
    6a2c:	2a e0       	ldi	r18, 0x0A	; 10
    6a2e:	30 e0       	ldi	r19, 0x00	; 0
    6a30:	40 e0       	ldi	r20, 0x00	; 0
    6a32:	50 e0       	ldi	r21, 0x00	; 0
    6a34:	bc 01       	movw	r22, r24
    6a36:	cd 01       	movw	r24, r26
    6a38:	0e 94 f9 35 	call	0x6bf2	; 0x6bf2 <__divmodsi4>
    6a3c:	da 01       	movw	r26, r20
    6a3e:	c9 01       	movw	r24, r18
    6a40:	8d 87       	std	Y+13, r24	; 0x0d
    6a42:	9e 87       	std	Y+14, r25	; 0x0e
    6a44:	af 87       	std	Y+15, r26	; 0x0f
    6a46:	b8 8b       	std	Y+16, r27	; 0x10
	    else if (Copy_s32Number == 0)
	    {
	    	UART_VidTransmitData('0');
	    }

	    while (Copy_s32Number > 0)
    6a48:	8d 85       	ldd	r24, Y+13	; 0x0d
    6a4a:	9e 85       	ldd	r25, Y+14	; 0x0e
    6a4c:	af 85       	ldd	r26, Y+15	; 0x0f
    6a4e:	b8 89       	ldd	r27, Y+16	; 0x10
    6a50:	18 16       	cp	r1, r24
    6a52:	19 06       	cpc	r1, r25
    6a54:	1a 06       	cpc	r1, r26
    6a56:	1b 06       	cpc	r1, r27
    6a58:	3c f2       	brlt	.-114    	; 0x69e8 <UART_VoidSendNumber+0x6c>
	    {
	        Local_u8Array[Local_counter++] = (Copy_s32Number % 10) + 48;
	        Copy_s32Number /= 10;
	    }

	    Local_counter--;
    6a5a:	89 81       	ldd	r24, Y+1	; 0x01
    6a5c:	81 50       	subi	r24, 0x01	; 1
    6a5e:	89 83       	std	Y+1, r24	; 0x01
    6a60:	10 c0       	rjmp	.+32     	; 0x6a82 <UART_VoidSendNumber+0x106>

	    // Loop for sending the reverse of the array
	    while (Local_counter >= 0)
	    {
	    	UART_VidTransmitData(Local_u8Array[Local_counter]);
    6a62:	89 81       	ldd	r24, Y+1	; 0x01
    6a64:	28 2f       	mov	r18, r24
    6a66:	33 27       	eor	r19, r19
    6a68:	27 fd       	sbrc	r18, 7
    6a6a:	30 95       	com	r19
    6a6c:	ce 01       	movw	r24, r28
    6a6e:	02 96       	adiw	r24, 0x02	; 2
    6a70:	fc 01       	movw	r30, r24
    6a72:	e2 0f       	add	r30, r18
    6a74:	f3 1f       	adc	r31, r19
    6a76:	80 81       	ld	r24, Z
    6a78:	0e 94 23 33 	call	0x6646	; 0x6646 <UART_VidTransmitData>
	        Local_counter--;
    6a7c:	89 81       	ldd	r24, Y+1	; 0x01
    6a7e:	81 50       	subi	r24, 0x01	; 1
    6a80:	89 83       	std	Y+1, r24	; 0x01
	    }

	    Local_counter--;

	    // Loop for sending the reverse of the array
	    while (Local_counter >= 0)
    6a82:	89 81       	ldd	r24, Y+1	; 0x01
    6a84:	88 23       	and	r24, r24
    6a86:	6c f7       	brge	.-38     	; 0x6a62 <UART_VoidSendNumber+0xe6>
	    {
	    	UART_VidTransmitData(Local_u8Array[Local_counter]);
	        Local_counter--;
	    }
}
    6a88:	60 96       	adiw	r28, 0x10	; 16
    6a8a:	0f b6       	in	r0, 0x3f	; 63
    6a8c:	f8 94       	cli
    6a8e:	de bf       	out	0x3e, r29	; 62
    6a90:	0f be       	out	0x3f, r0	; 63
    6a92:	cd bf       	out	0x3d, r28	; 61
    6a94:	cf 91       	pop	r28
    6a96:	df 91       	pop	r29
    6a98:	1f 91       	pop	r17
    6a9a:	0f 91       	pop	r16
    6a9c:	08 95       	ret

00006a9e <main>:
#include "I2C_Interface.h"
#include "Smart_Home_Interface.h"
#include "USART_Interface.h"

int main()
{
    6a9e:	df 93       	push	r29
    6aa0:	cf 93       	push	r28
    6aa2:	cd b7       	in	r28, 0x3d	; 61
    6aa4:	de b7       	in	r29, 0x3e	; 62
    6aa6:	2f 97       	sbiw	r28, 0x0f	; 15
    6aa8:	0f b6       	in	r0, 0x3f	; 63
    6aaa:	f8 94       	cli
    6aac:	de bf       	out	0x3e, r29	; 62
    6aae:	0f be       	out	0x3f, r0	; 63
    6ab0:	cd bf       	out	0x3d, r28	; 61
	LCD_VoidLCDInit();
    6ab2:	0e 94 e1 11 	call	0x23c2	; 0x23c2 <LCD_VoidLCDInit>
	I2C_VidMasterInit();
    6ab6:	0e 94 32 0c 	call	0x1864	; 0x1864 <I2C_VidMasterInit>
	KPAD_VidInit();
    6aba:	0e 94 45 0d 	call	0x1a8a	; 0x1a8a <KPAD_VidInit>
	UART_VidInit();
    6abe:	0e 94 06 33 	call	0x660c	; 0x660c <UART_VidInit>

	DIO_U8SetPortDirection(DIO_PORTD, 0xFE);
    6ac2:	83 e0       	ldi	r24, 0x03	; 3
    6ac4:	6e ef       	ldi	r22, 0xFE	; 254
    6ac6:	0e 94 57 0a 	call	0x14ae	; 0x14ae <DIO_U8SetPortDirection>

	TIMER_VoidTimer1Init();
    6aca:	0e 94 57 32 	call	0x64ae	; 0x64ae <TIMER_VoidTimer1Init>
	TIMER_VidSetTimer1Preload(20000);
    6ace:	80 e2       	ldi	r24, 0x20	; 32
    6ad0:	9e e4       	ldi	r25, 0x4E	; 78
    6ad2:	0e 94 af 32 	call	0x655e	; 0x655e <TIMER_VidSetTimer1Preload>

	LCD_u8WriteString("Welcome");
    6ad6:	83 e7       	ldi	r24, 0x73	; 115
    6ad8:	92 e0       	ldi	r25, 0x02	; 2
    6ada:	0e 94 3d 17 	call	0x2e7a	; 0x2e7a <LCD_u8WriteString>
    6ade:	80 e0       	ldi	r24, 0x00	; 0
    6ae0:	90 e0       	ldi	r25, 0x00	; 0
    6ae2:	aa ef       	ldi	r26, 0xFA	; 250
    6ae4:	b3 e4       	ldi	r27, 0x43	; 67
    6ae6:	8b 87       	std	Y+11, r24	; 0x0b
    6ae8:	9c 87       	std	Y+12, r25	; 0x0c
    6aea:	ad 87       	std	Y+13, r26	; 0x0d
    6aec:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    6aee:	6b 85       	ldd	r22, Y+11	; 0x0b
    6af0:	7c 85       	ldd	r23, Y+12	; 0x0c
    6af2:	8d 85       	ldd	r24, Y+13	; 0x0d
    6af4:	9e 85       	ldd	r25, Y+14	; 0x0e
    6af6:	20 e0       	ldi	r18, 0x00	; 0
    6af8:	30 e0       	ldi	r19, 0x00	; 0
    6afa:	4a ef       	ldi	r20, 0xFA	; 250
    6afc:	54 e4       	ldi	r21, 0x44	; 68
    6afe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6b02:	dc 01       	movw	r26, r24
    6b04:	cb 01       	movw	r24, r22
    6b06:	8f 83       	std	Y+7, r24	; 0x07
    6b08:	98 87       	std	Y+8, r25	; 0x08
    6b0a:	a9 87       	std	Y+9, r26	; 0x09
    6b0c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    6b0e:	6f 81       	ldd	r22, Y+7	; 0x07
    6b10:	78 85       	ldd	r23, Y+8	; 0x08
    6b12:	89 85       	ldd	r24, Y+9	; 0x09
    6b14:	9a 85       	ldd	r25, Y+10	; 0x0a
    6b16:	20 e0       	ldi	r18, 0x00	; 0
    6b18:	30 e0       	ldi	r19, 0x00	; 0
    6b1a:	40 e8       	ldi	r20, 0x80	; 128
    6b1c:	5f e3       	ldi	r21, 0x3F	; 63
    6b1e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    6b22:	88 23       	and	r24, r24
    6b24:	2c f4       	brge	.+10     	; 0x6b30 <main+0x92>
		__ticks = 1;
    6b26:	81 e0       	ldi	r24, 0x01	; 1
    6b28:	90 e0       	ldi	r25, 0x00	; 0
    6b2a:	9e 83       	std	Y+6, r25	; 0x06
    6b2c:	8d 83       	std	Y+5, r24	; 0x05
    6b2e:	3f c0       	rjmp	.+126    	; 0x6bae <main+0x110>
	else if (__tmp > 65535)
    6b30:	6f 81       	ldd	r22, Y+7	; 0x07
    6b32:	78 85       	ldd	r23, Y+8	; 0x08
    6b34:	89 85       	ldd	r24, Y+9	; 0x09
    6b36:	9a 85       	ldd	r25, Y+10	; 0x0a
    6b38:	20 e0       	ldi	r18, 0x00	; 0
    6b3a:	3f ef       	ldi	r19, 0xFF	; 255
    6b3c:	4f e7       	ldi	r20, 0x7F	; 127
    6b3e:	57 e4       	ldi	r21, 0x47	; 71
    6b40:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    6b44:	18 16       	cp	r1, r24
    6b46:	4c f5       	brge	.+82     	; 0x6b9a <main+0xfc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6b48:	6b 85       	ldd	r22, Y+11	; 0x0b
    6b4a:	7c 85       	ldd	r23, Y+12	; 0x0c
    6b4c:	8d 85       	ldd	r24, Y+13	; 0x0d
    6b4e:	9e 85       	ldd	r25, Y+14	; 0x0e
    6b50:	20 e0       	ldi	r18, 0x00	; 0
    6b52:	30 e0       	ldi	r19, 0x00	; 0
    6b54:	40 e2       	ldi	r20, 0x20	; 32
    6b56:	51 e4       	ldi	r21, 0x41	; 65
    6b58:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6b5c:	dc 01       	movw	r26, r24
    6b5e:	cb 01       	movw	r24, r22
    6b60:	bc 01       	movw	r22, r24
    6b62:	cd 01       	movw	r24, r26
    6b64:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6b68:	dc 01       	movw	r26, r24
    6b6a:	cb 01       	movw	r24, r22
    6b6c:	9e 83       	std	Y+6, r25	; 0x06
    6b6e:	8d 83       	std	Y+5, r24	; 0x05
    6b70:	0f c0       	rjmp	.+30     	; 0x6b90 <main+0xf2>
    6b72:	88 ec       	ldi	r24, 0xC8	; 200
    6b74:	90 e0       	ldi	r25, 0x00	; 0
    6b76:	9c 83       	std	Y+4, r25	; 0x04
    6b78:	8b 83       	std	Y+3, r24	; 0x03
    6b7a:	8b 81       	ldd	r24, Y+3	; 0x03
    6b7c:	9c 81       	ldd	r25, Y+4	; 0x04
    6b7e:	01 97       	sbiw	r24, 0x01	; 1
    6b80:	f1 f7       	brne	.-4      	; 0x6b7e <main+0xe0>
    6b82:	9c 83       	std	Y+4, r25	; 0x04
    6b84:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6b86:	8d 81       	ldd	r24, Y+5	; 0x05
    6b88:	9e 81       	ldd	r25, Y+6	; 0x06
    6b8a:	01 97       	sbiw	r24, 0x01	; 1
    6b8c:	9e 83       	std	Y+6, r25	; 0x06
    6b8e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6b90:	8d 81       	ldd	r24, Y+5	; 0x05
    6b92:	9e 81       	ldd	r25, Y+6	; 0x06
    6b94:	00 97       	sbiw	r24, 0x00	; 0
    6b96:	69 f7       	brne	.-38     	; 0x6b72 <main+0xd4>
    6b98:	14 c0       	rjmp	.+40     	; 0x6bc2 <main+0x124>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6b9a:	6f 81       	ldd	r22, Y+7	; 0x07
    6b9c:	78 85       	ldd	r23, Y+8	; 0x08
    6b9e:	89 85       	ldd	r24, Y+9	; 0x09
    6ba0:	9a 85       	ldd	r25, Y+10	; 0x0a
    6ba2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6ba6:	dc 01       	movw	r26, r24
    6ba8:	cb 01       	movw	r24, r22
    6baa:	9e 83       	std	Y+6, r25	; 0x06
    6bac:	8d 83       	std	Y+5, r24	; 0x05
    6bae:	8d 81       	ldd	r24, Y+5	; 0x05
    6bb0:	9e 81       	ldd	r25, Y+6	; 0x06
    6bb2:	9a 83       	std	Y+2, r25	; 0x02
    6bb4:	89 83       	std	Y+1, r24	; 0x01
    6bb6:	89 81       	ldd	r24, Y+1	; 0x01
    6bb8:	9a 81       	ldd	r25, Y+2	; 0x02
    6bba:	01 97       	sbiw	r24, 0x01	; 1
    6bbc:	f1 f7       	brne	.-4      	; 0x6bba <main+0x11c>
    6bbe:	9a 83       	std	Y+2, r25	; 0x02
    6bc0:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(500);
	LCD_VoidSendCommand(1);
    6bc2:	81 e0       	ldi	r24, 0x01	; 1
    6bc4:	0e 94 86 0e 	call	0x1d0c	; 0x1d0c <LCD_VoidSendCommand>


	u8 x = 0;
    6bc8:	1f 86       	std	Y+15, r1	; 0x0f
    x = SM_U8LoginSys();
    6bca:	0e 94 62 1d 	call	0x3ac4	; 0x3ac4 <SM_U8LoginSys>
    6bce:	8f 87       	std	Y+15, r24	; 0x0f
	if(x== ERROR_STATE_OK)
    6bd0:	8f 85       	ldd	r24, Y+15	; 0x0f
    6bd2:	81 30       	cpi	r24, 0x01	; 1
    6bd4:	19 f4       	brne	.+6      	; 0x6bdc <main+0x13e>
	{
		SM_U8RoomSelect();
    6bd6:	0e 94 dd 2d 	call	0x5bba	; 0x5bba <SM_U8RoomSelect>
    6bda:	0a c0       	rjmp	.+20     	; 0x6bf0 <main+0x152>
	}
	else
	{
		DIO_U8SetPinDirection(DIO_PORTB,DIO_PIN6,DIO_PIN_OUT);
    6bdc:	81 e0       	ldi	r24, 0x01	; 1
    6bde:	66 e0       	ldi	r22, 0x06	; 6
    6be0:	41 e0       	ldi	r20, 0x01	; 1
    6be2:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <DIO_U8SetPinDirection>
		DIO_U8SetPinValue(DIO_PORTB,DIO_PIN6,HIGH);
    6be6:	81 e0       	ldi	r24, 0x01	; 1
    6be8:	66 e0       	ldi	r22, 0x06	; 6
    6bea:	41 e0       	ldi	r20, 0x01	; 1
    6bec:	0e 94 15 08 	call	0x102a	; 0x102a <DIO_U8SetPinValue>
    6bf0:	ff cf       	rjmp	.-2      	; 0x6bf0 <main+0x152>

00006bf2 <__divmodsi4>:
    6bf2:	97 fb       	bst	r25, 7
    6bf4:	09 2e       	mov	r0, r25
    6bf6:	05 26       	eor	r0, r21
    6bf8:	0e d0       	rcall	.+28     	; 0x6c16 <__divmodsi4_neg1>
    6bfa:	57 fd       	sbrc	r21, 7
    6bfc:	04 d0       	rcall	.+8      	; 0x6c06 <__divmodsi4_neg2>
    6bfe:	14 d0       	rcall	.+40     	; 0x6c28 <__udivmodsi4>
    6c00:	0a d0       	rcall	.+20     	; 0x6c16 <__divmodsi4_neg1>
    6c02:	00 1c       	adc	r0, r0
    6c04:	38 f4       	brcc	.+14     	; 0x6c14 <__divmodsi4_exit>

00006c06 <__divmodsi4_neg2>:
    6c06:	50 95       	com	r21
    6c08:	40 95       	com	r20
    6c0a:	30 95       	com	r19
    6c0c:	21 95       	neg	r18
    6c0e:	3f 4f       	sbci	r19, 0xFF	; 255
    6c10:	4f 4f       	sbci	r20, 0xFF	; 255
    6c12:	5f 4f       	sbci	r21, 0xFF	; 255

00006c14 <__divmodsi4_exit>:
    6c14:	08 95       	ret

00006c16 <__divmodsi4_neg1>:
    6c16:	f6 f7       	brtc	.-4      	; 0x6c14 <__divmodsi4_exit>
    6c18:	90 95       	com	r25
    6c1a:	80 95       	com	r24
    6c1c:	70 95       	com	r23
    6c1e:	61 95       	neg	r22
    6c20:	7f 4f       	sbci	r23, 0xFF	; 255
    6c22:	8f 4f       	sbci	r24, 0xFF	; 255
    6c24:	9f 4f       	sbci	r25, 0xFF	; 255
    6c26:	08 95       	ret

00006c28 <__udivmodsi4>:
    6c28:	a1 e2       	ldi	r26, 0x21	; 33
    6c2a:	1a 2e       	mov	r1, r26
    6c2c:	aa 1b       	sub	r26, r26
    6c2e:	bb 1b       	sub	r27, r27
    6c30:	fd 01       	movw	r30, r26
    6c32:	0d c0       	rjmp	.+26     	; 0x6c4e <__udivmodsi4_ep>

00006c34 <__udivmodsi4_loop>:
    6c34:	aa 1f       	adc	r26, r26
    6c36:	bb 1f       	adc	r27, r27
    6c38:	ee 1f       	adc	r30, r30
    6c3a:	ff 1f       	adc	r31, r31
    6c3c:	a2 17       	cp	r26, r18
    6c3e:	b3 07       	cpc	r27, r19
    6c40:	e4 07       	cpc	r30, r20
    6c42:	f5 07       	cpc	r31, r21
    6c44:	20 f0       	brcs	.+8      	; 0x6c4e <__udivmodsi4_ep>
    6c46:	a2 1b       	sub	r26, r18
    6c48:	b3 0b       	sbc	r27, r19
    6c4a:	e4 0b       	sbc	r30, r20
    6c4c:	f5 0b       	sbc	r31, r21

00006c4e <__udivmodsi4_ep>:
    6c4e:	66 1f       	adc	r22, r22
    6c50:	77 1f       	adc	r23, r23
    6c52:	88 1f       	adc	r24, r24
    6c54:	99 1f       	adc	r25, r25
    6c56:	1a 94       	dec	r1
    6c58:	69 f7       	brne	.-38     	; 0x6c34 <__udivmodsi4_loop>
    6c5a:	60 95       	com	r22
    6c5c:	70 95       	com	r23
    6c5e:	80 95       	com	r24
    6c60:	90 95       	com	r25
    6c62:	9b 01       	movw	r18, r22
    6c64:	ac 01       	movw	r20, r24
    6c66:	bd 01       	movw	r22, r26
    6c68:	cf 01       	movw	r24, r30
    6c6a:	08 95       	ret

00006c6c <__prologue_saves__>:
    6c6c:	2f 92       	push	r2
    6c6e:	3f 92       	push	r3
    6c70:	4f 92       	push	r4
    6c72:	5f 92       	push	r5
    6c74:	6f 92       	push	r6
    6c76:	7f 92       	push	r7
    6c78:	8f 92       	push	r8
    6c7a:	9f 92       	push	r9
    6c7c:	af 92       	push	r10
    6c7e:	bf 92       	push	r11
    6c80:	cf 92       	push	r12
    6c82:	df 92       	push	r13
    6c84:	ef 92       	push	r14
    6c86:	ff 92       	push	r15
    6c88:	0f 93       	push	r16
    6c8a:	1f 93       	push	r17
    6c8c:	cf 93       	push	r28
    6c8e:	df 93       	push	r29
    6c90:	cd b7       	in	r28, 0x3d	; 61
    6c92:	de b7       	in	r29, 0x3e	; 62
    6c94:	ca 1b       	sub	r28, r26
    6c96:	db 0b       	sbc	r29, r27
    6c98:	0f b6       	in	r0, 0x3f	; 63
    6c9a:	f8 94       	cli
    6c9c:	de bf       	out	0x3e, r29	; 62
    6c9e:	0f be       	out	0x3f, r0	; 63
    6ca0:	cd bf       	out	0x3d, r28	; 61
    6ca2:	09 94       	ijmp

00006ca4 <__epilogue_restores__>:
    6ca4:	2a 88       	ldd	r2, Y+18	; 0x12
    6ca6:	39 88       	ldd	r3, Y+17	; 0x11
    6ca8:	48 88       	ldd	r4, Y+16	; 0x10
    6caa:	5f 84       	ldd	r5, Y+15	; 0x0f
    6cac:	6e 84       	ldd	r6, Y+14	; 0x0e
    6cae:	7d 84       	ldd	r7, Y+13	; 0x0d
    6cb0:	8c 84       	ldd	r8, Y+12	; 0x0c
    6cb2:	9b 84       	ldd	r9, Y+11	; 0x0b
    6cb4:	aa 84       	ldd	r10, Y+10	; 0x0a
    6cb6:	b9 84       	ldd	r11, Y+9	; 0x09
    6cb8:	c8 84       	ldd	r12, Y+8	; 0x08
    6cba:	df 80       	ldd	r13, Y+7	; 0x07
    6cbc:	ee 80       	ldd	r14, Y+6	; 0x06
    6cbe:	fd 80       	ldd	r15, Y+5	; 0x05
    6cc0:	0c 81       	ldd	r16, Y+4	; 0x04
    6cc2:	1b 81       	ldd	r17, Y+3	; 0x03
    6cc4:	aa 81       	ldd	r26, Y+2	; 0x02
    6cc6:	b9 81       	ldd	r27, Y+1	; 0x01
    6cc8:	ce 0f       	add	r28, r30
    6cca:	d1 1d       	adc	r29, r1
    6ccc:	0f b6       	in	r0, 0x3f	; 63
    6cce:	f8 94       	cli
    6cd0:	de bf       	out	0x3e, r29	; 62
    6cd2:	0f be       	out	0x3f, r0	; 63
    6cd4:	cd bf       	out	0x3d, r28	; 61
    6cd6:	ed 01       	movw	r28, r26
    6cd8:	08 95       	ret

00006cda <_exit>:
    6cda:	f8 94       	cli

00006cdc <__stop_program>:
    6cdc:	ff cf       	rjmp	.-2      	; 0x6cdc <__stop_program>
